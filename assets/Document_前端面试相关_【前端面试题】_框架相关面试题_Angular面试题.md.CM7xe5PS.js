import{_ as t,c as l,l as a,t as e,a5 as r,o as n}from"./chunks/framework.DVTrgelf.js";const S=JSON.parse('{"title":"Angular面试题","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端面试相关/【前端面试题】/框架相关面试题/Angular面试题.md","filePath":"Document/前端面试相关/【前端面试题】/框架相关面试题/Angular面试题.md","lastUpdated":1716655893000}'),i={name:"Document/前端面试相关/【前端面试题】/框架相关面试题/Angular面试题.md"},g=r('<h1 id="angular面试题" tabindex="-1">Angular面试题 <a class="header-anchor" href="#angular面试题" aria-label="Permalink to &quot;Angular面试题&quot;">​</a></h1><p><a href="https://www.geeksforgeeks.org/angularjs-interview-questions-and-answers/?ref=lbp" target="_blank" rel="noreferrer">AngularJS 面试问答 （2024） - GeeksforGeeks</a></p><h2 id="angularjs-双向绑定原理" tabindex="-1">AngularJS 双向绑定原理 <a class="header-anchor" href="#angularjs-双向绑定原理" aria-label="Permalink to &quot;AngularJS 双向绑定原理&quot;">​</a></h2><p>参考回答：</p>',4),s=a("p",null,"Angular 中在 view 上声明的事件指令，如：ng-click、ng-change 等，会将浏览器的事件转发给$scope 上相应的 model 的响应函数。等待相应函数改变 model，紧接着触发脏检查机制刷新 view。",-1),o=a("p",null,"watch 表达式：可以是一个函数、可以是$scope 上的一个属性名，也可以是一个字符串形式的表达式。$watch 函数所监听的对象叫做 watch 表达式。",-1),u=r(`<p>每一个 watcher 对象都包括：监听函数，上次变化的值，获取监听表达式的方法以及监听表达式，最后还包括是否需要使用深度对比（angular.equals()）</p><h2 id="angular-中组件之间通信的方式" tabindex="-1">Angular 中组件之间通信的方式 <a class="header-anchor" href="#angular-中组件之间通信的方式" aria-label="Permalink to &quot;Angular 中组件之间通信的方式&quot;">​</a></h2><p>参考回答：</p><p>Props down</p><ul><li>1.调用子组件,通过自定义属性传值</li><li>2.子组件内部通过 Input 来接收属性的值</li></ul><p>Events up</p><ul><li>1.在父组件中定义一个有参数的方法</li><li>2.调用子组件时,绑定自定义事件和上一步方法</li><li>3.子组件内部通过 Output 和 EventEmitter 来触发事件并传值.</li></ul><h2 id="angualr-的八大组成部分并简单描述" tabindex="-1">Angualr 的八大组成部分并简单描述 <a class="header-anchor" href="#angualr-的八大组成部分并简单描述" aria-label="Permalink to &quot;Angualr 的八大组成部分并简单描述&quot;">​</a></h2><p>参考回答：</p><ul><li>model 是 Angular 开发中的基本单位,是一个容器,可以包含组件、指令、管道等</li><li>Pipes 可以对数据做一个筛选、过滤、格式化从而得到目的数据</li><li>Components 是可被反复使用的带有特定功能的视图</li><li>Templates 是经过指令和管道、组件等增强过的 html</li><li>Bindings 结合着事件绑定 属性绑定 双向数据绑定等扩展 html 的功能</li><li>Directives 分为结构性和属性型指令还有其他模块中比如路由模块中的指令等，主要是增强 html。</li><li>Service 将组件、应用中的可共用的部分,比如数据或者方法等 封装成服务以方</li></ul><p>便服用 DependencyInjection 依赖注入</p><h2 id="angular-中常见的生命周期的钩子函数" tabindex="-1">Angular 中常见的生命周期的钩子函数? <a class="header-anchor" href="#angular-中常见的生命周期的钩子函数" aria-label="Permalink to &quot;Angular 中常见的生命周期的钩子函数?&quot;">​</a></h2><p>参考回答：</p><p>ngOnChanges:当 Angular 设置其接收当前和上一个对象值的数据绑定属性时响应。</p><p>ngOnInit:在第一个 ngOnChange 触发器之后,初始化组件/指令。这是最常用的方法,用于从后端服务检索模板的数据。</p><p>ngDoCheck：检测并在 Angular 上下文发生变化时执行。</p><p>每次更改检测运行时,会被调用。</p><p>ngOnDestroy:在 Angular 销毁指令/组件之前消除。取消订阅可观察的对象并脱离事件处理程序,以避免内存泄漏。</p><p>组件特定的 hooks:</p><ul><li>ngAfterContentInit:组件内容已初始化完成</li><li>ngAfterContentChecked:在 Angular 检查投影到其视图中的绑定的外部内容之后。</li><li>ngAfterViewInit:Angular 创建组件的视图后。</li><li>ngAfterViewChecked：在 Angular 检查组件视图的绑定之后</li></ul><h2 id="angular-中路由的工作原理" tabindex="-1">Angular 中路由的工作原理 <a class="header-anchor" href="#angular-中路由的工作原理" aria-label="Permalink to &quot;Angular 中路由的工作原理&quot;">​</a></h2><p>参考回答：</p><p>Angular 应用程序具有路由器服务的单个实例,并且每当 URL 改变时,相应的路由就与路由配置数组进行匹配。在成功匹配时,它会应用重定向,此时路由器会构建 ActivatedRoute 对象的树,同时包含路由器的当前状态。在重定向之前,路由器将通过运行保护(CanActivate)来检查是否允许新的状态。</p><p>Route Guard 只是路由器运行来检查路由授权的接口方法。</p><p>保护运行后,它将解析路由数据并通过将所需的组件实例化到<code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>来激活路由器状态。</p><h2 id="解释-rjx-在-angular-中的使用场景" tabindex="-1">解释 rjx 在 Angular 中的使用场景 <a class="header-anchor" href="#解释-rjx-在-angular-中的使用场景" aria-label="Permalink to &quot;解释 rjx 在 Angular 中的使用场景&quot;">​</a></h2><p>参考回答：</p><p>Rxjs 是在微软所提供的一种的异步处理数据的方式,在 Angular 中处理网络通信时用到了。</p><p>创建一个 Observable 并 subsribe</p><p>比如：<code>this.http.get(&#39;&#39;).subscribe((data)=&gt;{ })</code></p><h1 id="待定" tabindex="-1">待定 <a class="header-anchor" href="#待定" aria-label="Permalink to &quot;待定&quot;">​</a></h1><h3 id="_1-什么是angularjs-谁创建了它" tabindex="-1"><em><strong>*1. 什么是AngularJS，谁创建了它？*</strong></em> <a class="header-anchor" href="#_1-什么是angularjs-谁创建了它" aria-label="Permalink to &quot;***\\*1. 什么是AngularJS，谁创建了它？\\****&quot;">​</a></h3><p><a href="https://www.geeksforgeeks.org/introduction-to-angularjs/" target="_blank" rel="noreferrer">AngularJS</a> 是一个开源的 JavaScript 前端框架，擅长构建单页 Web 应用程序 （SPA）。通过动态绑定和依赖注入等功能，它将静态 HTML 转换为动态内容。AngularJS 由 Misko Hevery 和 Adam Abrons 于 2008-2009 年开发，由 Google 维护，并拥有持续的增长和演变，最新的稳定版本是 1.7.7。它使用指令扩展 HTML 属性，并促进无缝数据绑定。区分 AngularJS 和 Angular 至关重要，因为它们是不同的框架。</p><h3 id="_2-angularjs有哪些特点" tabindex="-1"><em><strong>*2. AngularJS有哪些特点？*</strong></em> <a class="header-anchor" href="#_2-angularjs有哪些特点" aria-label="Permalink to &quot;***\\*2. AngularJS有哪些特点？\\****&quot;">​</a></h3><p><a href="https://www.geeksforgeeks.org/interesting-facts-and-features-about-angularjs/" target="_blank" rel="noreferrer">AngularJS的主要特点</a>如下：</p><ul><li>可测试：AngularJS 应用程序易于测试，可以对各种组件和功能进行高效测试。</li><li>数据绑定：促进模型和视图组件之间的数据同步。</li><li>控制器：绑定到作用域的 JavaScript 函数，有助于实现应用程序逻辑。</li><li>服务：内置服务，如用于进行 XMLHttpRequests 和 AJAX 调用的 $http。</li><li>作用域：连接模型并充当视图和控制器之间的粘合剂的特殊对象。</li><li>过滤器：支持用于数组子集和数据过滤的内置和自定义过滤器。</li><li>指令：DOM 元素的标记，创建自定义 HTML 标签和小部件。</li><li>路由：根据动态应用程序导航的条件切换视图。</li><li>MVC 模式：模型管理数据，视图显示数据，控制器处理应用程序逻辑。</li><li>依赖关系注入：通过解决组件依赖关系来简化应用程序开发、维护和测试。</li></ul><h3 id="_3-什么是-angularjs-中的范围和数据绑定" tabindex="-1"><em><strong>*3. 什么是 AngularJS 中的范围和数据绑定？*</strong></em> <a class="header-anchor" href="#_3-什么是-angularjs-中的范围和数据绑定" aria-label="Permalink to &quot;***\\*3. 什么是 AngularJS 中的范围和数据绑定？\\****&quot;">​</a></h3><ul><li><a href="https://www.geeksforgeeks.org/angularjs-scope/" target="_blank" rel="noreferrer"><em><strong>*Scope：*</strong></em></a>AngularJS 中的 Scope 是 HTML 视图和 JavaScript 控制器的绑定部分。将属性添加到 JavaScript 控制器的范围对象中时，HTML 视图才能访问这些属性。AngularJS 中有两种类型的 Scope。</li><li><a href="https://www.geeksforgeeks.org/angularjs-data-binding/" target="_blank" rel="noreferrer"><em><strong>*数据绑定：*</strong></em></a>Angular 提供了一个功能数据绑定，它帮助我们几乎实时地反映用户给出的输入，即它在模型和视图之间创建连接。</li></ul><h3 id="_4-angularjs-中有多少种类型的数据绑定" tabindex="-1"><em><strong>*4. AngularJs 中有多少种类型的数据绑定？*</strong></em> <a class="header-anchor" href="#_4-angularjs-中有多少种类型的数据绑定" aria-label="Permalink to &quot;***\\*4. AngularJs 中有多少种类型的数据绑定？\\****&quot;">​</a></h3><p><a href="https://www.geeksforgeeks.org/angularjs-data-binding/" target="_blank" rel="noreferrer">AngularJS 中有四种数据绑定</a>，它们是：</p><ul><li>事件绑定</li><li>属性绑定</li><li>双向绑定</li><li>插值绑定</li></ul><h3 id="_5、单向绑定与双向绑定的区别" tabindex="-1"><em><strong>*5、单向绑定与双向绑定的区别*</strong></em> <a class="header-anchor" href="#_5、单向绑定与双向绑定的区别" aria-label="Permalink to &quot;***\\*5、单向绑定与双向绑定的区别\\****&quot;">​</a></h3><ul><li>****属性绑定：****与 Java 类似，父类中定义的变量可以由子类继承，在这种情况下是模板。插值和属性绑定之间的唯一区别是，在使用插值时，我们不应该将非字符串值存储在变量中。因此，如果我们必须存储布尔值或其他数据类型，则不使用属性绑定。</li><li>****插值绑定：****使用角度插值在相应的视图模板中显示组件属性，并采用双大括号语法。插值用于传输元件类中提到的属性以反映在其模板中。</li></ul><h3 id="_6-解释-angularjs-中的服务和表达式" tabindex="-1"><em><strong>*6. 解释 AngularJS 中的服务和表达式*</strong></em> <a class="header-anchor" href="#_6-解释-angularjs-中的服务和表达式" aria-label="Permalink to &quot;***\\*6. 解释 AngularJS 中的服务和表达式\\****&quot;">​</a></h3><ul><li><a href="https://www.geeksforgeeks.org/angularjs-services/" target="_blank" rel="noreferrer"><em><strong>*服务：*</strong></em></a>服务用于创建可共享的变量/数据，并可在定义它的组件之外使用。</li><li><a href="https://www.geeksforgeeks.org/angularjs-expressions/" target="_blank" rel="noreferrer"><em><strong>*表达式：*</strong></em></a>AngularJS 中的表达式用于将应用程序数据绑定到 HTML。表达式由 Angular 解析，结果返回到写入表达式的位置。</li></ul><h3 id="_7-angular-表达式和-javascript-表达式之间的主要区别是什么" tabindex="-1"><em><strong>*7. angular 表达式和 JavaScript 表达式之间的主要区别是什么？*</strong></em> <a class="header-anchor" href="#_7-angular-表达式和-javascript-表达式之间的主要区别是什么" aria-label="Permalink to &quot;***\\*7. angular 表达式和 JavaScript 表达式之间的主要区别是什么？\\****&quot;">​</a></h3><p>AngularJS 表达式可以用 HTML 编写，但 JavaScript 表达式不能，AngularJS 支持过滤器，但 JavaScript 不支持。我们不能在 AngularJs 中使用条件迭代、循环和异常，但我们可以在 JavaScript 表达式中使用所有这些条件属性。</p><h3 id="_8-编写配置-angular-app-ng-app-的所有步骤" tabindex="-1"><em><strong>*8. 编写配置 Angular App（ng-app） 的所有步骤？*</strong></em> <a class="header-anchor" href="#_8-编写配置-angular-app-ng-app-的所有步骤" aria-label="Permalink to &quot;***\\*8. 编写配置 Angular App（ng-app） 的所有步骤？\\****&quot;">​</a></h3><ul><li>****第 1 步：****首先创建 angular.module。</li><li>****第 2 步：****控制器将被分配给模块。</li><li>****第 3 步：****该模块将通过 angular app（ng-app） 与 HTML 模板链接。</li><li>****第 4 步：****HTML 模板将使用 ng-controller 指令与控制器链接。</li></ul><h3 id="_9-使用页面加载选项时-如何初始化选择框" tabindex="-1"><em><strong>*9. 使用页面加载选项时，如何初始化选择框？*</strong></em> <a class="header-anchor" href="#_9-使用页面加载选项时-如何初始化选择框" aria-label="Permalink to &quot;***\\*9. 使用页面加载选项时，如何初始化选择框？\\****&quot;">​</a></h3><p>您可以在页面加载选项时使用 ng-init 指令初始化选择框。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>&lt;div ng-controller = &quot; apps/dashboard/account &quot; ng-switch</span></span>
<span class="line"><span>On = &quot;! ! accounts&quot; ng-init = &quot; loadData ( ) &quot;&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_10-angularjs-中的指令是什么-仅举几例" tabindex="-1"><em><strong>*10. AngularJS 中的指令是什么，仅举几例？*</strong></em> <a class="header-anchor" href="#_10-angularjs-中的指令是什么-仅举几例" aria-label="Permalink to &quot;***\\*10. AngularJS 中的指令是什么，仅举几例？\\****&quot;">​</a></h3><p><a href="https://www.geeksforgeeks.org/angularjs-directive/" target="_blank" rel="noreferrer">AngularJS 中的指令</a>是 DOM 元素上的标记，它告诉 Angular 的 HTML 编译器将指定的行为附加到该 DOM 元素。一些指令包括 ng-model、ng-repeat、ng-if、ng-show、ng-hide、ng-click 和 ng-class。</p><h3 id="_11-使用angularjs有什么好处" tabindex="-1"><em><strong>*11. 使用AngularJS有什么好处？*</strong></em> <a class="header-anchor" href="#_11-使用angularjs有什么好处" aria-label="Permalink to &quot;***\\*11. 使用AngularJS有什么好处？\\****&quot;">​</a></h3><p>AngularJS 有几个优点。支持 MVC 模式，支持使用 AngularJS 的两种数据绑定方式。它具有每个定义的表单验证 支持客户端-服务器通信和动画。</p><h3 id="_12-angularjs-路由是做什么的" tabindex="-1"><em><strong>*12. AngularJS 路由是做什么的？*</strong></em> <a class="header-anchor" href="#_12-angularjs-路由是做什么的" aria-label="Permalink to &quot;***\\*12. AngularJS 路由是做什么的？\\****&quot;">​</a></h3><p>当用户想要导航到应用程序中的不同页面但仍希望它是单页应用程序时，使用 <a href="https://www.geeksforgeeks.org/angularjs-routing/" target="_blank" rel="noreferrer">AngularJS 中的路由</a>。AngularJS 路由使用户能够为应用程序中的不同内容创建不同的 URL。ngRoute 模块有助于访问应用程序的不同页面，而无需重新加载整个应用程序。</p><h3 id="_13-如何在-angularjs-中在控制器之间共享数据" tabindex="-1"><em><strong>*13. 如何在 AngularJS 中在控制器之间共享数据？*</strong></em> <a class="header-anchor" href="#_13-如何在-angularjs-中在控制器之间共享数据" aria-label="Permalink to &quot;***\\*13. 如何在 AngularJS 中在控制器之间共享数据？\\****&quot;">​</a></h3><p>我们必须首先创建一个服务。这些服务用于在 AngularJS 中的控制器之间共享数据。我们通过使用$rootScope来使用事件、$parent、下一个同级和控制器。</p><h3 id="_14-html的编译过程有哪些步骤" tabindex="-1"><em><strong>*14. HTML的编译过程有哪些步骤？*</strong></em> <a class="header-anchor" href="#_14-html的编译过程有哪些步骤" aria-label="Permalink to &quot;***\\*14. HTML的编译过程有哪些步骤？\\****&quot;">​</a></h3><ul><li>****第 1 步：****使用标准浏览器 API，首先将 HTML 解析为 DOM</li><li>****第 2 步：****通过使用对 $compile（） 方法的调用，执行 DOM 的编译。该方法遍历 DOM，然后匹配指令。</li><li>****步骤 3：****通过调用从上一步返回的链接函数，将模板与作用域链接。</li></ul><h3 id="_15-什么是angularjs中的字符串插值" tabindex="-1"><em><strong>*15. 什么是AngularJS中的字符串插值？*</strong></em> <a class="header-anchor" href="#_15-什么是angularjs中的字符串插值" aria-label="Permalink to &quot;***\\*15. 什么是AngularJS中的字符串插值？\\****&quot;">​</a></h3><p>在 AngularJS 中，在编译过程中，它使用插值服务匹配文本和属性，以查看它们是否包含嵌入式表达式。作为正常摘要周期的一部分，这些表达式将更新并注册为监视。</p><h3 id="_16-angularjs-中有多少种类型的指令可用" tabindex="-1"><em><strong>*16. AngularJS 中有多少种类型的指令可用？*</strong></em> <a class="header-anchor" href="#_16-angularjs-中有多少种类型的指令可用" aria-label="Permalink to &quot;***\\*16. AngularJS 中有多少种类型的指令可用？\\****&quot;">​</a></h3><p>AngularJS 中有四种指令，如下所述：</p><ul><li>元素指令</li><li>属性指令</li><li>CSS 类指令</li><li>注释指令</li></ul><h3 id="_17-什么是喷油器" tabindex="-1"><em><strong>*17. 什么是喷油器？*</strong></em> <a class="header-anchor" href="#_17-什么是喷油器" aria-label="Permalink to &quot;***\\*17. 什么是喷油器？\\****&quot;">​</a></h3><p>AngularJS 中的注入器基本上是一个服务定位器。它用于调用方法和加载模块。单个 AngularJS 应用程序中只能有一个注入器。</p><h3 id="_18-什么是angularjs中的工厂方法" tabindex="-1"><em><strong>*18. 什么是AngularJS中的工厂方法？*</strong></em> <a class="header-anchor" href="#_18-什么是angularjs中的工厂方法" aria-label="Permalink to &quot;***\\*18. 什么是AngularJS中的工厂方法？\\****&quot;">​</a></h3><p>AngularJS <a href="https://www.geeksforgeeks.org/angularjs-factory-method/" target="_blank" rel="noreferrer">工厂化方法</a>使 AngularJS 应用程序的开发过程更加健壮。工厂是一个简单的函数，它允许我们向创建的对象添加一些逻辑并返回创建的对象。工厂还用于以可重用代码的形式创建/返回函数，该函数可以在应用程序中的任何位置使用。每当我们使用工厂创建对象时，它总是为该对象返回一个新实例。工厂返回的对象可以与 Angularjs 框架的不同组件（如控制器、服务、过滤器或指令）集成（注入）。</p><h3 id="_19-angularjs中的摘要周期是什么" tabindex="-1"><em><strong>*19. AngularJS中的摘要周期是什么？*</strong></em> <a class="header-anchor" href="#_19-angularjs中的摘要周期是什么" aria-label="Permalink to &quot;***\\*19. AngularJS中的摘要周期是什么？\\****&quot;">​</a></h3><p>它是 AngularJS 中数据绑定过程中最重要的部分。它基本上比较了范围模型的旧版本和新版本。自动触发摘要循环。如果我们想手动触发摘要周期，那么我们可以使用 $apply（）。</p><h3 id="_20-angular-和-angularjs-有什么区别" tabindex="-1"><em><strong>*20. Angular 和 AngularJS 有什么区别？*</strong></em> <a class="header-anchor" href="#_20-angular-和-angularjs-有什么区别" aria-label="Permalink to &quot;***\\*20. Angular 和 AngularJS 有什么区别？\\****&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">方面</th><th style="text-align:center;">角</th><th style="text-align:center;">AngularJS的</th></tr></thead><tbody><tr><td style="text-align:center;">版本</td><td style="text-align:center;">Angular 是 2.0 及更高版本，包括 Angular 12。</td><td style="text-align:center;">AngularJS 是 1.0 版，由 Google 开发。</td></tr><tr><td style="text-align:center;">语言</td><td style="text-align:center;">用 TypeScript 编写，TypeScript 是 JavaScript 的超集。</td><td style="text-align:center;">用 JavaScript 编写。</td></tr><tr><td style="text-align:center;">建筑</td><td style="text-align:center;">遵循基于组件的体系结构。</td><td style="text-align:center;">遵循 MVC（模型-视图-控制器）架构。</td></tr><tr><td style="text-align:center;">性能</td><td style="text-align:center;">提供更好的性能和增强的功能。</td><td style="text-align:center;">由于消化周期，性能相对较低。</td></tr><tr><td style="text-align:center;">移动支持</td><td style="text-align:center;">为移动开发提供更好的支持。</td><td style="text-align:center;">缺乏对移动开发的强大支持。</td></tr><tr><td style="text-align:center;">数据绑定</td><td style="text-align:center;">双向数据绑定</td><td style="text-align:center;">单向数据绑定</td></tr><tr><td style="text-align:center;">依赖注入</td><td style="text-align:center;">使用分层喷油器</td><td style="text-align:center;">使用全局作用域进行依赖项注入</td></tr></tbody></table><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>本文介绍了针对新开发人员和有经验的开发人员的常见 AngularJS 面试问题。AngularJS 引入了依赖注入和简化的单页应用程序开发，因其优势、易用性和可扩展性而在各种公司中被广泛采用。</p>`,77);function h(d,p,c,A,m,_){return n(),l("div",null,[g,a("p",null,"Angular 将双向绑定转换为一堆 watch 表达式，然后递归这些表达式检查是否发生过变化，如果变了则执行相应的 watcher 函数（指 view 上的指令，如 ng-bind，ng-show等或是"+e()+"）。等到 model 中的值不再发生变化，也就不会再有 watcher 被触发，一个完整的 digest 循环就完成了。",1),s,o,a("p",null,"watcher 函数：指在view 上的指令（ngBind，ngShow、ngHide 等）以及"+e()+"表达式，他们所注册的函数。",1),u])}const f=t(i,[["render",h]]);export{S as __pageData,f as default};
