import{_ as e,c as o,l as s,a as n,t,a5 as p,o as r}from"./chunks/framework.DVTrgelf.js";const c="/FrontEndInterviewQuestion/assets/image-20240326164249788-1714847979990-18.C71Ea1q1.png",B="/FrontEndInterviewQuestion/assets/image-20240512024821419.NuZUEmkD.png",i="/FrontEndInterviewQuestion/assets/image-20240512024944620.DZFAjLGv.png",y="/FrontEndInterviewQuestion/assets/image-20240512025103471.Bl6eK7cx.png",u="/FrontEndInterviewQuestion/assets/image-20240512025143165.CuRhvFq_.png",b="/FrontEndInterviewQuestion/assets/image-20240512025215604.FUg30r2Y.png",d="/FrontEndInterviewQuestion/assets/image-20240512025245823.BDIsvjV8.png",F="/FrontEndInterviewQuestion/assets/image-20240512025322711.VkvOKTt8.png",A="/FrontEndInterviewQuestion/assets/MVVM.CiadNFyU.jpg",m="/FrontEndInterviewQuestion/assets/image-20240321021057430-1714853172290-86.BrXQQ6vR.png",C="/FrontEndInterviewQuestion/assets/image-20240321021208443-1714853172290-87.zNs-UCFP.png",E="/FrontEndInterviewQuestion/assets/vue2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-1714843459848-1.CARUY7f4.jpg",a="/FrontEndInterviewQuestion/assets/Vue3_%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B5%81%E7%A8%8B%E5%9B%BE-1714855290750-104.B8DDF4N3.png",h="/FrontEndInterviewQuestion/assets/image-20240326170930251-1714854408225-100.CTup2vNu.png",v="/FrontEndInterviewQuestion/assets/image-20240326163216194.CYBQjYaW.png",D="/FrontEndInterviewQuestion/assets/image-20240326164359558-1715073148990-7.D_0E3Vna.png",g="/FrontEndInterviewQuestion/assets/image-20240326164427281-1715073148990-8.Dj-ESFMB.png",f="/FrontEndInterviewQuestion/assets/image-20240317005539186.DUXcmbJr.png",q="/FrontEndInterviewQuestion/assets/image-20240507191431260.DPGPguPY.png",l="/FrontEndInterviewQuestion/assets/image-20240326193247053-1715072061066-2.Dl-tS-gk.png",k="/FrontEndInterviewQuestion/assets/image-20240507202946524.CDmfOpga.png",x="/FrontEndInterviewQuestion/assets/1348695-20200930121238170-801372948.CA-PNYri.png",V="/FrontEndInterviewQuestion/assets/1348695-20200930121316048-1392066579.CJIo4PjX.png",P="/FrontEndInterviewQuestion/assets/image-20240507200846339.DQne85oy.png",w="/FrontEndInterviewQuestion/assets/image-20240516024534902.IdLMGpdS.png",j="/FrontEndInterviewQuestion/assets/image-20240516024554302.jzZ3CbEk.png",S="/FrontEndInterviewQuestion/assets/2250677070.CMXhTIys.png",_="/FrontEndInterviewQuestion/assets/image-20240516025127041.DOXcYQUP.png",M="/FrontEndInterviewQuestion/assets/image-20240507205453413.tnXu8w14.png",R="/FrontEndInterviewQuestion/assets/image-20240315215420106-1714861640961-126.D3ZUfAW-.png",$="/FrontEndInterviewQuestion/assets/v2-06255189e813e0280590eb6037be32b2_720w-1714851421797-44.DYA1SXfY.webp",O="/FrontEndInterviewQuestion/assets/v2-43b0b442e5ef3c820122899599fc0f04_720w-1714851535516-49.Dqe1yWlb.webp",I="/FrontEndInterviewQuestion/assets/v2-f583d2e64283ebd9b8b62a84414d009d_720w-1714851535516-47.Bzjd6xog.webp",H="/FrontEndInterviewQuestion/assets/v2-8ccdc774e7f0343bdf3f6421365d8e70_720w-1714851535516-48.BzAkmYyh.webp",L="/FrontEndInterviewQuestion/assets/v2-99681165f9ac57f46319652275193373_720w-1714851535516-46.fYlEnnXj.webp",T="/FrontEndInterviewQuestion/assets/image-20240326155838420.lpuOy9sp.png",U="/FrontEndInterviewQuestion/assets/image-20240326181048612-1714850113900-31.DP_CsX0I.png",N="/FrontEndInterviewQuestion/assets/image-20240326181133824-1714850113901-32.DdXdJhMU.png",W="/FrontEndInterviewQuestion/assets/image-20240326181302686-1714850113901-34.Bhh9nhan.png",G="/FrontEndInterviewQuestion/assets/image-20240326181346423-1714850113901-33.DWWTvavW.png",z="/FrontEndInterviewQuestion/assets/image-20240326155921058.CV3ntoJ8.png",es=JSON.parse('{"title":"Vue面试题","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端面试相关/【前端面试题】/框架相关面试题/Vue面试题.md","filePath":"Document/前端面试相关/【前端面试题】/框架相关面试题/Vue面试题.md","lastUpdated":1716655893000}'),J={name:"Document/前端面试相关/【前端面试题】/框架相关面试题/Vue面试题.md"},Q=p('<h1 id="vue面试题" tabindex="-1">Vue面试题 <a class="header-anchor" href="#vue面试题" aria-label="Permalink to &quot;Vue面试题&quot;">​</a></h1><h1 id="待定vue面试题" tabindex="-1">待定Vue面试题 <a class="header-anchor" href="#待定vue面试题" aria-label="Permalink to &quot;待定Vue面试题&quot;">​</a></h1><p><a href="https://github.com/haizlin/fe-interview/blob/master/lib/Vue.md" target="_blank" rel="noreferrer">fe-interview/lib/Vue.md at master · haizlin/fe-interview (github.com)</a></p><p><a href="https://blog.csdn.net/Likestarr/article/details/135059297" target="_blank" rel="noreferrer">vue面试题（一）-CSDN博客</a></p><p><a href="https://juejin.cn/post/7161036677182898207" target="_blank" rel="noreferrer">vue核心面试题汇总【查缺补漏】 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7191325434486161467" target="_blank" rel="noreferrer">2023前端面试系列-- Vue 篇 - 掘金 (juejin.cn)</a></p><h1 id="一、vue-基础" tabindex="-1">一、Vue 基础 <a class="header-anchor" href="#一、vue-基础" aria-label="Permalink to &quot;一、Vue 基础&quot;">​</a></h1><ul><li>响应式基础</li><li>模板语法和数据绑定</li><li>计算属性 computed 和侦听器 watch</li><li>Class 与 Style 绑定</li><li>循环、条件渲染和列表渲染</li><li>事件、修饰符</li></ul><h2 id="vue-是什么" tabindex="-1">Vue 是什么 <a class="header-anchor" href="#vue-是什么" aria-label="Permalink to &quot;Vue 是什么&quot;">​</a></h2><p><code>Vue</code>是一款基于<code>MVVM</code>架构的<code>渐进式框架</code>，它主要用于构建<code>单页面应用（spa）</code>，它的特点有<code>声明式渲染</code>、<code>响应式</code>两大点。</p><h3 id="_1-什么是-mvvm" tabindex="-1">（1）什么是 MVVM <a class="header-anchor" href="#_1-什么是-mvvm" aria-label="Permalink to &quot;（1）什么是 MVVM&quot;">​</a></h3><p><code>MVVM</code>就是<code>Model-View-ViewModel</code>的缩写，它是一种<code>架构模式</code>，是<code>MVC（Model-View-Controller）</code>的改进版。</p><ul><li><code>Model</code>：指的就是负责<code>应用的数据处理以及整体业务逻辑</code>（相当于后端）；</li><li><code>View</code>：指的就是<code>展示给用户的界面</code>（相当于 HTML 页面）；</li><li><code>MVVM中的ViewModel</code>：指的就是<code>视图模型</code>，它是<code>View</code>和<code>Module</code>沟通的桥梁，用于展示数据、处理用户交互、并且更新模型，并且<code>视图</code>会与<code>视图模型</code>进行关联，将<code>视图</code>中的一些方法和属性封装在<code>视图模型中</code>，然后通过<code>视图模型</code>和<code>模型</code>之间获取、更新数据，然后将真实的数据反映到<code>视图</code>中。</li></ul><p><img src="'+c+`" alt="image-20240326164249788"></p><p><code>MVVM</code>的架构的优点有：</p><ul><li><code>低耦合</code>：视图（View）可以<code>独立于Model变化和修改</code>，<code>一个ViewModel</code>可以绑定到<code>不同的View上</code>，当<code>View变化</code>的时候<code>Model可以不变</code>，当<code>Model变化</code>的时候<code>View也可以不变</code>；</li><li><code>可复用</code>：可以将<code>一个ViewModule</code>的逻辑给<code>多个View</code>使用；</li><li><code>独立开发</code>：开发人员可以专注于<code>业务逻辑和数据的开发（ViewModel）</code>，设计人员可以专注于页面设计；</li><li><code>可测试</code>：因为<code>ViewModel</code>是独立于界面的，因此测试人员可以专注于<code>业务逻辑</code>，而无需依赖具体的页面实现；</li></ul><h3 id="_2-什么是渐进式框架" tabindex="-1">（2）什么是渐进式框架 <a class="header-anchor" href="#_2-什么是渐进式框架" aria-label="Permalink to &quot;（2）什么是渐进式框架&quot;">​</a></h3><p><code>渐进式框架</code>指的就是一种<code>框架概念</code>，一般来说，使用渐进式框架时，无需引入其所有功能，而是<code>需要什么就用什么</code>，就拿<code>Vue</code>来说，我们可以引入一个<code>vue.js的文件</code>，然后在<code>其它框架中</code>去使用<code>Vue</code>，也可以使用它的<code>脚手架</code>，来进行构建一个 Vue 项目，这完全取决于用户想怎么使用，而框架为我们提供了<code>多种使用方式</code>以及<code>各个模块的功能</code>。</p><p><code>渐进式框架</code>的<code>优点</code>有：</p><ul><li><code>灵活</code>：开发者可以<code>按需引入</code>框架的各个功能；</li><li><code>可维护性</code>：开发者可以先<code>少量引入框架部分功能</code>，然后在需要的时候引入其它功能，防止项目从一开始就变得<code>结构复杂</code>、<code>难以维护</code>。</li></ul><h3 id="_3-什么是-spa-页面" tabindex="-1">（3）什么是 SPA 页面 <a class="header-anchor" href="#_3-什么是-spa-页面" aria-label="Permalink to &quot;（3）什么是 SPA 页面&quot;">​</a></h3><p><code>SPA</code>就是<code>单页面应用</code>，这是一种<code>网站的设计模式</code>，它的意思就是一个网站中，只有一个<code>HTML文件</code>，用户在进行页面交互时，或者刷新页面时，只是利用<code>JavaScript动态变换HTML的内容</code>，而<code>并非真正意义上的变换页面</code>。</p><p><code>SPA应用</code>的优点：</p><ul><li><code>良好的交互体验</code>：因为用户在交互时，只是动态刷新局部内容，并不用请求新的<code>HTML文件</code>，因此也就不会造成<code>长时间的页面白屏</code>；</li><li><code>良好的工作模式</code>：更好的实现<code>前后端分离</code>，让不同岗位的工程师专注于自己的领域，提升代码的性能以及复用性；</li><li><code>路由</code>：使用<code>前端路由</code>，通过<code>浏览器的API</code>来模拟<code>前进后退</code>操作，让用户在使用感知上并无变化。</li></ul><p><code>SPA应用</code>的缺点：</p><ul><li><code>首页开销大</code>：因为所有的资源都需要在首页进行加载，因此资源过多时会产生<code>白屏问题</code>；</li><li><code>内存占用较大</code>：在 SPA 中，一旦页面加载完成，所有的页面内容和状态都保存在内存中，如果页面过于复杂或用户长时间停留在页面上，可能导致内存占用较大，影响设备性能；</li><li><code>不利于SEO</code>：SPA 页面在初始化时只有 HTML 的基本骨架，其它内容需要依赖于 JavaScript 的异步加载，浏览器不能完整的捕获到页面内容，不利于 SEO。</li></ul><h3 id="_4-什么是声明式渲染" tabindex="-1">（4）什么是声明式渲染 <a class="header-anchor" href="#_4-什么是声明式渲染" aria-label="Permalink to &quot;（4）什么是声明式渲染&quot;">​</a></h3><p><code>声明式渲染</code>，就是你只需要告诉框架你的<code>目的</code>，至于它内部如何达成你的目的，你无需关心。与之对应的是<code>命令式渲染</code>，你需要一步步操作，让框架执行你的操作，最终达成你的目的。</p><p>比如原生 js 的编程，我们想改变标签的内容：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;原内容&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取到标签</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementsByTagName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;新内容&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>而在 Vue 中，我们只需要：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;原内容&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		change</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;新内容&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>看似 Vue 更麻烦，是因为我们使用了 Vue 的组件模板，看起来繁杂了。但是这只是一个标签的情况下，如果想给<code>多个标签修改内容</code>，在我们原生开发的过程中，每次都要<code>先获取标签</code>，然后修改标签内容，但是在 Vue 中，我们只需要将<code>标签和内容建立联系</code>，然后只修改内容，就可以自动让标签中的内容也更改。这得益于 Vue 强大的<code>模板编译</code>以及<code>响应式</code>。</p><h2 id="vue-的两个核心或最大特点是什么" tabindex="-1">Vue 的两个核心或最大特点是什么？ <a class="header-anchor" href="#vue-的两个核心或最大特点是什么" aria-label="Permalink to &quot;Vue 的两个核心或最大特点是什么？&quot;">​</a></h2><p>数据驱动和组件系统：</p><p>数据驱动：ViewModel，保证数据和视图的一致性。</p><ul><li>数据驱动就是让我们只关注数据层，只要数据变化，页面（即视图层）会自动更新，至于如何操作 dom，完全交由 vue 去完成，咱们只关注数据，数据变了，页面自动同步变化了，很方便。</li></ul><p>组件系统：应用类 UI 可以看作全部是由组件树构成的。</p><ul><li>组件化就是可以将页面和页面中可复用的元素都看做成组件，写页面的过程，就是写组件，然后页面是由这些组件“拼接“起来的组件树</li></ul><h2 id="谈一谈对-vue-设计原则的理解" tabindex="-1">谈一谈对 vue 设计原则的理解？ <a class="header-anchor" href="#谈一谈对-vue-设计原则的理解" aria-label="Permalink to &quot;谈一谈对 vue 设计原则的理解？&quot;">​</a></h2><p>在 vue 的官网上写着大大的定义和特点：</p><ul><li>渐进式 JavaScript 框架</li><li>易用、灵活和高效</li></ul><p>所以阐述此题的整体思路按照这个展开即可，参考以下</p><h3 id="_1-渐进式-javascript-框架" tabindex="-1">1.渐进式 JavaScript 框架 <a class="header-anchor" href="#_1-渐进式-javascript-框架" aria-label="Permalink to &quot;1.渐进式 JavaScript 框架&quot;">​</a></h3><p>与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。</p><p>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p><p>另一方面，当与<a href="https://v2.cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noreferrer">现代化的工具链</a>以及<a href="https://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="noreferrer">各种支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h3 id="_2-易用性" tabindex="-1">2.易用性 <a class="header-anchor" href="#_2-易用性" aria-label="Permalink to &quot;2.易用性&quot;">​</a></h3><p>vue 提供数据响应式、声明式模板语法和基于配置的组件系统等核心特性。这些使我们只需要关注应用的核心业务即可，只要会写 js、html 和 css 就能轻松编写 vue 应用。</p><h3 id="_3-灵活性" tabindex="-1">3.灵活性 <a class="header-anchor" href="#_3-灵活性" aria-label="Permalink to &quot;3.灵活性&quot;">​</a></h3><p>渐进式框架的最大优点就是灵活性，如果应用足够小，我们可能仅需要 vue 核心特性即可完成功能；</p><p>随着应用规模不断扩大，我们才可能逐渐引入路由、状态管理、vue-cli 等库和工具，不管是应用体积还是学习难度都是一个逐渐增加的平和曲线。</p><h3 id="_4-高效性" tabindex="-1">4.高效性 <a class="header-anchor" href="#_4-高效性" aria-label="Permalink to &quot;4.高效性&quot;">​</a></h3><p>超快的虚拟 DOM 和 diff 算法使我们的应用拥有最佳的性能表现。</p><p>追求高效的过程还在继续，vue3 中引入 Proxy 对数据响应式改进以及编译器中对于静态内容编译的改进都会让 vue 更加高效。</p><h2 id="你怎么理解-vue-是一个渐进式的框架" tabindex="-1">你怎么理解 vue 是一个渐进式的框架？ <a class="header-anchor" href="#你怎么理解-vue-是一个渐进式的框架" aria-label="Permalink to &quot;你怎么理解 vue 是一个渐进式的框架？&quot;">​</a></h2><p>我觉得渐进式就是不必一开始就用 Vue 所有的全家桶，可以根据场景，按需使用想要的插件。也可以说就使用 vue 不需要太多的要求。</p><h2 id="谈谈你对-vue-的理解" tabindex="-1">谈谈你对 vue 的理解 <a class="header-anchor" href="#谈谈你对-vue-的理解" aria-label="Permalink to &quot;谈谈你对 vue 的理解&quot;">​</a></h2><p>Vue 是一套用于构建用户界面的渐进式框架，核心是数据驱动和组件化开发，它的目标是通过 API 实现响应数据绑定和视图更新。</p><p>（1）声明式框架</p><p>（2）MVVM 模式</p><p>（3）采用虚拟 DOM</p><ul><li>高内聚、低耦合、单向数据流。</li></ul><p>（4）区分编译时（打包）和运行时（浏览器）</p><p>（5）组件化开发</p><ul><li>更新范围，只重新渲染变化的组件。</li></ul><h2 id="说一下-vue-的优缺点" tabindex="-1">说一下 Vue 的优缺点 <a class="header-anchor" href="#说一下-vue-的优缺点" aria-label="Permalink to &quot;说一下 Vue 的优缺点&quot;">​</a></h2><p>轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十 kb ；</p><p>简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；</p><p>Vue 是一个构建数据驱动的 Web 界面的渐进式框架。 Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。核心是一个响应的数据绑定系统。 关于 Vue 的优点，主要有响应式编程、组件化开发、虚拟 DOM</p><h4 id="响应式编程" tabindex="-1">响应式编程 <a class="header-anchor" href="#响应式编程" aria-label="Permalink to &quot;响应式编程&quot;">​</a></h4><p>这里的响应式不是 @media 媒体查询中的响应式布局，而是指 Vue 会自动对页面中某些数据的变化做出响应。这也就是 Vue 最大的优点，通过 MVVM 思想实现数据的双向绑定，让开发者不用再操作 DOM 对象，有更多的时间去思考业务逻辑。</p><p>双向数据绑定：保留了 angular 的特点，在数据操作方面更为简单；</p><p>视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；</p><p>这里的响应式不是 @media 媒体查询中的响应式布局，而是指 Vue 会自动对页面中某些数据的变化做出响应。这也就是 Vue 最大的优点，通过 MVVM 思想实现数据的双向绑定，让开发者不用再操作 DOM 对象，有更多的时间去思考业务逻辑。</p><h4 id="组件化开发" tabindex="-1">组件化开发 <a class="header-anchor" href="#组件化开发" aria-label="Permalink to &quot;组件化开发&quot;">​</a></h4><p>组件化：保留了 react 的优点，实现了 html 的封装和重用，在构建单页面应用方面有着独特的优势；</p><p>Vue 通过组件，把一个单页应用中的各种模块拆分到一个一个单独的组件（component）中，我们只要先在父级应用中写好各种组件标签（占坑），并且在组件标签中写好要传入组件的参数（就像给函数传入参数一样，这个参数叫做组件的属性），然后再分别写好各种组件的实现（填坑），然后整个应用就算做完了。</p><p>组件化开发的优点：提高开发效率、方便重复使用、简化调试步骤、提升整个项目的可维护性、便于协同开发。</p><h4 id="虚拟-dom" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom" aria-label="Permalink to &quot;虚拟 DOM&quot;">​</a></h4><p>虚拟 DOM：dom 操作是非常耗费性能的，不再使用原生的 dom 操作节点，极大解放 dom 操作，但具体操作的还是 dom 不过是换了另一种方式；</p><p>在传统开发中，用 JQuery 或者原生的 JavaScript DOM 操作函数对 DOM 进行频繁操作的时候，浏览器要不停的渲染新的 DOM 树，导致在性能上面的开销特别的高。 而 Virtual DOM 则是虚拟 DOM 的英文，简单来说，他就是一种可以预先通过 JavaScript 进行各种计算，把最终的 DOM 操作计算出来并优化，由于这个 DOM 操作属于预处理操作，并没有真实的操作 DOM，所以叫做虚拟 DOM。最后在计算完毕才真正将 DOM 操作提交，将 DOM 操作变化反映到 DOM 树上。</p><p>运行速度更快：相比较于 react 而言，同样是操作虚拟 dom，就性能而言， vue 存在很大的优势。</p><h3 id="优点" tabindex="-1">优点： <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>1、数据驱动视图，对真实 dom 进行抽象出 virtual dom（本质就是一个 js 对 象），并配合 diff 算法、响应式和观察者、异步队列等手段以最小代价更新 dom，渲染页面</li><li>2、组件化，组件用单文件的形式进行代码的组织编写，使得我们可以在一个文件里编写 html+css（scoped 属性配置 css 隔离）js 并且配合 Vue-loader 之后，支持更强大的预处理器等功能</li><li>3、强大且丰富的 API 提供一系列的 api 能满足业务开发中各类需求</li><li>4、由于采用虚拟 dom，让 Vue ssr 先天就足</li><li>5、生命周期钩子函数，选项式的代码组织方式，写熟了还是蛮顺畅的，但仍然有优化空间（Vue3 composition-api）</li><li>6、生态好，社区活跃</li></ul><h3 id="缺点" tabindex="-1">缺点： <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>1、由于底层基于 Object.defineProperty 实现响应式，而这个 api 本身不支持 IE8 及以下浏览器</li><li>2、csr 的先天不足，首屏性能问题（白屏）</li><li>3、由于百度等搜索引擎爬虫无法爬取 js 中的内容，故 spa 先天就对 seo 优化，心有余力不足（谷歌的 puppeteer 就挺牛逼的，实现预渲染底层也是用到了这个工具）</li></ul><h2 id="vue-特性" tabindex="-1">Vue 特性 <a class="header-anchor" href="#vue-特性" aria-label="Permalink to &quot;Vue 特性&quot;">​</a></h2><h4 id="轻量" tabindex="-1">轻量 <a class="header-anchor" href="#轻量" aria-label="Permalink to &quot;轻量&quot;">​</a></h4><p>Vue.js 库的体积非常小的，并且不依赖其他基础库。</p><h4 id="双向数据绑定" tabindex="-1">双向数据绑定 <a class="header-anchor" href="#双向数据绑定" aria-label="Permalink to &quot;双向数据绑定&quot;">​</a></h4><p>对于一些富交互、状态机类似的前端 UI 界面，数据绑定非常简单、方便。</p><h4 id="指令" tabindex="-1">指令 <a class="header-anchor" href="#指令" aria-label="Permalink to &quot;指令&quot;">​</a></h4><p>内置指令统一为(<code>v—*</code>)，也可以自定义指令，通过对应表达值的变化就可以修改对应的 DOM。</p><h4 id="插件化" tabindex="-1">插件化 <a class="header-anchor" href="#插件化" aria-label="Permalink to &quot;插件化&quot;">​</a></h4><p>Vue.js 核心不包含 Router、AJAX、表单验证等功能，但是可以非常方便地根据需要加载对应插件。</p><h4 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h4><p>组件可以扩展 HTML 元素，封装可重用的代码。允许我们使用小型、自包含和通常可复用的组件构建大型应用。</p><h2 id="对-mvvm-的理解" tabindex="-1">对 MVVM 的理解 <a class="header-anchor" href="#对-mvvm-的理解" aria-label="Permalink to &quot;对 MVVM 的理解&quot;">​</a></h2><p><code>MVVM</code>是<code>Model-View-ViewModel</code>的简写，是一种软件架构设计思想模式，<code>MVVM</code> 分为 <code>Model</code>、<code>View</code>、<code>ViewModel</code>。</p><p><code>MVVM</code>本质是<code>MVC</code>模型的升级版：也就是把<code>MVC</code>中的<code>Controller</code>演变成<code>ViewModel</code>。</p><p>核心点 <code>数据驱动视图</code>：</p><ul><li><code>Model</code>代表数据模型，数据和业务逻辑都在<code>Model</code>层中定义；</li><li><code>View</code>代表 UI 视图：看到的页面，负责数据的展示；</li><li><code>ViewModel</code>是 <code>View</code>和<code>Model</code>之间的桥梁，负责监听<code>Model</code>中数据的改变并且控制视图的更新，处理用户交互操作； <ul><li><code>Model</code>和<code>View</code>并无直接关联，通过<code>ViewModel</code>来进行联系的，数据会绑定到 <code>ViewModel</code>层并自动将数据渲染到页面中，视图变化的时候会通知<code>ViewModel</code>层更新数据。</li><li><code>Model</code>和<code>ViewModel</code>之间有着双向数据绑定的联系</li><li>因此当<code>Model</code>中的数据改变时会触发<code>View</code>层的刷新，<code>View</code>中由于用户交互操作而改变的数据也会在<code>Model</code>中同步。</li></ul></li></ul><p>ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而 View 和 Model 之间的 同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作 DOM，不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p><p>所以vue 数据驱动，通过数据来显示视图层而不是节点操作。</p><h2 id="mvvm-模型的优缺点" tabindex="-1">MVVM 模型的优缺点? <a class="header-anchor" href="#mvvm-模型的优缺点" aria-label="Permalink to &quot;MVVM 模型的优缺点?&quot;">​</a></h2><p>MVVM（Model-View-ViewModel）模型是一种软件架构模式，主要用于应用程序的用户界面设计。</p><p>它的优缺点如下：</p><p><strong>优点</strong>:</p><ol><li><strong>分离视图（View）和模型（Model）</strong>: 降低代码耦合，提高视图或逻辑的重用性。视图可以独立于Model变化和修改，一个ViewModel可以绑定到不同的View上。</li><li><strong>提高可测试性</strong>: ViewModel的存在可以帮助开发者更好地编写测试代码。</li><li><strong>自动更新DOM</strong>: 利用双向绑定，数据更新后视图自动更新，减少手动DOM操作的需要。</li></ol><p><strong>缺点</strong>:</p><ol><li><strong>Bug难以调试</strong>: 双向绑定可能导致Bug迅速传播到其他位置，定位问题源头变得困难。</li><li><strong>内存消耗</strong>: 大型模块中Model可能会很大，长期持有不释放内存会导致更多的内存消耗。</li><li><strong>视图状态管理复杂</strong>: 对于大型图形应用程序，维护和构建ViewModel的成本较高。</li></ol><p>MVVM模式适用于需要将用户界面与业务逻辑分离的场景，特别是在复杂的用户界面交互中。它可以提高代码的可维护性和可测试性，但也可能带来更高的内存消耗和调试难度。</p><h2 id="说说-vue-的-mvvm-实现原理" tabindex="-1">说说 Vue 的 MVVM 实现原理 <a class="header-anchor" href="#说说-vue-的-mvvm-实现原理" aria-label="Permalink to &quot;说说 Vue 的 MVVM 实现原理&quot;">​</a></h2><p>Vue.js 是一个实现 MVVM 模式的前端框架，其核心是实现视图（View）和模型（Model）之间的自动同步，即所谓的双向数据绑定。</p><p>Vue.js 的 MVVM 实现原理主要依赖以下几个关键技术：</p><ol><li><strong>数据劫持</strong>: Vue.js 使用 <code>Object.defineProperty</code> 方法劫持各个属性的 <code>getter</code> 和 <code>setter</code>，在数据变动时能够通知订阅者，触发相应的监听回调。这是实现双向绑定的基础。</li><li><strong>依赖收集</strong>: 当渲染函数被首次执行时，会访问响应式数据的 <code>getter</code>，此时会进行依赖收集，将当前的组件实例收集为依赖。</li><li><strong>指令解析器（Compile）</strong>: 解析模板中的 Vue 指令，并将模板中的变量与数据绑定起来，当数据变化时，Compile 会接收到通知并更新视图。</li><li><strong>观察者（Watcher）</strong>: Watcher 的作用是连接 Observer 和 Compile 的桥梁，它订阅了数据的变化通知，并在数据变化时执行回调函数，更新视图。</li><li><strong>虚拟 DOM</strong>: Vue.js 使用虚拟 DOM 来提高性能，只有当数据变化时，才会重新渲染组件，而不是直接操作 DOM。</li><li><strong>响应式更新队列</strong>: Vue.js 会将所有的数据变更放入一个队列中，并在适当的时候一次性处理这些变更，以避免不必要的重复渲染。</li></ol><p>通过这些机制，Vue.js 能够确保当数据变化时，视图能够自动更新，同时也能在视图变化时更新数据，从而实现了 MVVM 模式中的双向数据绑定</p><h2 id="对-mvc、mvp-和-mvvm-的理解" tabindex="-1">对 MVC、MVP 和 MVVM 的理解？ <a class="header-anchor" href="#对-mvc、mvp-和-mvvm-的理解" aria-label="Permalink to &quot;对 MVC、MVP 和 MVVM 的理解？&quot;">​</a></h2><p>答题思路：此题涉及知识点很多，很难说清、说透，因为 mvc、mvp 这些我们前端程序员自己甚至都没用过。但是恰恰反映了前端这些年从无到有，从有到优的变迁过程，因此沿此思路回答将十分清楚。</p><h3 id="web1-0-时代" tabindex="-1">Web1.0 时代 <a class="header-anchor" href="#web1-0-时代" aria-label="Permalink to &quot;Web1.0 时代&quot;">​</a></h3><p>在 web1.0 时代，并没有前端的概念。</p><p>开发一个 web 应用多数采用 ASP.NET/Java/PHP 编写，项目通常由多个 aspx/jsp/php 文件构成，每个文件中同时包含了 HTML、CSS、JavaScript、C#/Java/PHP 代码，系统整体架构可能是这样子的</p><p><img src="`+B+'" alt="image-20240512024821419"></p><p>这种架构的好处是简单快捷，但是，缺点也非常明显：</p><ol><li>**业务体系增大，调试困难：**随着业务体系的增大，后台service也会逐步膨胀，大致需要建设一个开发服务器进行存放，这会导致一个问题就是前端无法在本地进行调试，每次进行修改之后，都必须上传到开发服务器进行测试（况且开发服务器可能本身就不稳定）。</li><li>**JSP代码难以维护：**或许人少的时候，学JSP挺简单的。但是，一旦团队人数增多，JSP内参杂的业务逻辑也会逐渐增加，这会导致的是JSP本身难以维护。</li></ol><p>为了让开发更加便捷，代码更易维护，前后端职责更清晰。便衍生出 MVC 开发模式和框架，前端展示以模板的形式出现。典型的框架就是 Spring、Structs、Hibernate。整体框架如图所示：</p><p><img src="'+i+'" alt="image-20240512024944620"></p><p>使用这种分层架构，职责清晰，代码易维护。但这里的 MVC 仅限于后端，前后端形成了一定的分离，前端只完成了后端开发中的 view 层。</p><p>但是，同样的这种模式存在着一些：</p><ol><li>**前端页面开发效率不高：**其实，早期的时候根本也没啥前端开发工程师，有的只是页面仔。更多公司可能也有后端的人使用js在写页面的。因此，问题就暴露了出来，前端所做出来的页面需要放到后端环境去运行，使得前端开发的效率并不是特别之高，因为对于后端环境的依赖程度比较大。</li><li>**前后端职责不清：**由于前端并未做太多的工作，以至于后端的开发体量比较庞大。就拿路由管理来举例子，本来路由管理可以由前端开发的人员来进行开发和管理。但是，使用这种架构时，后端需要去维护一个庞大的路由表，增加了后端的开发量。</li></ol><h3 id="web-2-0-时代-ajax-技术" tabindex="-1">web 2.0 时代：ajax 技术 <a class="header-anchor" href="#web-2-0-时代-ajax-技术" aria-label="Permalink to &quot;web 2.0 时代：ajax 技术&quot;">​</a></h3><p>自从 Gmail 的出现，ajax 技术开始风靡全球。有了 ajax 之后，前后端的职责就更加清晰了。因为前端可以通过 Ajax 与后端进行数据交互，因此，整体的架构图也变化成了下面这幅图：</p><p><img src="'+y+'" alt="image-20240512025103471"></p><p>通过 ajax 与后台服务器进行数据交换，前端开发人员，只需要开发页面这部分内容，数据可由后台进行提供。而且 ajax 可以使得页面实现部分刷新，减少了服务端负载和流量消耗，用户体验也更佳。这时，才开始有专职的前端工程师。同时前端的类库也慢慢的开始发展，最著名的就是 jQuery 了。</p><p>当然，此架构也存在问题：缺乏可行的开发模式承载更复杂的业务需求，页面内容都杂糅在一起，一旦应用规模增大，就会导致难以维护了。因此，前端的 MVC 也随之而来。</p><h4 id="前后端分离后的架构演变——mvc、mvp-和-mvvm" tabindex="-1">前后端分离后的架构演变——MVC、MVP 和 MVVM <a class="header-anchor" href="#前后端分离后的架构演变——mvc、mvp-和-mvvm" aria-label="Permalink to &quot;前后端分离后的架构演变——MVC、MVP 和 MVVM&quot;">​</a></h4><h5 id="mvc" tabindex="-1">MVC <a class="header-anchor" href="#mvc" aria-label="Permalink to &quot;MVC&quot;">​</a></h5><p>前端的 MVC 与后端类似，具备着 View、Controller 和 Model。</p><p>Model：负责保存应用数据，与后端数据进行同步</p><p>Controller：负责业务逻辑，根据用户行为对 Model 数据进行修改</p><p>View：负责视图展示，将 model 中的数据可视化出来。</p><p>三者形成了一个如图所示的模型：</p><p><img src="'+u+'" alt="image-20240512025143165"></p><p>这样的模型，在理论上是可行的。但往往在实际开发中，并不会这样操作。因为开发过程并不灵活。例如，一个小小的事件操作，都必须经过这样的一个流程，那么开发就不再便捷了。</p><p>在实际场景中，我们往往会看到另一种模式，如图：</p><p><img src="'+b+'" alt="image-20240512025215604"></p><p>这种模式在开发中更加的灵活，backbone.js 框架就是这种的模式。</p><p>但是，这种灵活可能导致严重的问题：</p><p>1.<strong>数据流混乱</strong>。如下图：</p><p><img src="'+d+'" alt="image-20240512025245823"></p><p>2.<strong>View 比较庞大，而 Controller 比较单薄</strong>：由于很多的开发者都会在 view 中写一些逻辑代码，逐渐的就导致 view 中的内容越来越庞大，而 controller 变得越来越单薄。</p><p>既然有缺陷，就会有变革。前端的变化中，似乎少了 MVP 的这种模式，是因为 AngularJS 早早地将 MVVM 框架模式带入了前端。MVP 模式虽然前端开发并不常见，但是在安卓等原生开发中，开发者还是会考虑到它。</p><h5 id="mvp" tabindex="-1">MVP <a class="header-anchor" href="#mvp" aria-label="Permalink to &quot;MVP&quot;">​</a></h5><p>MVP 与 MVC 很接近，P 指的是 Presenter，presenter 可以理解为一个中间人，它负责着 View 和 Model 之间的数据流动，防止 View 和 Model 之间直接交流。我们可以看一下图示：</p><p><img src="'+F+'" alt="image-20240512025322711"></p><p>我们可以通过看到，presenter 负责和 Model 进行双向交互，还和 View 进行双向交互。这种交互方式，相对于 MVC 来说少了一些灵活，VIew 变成了被动视图，并且本身变得很小。虽然它分离了 View 和 Model。但是应用逐渐变大之后，导致 presenter 的体积增大，难以维护。要解决这个问题，或许可以从 MVVM 的思想中找到答案。</p><h5 id="mvvm" tabindex="-1">MVVM <a class="header-anchor" href="#mvvm" aria-label="Permalink to &quot;MVVM&quot;">​</a></h5><p>首先，何为 MVVM 呢？MVVM 可以分解成(Model-View-VIewModel)。ViewModel 可以理解为在 presenter 基础上的进阶版。如图所示：</p><p><img src="'+A+'" alt="MVVM"></p><p>ViewModel 通过实现一套数据响应式机制自动响应 Model 中数据变化；</p><p>同时 Viewmodel 会实现一套更新策略自动将数据变化转换为视图更新；</p><p>通过事件监听响应 View 中用户交互修改 Model 中数据。</p><p>这样在 ViewModel 中就减少了大量 DOM 操作代码。</p><p>MVVM 在保持 View 和 Model 松耦合的同时，还减少了维护它们关系的代码，使用户专注于业务逻辑，兼顾开发效率和可维护性。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>这三者都是框架模式，它们设计的目标都是为了解决 Model 和 View 的耦合问题。</li><li>MVC 模式出现较早主要应用在后端，如 Spring MVC、ASP.NET MVC 等，在前端领域的早期也有应用，如 Backbone.js。它的优点是分层清晰，缺点是数据流混乱，灵活性带来的维护性问题。</li><li>MVP 模式在是 MVC 的进化形式，Presenter 作为中间层负责 MV 通信，解决了两者耦合问题，但 P 层过于臃肿会导致维护问题。</li><li>MVVM 模式在前端领域有广泛应用，它不仅解决 MV 耦合问题，还同时解决了维护两者映射关系的大量繁杂代码和 DOM 操作代码，在提高开发效率、可读性同时还保持了优越的性能表现。</li></ul><p>MVC（Model-View-Controller）、MVP（Model-View-Presenter）和 MVVM（Model-View-ViewModel）都是软件架构设计模式，它们的目的是通过分离关注点来改善代码的组织方式，提高代码的可维护性和可读性。下面是对这三种模式的简要理解：</p><p><strong>MVC</strong>:</p><ul><li><strong>Model（模型）</strong>: 负责数据和业务逻辑。</li><li><strong>View（视图）</strong>: 负责显示用户界面。</li><li><strong>Controller（控制器）</strong>: 起到模型与视图之间的协调作用，接收用户输入并调用模型和视图完成用户请求。 在MVC中，Model和View可能有耦合，即MVC仅仅将应用抽象，并未限制数据流。</li></ul><p><strong>MVP</strong>:</p><ul><li><strong>Model</strong>: 与MVC中的Model相同。</li><li><strong>View</strong>: 与MVC中的View相同，但不直接与Model通信。</li><li><strong>Presenter</strong>: 替代了MVC中的Controller，作为Model和View之间的中介，处理所有的业务逻辑。 MVP模式限制了Model和View之间通信，让Model和View解耦更彻底，代码更容易被复用。但Presenter的负担很重，需要知道View和Model的结构，并且在Model变化时候需要手动操作View，增加编码负担。</li></ul><p><strong>MVVM</strong>:</p><ul><li><strong>Model</strong>: 与MVC和MVP中的Model相同。</li><li><strong>View</strong>: 负责展示，可以通过ViewModel自动更新，不需要直接与Model交互。</li><li><strong>ViewModel</strong>: 替代了MVP中的Presenter，自动同步数据到视图，用VM代替P之后，MVVM自动从Model映射到View（实现方式是模板渲染），不需要用户手动操作视图，这样代码更简单不易出错，代码更好阅读和维护。 MVVM通过自动同步数据更新到视图，解决了MVP中手动同步的痛点，简化了代码。</li></ul><p>总的来说，这三种模式都是为了解决开发过程中的维护问题和文件管理问题，目的都是为了将业务（Model）和视图（View）的实现代码分离。没有所谓最好的架构，只有适合项目和实际问题的架构。选择哪一种模式取决于项目的具体需求和团队的偏好</p><h2 id="mvvm、mvc、mvp-的区别" tabindex="-1">MVVM、MVC、MVP 的区别 <a class="header-anchor" href="#mvvm、mvc、mvp-的区别" aria-label="Permalink to &quot;MVVM、MVC、MVP 的区别&quot;">​</a></h2><p>MVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化开发效率。</p><p>在开发单页面应用时，往往一个路由页面对应了一个脚本文件，所有的页面逻辑都在一个脚本文件里。页面的渲染、数据的获取，对用户事件的响应所有的应用逻辑都混合在一起，这样在开发简单项目时，可能看不出什么问题，如果项目变得复杂，那么整个文件就会变得冗长、混乱，这样对项目开发和后期的项目维护是非常不利的。</p><h3 id="_1-mvc" tabindex="-1">（1）MVC <a class="header-anchor" href="#_1-mvc" aria-label="Permalink to &quot;（1）MVC&quot;">​</a></h3><p>MVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。</p><p>其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了观察者模式，当 Model 层发生改变的时候它会通知有关 View 层更新页面。</p><p>Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Controller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。</p><p><img src="'+m+'" alt="image-20240321021057430"></p><h3 id="_2-mvvm" tabindex="-1">（2）MVVM <a class="header-anchor" href="#_2-mvvm" aria-label="Permalink to &quot;（2）MVVM&quot;">​</a></h3><p>MVVM 分为 Model、View、ViewModel：</p><p>Model 代表数据模型，数据和业务逻辑都在 Model 层中定义； View 代表 UI 视图，负责数据的展示；</p><p>ViewModel 负责监听 Model 中数据的改变并且控制视图的更新，处理用户交互操作；</p><p>Model 和 View 并无直接关联，而是通过 ViewModel 来进行联系的，Model 和 ViewModel 之间有着双向数据绑定的联系。因此当 Model 中的数据改变时会触发 View 层的刷新，View 中由于用户交互操作而改变的数据也会在 Model 中同步。</p><p>这种模式实现了 Model 和 View 的数据自动同步，因此开发者只需要专注于数据的维护操作即可，而不需要自己操作 DOM。</p><p><img src="'+C+`" alt="image-20240321021208443"></p><h3 id="_3-mvp" tabindex="-1">（3）MVP <a class="header-anchor" href="#_3-mvp" aria-label="Permalink to &quot;（3）MVP&quot;">​</a></h3><p>MVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。</p><p>在 MVC 模式中使用观察者模式，来实现当 Model 层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。</p><p>MVP 的模式通过使用 Presenter 来实现对 View 层和 Model 层的解耦。MVC 中的 Controller 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中，View 层的接口暴露给了 Presenter 因此可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现 View 和 Model 的同步更新。</p><p>这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。</p><h2 id="vue-中-computed-和-watch-的作用是什么-有什么区别" tabindex="-1">Vue 中 computed 和 watch 的作用是什么，有什么区别？ <a class="header-anchor" href="#vue-中-computed-和-watch-的作用是什么-有什么区别" aria-label="Permalink to &quot;Vue 中 computed 和 watch 的作用是什么，有什么区别？&quot;">​</a></h2><h3 id="相同" tabindex="-1">相同 <a class="header-anchor" href="#相同" aria-label="Permalink to &quot;相同&quot;">​</a></h3><p>都是观察数据变化的</p><h3 id="computed" tabindex="-1">computed <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;computed&quot;">​</a></h3><p><code>computed</code>称为<code>计算属性</code>，它<code>必须拥有返回值</code>，它的值可以是<code>固定的</code>，也可以是<code>依赖其它响应式数据计算出来的</code>，它进行一些<code>同步运算处理</code>，当它依赖其它值时，只有当其它值改变时，它才会触发更新。</p><ul><li><p>仅当用户取值时才会执行对于的方法</p></li><li><p>计算属性不支持异步逻辑</p></li><li><p>具有缓存作用，data依赖的值不变，不会再次执行</p></li><li><p>属性改变后，通知计算属性重新计算</p></li><li><p>具有响应式的返回值</p></li><li><p>提高性能</p></li></ul><p>computed原理描述：</p><ul><li>conputed 本质是一个惰性的观察者；当计算数据存在于 data 或者 props 里时会被警告；</li><li>每一个计算属性内部都维护了一个 <code>dirty:true</code> 的属性。当 dirty 为 true 的时候，就会执行用户的方法，拿到值后把值川村起来 <code>this.value</code>，dirty 改为 false。再次取值，dirty 为 false，直接返回值。</li><li>更改数据的时候，dirty 会被修改为 true，并且会触发更新，页面重新渲染，重新计算计算属性的值</li></ul><p>实现时，主要如下：</p><ul><li>初始化 data ， 使用 Object.defineProperty 把这些属性全部转为 getter/setter 。</li><li>初始化 computed , 遍历 computed 里的每个属性，每个 computed 属性都是一个 watch 实例。每个属性提供的函数作为属性的 getter ，使用 Object.defineProperty 转化。</li><li>Object.defineProperty getter 依赖收集。用于依赖发生变化时，触发属性重新计算。</li><li>若出现当前 computed 计算属性嵌套其他 computed 计算属性时，先进行其他的依赖收集</li></ul><p>vue 初次运行会对 computed 属性做初始化处理（initComputed），初始化的时候会对每一个 computed 属性用 watcher 包装起来 ，这里面会生成一个 dirty 属性值为 true；然后执行 defineComputed 函数来计算，计算之后会将 dirty 值变为 false，这里会根据 dirty 值来判断是否需要重新计算；如果属性依赖的数据发生变化，computed 的 watcher 会把 dirty 变为 true，这样就会重新计算 computed 属性的值。</p><p>当组件实例触发生命周期函数 beforeCreate 后，它会做一系列事情，其中就包括对 computed 的处理。</p><p>它会遍历 computed 配置中的所有属性，为每一个属性创建一个 Watcher 对象，并传入一个函数，该函数的本质其实就是 computed 配置中的 getter，这样一来，getter 运行过程中就会收集依赖</p><p>但是和渲染函数不同，为计算属性创建的 Watcher 不会立即执行，因为要考虑到该计算属性是否会被渲染函数使用，如果没有使用，就不会得到执行。因此，在创建 Watcher 的时候，它使用了 lazy 配置，lazy 配置可以让 Watcher 不会立即执行。</p><p>收到 lazy 的影响，Watcher 内部会保存两个关键属性来实现缓存，一个是 value，一个是 dirty</p><p>value 属性用于保存 Watcher 运行的结果，受 lazy 的影响，该值在最开始是 undefined</p><p>dirty 属性用于指示当前的 value 是否已经过时了，即是否为脏值，受 lazy 的影响，该值在最开始是 true</p><p>Watcher 创建好后，vue 会使用代理模式，将计算属性挂载到组件实例中</p><p>当读取计算属性时，vue 检查其对应的 Watcher 是否是脏值，如果是，则运行函数，计算依赖，并得到对应的值，保存在 Watcher 的 value 中，然后设置 dirty 为 false，然后返回。</p><p>如果 dirty 为 false，则直接返回 watcher 的 value</p><p>巧妙的是，在依赖收集时，被依赖的数据不仅会收集到计算属性的 Watcher，还会收集到组件的 Watcher</p><p>当计算属性的依赖变化时，会先触发计算属性的 Watcher 执行，此时，它只需设置 dirty 为 true 即可，不做任何处理。</p><p>由于依赖同时会收集到组件的 Watcher，因此组件会重新渲染，而重新渲染时又读取到了计算属性，由于计算属性目前已为 dirty，因此会重新运行 getter 进行运算</p><p>而对于计算属性的 setter，则极其简单，当设置计算属性时，直接运行 setter 即可。</p><h3 id="watch" tabindex="-1">watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;watch&quot;">​</a></h3><p><code>watch</code>称为<code>监听</code>，它需要监听<code>一个响应式数据</code>，当它监听的数据改变时，它会处理回调任务，可以在回调中做一些<code>异步操作</code>。</p><ul><li><p>监控数据的变化，当值发生变化时候会触发回调</p></li><li><p>监控基本类型的，直接使用。</p></li><li><p>监控对象，可以指定某一个属性，也可以配置 <code>deep:true</code> 属性监控整个对象</p><p>注意点：异步要注意竞态问题，vue3 提供了第三个入参 onCleanup 函数，让用户更加方便的解决清理问题。</p></li></ul><p>watch 的 参数：</p><ul><li>deep：深度监听</li><li>immediate ：组件加载立即触发回调函数执行</li></ul><h3 id="computed-和-watch的区别以及选择" tabindex="-1">computed 和 watch的区别以及选择? <a class="header-anchor" href="#computed-和-watch的区别以及选择" aria-label="Permalink to &quot;computed 和 watch的区别以及选择?&quot;">​</a></h3><h4 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h4><ol><li>先看<a href="https://cn.vuejs.org/api/reactivity-core#computed" target="_blank" rel="noreferrer">computed</a>, <a href="https://cn.vuejs.org/api/reactivity-core#watch" target="_blank" rel="noreferrer">watch</a>两者定义，列举使用上的差异</li><li>列举使用场景上的差异，如何选择</li><li>使用细节、注意事项</li><li>vue3 变化</li></ol><p>computed 特点：具有响应式的返回值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> plusOne</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>watch 特点：侦测变化，执行回调</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">	() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prevCount</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="回答范例" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><ol><li><code>computed</code> 计算属性可以<strong>从组件数据派生出新数据</strong>，最常见的使用方式是设置一个函数，返回计算之后的结果，computed 和 methods 的差异是它具备缓存性，如果依赖项不变时不会重新计算。 <code>watch</code> 侦听器<strong>可以侦测某个响应式数据的变化并执行副作用</strong>，常见用法是传递一个函数，执行副作用，watch 没有返回值，但可以执行异步操作等复杂逻辑。</li><li><code>computed</code> 计算属性常用场景是简化行内模板中的复杂表达式，模板中出现太多逻辑会是模板变得臃肿不易维护。<code>watch</code>侦听器常用场景是状态变化之后做一些额外的 DOM 操作或者异步操作。选择采用何用方案时首先看是否需要派生出新值，基本能用计算属性实现的方式首选计算属性。</li><li><code>computed</code> 计算属性的本质是一个惰性求值的观察者<code>computed watcher</code>，具有缓存性，只有当依赖变化后，第一次访问 <code>computed</code> 属性，才会计算新的值</li><li>从使用场景上说，<code>computed</code> 适用一个数据被多个数据影响，而 <code>watch</code> 适用一个数据影响多个数据；</li><li>使用过程中有一些细节，比如计算属性也是可以传递对象，成为既可读又可写的计算属性。watch 可以传递对象，设置 deep、immediate 等选项。</li><li>vue3 中 watch 选项发生了一些变化，例如不再能侦测一个点操作符之外的字符串形式的表达式； reactivity API 中新出现了 watch、watchEffect 可以完全替代目前的 watch 选项，且功能更加强大。</li></ol><ul><li><p>computed 属性默认会走<strong>缓存</strong>，只有依赖数据发生变化，才会重新计算，不支持异步，有异步导致数据发生变化时，无法做出相应改变；</p></li><li><p>watch 不依赖缓存，一旦数据发生变化就直接触发响应操作，支持异步。</p></li><li><p><code>computed</code>计算属性将会混入到 vue 的实例中，所以需要监听自定义变量；watch 监听 data 、props 里面数据的变化；</p></li><li><p>computed 有缓存，它依赖的值变了才会重新计算，watch 没有；</p></li><li><p>watch 支持异步，computed 不支持；</p></li><li><p>watch 是一对多（监听某一个值变化，执行对应操作）；computed 是多对一（监听属性依赖于其他属性）</p></li><li><p>watch 监听函数接收两个参数，第一个是最新值，第二个是输入之前的值；</p></li><li><p>computed 属性是函数时，都有 get 和 set 方法，默认走 get 方法，get 必须有返回值（return）</p></li><li><p><code>computed</code>是有缓存的，读取 computed 属性时，如果<code>依赖的值没有变化</code>，就会读取缓存的内容，而<code>watch</code>没有缓存，只要数据改动，就会触发回调；</p></li><li><p><code>computed</code>必须要有返回值，<code>watch</code>不需要有返回值；</p></li><li><p><code>computed</code>在初始化时就会执行一次，而<code>watch</code>初始化时默认<code>不会执行</code>，如果我们想让它执行，可以设置它的<code>immediate</code>属性为<code>true</code>；</p></li><li><p><code>computed</code>相当于创建了一个新的<code>响应式属性</code>，而<code>watch</code>相当于监听<code>原有的响应式属性</code>，然后执行回调；</p></li><li><p><code>computed</code>中处理的是<code>同步操作</code>，而<code>watch</code>可以处理<code>异步任务</code>。</p></li></ul><h3 id="区别2" tabindex="-1">区别2 <a class="header-anchor" href="#区别2" aria-label="Permalink to &quot;区别2&quot;">​</a></h3><h4 id="_1-定义-语义区别" tabindex="-1">1.定义/语义区别 <a class="header-anchor" href="#_1-定义-语义区别" aria-label="Permalink to &quot;1.定义/语义区别&quot;">​</a></h4><p><strong>watch</strong></p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">var vm = new Vue({ el: &#39;#demo&#39;, data: { foo: 1 }, watch: { foo: function</span></span>
<span class="line"><span style="color:#ABB2BF;">(newVal,oldVal) { console.log(newVal+&#39;&#39;+oldVal) } } }) vm.foo = 2 // 2 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>computed</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#demo&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		firstName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Foo&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		lastName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Bar&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		fullName</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">firstName</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot; &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">lastName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullName</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Foo Bar computed内部的函数调用的时候不需要加()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_2-功能区别" tabindex="-1">2.功能区别 <a class="header-anchor" href="#_2-功能区别" aria-label="Permalink to &quot;2.功能区别&quot;">​</a></h4><p>watch 更通用，computed 派生功能都能实现，计算属性底层来自于 watch，但做了更多，例如缓存。</p><h4 id="_3-用法区别" tabindex="-1">3.用法区别 <a class="header-anchor" href="#_3-用法区别" aria-label="Permalink to &quot;3.用法区别&quot;">​</a></h4><h5 id="watch-侦听器" tabindex="-1">watch 侦听器 <a class="header-anchor" href="#watch-侦听器" aria-label="Permalink to &quot;watch 侦听器&quot;">​</a></h5><p>watch 需要在数据变化时执行异步或开销较大的操作时使用，简单讲，当一条数据影响多条数据的时候，例如 搜索数据、值变化要和后端交互</p><p><code>watch</code>用于监听数据的变化，并在变化时执行一些操作。它可以监听单个数据或者数组，当数据发生变化时会执行对应的回调函数，和<code>computed</code>不同的是<code>watch</code>不会有缓存。</p><p>到某一数据的变化从而触发函数。当数据为对象类型时，对象中的属性值变化时需要使用深度侦听<code>deep</code>属性，也可在页面第一次加载时使用立即侦听<code>immdiate</code>属性。</p><h5 id="computed-计算属性" tabindex="-1">computed 计算属性 <a class="header-anchor" href="#computed-计算属性" aria-label="Permalink to &quot;computed 计算属性&quot;">​</a></h5><p>computed 更简单/更高效，优先使用</p><p>对于任何复杂逻辑或一个数据属性在它所依赖的属性发生变化时，也要发生变化，简单讲。当一个属性受多个属性影响的时候，例如 购物车商品结算时</p><p><code>computed</code>计算属性，通过对已有的属性值进行计算得到一个新值。它需要依赖于其他的数据，当数据发生变化时，<code>computed</code>会自动计算更新。<code>computed</code>属性值会被缓存，只有当依赖数据发生变化时才会重新计算，这样可以避免重复计算提高性能。</p><h4 id="_4-使用场景区别" tabindex="-1">4.使用场景区别 <a class="header-anchor" href="#_4-使用场景区别" aria-label="Permalink to &quot;4.使用场景区别&quot;">​</a></h4><ul><li>computed 适用于一个数据受多个数据影响使用；</li><li>watch 适合一个数据影响多个数据使用。</li></ul><p><code>computed</code> 计算属性一般用在模板渲染中，某个值是依赖其它响应对象甚至是计算属性而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。</p><ul><li>当需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时都要重新计算。</li><li>当需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许执行异步操作 ( 访问一个 API )，限制执行该操作的频率，并在得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li></ul><p>既能用 computed 实现又可以用 watch 监听来实现的功能，推荐用 computed，重点在于 computed 的缓存功能。</p><ul><li><p>computed 计算属性是用来声明式的描述一个值依赖了其它的值，当所依赖的值或者变量改变时，计算属性也会跟着改变；</p></li><li><p>watch 监听的是已经在 data 中定义的变量，当该变量变化时，会触发 watch 中的方法。</p></li><li></li></ul><h3 id="可能追问" tabindex="-1">可能追问 <a class="header-anchor" href="#可能追问" aria-label="Permalink to &quot;可能追问&quot;">​</a></h3><ol><li>watch 会不会立即执行？</li><li>watch 和 watchEffect 有什么差异</li></ol><h3 id="数据放在-computed-和-methods-的区别" tabindex="-1">数据放在 computed 和 methods 的区别 <a class="header-anchor" href="#数据放在-computed-和-methods-的区别" aria-label="Permalink to &quot;数据放在 computed 和 methods 的区别&quot;">​</a></h3><ul><li><code>computed</code> 内定义的视为一个变量；而 <code>methods</code> 内定义的是函数，必须加<code>括号()</code>；</li><li>在依赖数据不变的情况下，<code>computed</code> 内的值只在初始化的时候计算一次，之后就直接返回结果；而 <code>methods</code> 内调用的每次都会重写计算。</li></ul><h3 id="computed-的实现原理" tabindex="-1">Computed 的实现原理 <a class="header-anchor" href="#computed-的实现原理" aria-label="Permalink to &quot;Computed 的实现原理&quot;">​</a></h3><p><code>computed</code> 本质是一个惰性求值的观察者<code>computed watcher</code>。其内部通过<code>this.dirty</code> 属性标记计算属性是否需要重新求值。</p><ul><li>当 <code>computed</code> 的依赖状态发生改变时,就会通知这个惰性的 <code>watcher</code>,<code>computed watcher</code> 通过 <code>this.dep.subs.length</code> 判断有没有订阅者,</li><li>有订阅者就是重新计算结果判断是否有变化，变化则重新渲染。</li><li>没有的话,仅仅把 <code>this.dirty = true</code> (当计算属性依赖于其他数据时，属性并不会立即重新计算，只有之后其他地方需要读取属性的时候，它才会真正计算，即具备 <code>lazy</code>（懒计算）特性。)</li></ul><h3 id="watch-的-实现原理" tabindex="-1">Watch 的 实现原理 <a class="header-anchor" href="#watch-的-实现原理" aria-label="Permalink to &quot;Watch 的 实现原理&quot;">​</a></h3><p><code>Watch</code> 的本质也是一个观察者 <code>watcher</code>，监听到值的变化就执行回调；</p><ul><li><code>watch</code> 的初始化在 <code>data</code> 初始化之后，此时的<code>data</code>已经通过 <code>Object.defineProperty</code> 设置成了响应式；</li><li><code>watch</code> 的 <code>key</code> 会在 <code>Watcher</code> 里进行值的读取，也就是立即执行 <code>get</code> 获取 <code>value</code>，此时如果有 <code>immediate</code>属性就立马执行 <code>watch</code> 对应的回调函数；</li><li>当 <code>data</code> 对应的 <code>key</code> 发生变化时，触发回调函数的执行；</li></ul><h3 id="watch-怎么深度监听对象变化" tabindex="-1">watch 怎么深度监听对象变化 <a class="header-anchor" href="#watch-怎么深度监听对象变化" aria-label="Permalink to &quot;watch 怎么深度监听对象变化&quot;">​</a></h3><p>参考回答：</p><p>deep 设置为 true 就可以监听到对象的变化</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#first&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;北京&quot;</span><span style="color:#ABB2BF;"> } },</span></span>
<span class="line"><span style="color:#E06C75;">	watch</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		msg</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">			handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newMsg</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldMsg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newMsg</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#E06C75;">			immediate</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			deep</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="computed-和-watch源码的实现" tabindex="-1">computed 和 watch源码的实现 <a class="header-anchor" href="#computed-和-watch源码的实现" aria-label="Permalink to &quot;computed 和 watch源码的实现&quot;">​</a></h3><p>computed 的实现：<a href="https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts%23L79-L80" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts%23L79-L80</a></p><p>ComputedRefImpl：<a href="https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts%23L26-L27" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts%23L26-L27</a></p><p>缓存性</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts%23L59-L60" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts%23L59-L60</a></p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts%23L45-L46" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts%23L45-L46</a></p><p>watch 的实现</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiWatch.ts%23L158-L159" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiWatch.ts%23L158-L159</a></p><h2 id="created-和-mounted-的区别" tabindex="-1">created 和 mounted 的区别 <a class="header-anchor" href="#created-和-mounted-的区别" aria-label="Permalink to &quot;created 和 mounted 的区别&quot;">​</a></h2><p>created：在模板渲染成 html 前调用，即通常初始化某些属性值，然后再渲染成视图。</p><p>mounted：在模板渲染成 html 后调用，通常是初始化页面完成后，再对 html 的 dom 节点进行一些需要的操作。</p><h2 id="computed计算属性的缓存和methods-方法调用的区别" tabindex="-1">computed计算属性的缓存和methods 方法调用的区别 <a class="header-anchor" href="#computed计算属性的缓存和methods-方法调用的区别" aria-label="Permalink to &quot;computed计算属性的缓存和methods 方法调用的区别&quot;">​</a></h2><p>计算属性必须返回结果</p><p>计算属性是基于它的依赖缓存的。一个计算属性所依赖的数据发生变化时，它才会重新取值。</p><p>使用计算属性还是 methods 取决于是否需要缓存，当遍历大数组和做大量计算时，应当使用计算属性，除非你不希望得到缓存。</p><p>计算属性是根据依赖自动执行的，methods 需要事件调用。</p><p>首先从表现形式上面来看， <code>computed</code> 和 <code>methods</code> 的区别大致有下面 <em>4</em> 点：</p><ol><li>在使用时，<code>computed</code> 当做属性使用，而 <code>methods</code> 则当做方法调用</li><li><code>computed</code> 可以具有 <em>getter</em> 和 <em>setter</em>，因此可以赋值，而 <code>methods</code> 不行</li><li><code>computed</code> 无法接收多个参数，而 <code>methods</code> 可以</li><li><code>computed</code> 具有缓存，而 <code>methods</code> 没有</li></ol><p>而如果从底层来看的话， <code>computed</code> 和 <code>methods</code> 在底层实现上面还有很大的区别。</p><p><code>vue</code> 对 <code>methods</code> 的处理比较简单，只需要遍历 <code>methods</code> 配置中的每个属性，将其对应的函数使用 <code>bind</code> 绑定当前组件实例后复制其引用到组件实例中即可</p><p>而 <code>vue</code> 对 <code>computed</code> 的处理会稍微复杂一些。</p><h2 id="计算属性和-watch-以及-methods-的区别" tabindex="-1">计算属性和 watch 以及 methods 的区别 <a class="header-anchor" href="#计算属性和-watch-以及-methods-的区别" aria-label="Permalink to &quot;计算属性和 watch 以及 methods 的区别&quot;">​</a></h2><h3 id="作用机制上" tabindex="-1">作用机制上： <a class="header-anchor" href="#作用机制上" aria-label="Permalink to &quot;作用机制上：&quot;">​</a></h3><p>watch 和 computed 都是以 Vue 的依赖追踪机制为基础的，当某一个数据发生变化的时候， 所有依赖这个数据的相关数据，自动发生变化，也就是自动调用相关的函数去实现数据的变动</p><p>methods 里面是用来定义函数的，它需要手动调用才能执行。而不像 watch 和 computed 那样， “自动执行”预先定义的函数，相比于 watch / compute，methods 不处理数据逻辑关系，只提供可调用的函数，类似储存函数的一个库。</p><h3 id="从性质上" tabindex="-1">从性质上： <a class="header-anchor" href="#从性质上" aria-label="Permalink to &quot;从性质上：&quot;">​</a></h3><p>methods：里面定义的是函数，你显然需要像&quot;fuc()&quot;这样去调用它（假设函数为 fuc）。</p><p>computed：是计算属性，事实上和和 data 对象里的数据属性是同一类的（使用上）。</p><p>watch：类似于监听机制+事件机制，回调函数自动调用。</p><h2 id="在-vue-中要获取当前时间你会放到-computed-还是-methods-里" tabindex="-1">在 Vue 中要获取当前时间你会放到 computed 还是 methods 里？ <a class="header-anchor" href="#在-vue-中要获取当前时间你会放到-computed-还是-methods-里" aria-label="Permalink to &quot;在 Vue 中要获取当前时间你会放到 computed 还是 methods 里？&quot;">​</a></h2><p>放在 <code>computed</code> 里面。</p><p>因为 <code>computed</code> 只有在它的相关依赖发生改变时才会重新求值。相比而言，方法只要发生重新渲染，<code>methods</code> 调用总会执行所有函数。</p><h2 id="为什么不建议用-index-作为-key" tabindex="-1">为什么不建议用 index 作为 key? <a class="header-anchor" href="#为什么不建议用-index-作为-key" aria-label="Permalink to &quot;为什么不建议用 index 作为 key?&quot;">​</a></h2><p>如果将数组下标作为<code>key</code>值，那么当列表发生变化时，可能会导致<code>key</code>值发生改变，从而引发不必要的组件重新渲染，甚至会导致性能问题。例如，当删除列表中某个元素时，其后面的所有元素的下标都会发生改变，导致<code>Vue</code>重新渲染整个列表。</p><h2 id="v-if-和-v-for-哪个优先级更高-如果两个同时出现-应该怎么优化得到更好的性能" tabindex="-1">v-if 和 v-for 哪个优先级更高？如果两个同时出现，应该怎么优化得到更好的性能？ <a class="header-anchor" href="#v-if-和-v-for-哪个优先级更高-如果两个同时出现-应该怎么优化得到更好的性能" aria-label="Permalink to &quot;v-if 和 v-for 哪个优先级更高？如果两个同时出现，应该怎么优化得到更好的性能？&quot;">​</a></h2><h3 id="两者优先级问题" tabindex="-1">两者优先级问题 <a class="header-anchor" href="#两者优先级问题" aria-label="Permalink to &quot;两者优先级问题&quot;">​</a></h3><ul><li>在 <code>Vue2</code> 中，<code>v-for</code> 的优先级高于 <code>v-if</code> ，放在一起会先执行循环再判断条件；如果两者同时出现的话，会带来性能方面的浪费（每次都会先循环渲染再进行条件判断），所以编码的时候不应该将它俩放在一起；</li><li>再 <code>Vue3</code> 中， <code>v-if</code> 的优先级高于 <code>v-for</code> ；因为 <code>v-if</code> 先执行，此时 <code>v-for</code> 未执行，所以如果使用 <code>v-for</code> 定义的变量就会报错；</li></ul><p>在<code>Vue2</code>中，会先通过<code>v-for</code>遍历，然后对每一项使用<code>v-if</code>判断，不满足条件的不会渲染，但是这种方式并不好，相当于对很多个标签都添加了<code>v-if</code>，每次渲染之前都要判断。于是在<code>Vue3</code>中，<code>v-if</code>的优先级要<code>高于v-for</code>了，相当于在<code>v-for外层包裹了一层</code>，但是这时的判断条件肯定是错的，因此在<code>vue3中</code>同一标签使用<code>v-for和v-if</code>时，会报错。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#C678DD;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">item</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">item</span><span style="color:#C678DD;"> in</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;span&gt;{{ item }}&lt;/span&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 等价于 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#C678DD;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">item</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	&lt;!-- 此时肯定会报错 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">item</span><span style="color:#C678DD;"> in</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="在-vue2-中" tabindex="-1">在 Vue2 中 <a class="header-anchor" href="#在-vue2-中" aria-label="Permalink to &quot;在 Vue2 中&quot;">​</a></h3><p>会先通过<code>v-for</code>遍历，然后对每一项使用<code>v-if</code>判断，不满足条件的不会渲染，但是这种方式并不好，相当于对很多个标签都添加了<code>v-if</code>，每次渲染之前都要判断。</p><p>会导致循环后再判断，浪费性能。</p><p>这意味着 v-if 将分别重复运行于每个 v-for 循环中。当你想为仅有的一些项渲染节点时，这种优先级的机制会十分有用，如下：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">li</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">todo</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> todos</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#C678DD;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isComplete</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{ todo }}&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面的代码只传递了未完成的 todos。而如果你的目的是有条件地跳过循环的执行，那么可以将 v-if 置于外层元素 (或<code>&lt;template&gt;</code>)上 vue 中 keep-alive 组件的作用<strong>keep-alive：主要用于保留组件状态或避免重新渲染。</strong></p><p>比如： 有一个列表页面和一个 详情页面，那么用户就会经常执行打开详情=&gt;返回列表=&gt;打开详情这样的话 列表 和 详情 都是一个频率很高的页面，那么就可以对列表组件使用<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>进行缓存，这样用户每次返回列表的时候，都能从缓存中快速渲染，而不是重新渲染。</p><p>1、属性：include:字符串或正则表达式。只有匹配的组件会被缓存。</p><p>exclude：字符串或正则表达式。任何匹配的组件都不会被缓存。</p><p>2、用法：包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和<code>&lt;transition&gt;</code>相似，<code>&lt;keep-alive&gt;</code>是一个抽象组件：它自身不会渲染一 DOM 元素，也不会出现在父组件链中。当组件在<code>&lt;keep-alive&gt;</code> 内被切换，在 2.2.0 及其更高版本中，</p><p><strong>activated 和 deactivated 生命周期 将会在 树内的所有嵌套组件中触发</strong>。</p><h3 id="在-vue3-中" tabindex="-1">在 Vue3 中 <a class="header-anchor" href="#在-vue3-中" aria-label="Permalink to &quot;在 Vue3 中&quot;">​</a></h3><p>v-if 的优先级高于 v-for</p><h3 id="解决v-for-与-v-if同时使用的问题" tabindex="-1">解决v-for 与 v-if同时使用的问题 <a class="header-anchor" href="#解决v-for-与-v-if同时使用的问题" aria-label="Permalink to &quot;解决v-for 与 v-if同时使用的问题&quot;">​</a></h3><ul><li>v-for 和 v-if 应避免在同一个标签里使用：在外层新增嵌套 <code>template</code> 模板标签，在<code>template层</code>上进行 <code>v-if</code> 判断，然后在<code>内部</code>进行 <code>v-for</code> 循环。</li><li>如果遇到v-for 与 v-if同时使用的场景：条件出现在循环内部，可以考虑用计算属性来优化：通过计算属性搭配 v-if 条件，来计算出需要 v-for 的数据，提前过滤掉那些不需要显示的项。</li></ul><hr><h3 id="回答范例-1" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-1" aria-label="Permalink to &quot;回答范例：&quot;">​</a></h3><ol><li>实践中<strong>不应该把 v-for 和 v-if 放一起</strong></li><li>在<strong>vue2 中</strong>，<strong>v-for 的优先级是高于 v-if</strong>，把它们放在一起，输出的渲染函数中可以看出会先执行循环再判断条件，哪怕我们只渲染列表中一小部分元素，也得在每次重渲染的时候遍历整个列表，这会比较浪费；另外需要注意的是在<strong>vue3 中则完全相反，v-if 的优先级高于 v-for</strong>，所以 v-if 执行时，它调用的变量还不存在，就会导致异常</li><li>通常有两种情况下导致我们这样做： <ul><li>为了<strong>过滤列表中的项目</strong> (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code>)。此时定义一个计算属性 (比如 <code>activeUsers</code>)，让其返回过滤后的列表即可（比如<code>users.filter(u=&gt;u.isActive)</code>）。</li><li>为了<strong>避免渲染本应该被隐藏的列表</strong> (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code>)。此时把 <code>v-if</code> 移动至容器元素上 (比如 <code>ul</code>、<code>ol</code>)或者外面包一层<code>template</code>即可。</li></ul></li><li>文档中明确指出<strong>永远不要把 <code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上</strong>，显然这是一个重要的注意事项。</li><li>源码里面关于代码生成的部分，能够清晰的看到是先处理 v-if 还是 v-for，顺序上 vue2 和 vue3 正好相反，因此产生了一些症状的不同，但是不管怎样都是不能把它们写在一起的。</li></ol><hr><h3 id="源码" tabindex="-1">源码 <a class="header-anchor" href="#源码" aria-label="Permalink to &quot;源码&quot;">​</a></h3><p>Vue2：<a href="https://github1s.com/vuejs/vue/blob/HEAD/src/compiler/codegen/index.ts" target="_blank" rel="noreferrer">https://github1s.com/vuejs/vue/blob/HEAD/src/compiler/codegen/index.ts</a></p><p>Vue3：<a href="https://github1s.com/vuejs/core/blob/HEAD/packages/compiler-core/src/codegen.ts" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/compiler-core/src/codegen.ts</a></p><h4 id="vue2-源码中找答案-compiler-codegen-index-ts" tabindex="-1">vue2 源码中找答案：<code>compiler/codegen/index.ts</code> <a class="header-anchor" href="#vue2-源码中找答案-compiler-codegen-index-ts" aria-label="Permalink to &quot;vue2 源码中找答案：\`compiler/codegen/index.ts\`&quot;">​</a></h4><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">item</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> items</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#C678DD;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">condition</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>做个测试如下</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Vue事件处理&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;demo&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;v-for和v-if谁的优先级高？应该如何正确使用避免性能问题？&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			&lt;!-- &lt;p v-for=&quot;child in children&quot; v-if=&quot;isFolder&quot;&gt;{{child.title}}&lt;/p&gt; --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;isFolder&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;child in children&quot;</span><span style="color:#ABB2BF;">&gt;{{ child.title }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;../../dist/vue.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 创建实例</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#demo&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">				data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;"> }] };</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#E06C75;">				computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">					isFolder</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">						return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">render</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>两者同级时，渲染函数如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> anonymous</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	with</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> _c</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&quot;div&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			{ </span><span style="color:#E06C75;">attrs</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;demo&quot;</span><span style="color:#ABB2BF;"> } },</span></span>
<span class="line"><span style="color:#ABB2BF;">			[</span></span>
<span class="line"><span style="color:#61AFEF;">				_c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;h1&quot;</span><span style="color:#ABB2BF;">, [</span></span>
<span class="line"><span style="color:#61AFEF;">					_v</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;v-for和v-if谁的优先 级高？应该如何正确使用避免性能问题？&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">				]),</span></span>
<span class="line"><span style="color:#61AFEF;">				_v</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">				_l</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">child</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> isFolder</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> _c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;">, [</span><span style="color:#61AFEF;">_v</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">_s</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">child</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">))]) </span><span style="color:#C678DD;">:</span><span style="color:#61AFEF;"> _e</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">				}),</span></span>
<span class="line"><span style="color:#ABB2BF;">			],</span></span>
<span class="line"><span style="color:#D19A66;">			2</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>_l 包含了 isFolder 的条件判断</p></blockquote><p>两者不同级时，渲染函数如下</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> anonymous</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	with</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> _c</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&quot;div&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			{ </span><span style="color:#E06C75;">attrs</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;demo&quot;</span><span style="color:#ABB2BF;"> } },</span></span>
<span class="line"><span style="color:#ABB2BF;">			[</span></span>
<span class="line"><span style="color:#61AFEF;">				_c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;h1&quot;</span><span style="color:#ABB2BF;">, [</span></span>
<span class="line"><span style="color:#61AFEF;">					_v</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;v-for和v-if谁的优先 级高？应该如何正确使用避免性能问题？&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">				]),</span></span>
<span class="line"><span style="color:#61AFEF;">				_v</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">				isFolder</span></span>
<span class="line"><span style="color:#C678DD;">					?</span><span style="color:#61AFEF;"> _l</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">child</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">							return</span><span style="color:#61AFEF;"> _c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;">, [</span><span style="color:#61AFEF;">_v</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">_s</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">child</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">))]);</span></span>
<span class="line"><span style="color:#ABB2BF;">					  })</span></span>
<span class="line"><span style="color:#C678DD;">					:</span><span style="color:#61AFEF;"> _e</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">			],</span></span>
<span class="line"><span style="color:#D19A66;">			2</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><blockquote><p>先判断了条件再看是否执行<code>_l</code></p></blockquote><p><strong>结论：</strong></p><p>1.显然 v-for 优先于 v-if 被解析（把你是怎么知道的告诉面试官）</p><p>2.如果同时出现，每次渲染都会先执行循环再判断条件，无论如何循环都不可避免，浪费了性能。</p><h2 id="v-if-和-v-for-为什么不建议放在一起使用" tabindex="-1">v-if 和 v-for 为什么不建议放在一起使用？ <a class="header-anchor" href="#v-if-和-v-for-为什么不建议放在一起使用" aria-label="Permalink to &quot;v-if 和 v-for 为什么不建议放在一起使用？&quot;">​</a></h2><p><strong>Vue 2 中</strong>：<code>v-for</code>的优先级比<code>v-if</code>高，这意味着<code>v-if</code>将分别重复运行于每一个<code>v-for</code>循环中。如果要遍历的数组很大，而真正要展示的数据很少时，将造成很大的性能浪费。</p><p><strong>Vue 3 中</strong>：则完全相反，<code>v-if</code>的优先级高于<code>v-for</code>，所以<code>v-if</code>执行时，它调用的变量还不存在，会导致异常。</p><p>通常有两种情况导致要这样做：</p><ul><li>为了过滤列表中的项目，比如：<code>v-for = &quot;user in users&quot; v-if = &quot;user.active&quot;</code>。这种情况，可以定义一个计算属性，让其返回过滤后的列表即可。</li><li>为了避免渲染本该被隐藏的列表，比如<code>v-for = &quot;user in users&quot; v-if = &quot;showUsersFlag&quot;</code>。这种情况，可以将<code>v-if</code>移至容器元素上或在外面包一层<code>template</code>即可。</li></ul><h2 id="vue2-和-vue3-怎样挂载全局属性" tabindex="-1">Vue2 和 Vue3 怎样挂载全局属性 <a class="header-anchor" href="#vue2-和-vue3-怎样挂载全局属性" aria-label="Permalink to &quot;Vue2 和 Vue3 怎样挂载全局属性&quot;">​</a></h2><h3 id="在vue2中" tabindex="-1">在Vue2中 <a class="header-anchor" href="#在vue2中" aria-label="Permalink to &quot;在Vue2中&quot;">​</a></h3><p>可以通过将一些<code>公共属性</code>挂载到<code>Vue</code>的原型上，实现各个组件的共享，在组件中可以通过<code>this</code>来访问。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;a&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="在vue3中" tabindex="-1">在Vue3中 <a class="header-anchor" href="#在vue3中" aria-label="Permalink to &quot;在Vue3中&quot;">​</a></h3><p>不再导出<code>Vue构造函数了</code>，并且在<code>composition API</code>中无法使用<code>this</code>，因此如果我们想挂载全局属性，应该使用这种方法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 添加</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createApp</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./App.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">globalProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;a&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">getCurrentInstance</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getCurrentInstance</span><span style="color:#ABB2BF;">().</span><span style="color:#E5C07B;">appContext</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">globalProperties</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="v-if-和-v-show-的相同点和区别" tabindex="-1">v-if 和 v-show 的相同点和区别 <a class="header-anchor" href="#v-if-和-v-show-的相同点和区别" aria-label="Permalink to &quot;v-if 和 v-show 的相同点和区别&quot;">​</a></h2><h3 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h3><p>都可以动态判断来控制DOM元素的显示</p><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><h4 id="_1-控制手段不同" tabindex="-1">1.控制手段不同 <a class="header-anchor" href="#_1-控制手段不同" aria-label="Permalink to &quot;1.控制手段不同&quot;">​</a></h4><ul><li><code>v-if</code>不会渲染 DOM 元素，隐藏是：直接删除 DOM元素，显示再重新渲染DOM，切换渲染消耗更高。</li><li><code>v-show</code>操作的是：加载页面时先渲染DOM元素(初始渲染消耗更高)，通过给DOM元素添加样式(display: none)，切换当前 DOM 的显示和隐藏，但DOM元素仍然存在。</li></ul><h4 id="_2-编译过程不同" tabindex="-1">2.编译过程不同 <a class="header-anchor" href="#_2-编译过程不同" aria-label="Permalink to &quot;2.编译过程不同&quot;">​</a></h4><p><code>v-if</code>编译过程：切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重建内部的事件监听和子组件；</p><p><code>v-show</code>编译过程：只是简单的基于 css 样式切换显示和隐藏(在 display: none 和 display: block 之间切换)。</p><h4 id="_3-编译条件不同" tabindex="-1">3.编译条件不同 <a class="header-anchor" href="#_3-编译条件不同" aria-label="Permalink to &quot;3.编译条件不同&quot;">​</a></h4><p><code>v-if</code> 是Vue 底层的编译，是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译;</p><p><code>v-show</code> 是在任何条件下，无论首次条件是否为真，都被编译，然后被缓存，而且 DOM 元素保留；</p><h4 id="_4-触发生命周期不同" tabindex="-1">4.触发生命周期不同 <a class="header-anchor" href="#_4-触发生命周期不同" aria-label="Permalink to &quot;4.触发生命周期不同&quot;">​</a></h4><p><code>v-show</code>由 false 变为 true 的时候不会触发组件的生命周期；</p><p><code>v-if</code>由 false 变为 true 的时候，触发组件的<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>钩子，由 true 变为 false 的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>钩子。</p><h4 id="_5-性能消耗不同" tabindex="-1">5.性能消耗不同 <a class="header-anchor" href="#_5-性能消耗不同" aria-label="Permalink to &quot;5.性能消耗不同&quot;">​</a></h4><p><code>v-if</code>有更高的切换消耗；</p><p><code>v-show</code>有更高的初始渲染消耗。</p><h4 id="_6-综上使用场景" tabindex="-1">6.综上使用场景： <a class="header-anchor" href="#_6-综上使用场景" aria-label="Permalink to &quot;6.综上使用场景：&quot;">​</a></h4><p><code>v-show</code>在初始渲染时有更高的开销，但是切换开销很小，如果需要非常频繁地切换，则使用<code>v-show</code>较好，如：手风琴菜单，tab 页签等；</p><p>如果在运行时条件很少改变，则使用<code>v-if</code>较好，如：用户登录之后，根据权限不同来显示不同的内容。</p><ul><li><p>当属性初始为 false 时，组件就不会被渲染，直到条件为 true ，并且切换条件时会触发销毁/挂载组件，所以总的来说在切换时开销更高，更适合不经常切换的场景。</p></li><li><p>并且基于 v-if 的这种惰性渲染机制，可以在必要的时候才去渲染组件，减少整个页面的初始渲染开销。</p></li></ul><h2 id="class-与-style-如何动态绑定" tabindex="-1">Class 与 Style 如何动态绑定 <a class="header-anchor" href="#class-与-style-如何动态绑定" aria-label="Permalink to &quot;Class 与 Style 如何动态绑定&quot;">​</a></h2><p><code>Class</code> 可以通过对象语法和数组语法进行动态绑定</p><h3 id="对象语法" tabindex="-1">对象语法： <a class="header-anchor" href="#对象语法" aria-label="Permalink to &quot;对象语法：&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">active</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">isActive</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;text-danger&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">hasError</span><span style="color:#ABB2BF;"> }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">  isActive</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  hasError</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="数组语法" tabindex="-1">数组语法： <a class="header-anchor" href="#数组语法" aria-label="Permalink to &quot;数组语法：&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">isActive</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> activeClass</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">errorClass</span><span style="color:#ABB2BF;">]</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">  activeClass</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;active&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  errorClass</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;text-danger&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>Style</code> 也可以通过对象语法和数组语法进行动态绑定</p><h3 id="对象语法-1" tabindex="-1">对象语法： <a class="header-anchor" href="#对象语法-1" aria-label="Permalink to &quot;对象语法：&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">style</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">activeColor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fontSize</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">fontSize</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;px&#39;</span><span style="color:#ABB2BF;"> }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">  activeColor</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;red&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  fontSize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">30</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="数组语法-1" tabindex="-1">数组语法： <a class="header-anchor" href="#数组语法-1" aria-label="Permalink to &quot;数组语法：&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">style</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">styleColor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">styleSize</span><span style="color:#ABB2BF;">]</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">  styleColor</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">     color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;red&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">   },</span></span>
<span class="line"><span style="color:#E06C75;">  styleSize</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">     fontSize</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;23px&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="vue-中常见的修饰符" tabindex="-1">Vue 中常见的修饰符 <a class="header-anchor" href="#vue-中常见的修饰符" aria-label="Permalink to &quot;Vue 中常见的修饰符&quot;">​</a></h2><p>在 vue 中修饰符可以分为 3 类：</p><ul><li>事件修饰符</li><li>按键修饰符</li><li>鼠标修饰符</li><li>表单修饰符</li></ul><h3 id="_1-事件修饰符" tabindex="-1">（1）事件修饰符 <a class="header-anchor" href="#_1-事件修饰符" aria-label="Permalink to &quot;（1）事件修饰符&quot;">​</a></h3><p>在事件处理程序中调用 <code>event.preventDefault</code> 或 <code>event.stopPropagation</code> 方法是非常常见的需求。尽管可以在 <code>methods</code> 中轻松实现这点，但更好的方式是： <code>methods</code> 只有纯粹的数据逻辑，而不是去处理 <code>DOM</code> 事件细节。</p><p>为了解决这个问题，<code>vue</code> 为 <code>v-on</code> 提供了事件修饰符。通过由点 . 表示的指令后缀来调用修饰符。</p><ul><li><code>.stop</code>：调用 event.stopPropagation()，阻止事件冒泡；</li><li><code>.prevent</code>：调用 event.preventDefault()，阻止默认事件；</li><li><code>.self</code>：只有事件在当前元素自身触发时，才会调用函数；</li><li><code>.capture</code>：添加事件侦听器时使用 capture 模式--捕获模式——事件捕获由外到内：内部元素的事件在被内部元素处理<code>之前</code>，先被<code>外部元素处理</code>；</li><li><code>.once</code>：该事件只会触发一次；</li><li><code>.passive</code>：以 { passive: true } 模式添加侦听器：一般用于<code>触摸事件</code>的监听器，可以用来<code>改善移动端设备的滚动性能</code>；</li><li><code>.{keyCode | keyAlias}</code>：只当事件是从特定键触发时才触发回调。</li><li><code>.native</code>：监听组件根元素的原生事件。</li></ul><p>（1）<code>.stop</code></p><p>阻止单击事件继续传播。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!--这里只会触发a--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">divClick</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;a v-on:click.stop=&quot;aClick&quot;&gt;点击&lt;/a&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>（2）<code>.prevent</code></p><p>阻止标签的默认行为。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">a</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.baidu.com&quot;</span><span style="color:#D19A66;"> v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">prevent</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">aClick</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>（3）<code>.capture</code></p><p>事件先在有<code>.capture</code>修饰符的节点上触发，然后在其包裹的内部节点中触发。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!--这里先执行divClick事件，然后再执行aClick事件--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">divClick</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;a v-on:click=&quot;aClick&quot;&gt;点击&lt;/a&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>（4）<code>.self</code></p><p>只当在 event.target 是当前元素自身时触发处理函数，即事件不是从内部元素触发的。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!--在a标签上点击时只会触发aClick事件，只有点击phrase的时候才会触发divClick事件--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">self</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">divClick</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;phrase&lt;a v-on:click=&quot;aClick&quot;&gt;点击&lt;/a&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>（5）<code>.once</code></p><p>不像其它只能对原生的 DOM 事件起作用的修饰符，<code>.once</code> 修饰符还能被用到自定义的组件事件上，表示当前事件只触发一次。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">a</span><span style="color:#D19A66;"> v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">once</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">aClick</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>（6）<code>.passive</code></p><p><code>.passive</code> 修饰符尤其能够提升移动端的性能</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 而不会等待 \`onScroll\` 完成 --&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 这其中包含 \`event.preventDefault()\` 的情况 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">scroll</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">passive</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">onScroll</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;...&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>（7）<code>.native</code></p><p>如果是在自己封装的组件或者是使用一些第三方的 UI 库时，会发现并不起效果，这时就需要用<code>.native</code> 修饰符了，如：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">el-input</span></span>
<span class="line"><span style="color:#D19A66;">	v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">inputName</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#D19A66;">	placeholder</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;搜索你的文件&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#D19A66;">keyup</span><span style="color:#ABB2BF;">.enter.</span><span style="color:#D19A66;">native</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">searchFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">el-input</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-按键键值修饰符" tabindex="-1">（2）按键键值修饰符 <a class="header-anchor" href="#_2-按键键值修饰符" aria-label="Permalink to &quot;（2）按键键值修饰符&quot;">​</a></h3><ul><li><code>.enter</code>：仅在<code>Enter</code>键时调用；</li><li><code>.page-down</code>：仅在<code>PageDown</code>键时调用；</li><li><code>.tab</code>：仅在<code>tab</code>键(制表键)时调用；</li><li><code>.delete</code>：仅在<code>delete</code>(删除)或 <code>Backspace</code>(退格)键时调用；</li><li><code>.esc</code>：仅在<code>esc</code>(返回)键时调用；</li><li><code>.space</code>：仅在<code>space</code>(空格)键时调用；</li><li><code>.up</code>：仅在<code>up</code>(上)键时调用；</li><li><code>.down</code>：仅在<code>down</code>(下)键时调用；</li><li><code>.ctrl</code>：仅在<code>ctrl</code>键时调用；</li><li><code>.alt</code>：仅在<code>alt</code>键时调用；</li><li><code>.shift</code>：仅在<code>shift</code>键时调用；</li><li><code>.meta</code>：在<code>Windows</code>上是<code>Win键</code>，在<code>Mac</code>上是<code>Command键</code>，不同机器上键位不同。</li></ul><h3 id="_3-鼠标按键修饰符" tabindex="-1">（3）鼠标按键修饰符 <a class="header-anchor" href="#_3-鼠标按键修饰符" aria-label="Permalink to &quot;（3）鼠标按键修饰符&quot;">​</a></h3><ul><li><code>.left</code>：鼠标左键触发；</li><li><code>.right</code>：鼠标右键触发；</li><li><code>.middle</code>：鼠标中键触发；</li></ul><h3 id="_4-表单修饰符" tabindex="-1">（4）表单修饰符 <a class="header-anchor" href="#_4-表单修饰符" aria-label="Permalink to &quot;（4）表单修饰符&quot;">​</a></h3><p>vue 同样也为表单控件也提供了修饰符，常见的有 <code>.lazy</code>、<code>.number</code> 和 <code>.trim</code></p><ul><li><code>.lazy</code>：在文本框失去焦点时才会渲染</li><li><code>.number</code>：将文本框中所输入的内容转换为 number 类型</li><li><code>.trim</code>：可以自动过滤输入首尾的空格</li></ul><p>（1）<code>.lazy</code></p><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 ，可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件之后进行同步:</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">lazy</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>（2）<code>.number</code></p><p>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">number</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;number&quot;</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>（3）<code>.trim</code></p><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">trim</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5-双向绑定修饰符-sync-修饰符" tabindex="-1">（5）双向绑定修饰符：<code>.sync</code> 修饰符 <a class="header-anchor" href="#_5-双向绑定修饰符-sync-修饰符" aria-label="Permalink to &quot;（5）双向绑定修饰符：\`.sync\` 修饰符&quot;">​</a></h3><p><code>.sync</code>修饰符是Vue2的<code>v-bind:xxx</code>和<code>@update:xxx</code>的语法糖</p><blockquote><p>在 Vue3 中已被移除，使用<code>v-model:xxx替代</code>。</p></blockquote><p>Vue2中使用</p><p>有时候，我们需要对一个 prop 进行“双向绑定”，这时可以使用.sync 来实现。</p><p>v-model 默认只能双向绑定一个属性，通过.sync 修饰符，就可以绑定多个属性</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">my-com</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">属性名</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sync</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">xxx</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>my-com 组件里通过：<code>$emit(&#39;update:属性名&#39;, value)</code> 来触发。</p><p>完整例子：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;HelloWorld&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			default</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		changeName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;update:name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;child&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sync</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Child&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		HelloWorld</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 等同于 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">update</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">changeName</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		HelloWorld</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		changeName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><h4 id="v-on-指令常用修饰符" tabindex="-1">v-on 指令常用修饰符： <a class="header-anchor" href="#v-on-指令常用修饰符" aria-label="Permalink to &quot;v-on 指令常用修饰符：&quot;">​</a></h4><ul><li>.stop：调用 event.stopPropagation()，禁止事件冒泡。</li><li>.prevent：调用 event.preventDefault()，阻止事件默认行为。</li><li>.capture：添加事件侦听器时使用 capture 模式。</li><li>.self：只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li>.{keyCode | keyAlias}：只当事件是从特定键触发时才触发回调。</li><li>.native：监听组件根元素的原生事件。</li><li>.once：只触发一次回调。</li><li>.left： (2.2.0) 只当点击鼠标左键时触发。</li><li>.right：(2.2.0) 只当点击鼠标右键时触发。</li><li>.middle：(2.2.0) 只当点击鼠标中键时触发。</li><li>.passive(2.3.0) 以 { passive: true } 模式添加侦听器</li></ul><p>注意： 如果是在自己封装的组件或者是使用一些第三方的 UI 库时，会发现并不起效果，这时就需要用\`·.native 修饰符了，如：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">el-input</span></span>
<span class="line"><span style="color:#D19A66;">  v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">inputName</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#D19A66;">  placeholder</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;搜索你的文件&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#D19A66;">keyup</span><span style="color:#ABB2BF;">.enter.</span><span style="color:#D19A66;">native</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">searchFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">el-input</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="v-bind-指令常用修饰符" tabindex="-1">v-bind 指令常用修饰符： <a class="header-anchor" href="#v-bind-指令常用修饰符" aria-label="Permalink to &quot;v-bind 指令常用修饰符：&quot;">​</a></h4><p>.prop - 被用于绑定 DOM 属性 (property)。(差别在哪里？)</p><p>.camel - (2.1.0+) 将 kebab-case 特性名转换为 camelCase. (从 2.1.0 开始支持)</p><p>.sync (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。</p><h4 id="v-model-指令常用修饰符" tabindex="-1">v-model 指令常用修饰符： <a class="header-anchor" href="#v-model-指令常用修饰符" aria-label="Permalink to &quot;v-model 指令常用修饰符：&quot;">​</a></h4><p>.lazy - 取代 input 监听 change 事件</p><p>.number - 输入字符串转为数字</p><p>.trim - 输入首尾空格过滤</p><h2 id="vue-如何监听键盘事件" tabindex="-1">Vue 如何监听键盘事件？ <a class="header-anchor" href="#vue-如何监听键盘事件" aria-label="Permalink to &quot;Vue 如何监听键盘事件？&quot;">​</a></h2><p>参考回答：</p><h4 id="_1-keyup-方法" tabindex="-1">1.@keyup. 方法 <a class="header-anchor" href="#_1-keyup-方法" aria-label="Permalink to &quot;1.@keyup. 方法&quot;">​</a></h4><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">input</span></span>
<span class="line"><span style="color:#D19A66;">		ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myInput&quot;</span></span>
<span class="line"><span style="color:#D19A66;">		type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#D19A66;">		value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;hello world&quot;</span></span>
<span class="line"><span style="color:#D19A66;">		autofocus</span></span>
<span class="line"><span style="color:#ABB2BF;">		@</span><span style="color:#D19A66;">keyup</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">enter</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">handleKey</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		handleKey</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_2-adeventlistener" tabindex="-1">2.adEventListener <a class="header-anchor" href="#_2-adeventlistener" aria-label="Permalink to &quot;2.adEventListener&quot;">​</a></h4><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;keyup&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handleKey</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	beforeDestroy</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;keyup&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handleKey</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		handleKey</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="为何-v-for-中要用-key" tabindex="-1">为何 v-for 中要用 key <a class="header-anchor" href="#为何-v-for-中要用-key" aria-label="Permalink to &quot;为何 v-for 中要用 key&quot;">​</a></h2><ul><li>必须用 key，且不能是 index 和 random，因为使用 index 会导致 bug</li><li>diff 算法中通过 tag 和 key 来判断，是否是 sameNode</li><li>减少渲染次数，提升渲染性能</li></ul><h2 id="在给-vue-中的元素设置-key-值时可以使用-math-的-random-方法么" tabindex="-1">在给 vue 中的元素设置 key 值时可以使用 Math 的 random 方法么？ <a class="header-anchor" href="#在给-vue-中的元素设置-key-值时可以使用-math-的-random-方法么" aria-label="Permalink to &quot;在给 vue 中的元素设置 key 值时可以使用 Math 的 random 方法么？&quot;">​</a></h2><p>参考答案：</p><p><code>random</code> 是生成随机数，有一定概率多个 \`item 会生成相同的值，不能保证唯一。</p><p>如果是根据数据来生成 <code>item</code>，数据具有 <code>id</code> 属性，那么就可以使用 <code>id</code> 来作为 <code>key</code>。</p><p>如果不是根据数据生成 <code>item</code>，那么最好的方式就是使用时间戳来作为 <code>key</code>。或者使用诸如 <code>uuid</code> 之类的库来生成唯一的 <code>id</code>。</p><h2 id="vue-事件中如何使用-event-对象" tabindex="-1">Vue 事件中如何使用 event 对象？ <a class="header-anchor" href="#vue-事件中如何使用-event-对象" aria-label="Permalink to &quot;Vue 事件中如何使用 event 对象？&quot;">​</a></h2><p>注意在事件中要使用 $ 符号</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">a</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;javascript:void(0);&quot;</span><span style="color:#D19A66;"> data-id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;12&quot;</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">showEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$event</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;event&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// js部分 </span></span>
<span class="line"><span style="color:#61AFEF;">showEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">){ </span><span style="color:#7F848E;font-style:italic;">// 获取自定义data-id</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dataset</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 阻止事件冒泡</span></span>
<span class="line"><span style="color:#E5C07B;">    event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stopPropagation</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//阻止默认 </span></span>
<span class="line"><span style="color:#E5C07B;">    event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;">() </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="vue-如何监听键盘事件中的按键" tabindex="-1">Vue 如何监听键盘事件中的按键？ <a class="header-anchor" href="#vue-如何监听键盘事件中的按键" aria-label="Permalink to &quot;Vue 如何监听键盘事件中的按键？&quot;">​</a></h2><p>在 Vue 中，已经为常用的按键设置了别名，这样我们就无需再去匹配 keyCode ，直接使用别名就能监听按键的事件。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">keyup</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">enter</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">&quot;&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><table><thead><tr><th>别名</th><th>实际键值</th></tr></thead><tbody><tr><td>.delete</td><td>delete（删除）/BackSpace（退格）</td></tr><tr><td>.tab</td><td>Tab</td></tr><tr><td>.enter</td><td>Enter（回车）</td></tr><tr><td>.esc</td><td>Esc（退出）</td></tr><tr><td>.space</td><td>Space（空格键）</td></tr><tr><td>.left</td><td>Left（左箭头）</td></tr><tr><td>.up</td><td>Up（上箭头）</td></tr><tr><td>.right</td><td>Right（右箭头）</td></tr><tr><td>.down</td><td>Down（下箭头）</td></tr><tr><td>.ctrl</td><td>Ctrl</td></tr><tr><td>.alt</td><td>Alt</td></tr><tr><td>.shift</td><td>Shift</td></tr><tr><td>.meta</td><td>(window 系统下是 window 键，mac 下是 command 键)</td></tr></tbody></table><p>另外，Vue 中还支持组合写法：</p><table><thead><tr><th>组合写法</th><th>按键组合</th></tr></thead><tbody><tr><td>@keyup.alt.67=”function”</td><td>Alt + C</td></tr><tr><td>@click.ctrl=”function”</td><td>Ctrl + Click</td></tr></tbody></table><p>但是，如果是在自己封装的组件或者是使用一些第三方的 UI 库时，会发现并不起效果，这时就需要用到 .native 修饰符了，如：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">el-input</span></span>
<span class="line"><span style="color:#D19A66;">	v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">inputName</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#D19A66;">	placeholder</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;搜索你的文件&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#D19A66;">keyup</span><span style="color:#ABB2BF;">.enter.</span><span style="color:#D19A66;">native</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">searchFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">el-input</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果遇到 <code>.native</code> 修饰符也无效的情况，可能就需要用到 <code>$listeners</code> 了。</p><h2 id="对-vue-的spa单页应用的理解-有什么优缺点" tabindex="-1">对 Vue 的SPA单页应用的理解？有什么优缺点 <a class="header-anchor" href="#对-vue-的spa单页应用的理解-有什么优缺点" aria-label="Permalink to &quot;对 Vue 的SPA单页应用的理解？有什么优缺点&quot;">​</a></h2><ul><li>只有一个页面，多个页面组件</li><li>页面切换速度快，用户体验较好，服务端压力小</li><li>不利于 SEO 搜索引擎优化</li><li>首屏渲染时间会相对较长</li></ul><p>单页 Web 应用（single page web application，简写成：SPA）是一种前端应用程序的架构模式，就是只有一张 Web 页面的应用，通过在加载单个 HTML 页面，并在用户与应用程序交互时，使用 <code>JavaScript</code> 动态地更新页面内容的 Web 应用程序，从而实现无刷新的用户体验。</p><p>我们开发的<code>Vue</code>项目大多是借助个官方的<code>CLI</code>脚手架，快速搭建项目，直接通过<code>new Vue</code>构建一个实例，并将<code>el:&#39;#app&#39;</code>挂载参数传入，最后通过<code>npm run build</code>的方式打包后生成一个<code>index.html</code>，称这种只有一个<code>HTML</code>的页面为单页面应用。</p><h3 id="_1-spa概念" tabindex="-1">1.SPA概念 <a class="header-anchor" href="#_1-spa概念" aria-label="Permalink to &quot;1.SPA概念&quot;">​</a></h3><p><code>SPA（Single-page application）</code>，即单页面应用，它是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换时打断用户体验。在<code>SPA</code>中，所有必要的代码（HTML、JavaScript 和 CSS）都通过单个页面的加载而检索，或者根据需要（通常是响应用户操作）动态装载适当的资源并添加到页面。页面在任何时间点都不会重新加载，也不会将控制转移到其他页面。举个例子，就像一个杯子，上午装的是牛奶，中午装的是咖啡，下午装的是茶，变得始终是内容，杯子始终不变。</p><h3 id="_2-mpa概念" tabindex="-1">2.MPA概念 <a class="header-anchor" href="#_2-mpa概念" aria-label="Permalink to &quot;2.MPA概念&quot;">​</a></h3><p><code>MPA（Muti-page application）</code>，即多页面应用。在<code>MPA</code>中，每个页面都是一个主页面，都是独立的，每当访问一个页面时，都需要重新加载 Html、CSS、JS 文件，公共文件则根据需求按需加载。</p><h3 id="_3-spa与mpa的区别" tabindex="-1">3.<code>SPA</code>与<code>MPA</code>的区别： <a class="header-anchor" href="#_3-spa与mpa的区别" aria-label="Permalink to &quot;3.\`SPA\`与\`MPA\`的区别：&quot;">​</a></h3><table><thead><tr><th></th><th>SPA</th><th>MPA</th></tr></thead><tbody><tr><td>组成</td><td>一个主页面和多个页面片段</td><td>多个主页面</td></tr><tr><td>url 模式</td><td>hash 模式</td><td>history 模式</td></tr><tr><td>SEO 搜索引擎优化</td><td>难实现，可使用 SSR 方式改善</td><td>容易实现</td></tr><tr><td>数据传递</td><td>容易</td><td>通过 url、cookie、localStorage 等传递</td></tr><tr><td>页面切换</td><td>速度快，用户体验良好</td><td>切换加载资源，速度慢，用户体验差</td></tr><tr><td>维护成本</td><td>相对容易</td><td>相对复杂</td></tr></tbody></table><h3 id="_4-spa的优缺点" tabindex="-1">4.<code>SPA</code>的优缺点： <a class="header-anchor" href="#_4-spa的优缺点" aria-label="Permalink to &quot;4.\`SPA\`的优缺点：&quot;">​</a></h3><h4 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li><strong>用户体验好</strong>：<code>SPA</code> 提供了流畅、快速的用户体验，在页面加载后，只有需要的数据和资源会被加载，减少了页面刷新的延迟。</li><li><strong>响应式交互</strong>：由于 <code>SPA</code> 依赖于异步数据加载和前端路由，可以实现实时更新和动态加载内容，使用户可以快速地与应用程序交互。</li><li><strong>组件化—代码复用</strong>：<code>SPA</code> 通常采用组件化开发的方式，代码结构和组织方式更加规范化，提高了代码的可维护性和可扩展性。</li><li><strong>服务器负载较低</strong>：由于只有初始页面加载时需要从服务器获取 <code>HTML</code>、<code>CSS</code> 和 <code>JavaScript</code> 文件，减轻了服务器的负载。</li><li>具有桌面应用的即时性、网站的可移植性和可访问性</li><li>用户体验好、快，内容的改变不需要重新加载整个页面</li><li><strong>前后端分离</strong>：良好的前后端分离，分工更明确</li></ul><h4 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li><strong>首次加载时间(首次渲染速度相对较慢)</strong>：<code>SPA</code> 首次加载时需要下载较大的 <code>JavaScript</code> 文件，这可能导致初始加载时间较长。</li><li><strong>不利于SEO（搜索引擎优化—不利于搜索引擎的抓取）</strong>：由于 <code>SPA</code> 的内容是通过 <code>JavaScript</code> 动态生成的，单页页面，数据在前端渲染，搜索引擎的爬虫可能无法正确地获取和索引页面的内容。</li><li><strong>内存占用</strong>：<code>SPA</code> 在用户浏览应用程序时保持单个页面的状态，这可能导致较高的内存占用。</li><li><strong>安全性</strong>：由于 <code>SPA</code> 通常使用 <code>API</code> 进行数据获取，因此需要特别注意安全性。</li><li><strong>页面导航不可用</strong>：如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进后退功能，所以需要自 己建立堆栈管理）</li></ul><h2 id="spa-单页和多页面有什么区别" tabindex="-1">SPA 单页和多页面有什么区别 <a class="header-anchor" href="#spa-单页和多页面有什么区别" aria-label="Permalink to &quot;SPA 单页和多页面有什么区别&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p>SPA 单页面应用（SinglePage Web Application），指只有一个主页面的应用，一开始只需要加载一次 js、css 等相关资源。所有内容都包含在主页面，对每一个功能模块组件化。单页应用跳转，就是切换相关组件，仅仅刷新局部资源。</p><p>MPA 多页面应用 （MultiPage Application），指有多个独立页面的应用，每个页面必须重复加载 js、css 等相关资源。多页应用跳转，需要整页资源刷新。</p><h3 id="区别-1" tabindex="-1">区别 <a class="header-anchor" href="#区别-1" aria-label="Permalink to &quot;区别&quot;">​</a></h3><table><thead><tr><th>对比项\\模式</th><th>SPA</th><th>MPA</th></tr></thead><tbody><tr><td>结构</td><td>一个主页面 + 许多模块的组件</td><td>许多完整的页面</td></tr><tr><td>体验</td><td>页面切换快，体验佳；当初次加载文件过多时，需要做相关的调优。</td><td>页面切换慢，网速慢的时候，体验尤其不好</td></tr><tr><td>资源文件</td><td>组件公用的资源只需要加载一次</td><td>每个页面都要自己加载公用的资源</td></tr><tr><td>适用场景</td><td>对体验度和流畅度有较高要求的应用，不利于 SEO(可借助 SSR 优化SEO)</td><td>适用于对 SEO 要求较高的应用</td></tr><tr><td>过渡动画</td><td>Vue 提供了transition 的封装组件，容易实现</td><td>很难实现</td></tr><tr><td>内容更新</td><td>相关组件的切换，即局部更新</td><td>整体 HTML 的切换，费钱(重复HTTP 请求)</td></tr><tr><td>路由模式</td><td>可以使用 hash，也可以使用history</td><td>普通链接跳转</td></tr><tr><td>数据传递</td><td>因为单页面，使用全局变量就好(Vuex/Pinia)</td><td>cookie、localStorage等缓存方案，URL参数，调用接口保存等</td></tr><tr><td>相关成本</td><td>前期开发成本较高，后期维护较为容</td><td>前期开发成本低，后期维护就比较麻烦，因为可能一个功能需要改很多地方</td></tr></tbody></table><p><strong>页面加载方式</strong>：在多页面应用中，每个页面都是独立的 HTML 文件，每次导航时需要重新加载整个页面。而在 <code>SPA</code> 中，初始加载时只加载一个 HTML 页面，后续的导航通过 <code>JavaScript</code> 动态地更新页面内容，无需重新加载整个页面。</p><p><strong>用户体验</strong>：<code>SPA</code> 提供了流畅、快速的用户体验，因为页面切换时无需等待整个页面的重新加载，只有需要的数据和资源会被加载，减少了页面刷新的延迟。多页面应用则可能会有页面刷新的延迟，给用户带来较长的等待时间。</p><p><strong>代码复用</strong>：<code>SPA</code> 通常采用组件化开发的方式，可以在不同的页面中复用组件，提高代码的可维护性和可扩展性。多页面应用的每个页面都是独立的，组件复用的机会较少。</p><p><strong>路由管理</strong>：在多页面应用中，页面之间的导航和路由由服务器处理，每个页面对应一个不同的 <code>URL</code>。而在 <code>SPA</code> 中，前端负责管理页面的导航和路由，通过前端路由库（如 <code>React Router</code> 或 <code>Vue Router</code>）来管理不同路径对应的组件。</p><p><strong>SEO（搜索引擎优化）</strong>：由于多页面应用的每个页面都是独立的 HTML 文件，搜索引擎可以直接索引和抓取每个页面的内容，有利于搜索引擎优化。相比之下，<code>SPA</code> 的内容是通过 <code>JavaScript</code> 动态生成的，搜索引擎的爬虫可能无法正确地获取和索引页面的内容，需要采取额外的优化措施。</p><p><strong>服务器负载</strong>：<code>SPA</code> 只需初始加载时获取 <code>HTML</code>、<code>CSS</code> 和 <code>JavaScript</code> 文件，后续的页面更新和数据获取通常通过 API 请求完成，减轻了服务器的负载。而多页面应用每次导航都需要从服务器获取整个页面的内容。</p><h2 id="vue-中的-spa-应用如何优化首屏加载速度" tabindex="-1">vue 中的 spa 应用如何优化首屏加载速度? <a class="header-anchor" href="#vue-中的-spa-应用如何优化首屏加载速度" aria-label="Permalink to &quot;vue 中的 spa 应用如何优化首屏加载速度?&quot;">​</a></h2><p>优化首屏加载可以从这几个方面开始：</p><ul><li><strong>请求优化</strong>：CDN 将第三方的类库放到 CDN 上，能够大幅度减少生产环境中的项目体积，另外 CDN 能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。</li><li><strong>缓存</strong>：将长时间不会改变的第三方类库或者静态资源设置为强缓存，将 max-age 设置为一个非常长的时间，再将访问路径加上哈希达到哈希值变了以后保证获取到最新资源，好的缓存策略有助于减轻服务器的压力，并且显著的提升用户的体验</li><li><strong>gzip</strong>：开启 gzip 压缩，通常开启 gzip 压缩能够有效的缩小传输资源的大小。</li><li>http2：如果系统首屏同一时间需要加载的静态资源非常多，但是浏览器对同域名的 tcp 连接数量是有限制的(chrome 为 6 个)超过规定数量的 tcp 连接，则必须要等到之前的请求收到响应后才能继续发送，而 http2 则可以在多个 tcp 连接中并发多个请求没有限制，在一些网络较差的环境开启 http2 性能提升尤为明显。</li><li><strong>懒加载</strong>：当 url 匹配到相应的路径时，通过 import 动态加载页面组件，这样首屏的代码量会大幅减少，webpack 会把动态加载的页面组件分离成单独的一个 chunk.js 文件</li><li><strong>预渲染</strong>：由于浏览器在渲染出页面之前，需要先加载和解析相应的 html、css 和 js 文件，为此会有一段白屏的时间，可以添加 loading，或者骨架屏幕尽可能的减少白屏对用户的影响体积优化</li><li><strong>合理使用第三方库</strong>：对于一些第三方 ui 框架、类库，尽量使用按需加载，减少打包体积</li><li><strong>使用可视化工具分析打包后的模块体积</strong>：<code>webpack-bundle- analyzer</code> 这个插件在每次打包后能够更加直观的分析打包后模块的体积，再对其中比较大的模块进行优化</li><li><strong>提高代码使用率</strong>：利用代码分割，将脚本中无需立即调用的代码在代码构建时转变为异步加载的过程</li><li><strong>封装</strong>：构建良好的项目架构，按照项目需求就行全局组件，插件，过滤器，指令，utils 等做一 些公共封装，可以有效减少我们的代码量，而且更容易维护资源优化</li><li><strong>图片懒加载</strong>：使用图片懒加载可以优化同一时间减少 http 请求开销，避免显示图片导致的画面抖动，提高用户体验</li><li><strong>使用 svg 图标</strong>：相对于用一张图片来表示图标，svg 拥有更好的图片质量，体积更小，并且不需要开启额外的 http 请求</li><li><strong>压缩图片</strong>：可以使用 <code>image-webpack-loader</code>，在用户肉眼分辨不清的情况下一定程度上压缩图片</li><li>减小入口文件积</li><li>静态资源本地缓存</li><li>UI 框架按需加载</li><li>图片资源的压缩</li><li>组件重复打包</li><li>开启 GZip 压缩</li><li>使用 SSR</li></ul><p><code>SPA页面</code>首页白屏的原因是因为<code>所有资源</code>都需要在首页加载，因此优化首页白屏就是要优化首页资源的加载。</p><ul><li>第三方库如果能进行<code>按需引入</code>就采用按需引入，如果不行可以采取<code>CDN</code>的方式引入；</li><li>尽量减少图片资源，使用字体图标或精灵图，对大图使用 TinyPng 对图片资源进行压缩，并且使用 CDN 引入图片；</li><li>代码层面，检查首页代码是否有<code>长耗时的同步任务</code>阻塞了页面的渲染；</li><li>开启 gzip 压缩；</li><li>打包出来的 index.html 文件中的<code>script标签</code>，使用<code>defer异步加载</code>或者放到<code>body</code>之后；</li><li>利用 webpack 等打包工具进行分包，避免首页一次性加载太多资源；</li></ul><h1 id="二、vue-组件" tabindex="-1">二、Vue 组件 <a class="header-anchor" href="#二、vue-组件" aria-label="Permalink to &quot;二、Vue 组件&quot;">​</a></h1><ul><li>生命周期</li><li>组件注册和通信</li><li>props（类型和默认值）</li><li>自定义事件</li><li>插槽和动态组件</li><li>异步组件和高级异步组件</li><li>Vue 实例和生命周期</li><li>v-on 和$emit</li></ul><h2 id="vue-实例挂载的过程中发生了什么" tabindex="-1">Vue 实例挂载的过程中发生了什么? <a class="header-anchor" href="#vue-实例挂载的过程中发生了什么" aria-label="Permalink to &quot;Vue 实例挂载的过程中发生了什么?&quot;">​</a></h2><h3 id="分析-1" tabindex="-1">分析 <a class="header-anchor" href="#分析-1" aria-label="Permalink to &quot;分析&quot;">​</a></h3><p>挂载过程完成了最重要的两件事：</p><ol><li>初始化</li><li>建立更新机制</li></ol><p>把这两件事说清楚即可！</p><h3 id="回答范例-2" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-2" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><ol><li>挂载过程指的是 app.mount()过程，这个过程中整体上做了两件事：<strong>初始化</strong>和<strong>建立更新机制</strong></li><li>初始化会创建组件实例、初始化组件状态，创建各种响应式数据</li><li>建立更新机制这一步会立即执行一次组件更新函数，这会首次执行组件渲染函数并执行 patch 将前面获得 vnode 转换为 dom；同时首次执行渲染函数会创建它内部响应式数据之间和组件更新函数之间的依赖关系，这使得以后数据变化时会执行对应的更新函数。</li></ol><h3 id="知其所以然" tabindex="-1">知其所以然 <a class="header-anchor" href="#知其所以然" aria-label="Permalink to &quot;知其所以然&quot;">​</a></h3><p>测试代码，test-v3.html mount 函数定义</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiCreateApp.ts%23L277-L278" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiCreateApp.ts%23L277-L278</a></p><p>首次 render 过程</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L2303-L2304" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L2303-L2304</a></p><h3 id="可能的追问" tabindex="-1">可能的追问 <a class="header-anchor" href="#可能的追问" aria-label="Permalink to &quot;可能的追问&quot;">​</a></h3><ol><li>响应式数据怎么创建</li><li>依赖关系如何建立</li></ol><h2 id="vue生命周期" tabindex="-1">Vue生命周期 <a class="header-anchor" href="#vue生命周期" aria-label="Permalink to &quot;Vue生命周期&quot;">​</a></h2><p>vue 生命周期是指 Vue 实例对象从创建之初到销毁的过程，Vue 所有功能的实现都是围绕其生命周期进行的，在生命周期的不同阶段调用对应的钩子函数实现组件数据管理和 DOM 渲染两大重要功能。</p><p>Vue 的生命周期：从开始创建、初始化数据、编译模板、挂载 Dom→ 渲染、更新 → 渲染、销毁等一系列过程。</p><h3 id="vue2-生命周期" tabindex="-1">Vue2 生命周期 <a class="header-anchor" href="#vue2-生命周期" aria-label="Permalink to &quot;Vue2 生命周期&quot;">​</a></h3><ul><li><p>Vue2 生命周期：<a href="https://cn.vuejs.org/guide/essentials/lifecycle.html#lifecycle-diagram" target="_blank" rel="noreferrer">生命周期钩子 | Vue.js (vuejs.org)</a></p></li><li><p>Vue2 生命周期图示：<a href="https://v2.cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA" target="_blank" rel="noreferrer">Vue 实例 — Vue.js (vuejs.org)</a></p></li></ul><p><img src="`+E+`" alt="vue2生命周期"></p><p>Vue2 的生命周期可以分为 <code>8</code> 个阶段：**创建前/后，载入前/后，更新前/后，销毁前/后。**以及<code>keep-alive</code> 组件的独有生命周期、errorCaptured：捕获一个来自子孙组件的错误时被调用。</p><p>vue2 生命周期的这八个阶段：</p><h4 id="_1-创建前-beforecreate" tabindex="-1">1）创建前(beforeCreate) <a class="header-anchor" href="#_1-创建前-beforecreate" aria-label="Permalink to &quot;1）创建前(beforeCreate)&quot;">​</a></h4><p>对应的钩子函数为 beforeCreate。</p><p>此阶段为实例初始化之后，此时的数据观测和初始化事件还未开始，不能访问<code>data</code>、<code>props</code>、<code>computed</code>、<code>watch</code>、<code>methods</code>上的数据方法，不能获得 DOM 节点，<code>this</code>也无法访问。</p><h4 id="_2-创建后-created" tabindex="-1">2）创建后（created） <a class="header-anchor" href="#_2-创建后-created" aria-label="Permalink to &quot;2）创建后（created）&quot;">​</a></h4><p>对应的钩子函数为 created。在这个阶段 vue 实例已经创建，仍然不能获取 DOM 元素。</p><p>实例创建完成，可以访问<code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code>上的数据方法，但此时渲染节点还未挂在到 DOM 上，所以不能访问DOM。</p><p>在这里可以通过 <code>vm.$nextTick</code> 来访问 DOM。</p><h4 id="_3-载入前-beforemount" tabindex="-1">3）载入前（beforeMount） <a class="header-anchor" href="#_3-载入前-beforemount" aria-label="Permalink to &quot;3）载入前（beforeMount）&quot;">​</a></h4><p>对应的钩子函数是 beforeMount。</p><p>在这一阶段，虽然依然得不到具体的 DOM 元素，但 vue 挂载的根节点已经创建，<code>template模板编译</code>已导入渲染函数编译。下面 vue 对 DOM 的操作将围绕这个根元素继续进行；</p><p>此时开始创建 <code>VDOM</code> 虚拟DOM，但还没有渲染到页面上(即将开始渲染)</p><p>beforeMount 这个阶段是过渡性的，一般一个项目只能用到一两次。</p><h4 id="_4-载入后-mounted" tabindex="-1">4）载入后（mounted） <a class="header-anchor" href="#_4-载入后-mounted" aria-label="Permalink to &quot;4）载入后（mounted）&quot;">​</a></h4><p>对应的钩子函数是 mounted。mounted 是平时我们使用最多的函数了，一般我们的异步请求都写在这里。在这个阶段，数据和 DOM 都已被渲染出来。</p><p>Vue 实例已经挂载完毕，虚拟DOM 已渲染到页面上，数据完成双向绑定，可以访问操作 DOM元素；访问子组件等：使用$refs 属性对 DOM 进行操作。。</p><h4 id="_5-更新前-beforeupdate" tabindex="-1">5）更新前（beforeUpdate） <a class="header-anchor" href="#_5-更新前-beforeupdate" aria-label="Permalink to &quot;5）更新前（beforeUpdate）&quot;">​</a></h4><p>对应的钩子函数是 beforeUpdate。</p><p>在这一阶段，vue 遵循数据驱动 DOM 的原则。beforeUpdate 函数在数据更新后虽然没立即更新数据，但是 DOM 中的数据会改变，这是 Vue 双向数据绑定的作用。</p><p>发生在更新之前，也就是响应式数据发生更新，虚拟 dom 重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</p><p>此时<code>view</code>层还未更新，可用于获取更新前各种状态</p><h4 id="_6-更新后-updated" tabindex="-1">6）更新后（updated） <a class="header-anchor" href="#_6-更新后-updated" aria-label="Permalink to &quot;6）更新后（updated）&quot;">​</a></h4><p>对应的钩子函数是 updated。</p><p>发生在更新完成之后，当前阶段组件 DOM 已完成更新。</p><p>DOM 重新渲染，此时数据和界面都是新的。</p><p>完成<code>view</code>层的更新，更新后，所有状态已是最新</p><p>要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。</p><h4 id="_7-销毁前-beforedestroy" tabindex="-1">7）销毁前（beforeDestroy） <a class="header-anchor" href="#_7-销毁前-beforedestroy" aria-label="Permalink to &quot;7）销毁前（beforeDestroy）&quot;">​</a></h4><p>对应的钩子函数是 beforeDestroy。在上一阶段 Vue 已经成功的通过数据驱动 DOM 更新，当我们不再需要 vue 操纵 DOM 时，就要销毁 Vue,也就是清除 vue 实例与 DOM 的关联，调用 destroy 方法可以销毁当前组件。在销毁前，会触发 beforeDestroy 钩子函数。</p><p>组件实例销毁前调用，这时候能够获取到<code>this</code>，在当前阶段实例完全可以被使用，可以在这时进行善后收尾工作，比如清除计时器或订阅的取消。</p><h4 id="_8-销毁后-destroyed" tabindex="-1">8）销毁后(destroyed) <a class="header-anchor" href="#_8-销毁后-destroyed" aria-label="Permalink to &quot;8）销毁后(destroyed)&quot;">​</a></h4><p>对应的钩子函数是 destroyed。</p><p>在销毁后，会触发 destroyed 钩子函数。</p><p>组件实例实例销毁后调用，这时实例完全被销毁。</p><p>发生在实例销毁之后，这个时候只剩下了 DOM 空壳。</p><p>组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</p><p>销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器</p><p>errorCaptured</p><h4 id="_9-keep-alive-独有的生命周期-activated-和-deactivated" tabindex="-1">9）<code>keep-alive</code> 独有的生命周期： <code>activated</code> 和 <code>deactivated</code> <a class="header-anchor" href="#_9-keep-alive-独有的生命周期-activated-和-deactivated" aria-label="Permalink to &quot;9）\`keep-alive\` 独有的生命周期： \`activated\` 和 \`deactivated\`&quot;">​</a></h4><p><code>keep-alive</code> 独有的生命周期，分别为 <code>activated</code> 和 <code>deactivated</code>。</p><p>用 <code>keep-alive</code> 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>actived</code> 钩子函数。</p><ul><li><code>activated(实例激活)</code>：<code>特殊</code>的生命周期函数，只在<code>当前组件</code>设置了<code>keep-alive</code>时调用，因为设置<code>keep-alive</code>时，组件<code>不会销毁</code>，监听不到组件的<code>销毁以及创建</code>，该生命周期函数代表<code>当前组件处于活跃状态</code>（当前组件没有展示）；</li><li><code>deactivated(实例失效)</code>：和<code>activated</code>类似，只是它代表<code>当前组件处于非活跃状态</code>。</li></ul><h4 id="_10-errorcaptured-捕获一个来自子孙组件的错误时被调用" tabindex="-1">10）errorCaptured：捕获一个来自子孙组件的错误时被调用 <a class="header-anchor" href="#_10-errorcaptured-捕获一个来自子孙组件的错误时被调用" aria-label="Permalink to &quot;10）errorCaptured：捕获一个来自子孙组件的错误时被调用&quot;">​</a></h4><p>当捕获一个来自子孙组件的错误时被调用。</p><p>（版本2.5.0+ 增加的）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">info</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;">boolean</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。</p><p>此钩子可以返回 false 以阻止该错误继续向上传播。</p><hr><p>vue 的生命周期的思想贯穿在组件开发的始终，通过熟悉其生命周期调用不同的钩子函数，我们可以准确的控制数据流和其对 DOM 的影响；</p><p>vue 生命周期的思想是 Vnode 和 MVVM 的生动体现和继承。</p><h3 id="vue2生命周期的原理和实现" tabindex="-1">Vue2生命周期的原理和实现 <a class="header-anchor" href="#vue2生命周期的原理和实现" aria-label="Permalink to &quot;Vue2生命周期的原理和实现&quot;">​</a></h3><h4 id="init" tabindex="-1">init <a class="header-anchor" href="#init" aria-label="Permalink to &quot;init&quot;">​</a></h4><ul><li>initLifecycle/Event ，往 vm 上挂载各种属性</li><li>callHook: beforeCreated : 实例刚创建</li><li>initInjection/initState : 初始化注入和 data 响应性</li><li>created: 创建完成，属性已经绑定， 但还未生成真实 dom\`</li><li>进行元素的挂载： $el / vm.$mount()</li><li>是否有 template : 解析成 render function <ul><li>.vue 文件: vue-loader 会将 <code>&lt;template&gt;</code> 编译成 render function</li></ul></li><li>beforeMount : 模板编译/挂载之前</li><li>执行 render function ，生成真实的 dom ，并替换到 dom tree 中</li><li>mounted : 组件已挂载</li></ul><h4 id="update" tabindex="-1">update <a class="header-anchor" href="#update" aria-label="Permalink to &quot;update&quot;">​</a></h4><ul><li>执行 diff 算法，比对改变是否需要触发 UI 更新</li><li>flushScheduleQueue</li><li>watcher.before : 触发 beforeUpdate 钩子 - watcher.run() : 执行 watcher 中的 notify ，通知所有依赖项更新 UI</li><li>触发 updated 钩子: 组件已更新</li><li>actived / deactivated(keep-alive) : 不销毁，缓存，组件激活与失活</li><li>destroy <ul><li>beforeDestroy : 销毁开始</li><li>销毁自身且递归销毁子组件以及事件监听 <ul><li>remove() : 删除节点</li><li>watcher.teardown() : 清空依赖</li><li>vm.$off() : 解绑监听</li></ul></li><li>destroyed : 完成后触发钩子</li></ul></li></ul><p>上面是 vue2 的声明周期的简单梳理，接下来我们直接以代码的形式来完成 vue2 的初始化。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 初始化Vue实例</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> _init</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 挂载属性</span></span>
<span class="line"><span style="color:#61AFEF;">	initLifeCycle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 初始化事件系统，钩子函数等</span></span>
<span class="line"><span style="color:#61AFEF;">	initEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 编译slot、vnode</span></span>
<span class="line"><span style="color:#61AFEF;">	initRender</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 触发钩子</span></span>
<span class="line"><span style="color:#61AFEF;">	callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;beforeCreate&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 添加inject功能</span></span>
<span class="line"><span style="color:#61AFEF;">	initInjection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 完成数据响应性 props/data/watch/computed/methods</span></span>
<span class="line"><span style="color:#61AFEF;">	initState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 添加 provide 功能</span></span>
<span class="line"><span style="color:#61AFEF;">	initProvide</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 触发钩子</span></span>
<span class="line"><span style="color:#61AFEF;">	callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;created&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 挂载节点</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$mount</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 挂载节点实现</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> mountComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取 render function</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">render</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// template to render</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Vue.compile = compileToFunctions</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">render</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> compileToFunctions</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">render</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> render</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 触发钩子</span></span>
<span class="line"><span style="color:#61AFEF;">	callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;beforeMounte&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 初始化观察者</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// render 渲染 vdom，</span></span>
<span class="line"><span style="color:#E06C75;">	vdom</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// update: 根据 diff 出的 patchs 挂载成真实的 dom</span></span>
<span class="line"><span style="color:#E5C07B;">	vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vdom</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 触发钩子</span></span>
<span class="line"><span style="color:#61AFEF;">	callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;mounted&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 更新节点实现</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> queueWatcher</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">watcher</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	nextTick</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushScheduleQueue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 清空队列</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> flushScheduleQueue</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 遍历队列中所有修改</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// beforeUpdate</span></span>
<span class="line"><span style="color:#E5C07B;">		watcher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">before</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 依赖局部更新节点</span></span>
<span class="line"><span style="color:#E5C07B;">		watcher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">		callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;updated&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 销毁实例实现</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$destory</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 触发钩子</span></span>
<span class="line"><span style="color:#61AFEF;">	callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;beforeDestory&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 自身及子节点</span></span>
<span class="line"><span style="color:#61AFEF;">	remove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 删除依赖</span></span>
<span class="line"><span style="color:#E5C07B;">	watcher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">teardown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 删除监听</span></span>
<span class="line"><span style="color:#E5C07B;">	vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$off</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 触发钩子</span></span>
<span class="line"><span style="color:#61AFEF;">	callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;destoryed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br></div></div><h4 id="_1-实例化new-vue" tabindex="-1">1.实例化<code>new Vue()</code> <a class="header-anchor" href="#_1-实例化new-vue" aria-label="Permalink to &quot;1.实例化\`new Vue()\`&quot;">​</a></h4><p>显而易见，这个就是实例化。实例化之后，会执行以下操作。根据 Vue 的源码，我们可以看到 Vue 的本质就是一个 function , new Vue 的过程就是初始化参数、生命周期、事件等一系列过程</p><p><strong>源码路径</strong>：<code>src/core/instance/index.js</code></p><h4 id="_2-初始化事件-生命周期函数" tabindex="-1">2.初始化事件 生命周期函数 <a class="header-anchor" href="#_2-初始化事件-生命周期函数" aria-label="Permalink to &quot;2.初始化事件 生命周期函数&quot;">​</a></h4><p><code>Init Events &amp; Lifecycle</code></p><p>首先就是初始化事件和生命周期函数。这时候，这个对象身上只有默认一些生命周期函数和默认的事件，其他的东西都未创建。</p><h4 id="_3-beforecreate-创建前" tabindex="-1">3.beforeCreate 创建前 <a class="header-anchor" href="#_3-beforecreate-创建前" aria-label="Permalink to &quot;3.beforeCreate 创建前&quot;">​</a></h4><p>接着就是 beforeCreate（创建前） 执行。但是这个时候拿不到 data 里边的数据。data 和 methods 中的数据都还没初始化。</p><h4 id="_4-注射响应" tabindex="-1">4.注射响应 <a class="header-anchor" href="#_4-注射响应" aria-label="Permalink to &quot;4.注射响应&quot;">​</a></h4><p><code>Init injections &amp; reactivity</code></p><p>injections(注射器) reactivity(响应) 给数据添加观察者</p><h4 id="_5-created-创建后" tabindex="-1">5.created 创建后 <a class="header-anchor" href="#_5-created-创建后" aria-label="Permalink to &quot;5.created 创建后&quot;">​</a></h4><p>created 创建后 执行。因为上边给数据添加了观察者，所以现在就可以访问到 data 里的数据了。</p><p>这个钩子也是常用的，可以请求数据了。如果要调用 methods 中的方法或者操作 data 中数据，要在 created 里操作。要因为请求数据是异步的，所以发送请求宜早不宜迟，通常在这个时候发送请求。</p><p><code>源码路径</code>：<code>src/core/instance/init.js</code> - <code>initMixin</code></p><h4 id="_6-是否存在-el" tabindex="-1">6.是否存在 el <a class="header-anchor" href="#_6-是否存在-el" aria-label="Permalink to &quot;6.是否存在 el&quot;">​</a></h4><p><code>Has &quot;el&quot; option?</code></p><p>el 指明挂载目标。这个步骤就是判断一下是否有写 el ，如果没有就判断有没有调用实例上的$mount(&#39;&#39;) 方法调用。</p><p><code>源码路径</code>：<code>src/core/instance/init.js</code></p><h4 id="_7-判断是否有-template" tabindex="-1">7.判断是否有 template <a class="header-anchor" href="#_7-判断是否有-template" aria-label="Permalink to &quot;7.判断是否有 template&quot;">​</a></h4><p><code>Has &quot;template&quot; option?</code></p><p>如果有 template 则渲染 template 里的内容。</p><p>如果没有 则渲染 el 指明的挂载对象里的内容。</p><p><code>源码路径</code>：<code>src/platforms/web/entry-runtime-with-compiler.js</code> - <code>$mount</code></p><h4 id="_8-beforemount-挂载前" tabindex="-1">8.beforeMount 挂载前 <a class="header-anchor" href="#_8-beforemount-挂载前" aria-label="Permalink to &quot;8.beforeMount 挂载前&quot;">​</a></h4><p>beforeMount 挂载前 执行。</p><h4 id="_9-替换-el" tabindex="-1">9.替换 el <a class="header-anchor" href="#_9-替换-el" aria-label="Permalink to &quot;9.替换 el&quot;">​</a></h4><p><code>Create vm.Sel and replace &quot;el&quot; with it</code></p><p>这个时候会在实例上创建一个 el ，替换掉原来的 el 。也是真正的挂载。</p><h4 id="_10-mounted-挂载后" tabindex="-1">10.mounted 挂载后 <a class="header-anchor" href="#_10-mounted-挂载后" aria-label="Permalink to &quot;10.mounted 挂载后&quot;">​</a></h4><p>mounted 挂载后 执行。这个时候 DOM 已经加载完成了，可以操作 DOM 了。只要执行完了 mounted，就表示整个 vue 实例已经初始化完毕了。这个也是常用的钩子。一般操作 DOM 都是在这里。</p><p><code>源码路径</code>：<code>src/platforms/web/runtime/index.js</code> - <code>$mount</code> -&gt; <code>src/core/instance/lifecycle.js</code> - <code>mountComponent</code></p><h4 id="_11-datachange" tabindex="-1">11.dataChange <a class="header-anchor" href="#_11-datachange" aria-label="Permalink to &quot;11.dataChange&quot;">​</a></h4><p><code>when data changes</code></p><p>当数据有变动时，会触发下面这两个钩子。</p><ul><li>beforeUpdate</li><li>update</li></ul><p><code>源码路径</code>：<code>src/core/instance/lifecycle.js</code></p><ul><li>在 beforeUpdate 更新前 和 updated 更新后 之间会进行 DOM 的重新渲染和补全。</li><li>接着是 updated 更新后</li></ul><p><code>源码路径</code>：<code>src/core/observer/scheduler.js</code> - <code>callUpdatedHooks</code></p><h4 id="_12-calldestroy" tabindex="-1">12.callDestroy <a class="header-anchor" href="#_12-calldestroy" aria-label="Permalink to &quot;12.callDestroy&quot;">​</a></h4><p><code>when vm.$destroy() is called</code></p><ul><li><p>beforeDestroy 销毁前 和 destroy 销毁后 这两个钩子是需要我们手动调用实例上的 $destroy 方法才会触发的。</p></li><li><p>当 $destroy 方法调用后。</p></li><li><p><code>beforeDestroy</code> 销毁前触发</p></li><li><p>移除数据劫持、事件监听、子组件属性 所有的东西还保留 只是不能修改</p><ul><li><code>Teardown watchers, child components and event listeners</code></li></ul></li><li><p>destroy 销毁后触发</p></li></ul><p><code>源码路径</code>：<code>src/core/instance/lifecycle.js lifecycleMixin</code> - <code>$destroy</code></p><p>新增钩子</p><ul><li>activated：keep-alive 组件激活时调用。</li><li>类似 created 没有真正创建，只是激活</li><li>deactivated：keep-alive 组件停用时调用。</li><li>类似 destroyed 没有真正移除，只是禁用</li><li>在 2.2.0 及其更高版本中，activated 和 deactivated 将会在 树内的所有嵌套组件中触发。</li></ul><p>顺序验证代码如下：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;div id=&quot;app&quot;&gt;{{msg}}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		let vm = new Vue({</span></span>
<span class="line"><span style="color:#ABB2BF;">			el: &quot;#app&quot;, // 指明 VUE实例 的挂载目标 （只在 new 创建的实例中遵守）</span></span>
<span class="line"><span style="color:#ABB2BF;">			data: { msg: &quot;kaikeba&quot; },</span></span>
<span class="line"><span style="color:#ABB2BF;">			beforeCreate() {</span></span>
<span class="line"><span style="color:#ABB2BF;">				console.log(&quot;创建前&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">			created() {</span></span>
<span class="line"><span style="color:#ABB2BF;">				console.log(&quot;创建后&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">			beforeMount() {</span></span>
<span class="line"><span style="color:#ABB2BF;">				console.log(&quot;挂载前&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">			mounted() {</span></span>
<span class="line"><span style="color:#ABB2BF;">				console.log(&quot;挂载后&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">			beforeUpdate() {</span></span>
<span class="line"><span style="color:#ABB2BF;">				alert(&quot;更新前&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">			updated() {</span></span>
<span class="line"><span style="color:#ABB2BF;">				alert(&quot;更新后&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">			beforeDestroy() {</span></span>
<span class="line"><span style="color:#ABB2BF;">				alert(&quot;销毁前&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">			destroyed() {</span></span>
<span class="line"><span style="color:#ABB2BF;">				alert(&quot;销毁后&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">		option;</span></span>
<span class="line"><span style="color:#ABB2BF;">		// vm.$mount(&#39;#app&#39;) // 等价于 el:&quot;#app&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		vm.$destroy();</span></span>
<span class="line"><span style="color:#ABB2BF;">		// init events, init lifecycle 初始事件，初始化生命周期钩子函数</span></span>
<span class="line"><span style="color:#ABB2BF;">		// init injections （注射器） reactivity （响应） 给数据添加观察者</span></span>
<span class="line"><span style="color:#ABB2BF;">		// Compile el&#39;s outerHTML as template 编译el的outerHTML作为模板</span></span>
<span class="line"><span style="color:#ABB2BF;">		// 在beforeMount mounted 之间 create vm.$el and replace “el” with it 会创建一个 el 代替自己的el对象</span></span>
<span class="line"><span style="color:#ABB2BF;">		// virtual DOM re-render and patch 虚拟DOM重新渲染和修补</span></span>
<span class="line"><span style="color:#ABB2BF;">		// when vm.$destroy() is called 当销毁函数vm.$destroy()调用时 才会调用销毁前后的生命周期</span></span>
<span class="line"><span style="color:#ABB2BF;">		// teardown watchs child components and event listeners 移除数据劫持、事件监听、子组件属性 所有的东西还保留 只是不能修改</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>总结：</p><ul><li>1.beforeCreate：在实例初始化之后，数据观测（data observe）和 event/watcher 事件配置之前被调用，这时无法访问 data 及 props 等数据；</li><li>2.created：在实例创建完成后被立即调用，此时实例已完成数据观测（data observer），属性和方法的运算，watch/event 事件回调，挂载阶段还没开始， $el 尚不可用。</li><li>3.beforemount:在挂载开始之前被调用，相关的 render 函数首次被调用。</li><li>4.mounted：实例被挂载后调用，这时 el 被新创建的 vm. $el 替换，若根实例挂载到了文档上的元素上，当mounted被调用时vm.$el 也在文档内。注意 mounted 不会保证所有子组件一起挂载。</li><li>5.beforeupdata：数据更新时调用，发生在虚拟 dom 打补丁前，这时适合在更新前访问现有 dom，如手动移除已添加的事件监听器。</li><li>6.updated：在数据变更导致的虚拟 dom 重新渲染和打补丁后，调用该钩子。当这个钩子被调用时，组件 dom 已更新，可执行依赖于 dom 的操作。多数情况下应在此期间更改状态。 如需改变，最好使用 watcher 或计算属性取代。注意 updated 不会保证所有的子组件都能一起被重绘。</li><li>7.beforedestory：在实例销毁之前调用。在这时，实例仍可用。</li><li>8.destroyed：实例销毁后调用，这时 vue 实例的所有指令都被解绑，所有事件监听器被移除，所有子实例也被销毁。</li></ul><h3 id="vue3-生命周期" tabindex="-1">vue3 生命周期 <a class="header-anchor" href="#vue3-生命周期" aria-label="Permalink to &quot;vue3 生命周期&quot;">​</a></h3><p><img src="`+a+`" alt="生命周期流程图"></p><p>Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但有有两个被更名：</p><ul><li><p><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></p></li><li><p><code>destroyed</code>改名为 <code>unmounted</code></p></li></ul><p>Vue3的Composition API 形式的生命周期钩子对比Vue2</p><ul><li><p>在<code>Vue3</code>中，去掉了<code>beforeCreate</code>、<code>created</code>两个生命周期函数，用<code>setup</code>来替代（也就是说在 setup 中写的代码，相当于之前在这两个函数中写的代码）；</p><ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li></ul></li><li><p>在<code>Vue3</code>中，生命周期函数并没有改变，只是在每个生命周期函数前面加上了一个<code>on</code>：</p><ul><li><p><code>beforeMount</code> 挂载之前 改名 <code>onBeforeMount</code></p><ul><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li></ul></li><li><p><code>mounted</code> 挂载之后 改名 <code>onMounted</code></p><ul><li><code>mounted</code>=======&gt;<code>onMounted</code></li></ul></li><li><p><code>beforeUpdate</code> 数据更新之前 改名 <code>onBeforeUpdate</code></p><ul><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li></ul></li><li><p><code>updated</code> 数据更新之后 改名 <code>onUpdated</code></p><ul><li><code>updated</code> =======&gt;<code>onUpdated</code></li></ul></li><li><p><code>errorCaptured</code> 报错 改名 <code>onErrorCaptured</code></p></li></ul></li><li><p><code>beforeDestroy</code> 销毁前 改名 <code>onBeforeUnmount</code>，可在此进行清除定时器，进行事件监听，发布订阅。</p><ul><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li></ul></li><li><p><code>destoryed</code> 销毁后 改名 <code>onUnmounted</code></p><ul><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>不难发现 3.0 中钩子函数最大的变化就是 setup 代替了 2.0 中的 beforeCreate 和 created，而对应其它几个函数来说都是名称上发生了一些变化，其功能基本上还是一样的。</p><p>Vue 3 中还新增了是 3 个用于调试和服务端渲染的场景。</p><h3 id="生命周期函数和钩子函数概念" tabindex="-1">生命周期函数和钩子函数概念 <a class="header-anchor" href="#生命周期函数和钩子函数概念" aria-label="Permalink to &quot;生命周期函数和钩子函数概念&quot;">​</a></h3><p>生命周期函数和钩子函数在 Vue.js 中通常被用来描述相同的概念，但是它们并不完全是同一个东西。让我来解释一下：</p><ol><li><strong>生命周期函数：</strong> Vue.js 组件的生命周期函数是指在组件生命周期中自动执行的一系列方法，用于控制组件的行为。这些生命周期函数包括 <code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>、<code>beforeUpdate</code>、<code>updated</code>、<code>beforeDestroy</code> 和 <code>destroyed</code>。它们按照组件的创建、更新和销毁阶段被调用。</li><li><strong>钩子函数：</strong> 在 Vue.js 中，钩子函数通常指的是在组件生命周期的不同阶段执行的回调函数。这些回调函数与生命周期函数是一一对应的，例如在 <code>created</code> 阶段执行的回调函数就被称为 <code>created</code> 钩子函数，而在 <code>mounted</code> 阶段执行的回调函数就被称为 <code>mounted</code> 钩子函数。这些钩子函数允许开发者在组件的不同生命周期中执行自定义的逻辑。</li></ol><p>因此，虽然生命周期函数和钩子函数在描述上有些交叉，但从概念上来说，生命周期函数是组件的生命周期阶段，而钩子函数是在这些阶段中执行的回调函数。</p><h3 id="生命周期函数的用法" tabindex="-1">生命周期函数的用法 <a class="header-anchor" href="#生命周期函数的用法" aria-label="Permalink to &quot;生命周期函数的用法&quot;">​</a></h3><h4 id="_1-vue-js-生命周期概述" tabindex="-1">1. Vue.js 生命周期概述 <a class="header-anchor" href="#_1-vue-js-生命周期概述" aria-label="Permalink to &quot;1. Vue.js 生命周期概述&quot;">​</a></h4><p>Vue.js 组件的生命周期可以分为三个阶段：创建阶段、更新阶段和销毁阶段。在每个阶段，Vue.js 提供了一系列钩子函数，允许开发者在组件的不同生命周期中执行相关逻辑。</p><h4 id="_2-创建阶段" tabindex="-1">2. 创建阶段 <a class="header-anchor" href="#_2-创建阶段" aria-label="Permalink to &quot;2. 创建阶段&quot;">​</a></h4><p>在组件的创建阶段，Vue.js 主要执行组件的初始化工作，包括实例化、数据观测、编译模板等。</p><ul><li><strong>beforeCreate：</strong> 在实例初始化之后，数据观测 (data observation) 和 event/watcher 事件配置之前被调用。</li><li><strong>created：</strong> 实例已经创建完成之后被调用。在这一步，实例已经完成了数据观测等配置，但是尚未挂载到页面上。</li></ul><h4 id="_3-更新阶段" tabindex="-1">3. 更新阶段 <a class="header-anchor" href="#_3-更新阶段" aria-label="Permalink to &quot;3. 更新阶段&quot;">​</a></h4><p>在组件的更新阶段，Vue.js 会根据数据的变化重新渲染组件，更新视图。</p><ul><li><strong>beforeMount：</strong> 在挂载开始之前被调用：相关的 render 函数首次被调用。</li><li><strong>mounted：</strong> el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</li><li><strong>beforeUpdate：</strong> 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li><li><strong>updated：</strong> 数据更新导致虚拟 DOM 重新渲染和打补丁后调用。</li></ul><h4 id="_4-销毁阶段" tabindex="-1">4. 销毁阶段 <a class="header-anchor" href="#_4-销毁阶段" aria-label="Permalink to &quot;4. 销毁阶段&quot;">​</a></h4><p>在组件销毁阶段，Vue.js 会执行清理工作，释放相关资源。</p><ul><li><strong>beforeDestroy：</strong> 实例销毁之前调用。在这一步，实例仍然完全可用。</li><li><strong>destroyed：</strong> 实例销毁之后调用。在这一步，Vue 实例的所有指令和事件监听器都已被移除，所有子实例也已被销毁。</li></ul><h4 id="_5-钩子函数应用场景" tabindex="-1">5. 钩子函数应用场景 <a class="header-anchor" href="#_5-钩子函数应用场景" aria-label="Permalink to &quot;5. 钩子函数应用场景&quot;">​</a></h4><ul><li><strong>beforeCreate 和 created：</strong> 适合用于初始化数据、配置事件等操作。</li><li><strong>mounted：</strong> 适合用于发起网络请求、操作 DOM 元素等任务。</li><li><strong>beforeDestroy 和 destroyed：</strong> 适合用于清理定时器、取消网络请求等收尾工作。</li></ul><h3 id="dom-渲染在哪个周期中就已经完成" tabindex="-1">DOM 渲染在哪个周期中就已经完成 <a class="header-anchor" href="#dom-渲染在哪个周期中就已经完成" aria-label="Permalink to &quot;DOM 渲染在哪个周期中就已经完成&quot;">​</a></h3><p><strong>DOM 渲染在mounted周期中就已经完成</strong></p><p>注意 <code>mounted</code> 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 <code>vm.$nextTick</code> 替换掉 <code>mounted</code></p><h3 id="父子组件-生命周期-顺序" tabindex="-1">父子组件 生命周期 顺序 <a class="header-anchor" href="#父子组件-生命周期-顺序" aria-label="Permalink to &quot;父子组件 生命周期 顺序&quot;">​</a></h3><p>创建过程自上而下，挂载过程自下而上</p><h4 id="加载渲染过程" tabindex="-1">加载渲染过程 <a class="header-anchor" href="#加载渲染过程" aria-label="Permalink to &quot;加载渲染过程&quot;">​</a></h4><p>父 <code>beforeCreate</code>-&gt;父 <code>created</code>-&gt;父 <code>beforeMount</code>-&gt;子 <code>beforeCreate</code>-&gt;子 <code>created</code>-&gt;子 <code>beforeMount</code>-&gt;子 <code>mounted</code>-&gt;父 <code>mounted</code></p><h4 id="子组件更新过程" tabindex="-1">子组件更新过程 <a class="header-anchor" href="#子组件更新过程" aria-label="Permalink to &quot;子组件更新过程&quot;">​</a></h4><p>父 <code>beforeUpdate</code>-&gt; 子 <code>beforeUpdate</code>-&gt; 子<code>updated </code>-&gt; 父 <code>updated</code></p><h4 id="父组件更新过程" tabindex="-1">父组件更新过程 <a class="header-anchor" href="#父组件更新过程" aria-label="Permalink to &quot;父组件更新过程&quot;">​</a></h4><p>父 <code>beforeUpdate</code>-&gt; 父 <code>updated</code></p><h4 id="销毁过程" tabindex="-1">销毁过程 <a class="header-anchor" href="#销毁过程" aria-label="Permalink to &quot;销毁过程&quot;">​</a></h4><p>父 <code>beforeDestroy</code>-&gt;子 <code>beforeDestroy</code>-&gt;子 <code>destroyed</code>-&gt;父 <code>destroyed</code></p><h3 id="生命周期钩子是如何实现的" tabindex="-1">生命周期钩子是如何实现的 <a class="header-anchor" href="#生命周期钩子是如何实现的" aria-label="Permalink to &quot;生命周期钩子是如何实现的&quot;">​</a></h3><p><code>Vue</code> 的生命周期钩子核心实现是利用<code>发布订阅模式</code>先把<code>用户传入</code>的的<code>生命周期钩子</code>订阅好（<code>内部采用数组的方式存储</code>）然后在创建组件实例的过程中会依次执行对应的钩子方法（<code>发布</code>）</p><p>Vue 实例有⼀个完整的⽣命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -&gt; 渲染、更新 -&gt; 渲染、卸载 等⼀系列过程，称这是 Vue 的⽣命周期。</p><p>1.beforeCreate（创建前）：数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher 都还没有被设置，也就是说不能访问到 data、computed、watch、methods 上的方法和数据。</p><p>2.created（创建后） ：实例创建完成，实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 $el 属性。</p><p>3.beforeMount（挂载前）：在挂载开始之前被调用，相关的 render 函数首次被调用。实例已完成以下的配置：编译模板，把 data 里面的数据和模板生成 html。此时还没有挂载 html 到页面上。</p><p>4.mounted（挂载后）：在 el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的 html 内容替换 el 属性指向的 DOM 对象。完成模板中的 html 渲染到 html 页面中。此过程中进行 ajax 交互。</p><p>5.beforeUpdate（更新前）：响应式数据更新时调用，此时虽然响应式数据更新了，但是对应的真实 DOM 还没有被渲染。</p><p>6.updated（更新后） ：在由于数据更改导致的虚拟 DOM 重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调用时，组件 DOM 已经更新，所以可以执行依赖于 DOM 的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</p><p>7.beforeDestroy（销毁前）：实例销毁之前调用。这一步，实例仍然完全可用，this 仍能获取到实例。</p><p>8.destroyed（销毁后）：实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。</p><p>另外还有 keep-alive 独有的生命周期，分别为 activated 和 deactivated。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 activated 钩子函数。</p><h2 id="解释一下对-vue-生命周期的理解" tabindex="-1">解释一下对 Vue 生命周期的理解 <a class="header-anchor" href="#解释一下对-vue-生命周期的理解" aria-label="Permalink to &quot;解释一下对 Vue 生命周期的理解&quot;">​</a></h2><p>可以从以下方面展开回答：</p><ul><li>什么是 vue 生命周期</li><li>vue 生命周期的作用是什么</li><li>vue 生命周期有几个阶段</li><li>第一次页面加载会触发哪几个钩子</li><li>DOM 渲染在哪个周期就已经完成</li><li>多组件（父子组件）中生命周期的调用顺序说一下</li></ul><h2 id="第一次页面加载会触发哪几个钩子" tabindex="-1">第一次页面加载会触发哪几个钩子？ <a class="header-anchor" href="#第一次页面加载会触发哪几个钩子" aria-label="Permalink to &quot;第一次页面加载会触发哪几个钩子？&quot;">​</a></h2><p>Vue2会触发：beforeCreate 、created 、beforeMount、mounted。</p><p>Vue3会触发：setup、onBeforeMount、onMounted</p><h2 id="dom-渲染在哪个周期中就已经完成-1" tabindex="-1">DOM 渲染在哪个周期中就已经完成？ <a class="header-anchor" href="#dom-渲染在哪个周期中就已经完成-1" aria-label="Permalink to &quot;DOM 渲染在哪个周期中就已经完成？&quot;">​</a></h2><p>DOM 渲染在 Vue2的 <code>mounted</code> 或 Vue3的 <code>onMounted</code> 中就已经完成了</p><h2 id="什么是-vue-生命周期" tabindex="-1">什么是 vue 生命周期 <a class="header-anchor" href="#什么是-vue-生命周期" aria-label="Permalink to &quot;什么是 vue 生命周期&quot;">​</a></h2><p>对于 vue 来讲，生命周期就是一个 vue 实例从创建到销毁的过程。</p><h2 id="vue-生命周期的作用是什么" tabindex="-1">vue 生命周期的作用是什么 <a class="header-anchor" href="#vue-生命周期的作用是什么" aria-label="Permalink to &quot;vue 生命周期的作用是什么&quot;">​</a></h2><p>在生命周期的过程中会运行着一些叫做生命周期的函数，给予了开发者在不同的生命周期阶段添加业务代码的能力。</p><p>其实和回调是一个概念，当系统执行到某处时，检查是否有 hook(钩子)，有的话就会执行回调。</p><p>通俗的说，hook 就是在程序运行中，在某个特定的位置，框架的开发者设计好了一个钩子来告诉我们当前程序已经运行到特定的位置了，会触发一个回调函数，并提供给我们，让我们可以在生命周期的特定阶段进行相关业务代码的编写。</p><h2 id="vue-生命周期有几个阶段" tabindex="-1">vue 生命周期有几个阶段 <a class="header-anchor" href="#vue-生命周期有几个阶段" aria-label="Permalink to &quot;vue 生命周期有几个阶段&quot;">​</a></h2><p>它可以总共分为 8 个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后。</p><ol><li>beforeCreate：是 new Vue( ) 之后触发的第一个钩子，在当前阶段 data、methods、computed 以及 watch 上的数据和方法都不能被访问。</li><li>created：在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发 updated 函数。可以做一些初始数据的获取，在当前阶段无法与 DOM 进行交互，如果非要想，可以通过 vm.$nextTick 来访问 DOM 。</li><li>beforeMount：发生在挂载之前，在这之前 template 模板已导入渲染函数编译。而当前阶段虚拟 DOM 已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发 updated。</li><li>mounted：在挂载完成后发生，在当前阶段，真实的 DOM 挂载完毕，数据完成双向绑定，可以访问到 DOM 节点，使用 $refs 属性对 DOM 进行操作。</li><li>beforeUpdate：发生在更新之前，也就是响应式数据发生更新，虚拟 DOM 重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</li><li>updated：发生在更新完成之后，当前阶段组件 DOM 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。</li><li>beforeDestroy：发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。</li><li>destroyed：发生在实例销毁之后，这个时候只剩下了 DOM 空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</li></ol><h2 id="dom-渲染在哪个周期就已经完成" tabindex="-1">DOM 渲染在哪个周期就已经完成 <a class="header-anchor" href="#dom-渲染在哪个周期就已经完成" aria-label="Permalink to &quot;DOM 渲染在哪个周期就已经完成&quot;">​</a></h2><p>DOM 渲染是在 mounted 阶段完成，此阶段真实的 DOM 挂载完毕，数据完成双向绑定，可以访问到 DOM 节点。</p><h2 id="多组件-父子组件-中生命周期的调用执行顺序" tabindex="-1">多组件（父子组件）中生命周期的调用执行顺序 <a class="header-anchor" href="#多组件-父子组件-中生命周期的调用执行顺序" aria-label="Permalink to &quot;多组件（父子组件）中生命周期的调用执行顺序&quot;">​</a></h2><p>组件的调用顺序都是先父后子，渲染完成的顺序是先子后父。组件的销毁操作是先父后子，销毁完成的顺序是先子后父。</p><p><strong>加载渲染过程</strong>：<code>父组件 beforeCreate</code> =&gt; <code>父组件 created</code> =&gt; <code>父组件 beforeMount</code> =&gt; <code>子组件 beforeCreate - created - beforeMount - mounted</code> =&gt; <code>父组件 mounted</code></p><p><strong>子组件更新过程</strong>：<code>父组件 beforeUpdate</code> =&gt; <code>子组件 beforeUpdate - updated</code> =&gt; <code>父组件 updated</code></p><p><strong>父组件更新过程</strong>：<code>父组件 beforeUpdate</code> =&gt; <code>父组件 updated</code></p><p><strong>组件卸载销毁过程</strong>：<code>父组件 beforeDestory</code> =&gt; <code>子组件 beforeDestory - destoryed</code> =&gt; <code>父组件 destoryed</code></p><p>父组件等待子组件完成后，才会执行收尾操作。</p><h2 id="vue2-的初始化过程你有过了解吗-做了哪些事情" tabindex="-1">Vue2 的初始化过程你有过了解吗，做了哪些事情 <a class="header-anchor" href="#vue2-的初始化过程你有过了解吗-做了哪些事情" aria-label="Permalink to &quot;Vue2 的初始化过程你有过了解吗，做了哪些事情&quot;">​</a></h2><p>new Vue 走到了 vue 的构造函数中：<code>src\\core\\instance\\index.js</code>文件。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">this.init(options</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后从 Mixin 增加的原型方法看，initMixin(Vue)，调用的是为 Vue 增加的原型方法_init</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// src/core/instance/init.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> initMixin</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">     var</span><span style="color:#E06C75;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">创建vm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">     ...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     // 合并options 到 vm.$options</span></span>
<span class="line"><span style="color:#E5C07B;">     vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> mergeOptions</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">       resolveConstructorOptions</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">       options</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {},</span></span>
<span class="line"><span style="color:#E06C75;">       vm</span></span>
<span class="line"><span style="color:#ABB2BF;">     );</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#61AFEF;">   initLifecycle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//初始生命周期</span></span>
<span class="line"><span style="color:#61AFEF;">   initEvents</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//初始化事件</span></span>
<span class="line"><span style="color:#61AFEF;">   initRender</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//初始render函数</span></span>
<span class="line"><span style="color:#61AFEF;">   callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;beforeCreate&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//执行 beforeCreate生命周期钩子</span></span>
<span class="line"><span style="color:#ABB2BF;">   ...</span></span>
<span class="line"><span style="color:#61AFEF;">   initState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">//初始化data，props，methods computed，watch</span></span>
<span class="line"><span style="color:#ABB2BF;">   ...</span></span>
<span class="line"><span style="color:#61AFEF;">   callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;created&#39;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">//执行 created 生命周期钩子</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">   if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$mount</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//这里也是重点，下面需要用到</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h4 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>所以，从上面的函数看来，new vue 所做的事情，就像一个流程图一样展开了，分别是</p><ul><li>合并配置</li><li>初始化生命周期</li><li>初始化事件</li><li>初始化渲染</li><li>调用 <code>beforeCreate</code> 钩子函数</li><li>init injections and reactivity（这个阶段属性都已注入绑定，而且被 <code>$watch</code> 变成 reactivity，但是 <code>$el</code> 还是没有生成，也就是 DOM 没有生成）</li><li>初始化 state 状态（初始化了 data、props、computed、watcher）</li><li>调用 created 钩子函数。</li></ul><p>在初始化的最后，检测到如果有 el 属性，则调用 vm.$mount 方法挂载 vm，挂载的目标就是把模板渲染成最终的 DOM。</p><h2 id="简述-vue-的生命周期以及每个阶段做的事" tabindex="-1">简述 Vue 的生命周期以及每个阶段做的事 <a class="header-anchor" href="#简述-vue-的生命周期以及每个阶段做的事" aria-label="Permalink to &quot;简述 Vue 的生命周期以及每个阶段做的事&quot;">​</a></h2><p>必问题目，考查 vue 基础知识。</p><h3 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h3><ol><li>给出概念</li><li>列举生命周期各阶段</li><li>阐述整体流程</li><li>结合实践</li><li>扩展：vue3 变化</li></ol><hr><h3 id="回答范例-3" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-3" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><p>1.每个 Vue 组件实例被创建后都会经过一系列初始化步骤，比如，它需要数据观测，模板编译，挂载实例到 dom 上，以及数据变化时更新 dom。这个过程中会运行叫做生命周期钩子的函数，以便用户在特定阶段有机会添加他们自己的代码。</p><p>2.Vue 生命周期总共可以分为 8 个阶段：<strong>创建前后, 载入前后, 更新前后, 销毁前后</strong>，以及一些特殊场景的生命周期。vue3 中新增了三个用于调试和服务端渲染场景。</p><hr><table><thead><tr><th>Vue2生命周期</th><th>Vue3生命周期</th><th>描述</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup</td><td>组件实例被创建之初</td></tr><tr><td>created</td><td>setup</td><td>组件实例已经完全创建</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td><td>组件挂载之前</td></tr><tr><td>mounted</td><td>onMounted</td><td>组件挂载到实例上去之后</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td><td>组件数据发生变化，更新之前</td></tr><tr><td>updated</td><td>onUpdated</td><td>数据数据更新之后</td></tr><tr><td>beforeDestroy</td><td><strong>beforeUnmount</strong></td><td>组件实例销毁之前</td></tr><tr><td>destroyed</td><td><strong>unmounted</strong></td><td>组件实例销毁之后</td></tr></tbody></table><hr><table><thead><tr><th>Vue2生命周期</th><th>Vue3生命周期</th><th>描述</th></tr></thead><tbody><tr><td>activated</td><td>activated</td><td>keep-alive 缓存的组件激活时</td></tr><tr><td>deactivated</td><td>deactivated</td><td>keep-alive 缓存的组件停用时调用</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td><td>捕获一个来自子孙组件的错误时被调用</td></tr><tr><td>-</td><td><strong>renderTracked</strong></td><td>调试钩子，响应式依赖被收集时调用</td></tr><tr><td>-</td><td><strong>renderTriggered</strong></td><td>调试钩子，响应式依赖被触发时调用</td></tr><tr><td>-</td><td><strong>serverPrefetch</strong></td><td>ssr only，组件实例在服务器上被渲染前调用</td></tr></tbody></table><hr><p>3.<code>Vue3</code>生命周期流程图：</p><p><img src="`+a+`" alt="生命周期流程图"></p><hr><p>4.结合实践：</p><p><strong>beforeCreate</strong>：通常用于插件开发中执行一些初始化任务</p><p><strong>created</strong>：组件初始化完毕，可以访问各种数据，获取接口数据等</p><p><strong>mounted</strong>：dom 已创建，可用于获取访问数据和 dom 元素；访问子组件等。</p><p><strong>beforeUpdate</strong>：此时<code>view</code>层还未更新，可用于获取更新前各种状态</p><p><strong>updated</strong>：完成<code>view</code>层的更新，更新后，所有状态已是最新</p><p><strong>beforeunmount</strong>：实例被销毁前调用，可用于一些定时器或订阅的取消</p><p><strong>unmounted</strong>：销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器</p><h3 id="可能的追问-1" tabindex="-1">可能的追问 <a class="header-anchor" href="#可能的追问-1" aria-label="Permalink to &quot;可能的追问&quot;">​</a></h3><ol><li>setup 和 created 谁先执行？</li><li>setup 中为什么没有 beforeCreate 和 created？</li></ol><hr><h3 id="知其所以然-1" tabindex="-1">知其所以然 <a class="header-anchor" href="#知其所以然-1" aria-label="Permalink to &quot;知其所以然&quot;">​</a></h3><p>vue3 中生命周期的派发时刻：</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentOptions.ts%23L554-L555" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentOptions.ts%23L554-L555</a></p><p>vue2 中声明周期的派发时刻：</p><p><a href="https://github1s.com/vuejs/vue/blob/HEAD/src/core/instance/init.js%23L55-L56" target="_blank" rel="noreferrer">https://github1s.com/vuejs/vue/blob/HEAD/src/core/instance/init.js%23L55-L56</a></p><h2 id="ajax接口请求一般放在哪个生命周期中-为什么要这样做" tabindex="-1">Ajax接口请求一般放在哪个生命周期中？为什么要这样做？ <a class="header-anchor" href="#ajax接口请求一般放在哪个生命周期中-为什么要这样做" aria-label="Permalink to &quot;Ajax接口请求一般放在哪个生命周期中？为什么要这样做？&quot;">​</a></h2><p>接口请求可以放在钩子函数 <code>created</code>、<code>beforeMount</code>、<code>mounted</code> 中进行调用，因为在这三个钩子函数中，<code>data</code> 已经创建，可以将服务端端返回的数据进行赋值。</p><p>但是推荐在 <code>created</code> 钩子函数中调用异步请求，因为在 <code>created</code> 钩子函数中调用异步请求有以下优点：</p><ul><li>能更快获取到服务端数据，减少页面 <code>loading</code> 时间</li><li><code>SSR</code> 不支持 <code>beforeMount</code>、<code>mounted</code> 钩子函数，所以放在 <code>created</code> 中有助于代码的一致性</li><li><code>created</code> 是在模板渲染成 <code>html</code> 前调用，即通常初始化某些属性值，然后再渲染成视图。如果在 <code>mounted</code> 钩子函数中请求数据可能导致页面闪屏问题</li></ul><h2 id="何时需要使用-beforedestory-这个生命周期" tabindex="-1">何时需要使用 beforeDestory 这个生命周期 <a class="header-anchor" href="#何时需要使用-beforedestory-这个生命周期" aria-label="Permalink to &quot;何时需要使用 beforeDestory 这个生命周期&quot;">​</a></h2><ul><li>解绑自定义事件：<code>event.$off</code></li><li>清除定时器</li><li>解绑自定义的 DOM 事件，如 window scroll 等</li></ul><h2 id="vue-中如何进行组件的使用" tabindex="-1">Vue 中如何进行组件的使用？ <a class="header-anchor" href="#vue-中如何进行组件的使用" aria-label="Permalink to &quot;Vue 中如何进行组件的使用？&quot;">​</a></h2><p>要使用组件，首先需要使用 import 来引入组件，然后在 components 属性中注册组件，之后就可以在模板中使用组件了。</p><h2 id="vue-如何实现全局组件的注册" tabindex="-1">Vue 如何实现全局组件的注册？ <a class="header-anchor" href="#vue-如何实现全局组件的注册" aria-label="Permalink to &quot;Vue 如何实现全局组件的注册？&quot;">​</a></h2><p>Vue2可以使用 <code>Vue.component</code> 方法来实现全局组件的注册。</p><p>Vue3 使用</p><h2 id="vue2-在-created-和-mounted-这两个生命周期中请求数据有什么区别呢" tabindex="-1">Vue2 在 created 和 mounted 这两个生命周期中请求数据有什么区别呢？ <a class="header-anchor" href="#vue2-在-created-和-mounted-这两个生命周期中请求数据有什么区别呢" aria-label="Permalink to &quot;Vue2 在 created 和 mounted 这两个生命周期中请求数据有什么区别呢？&quot;">​</a></h2><p>参考回答：</p><p>看实际情况，一般在 created（或 beforeRouter） 里面就可以，如果涉及到需要页面加载完成之后的话就用 mounted。</p><p>在 created 的时候，视图中的 html 并没有渲染出来，所以此时如果直接去操作 html 的 dom 节点，一定找不到相关的元素</p><p>而在 mounted 中，由于此时 html 已经渲染出来了，所以可以直接操作 dom 节点，（此时 document.getelementById 即可生效了）。</p><h2 id="❤vue-组件通信" tabindex="-1">❤Vue 组件通信 <a class="header-anchor" href="#❤vue-组件通信" aria-label="Permalink to &quot;❤Vue 组件通信&quot;">​</a></h2><h3 id="通信种类" tabindex="-1">通信种类 <a class="header-anchor" href="#通信种类" aria-label="Permalink to &quot;通信种类&quot;">​</a></h3><ul><li><p>1.父组件向子组件通信</p></li><li><p>2.子组件向父组件通信</p></li><li><p>3.隔代跨层组件间通信</p></li><li><p>4.兄弟组件间通信</p></li></ul><h3 id="v-bind-props-父传子-emit-emit-子传父" tabindex="-1">v-bind &amp; props(父传子) + $emit/emit(子传父) <a class="header-anchor" href="#v-bind-props-父传子-emit-emit-子传父" aria-label="Permalink to &quot;v-bind &amp; props(父传子) + $emit/emit(子传父)&quot;">​</a></h3><p><code>父组件</code>通过<code>v-bind:xxx</code>的形式传递参数，子组件通过在组件实例的<code>props</code>属性中声明需要的参数以及类型，来接受父组件的数据，然后父组件在子组件上注册监听事件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">age</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> just-str</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;字符串可以省略v-bind&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineProps</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">onMounted</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> props</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineProps</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	justStr</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">onMounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Lee</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 18</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">justStr</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 字符串可以省略v-bind</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>当父组件中有一个对象，想把对象中<code>所有的属性</code>传递给子组件，但是又不想一个个去写<code>v-bind</code>，这时候可以把<code>父组件</code>这么做：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	justStr</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;字符串可以省略v-bind&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>子组件通过 <code>$emit</code> 触发事件来向父组件发送数据，父组件通过<code>@eventname</code>的方式接收子组件的事件以及参数。</p><ul><li>a. 绑定监听：<code>&lt;MyComp @eventName=&quot;callback&quot; /&gt;</code></li><li>b. 触发(分发)事件：<code>this.$emit(&quot;eventName&quot;, data)</code></li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineEmits</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">onMounted</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> emits</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineEmits</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;tellMyFather&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">onMounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	emits</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;tellMyFather&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;通知父组件&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	emits</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;tellMyFather&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;通知父组件&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">tell-my-father</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">getEvent</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 每次抛出都会接收</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> getEvent</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 第一次：通知父组件 第二次：{data: &#39;通知父组件&#39;}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>实现通信例子：</p><p><strong>父组件 A 通过<code>props</code>向子组件 B 传递值， B 组件传递 A 组件通过<code>$emit</code>A 组件通过<code>v-on/@</code>触发</strong></p><h4 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;Vue2&quot;">​</a></h4><p><strong>1）父组件=&gt;子组件传值（父组件通过 props 向下传递数据给子组件）</strong></p><p>父组件：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">Child</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">child</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">Child</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		//前者自定义名称便于子组件调用，后者要传递数据名</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Child</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/Child&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//子组件</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			users</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;Eric&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Andy&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Sai&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		Child</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Child</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>子组件：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">li</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">item</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> child</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			//遍历传递过来的值渲染页面</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Hello World&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		child</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 这个就是父组件中子标签自定义名字</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Array</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 对传递过来的值进行校验</span></span>
<span class="line"><span style="color:#E06C75;">			required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 必传，不传会报错</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><strong>2）子组件=&gt;父组件传值（子组件通过 events 给父组件发送消息，实际上是子组件把自己的数据发送到父组件）</strong></p><p>子组件：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">changeTitle</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		//绑定一个点击事件</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;header&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Vue.js Demo&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		changeTitle</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;titleChanged&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;子向父组件传值&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//自定义事件  传递值“子向父组件传值”</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>父组件：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">header</span><span style="color:#D19A66;"> v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">titleChanged</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">updateTitle</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">header</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		//与子组件titleChanged自定义事件保持一致 //</span></span>
<span class="line"><span style="color:#ABB2BF;">		updateTitle($event)接受传递过来的文字</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Header</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/Header&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;传递的是一个值&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		updateTitle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 声明这个函数</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">		&quot;app-header&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Header</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h4><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="refs-父子组件实例-children-vue3废弃-、-parent-父子组件通信" tabindex="-1">$refs + (父子组件实例 <s>$children(Vue3废弃)</s>、$parent) (父子组件通信) <a class="header-anchor" href="#refs-父子组件实例-children-vue3废弃-、-parent-父子组件通信" aria-label="Permalink to &quot;$refs + (父子组件实例 ~~$children(Vue3废弃)~~、$parent) (父子组件通信)&quot;">​</a></h3><p><code>ref</code>也可以访问组件实例；通过父链/子链也可以通信（<code>$parent</code>/<s>$children</s>）；</p><p>通过 ref 属性给子组件设置一个名字。父组件通过 <code>$refs</code> 组件名来获得子组件，子组件通过 <code>$parent</code> 获得父组件，这样也可以实现通信。</p><p>注意：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 ref 来访问组件的</p><p><s>$children(Vue3废弃)</s>：<a href="https://v3-migration.vuejs.org/zh/breaking-changes/children.html" target="_blank" rel="noreferrer">$children |Vue 3 迁移指南 (vuejs.org)</a></p><p><strong>ref 例子</strong>：对 component-a 组件的 属性和方法 操作</p><p>component-a 组件的 属性和方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Vue.js&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		sayHello</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>引用 component-a 组件并操作</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">component-a</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;comA&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">component-a</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> comA</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$refs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">comA</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">comA</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Vue.js</span></span>
<span class="line"><span style="color:#E5C07B;">		comA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 弹窗</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>注：这两种方法的弊端是，无法在跨级或兄弟间通信。</p><blockquote><p>我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案。</p></blockquote><h4 id="parent-children-vue3-被移除" tabindex="-1">$parent/$children(Vue3 被移除) <a class="header-anchor" href="#parent-children-vue3-被移除" aria-label="Permalink to &quot;$parent/$children(Vue3 被移除)&quot;">​</a></h4><p>父组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		HelloWorld</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;father&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// vue2可以访问到</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>子组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;HelloWorld&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;child&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// father</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="parent-refs-兄弟、父子组件" tabindex="-1">$parent/$refs(兄弟、父子组件) <a class="header-anchor" href="#parent-refs-兄弟、父子组件" aria-label="Permalink to &quot;$parent/$refs(兄弟、父子组件)&quot;">​</a></h3><p>通过 <code>$parent/$refs</code> 来获取到兄弟组件，也可以进行通信。</p><h3 id="provied-inject-祖孙后代-父子、爷孙组件等" tabindex="-1">provied/inject(祖孙后代：父子、爷孙组件等) <a class="header-anchor" href="#provied-inject-祖孙后代-父子、爷孙组件等" aria-label="Permalink to &quot;provied/inject(祖孙后代：父子、爷孙组件等)&quot;">​</a></h3><p>使用 provide/inject，在父组件中通过 provide 提供变量，在子组件中通过 inject 来将变量注入到组件中。不论子组件有多深，只要调用了 inject 那么就可以注入 provide 中的数据。</p><h4 id="vue2-1" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2-1" aria-label="Permalink to &quot;Vue2&quot;">​</a></h4><p>使用例子：</p><p>a.vue</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这种绑定是不可响应的</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">provide</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;王者峡谷&quot;</span><span style="color:#ABB2BF;"> } };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>b.vue</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 输出王者峡谷</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>A.vue，我们设置了一个 <code>provide:name</code>，值为王者峡谷，将 name 这个变量提供给它的所有子组件。</p></blockquote><blockquote><p>B.vue ，通过 inject 注入了从 A 组件中提供的 name 变量，组件 B 中，直接通过 this.name 访问这个变量了。</p></blockquote><blockquote><p>这就是 provide / inject API 最核心的用法。</p></blockquote><blockquote><p>需要注意的是：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的----vue 官方文档,所以，上面 A.vue 的 name 如果改变了，B.vue 的 this.name 是不会改变的。</p></blockquote><p><strong>provide 与 inject 怎么实现数据响应式</strong></p><p><strong>方法 1</strong>：provide 祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如 props，methods</p><p><strong>方法 2</strong>：使用 2.6 最新 API Vue.observable 优化响应式 provide(推荐)</p><p>例子：</p><p>组件 D、E 和 F 获取 A 组件传递过来的 color 值，并能实现数据响应式变化，即 A 组件的 color 变化后，组件 D、E、F 会跟着变。核心代码如下：</p><p>A 组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;A 组件&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> changeColor</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;改变color&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">ChildrenB</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">ChildrenC</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;blue&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		theme</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			color</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 这种方式绑定的数据并不是可响应的</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 即A组件的color变化后，组件D、E、F不会跟着变</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		theme</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//方法一：提供祖先组件的实例</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		changeColor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> color</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;blue&quot;</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;red&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;blue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 方法二:使用2.6最新API Vue.observable 优化响应式 provide</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">theme</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observable</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;blue&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			theme</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">theme</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		changeColor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">theme</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> color</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">theme</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> 	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">theme</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;blue&quot;</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;red&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;blue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><p>F 组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> functional</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;border2&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">style</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">injections</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">theme</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;"> }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;F 组件&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	inject</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		theme</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//函数式组件取值不一样</span></span>
<span class="line"><span style="color:#61AFEF;">			default</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({}),</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>注：provide 和 inject 主要为高阶插件/组件库提供用例，能在业务中熟练运用，可以达到事半功倍的效果！</p><h4 id="vue3-1" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3-1" aria-label="Permalink to &quot;Vue3&quot;">​</a></h4><p><code>provide/inject</code>用于<code>多级组件间的传参</code>，只需要在需要传参的地方使用<code>provide</code>，在它的<code>其它后代组件</code>中使用<code>inject</code>，就可以获取到传来的值。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">provide</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 后代组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">inject</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onMounted</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> inject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">onMounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Lee</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="attrs-listeners-vue3废弃-父子、多层组件通信-vue2-4" tabindex="-1">$attrs/<s>$listeners(Vue3废弃)</s>(父子、多层组件通信)(Vue2.4+) <a class="header-anchor" href="#attrs-listeners-vue3废弃-父子、多层组件通信-vue2-4" aria-label="Permalink to &quot;$attrs/~~$listeners(Vue3废弃)~~(父子、多层组件通信)(Vue2.4+)&quot;">​</a></h3><ul><li><code>$attrs</code>：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件。通常配合 interitAttrs 选项一起使用。</li><li><s>$listeners(Vue3废弃)</s>：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件 <ul><li>Vue3废弃文档：<a href="https://v3-migration.vuejs.org/zh/breaking-changes/listeners-removed.html" target="_blank" rel="noreferrer">移除 $listeners | Vue 3 迁移指南 (vuejs.org)</a></li></ul></li></ul><p>使用例子：</p><p>index.vue</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;王者峡谷&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">child-com1</span></span>
<span class="line"><span style="color:#ABB2BF;">			:</span><span style="color:#D19A66;">foo</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			:</span><span style="color:#D19A66;">boo</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">boo</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			:</span><span style="color:#D19A66;">coo</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">coo</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			:</span><span style="color:#D19A66;">doo</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">doo</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#D19A66;">			title</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;前端工匠&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&gt;&lt;/</span><span style="color:#E06C75;">child-com1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> childCom1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./childCom1.vue&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">childCom1</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			foo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Javascript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			boo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Html&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			coo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;CSS&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			doo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Vue&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>childCom1.vue</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;border&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;foo: {{ </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;childCom1的$attrs: {{ </span><span style="color:#E06C75;">$attrs</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">child-com2</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">$attrs</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">child-com2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> childCom2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./childCom2.vue&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		childCom2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	inheritAttrs</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// foo作为props属性绑定</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	created</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$attrs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// { &quot;boo&quot;: &quot;Html&quot;, &quot;coo&quot;: &quot;CSS&quot;, &quot;doo&quot;: &quot;Vue&quot;, &quot;title&quot;: &quot;前端工匠&quot; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>childCom2.vue</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;border&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;boo: {{ </span><span style="color:#E06C75;">boo</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;childCom2: {{ </span><span style="color:#E06C75;">$attrs</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">child-com3</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">$attrs</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">child-com3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> childCom3</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./childCom3.vue&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		childCom3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	inheritAttrs</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		boo</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	created</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$attrs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// {&quot;coo&quot;: &quot;CSS&quot;, &quot;doo&quot;: &quot;Vue&quot;, &quot;title&quot;: &quot;前端工匠&quot; }</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>childCom3.vue</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;border&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;childCom3: {{ </span><span style="color:#E06C75;">$attrs</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		coo</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		title</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>所示<code>$attrs</code>表示没有继承数据的对象，格式为{属性名：属性值}。Vue2.4 提供了<code>$attrs , $listeners</code> 来传递数据与事件，跨级组件之间的通讯变得更简单。</p><p>简单来说：<code>$attrs与$listeners</code> 是两个对象，<code>$attrs</code> 里存放的是父组件中绑定的非 <code>Props</code> 属性，<code>$listeners</code>里存放的是父组件中绑定的非原生事件。</p><p><code>$attrs</code>的值是<code>父组件传过来的值中，没有被当前组件props接收的值</code>。</p><p><code>$listeners</code>的值是<code>后代组件传过来的事件中，没有被当前组件接收的方法</code>。</p><p>也就是说，它们一个是为了<code>传递属性</code>，一个是为了<code>传递方法</code>。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	height</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">180</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 后代组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useAttrs</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onMounted</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">defineProps</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">defineProps</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在setup语法糖中，使用useAttrs接收attrs，vue2中使用$attrs，composition api中作为setup函数的参数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> attrs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useAttrs</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">onMounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 因为父组件传来的name已经被当前组件接收，因此attrs的值只有age和height</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">attrs</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1.  Proxy(Object) {age: 18, height: 180}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>利用这种方法，就能实现<code>父组件向孙组件甚至更深层级的组件传参</code>。</p><p><code>$listeners</code>就不多做赘述了，毕竟是已经删除的内容，它的使用就是在<code>后代组件中抛出一个事件</code>，然后在中间传递的过程中使用<code>v-on监听事件</code>，最后在需要接收事件的组件上使用<code>@eventname</code>接收事件。</p><h3 id="vue2的eventbus-也叫-emit自定义事件-任意组件之间通信" tabindex="-1">Vue2的eventBus(也叫<code>$emit</code>自定义事件)(任意组件之间通信) <a class="header-anchor" href="#vue2的eventbus-也叫-emit自定义事件-任意组件之间通信" aria-label="Permalink to &quot;Vue2的eventBus(也叫\`$emit\`自定义事件)(任意组件之间通信)&quot;">​</a></h3><p><s>event.$on(Vue3废弃)</s>、<s>event.$off(Vue3废弃)</s>、<code>event.$emit</code></p><p>在<code>Vue2</code>中，可以通过<code>新建一个文件夹，然后new一个Vue实例</code>，去实现一个<code>事件总线</code>，它可以在<code>任何组件</code>之间通过<code>$emit发送事件</code>、<code>$on监听事件</code>、<code>$once监听一次事件</code>、<code>$off停止监听事件</code>，即使是两个<code>毫无关系的组件</code>，想进行消息传递时，只需要其中一个组件使用<code>$emit发送一个事件</code>，在另一个组件中使用<code>$on/$once监听该事件</code>，然后执行相应的逻辑，在<code>组件销毁或非激活态</code>的时候<code>使用$off停止监听</code>，就可以做到<code>跨层级的通信</code>。</p><p>在<code>Vue3</code>中，移除了<code>事件总线</code>，但是依然有一些<code>第三方库</code>实现了该功能，比如<code>Mitt</code>，使用方式也和 Vue2 中的相似。</p><p>之所以移除了事件总线，是因为在使用该功能时，很容易导致<code>代码的混乱</code>，不同的组件<code>抛出各种事件</code>，这些事件又被各种组件接收，太多时就会产生<code>难以溯源</code>的情况，不知道这些事件都是从哪个组件发出来的，让代码变得<code>难以维护</code>。并且有些开发者在使用时，不遵守规范，<code>只使用$on，不使用$off关闭</code>，浪费性能。</p><p>废弃API：<a href="https://v3-migration.vuejs.org/zh/breaking-changes/events-api.html" target="_blank" rel="noreferrer">事件 API | Vue 3 迁移指南 (vuejs.org)</a></p><p><strong>工作原理：</strong></p><ol><li>创建一个全局的 Vue 实例作为事件总线。</li><li>组件可以通过该事件总线实例的 <code>$emit()</code> 方法触发事件，并传递数据。</li><li>其他组件可以通过 <code>$on()</code> 方法监听这些事件，并在事件发生时执行相应的操作。</li></ol><p><strong>优点：</strong></p><ul><li>简单易用，适用于简单的应用场景。</li><li>无需安装额外的库或依赖，直接使用 Vue2 的特性。</li></ul><p><strong>缺点：</strong></p><ul><li>全局事件总线可能导致事件命名冲突和不可预测性。</li><li>不适用于大型应用程序或需要严格状态管理的场景。</li></ul><p>使用 eventBus 的方法，它的本质是通过创建一个空的 Vue2 实例来作为消息传递的对象，通信的组件引入这个实例，通信的组件通过在这个实例上监听和触发事件，来实现消息的传递。</p><p>使用 eventBus ，其实就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。</p><p>可以给变量名：<code>$bus</code></p><p><strong>实现例子</strong>：</p><p>创建 bus 文件：bus.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#E06C75;"> defult</span><span style="color:#E06C75;"> new</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>gg 组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;gg组件&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">sendMsg</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;将数据发送给dd组件&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> bus</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./bus&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		sendMsg</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			bus</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sendTitle&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;传递的值&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>dd 组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;接收gg传递过来的值：{{ </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> bus</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;./bus&#39;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    data</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            mag</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    mounted</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">        bus</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;sendTitle&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mag</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> val</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="vue2-的-vue-observable" tabindex="-1">vue2 的 Vue.observable <a class="header-anchor" href="#vue2-的-vue-observable" aria-label="Permalink to &quot;vue2 的 Vue.observable&quot;">​</a></h3><p>原理就是创建一个响应式对象，可以实现让组件共享数据，不管是平级 跨级或者父子组件，类似于 pinia 或者 vuex 类的状态管理工具。但是有缺陷，数据修改比较随意，开发中用的不多，vue3 也不会用这个 api。</p><h3 id="消息订阅与发布" tabindex="-1">消息订阅与发布 <a class="header-anchor" href="#消息订阅与发布" aria-label="Permalink to &quot;消息订阅与发布&quot;">​</a></h3><p>需要引入消息订阅与发布的实现库, 如: pubsub-js、mitt(Vue3推荐)</p><ul><li>a. 订阅消息：<code>PubSub.subscribe(&#39;msg&#39;, (msg, data)=&gt;{})</code></li><li>b. 发布消息：<code>PubSub.publish(&#39;msg&#39;, data)</code></li></ul><p>优点: 此方式可用于任意关系组件间通信</p><h3 id="vuex-pinia-任意组件之间通信" tabindex="-1">Vuex/Pinia(任意组件之间通信) <a class="header-anchor" href="#vuex-pinia-任意组件之间通信" aria-label="Permalink to &quot;Vuex/Pinia(任意组件之间通信)&quot;">​</a></h3><p><code>Vuex</code>和<code>pinia</code>都是<code>状态管理工具</code>，通常在<code>Vue2中使用Vuex</code>，在<code>Vue3中</code>作者更推崇我们使用<code>pinia</code>，同时<code>pinia也兼容了Vue2</code>。</p><p>什么是状态管理工具呢，我们可以把它看作是一个<code>仓库（store）</code>，当有一些<code>公共的属性和方法</code>时，我们可以存储到这个 store 中，不管是<code>父子、爷孙</code>，甚至<code>毫无关系</code>的两个组件，都可以向<code>store中存储数据</code>，而其它组件想使用这些数据时，直接从<code>store获取</code>，就实现了<code>跨层级的数据共享和传参</code>。</p><p>如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候采用上面这一些方法可能不利于项目的维护。</p><p>这个时候可以使用 Vuex/Pinia ， Vuex/Pinia的思想就是将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。</p><h4 id="vuex" tabindex="-1">Vuex <a class="header-anchor" href="#vuex" aria-label="Permalink to &quot;Vuex&quot;">​</a></h4><h4 id="pinia" tabindex="-1">Pinia <a class="header-anchor" href="#pinia" aria-label="Permalink to &quot;Pinia&quot;">​</a></h4><p>使用 Pinia 管理状态时，你可以通过在组件中使用 <code>useStore</code> 钩子来获取整个 store 实例，并从中获取数据。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> message</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			message</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>总的来说，在 Vue.js 中实现组件传值的步骤可以概括为：定义数据、传递数据、接收数据、触发事件、监听事件等。根据具体的场景和需求，选择合适的传值方式，并按照以上步骤进行相应的操作，即可完成组件间的数据传递。</p><h3 id="slot插槽-父向子" tabindex="-1">slot插槽(父向子) <a class="header-anchor" href="#slot插槽-父向子" aria-label="Permalink to &quot;slot插槽(父向子)&quot;">​</a></h3><p>是什么：专门用来实现父向子传递带数据的标签</p><ul><li>a. 子组件</li><li>b. 父组件</li></ul><p>注意：通信的标签模板是在父组件中解析好后再传递给子组件的</p><h3 id="root" tabindex="-1">$root <a class="header-anchor" href="#root" aria-label="Permalink to &quot;$root&quot;">​</a></h3><h2 id="总结-vue-通信方案" tabindex="-1">总结 Vue 通信方案 <a class="header-anchor" href="#总结-vue-通信方案" aria-label="Permalink to &quot;总结 Vue 通信方案&quot;">​</a></h2><ul><li><p>通过 props 传递</p></li><li><p>通过 $emit 触发自定义事件</p></li><li><p>使用 ref</p></li><li><p>EventBus</p></li><li><p><code>$parent</code>或<code>$root</code></p></li><li><p>attrs 与 listeners</p></li><li><p>Provide 与 Inject</p></li><li><p>Vuex</p></li></ul><p>组件间通信的分类可以分成以下</p><ul><li><p>父子关系的组件数据传递选择 props 与 $emit进行传递，也可选择ref</p></li><li><p>兄弟关系的组件数据传递可选择<code>$bus</code>，其次可以选择<code>$parent</code> 进行传递</p></li><li><p>祖先与后代组件数据传递可选择 attrs 与 listeners 或者 Provide 与 Inject</p></li><li><p>复杂关系的组件数据传递可以通过 vuex 存放共享的变量</p></li></ul><h3 id="_1-父子组件通信" tabindex="-1">1.父子组件通信： <a class="header-anchor" href="#_1-父子组件通信" aria-label="Permalink to &quot;1.父子组件通信：&quot;">​</a></h3><ul><li><p>父向子传递数据是通过<code>props</code>，子向父是通过<code>$emit</code>触发事件；</p></li><li><p>通过父链/子链也可以通信（<code>$parent</code>/<code>$children</code>）；</p></li><li><p><code>ref</code>也可以访问组件实例；</p></li><li><p><code>provide</code> + <code>inject</code>；</p></li><li><p><code>$attrs</code>/<code>$listeners</code>。</p></li></ul><h3 id="_2-兄弟组件通信" tabindex="-1">2.兄弟组件通信： <a class="header-anchor" href="#_2-兄弟组件通信" aria-label="Permalink to &quot;2.兄弟组件通信：&quot;">​</a></h3><p>全局事件总线<code>EventBus</code>、<code>Vuex|Pinia</code>。</p><h3 id="_3-跨层级组件通信" tabindex="-1">3.跨层级组件通信： <a class="header-anchor" href="#_3-跨层级组件通信" aria-label="Permalink to &quot;3.跨层级组件通信：&quot;">​</a></h3><p>全局事件总线<code>EventBus</code>、<code>Vuex|Pinia</code>、<code>provide</code>+<code>inject</code>、<code>$attrs</code>/<code>$listeners</code>。</p><h3 id="组件传参的各种方式图例" tabindex="-1">组件传参的各种方式图例 <a class="header-anchor" href="#组件传参的各种方式图例" aria-label="Permalink to &quot;组件传参的各种方式图例&quot;">​</a></h3><p><img src="`+h+`" alt="image-20240326170930251"></p><h2 id="vue-sync-的作用" tabindex="-1">vue.sync 的作用 <a class="header-anchor" href="#vue-sync-的作用" aria-label="Permalink to &quot;vue.sync 的作用&quot;">​</a></h2><p><code>vue.sync</code>可以让父子组件的<code>prop</code>进行“双向绑定”，可允许子组件修改父组件传来的<code>prop</code>，父组件中的值也随着变化。</p><h5 id="v-model-和-sync-的区别" tabindex="-1">V-model 和 sync 的区别 <a class="header-anchor" href="#v-model-和-sync-的区别" aria-label="Permalink to &quot;V-model 和 sync 的区别&quot;">​</a></h5><ul><li>在 <code>Vue2</code> 中，<code>v-model</code> 只能使用一次，而 <code>sync</code> 能使用多次；</li><li>在 <code>Vue3</code> 中，删除了<code>sync</code>，但是<code>v-model</code>可以以 <code>v-model:xxx</code> 的形式使用多次；</li></ul><h2 id="为什么-new-一个-vue2-实例可以使用事件总线" tabindex="-1">为什么 new 一个 Vue2 实例可以使用事件总线 <a class="header-anchor" href="#为什么-new-一个-vue2-实例可以使用事件总线" aria-label="Permalink to &quot;为什么 new 一个 Vue2 实例可以使用事件总线&quot;">​</a></h2><p>因为<code>Vue2</code>每个实例上有<code>$emit</code>、<code>$on</code>、<code>$off</code>、<code>$once</code>等方法，我们的每个组件<code>都是一个Vue实例</code>，因此它们是不可以共享的，但是当创建一个公共的 Vue 实例时，将此实例导入我们需要使用<code>事件总线</code>的文件，然后调用实例上的<code>$emit</code>方法，抛出事件，在需要接收事件的页面调用<code>$on</code>方法，这两个页面访问的是<code>同一个实例上的方法</code>，事件和数据就可以共享了。</p><h2 id="实现事件总线-eventbus" tabindex="-1">实现事件总线：eventBus <a class="header-anchor" href="#实现事件总线-eventbus" aria-label="Permalink to &quot;实现事件总线：eventBus&quot;">​</a></h2><p>事件总线是<code>发布订阅者模式</code>的一个场景。</p><p>实现事件总线，有几个关键点，需要创建一个集合去记录<code>订阅者和发布者的映射关系</code>。<code>on</code>方法用于<code>监听事件</code>，也就是<code>订阅者</code>，<code>emit</code>用于<code>派发事件</code>，也就是<code>发布者</code>，然后可以通过<code>off</code>去<code>取消监听</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> eventBus</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 创建map集合，记录事件名称以及该事件触发的回调集合</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> map</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 订阅事件</span></span>
<span class="line"><span style="color:#61AFEF;">		on</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 获取到该事件名对应的回调</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> handlers</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">handlers</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				handlers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 发布事件</span></span>
<span class="line"><span style="color:#61AFEF;">		emit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 获取到该事件名对应的所有回调</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> handlers</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">handlers</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				handlers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">handler</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">					handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 取消某个回调</span></span>
<span class="line"><span style="color:#61AFEF;">		off</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 获取到该事件名对应的回调</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> handlers</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">handlers</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 判断准备取消的回调是否在记录中</span></span>
<span class="line"><span style="color:#C678DD;">					const</span><span style="color:#E5C07B;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> handlers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">						return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;回调不存在&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 删除该回调</span></span>
<span class="line"><span style="color:#E5C07B;">					handlers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">					map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">, []);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="子组件是否可以直接改变父组件的数据" tabindex="-1">子组件是否可以直接改变父组件的数据？ <a class="header-anchor" href="#子组件是否可以直接改变父组件的数据" aria-label="Permalink to &quot;子组件是否可以直接改变父组件的数据？&quot;">​</a></h2><p>1.所有的<code>prop</code>都遵循着单项绑定原则，<code>props</code>因父组件的更新而变化，自然地将新状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。 另外，每次父组件更新后，所有的子组件中的<code>props</code>都会被更新为最新值，这就意味着不应该子组件中去修改一个<code>prop</code>，若这么做了，Vue 会在控制台上抛出警告。</p><p>2.实际开发过程中通常有两个场景导致要修改<code>prop</code>：</p><ul><li><p><code>prop</code>被用于传入初始值，而子组件想在之后将其作为一个局部数据属性。这种情况下，最好是新定义一个局部数据属性，从<code>props</code>获取初始值即可。</p></li><li><p>需要对传入的<code>prop</code>值做进一步转换。最好是基于该<code>prop</code>值定义一个计算属性。</p></li></ul><p>3.实践中，如果确实要更改父组件属性，应<code>emit</code>一个事件让父组件变更。当对象或数组作为<code>props</code>被传入时，虽然子组件无法更改<code>props</code>绑定，但仍然<strong>可以</strong>更改对象或数组内部的值。这是因为 JS 的对象和数组是按引用传递，而对于 Vue 来说，禁止这样的改动虽然可能，但是有很大的性能损耗，比较得不偿失。</p><h2 id="eventbus-与-mitt-区别" tabindex="-1">EventBus 与 mitt 区别？ <a class="header-anchor" href="#eventbus-与-mitt-区别" aria-label="Permalink to &quot;EventBus 与 mitt 区别？&quot;">​</a></h2><p><a href="https://juejin.cn/post/7142769223041974286#heading-55" target="_blank" rel="noreferrer">Vue3.0 通关秘籍</a></p><p><code>Vue2</code> 中我们使用 <code>EventBus</code> 来实现跨组件之间的一些通信，它依赖于 <code>Vue</code> 自带的 <code>$on/$emit/$off</code> 等方法，这种方式使用非常简单方便，但如果使用不当也会带来难以维护的毁灭灾难。</p><p>而 <code>Vue3</code> 中移除了这些相关方法，这意味着 <code>EventBus</code> 这种方式我们使用不了， <code>Vue3</code> 推荐尽可能使用 <code>props/emits</code>、<code>provide/inject</code>、<code>vuex</code> 等其他方式来替代。</p><p>当然，如果 <code>Vue3</code> 内部的方式无法满足你，官方建议使用一些外部的辅助库，例如：<a href="https://github.com/developit/mitt" target="_blank" rel="noreferrer">mitt</a>。</p><p>优点</p><ul><li>非常小，压缩后仅有 <code>200 bytes</code>。</li><li>完整 <code>TS</code> 支持，源码由 <code>TS</code> 编码。</li><li>跨框架，它并不是只能用在 <code>Vue</code> 中，<code>React</code>、<code>JQ</code> 等框架中也可以使用。</li><li>使用简单，仅有 <code>on</code>、<code>emit</code>、<code>off</code> 等少量实用 API。</li></ul><h2 id="vue-中子组件调用父组件的方法" tabindex="-1">vue 中子组件调用父组件的方法 <a class="header-anchor" href="#vue-中子组件调用父组件的方法" aria-label="Permalink to &quot;vue 中子组件调用父组件的方法&quot;">​</a></h2><p>Vue 中子组件调用父组件的方法，这里有三种方法提供参考</p><h3 id="方法-1-是直接在子组件中通过-this-parent-event-来调用父组件的方法" tabindex="-1">方法 1：是直接在子组件中通过 this.$parent.event 来调用父组件的方法 <a class="header-anchor" href="#方法-1-是直接在子组件中通过-this-parent-event-来调用父组件的方法" aria-label="Permalink to &quot;方法 1：是直接在子组件中通过 this.$parent.event 来调用父组件的方法&quot;">​</a></h3><p>父组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> child</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;~/components/dam/child&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		child</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		fatherMethod</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>子组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">childMethod</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		childMethod</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$parent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fatherMethod</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="方法-2-在子组件里用-emit-向父组件触发一个事件-父组件监听这个事件就行了。" tabindex="-1">方法 2：在子组件里用 $emit 向父组件触发一个事件，父组件监听这个事件就行了。 <a class="header-anchor" href="#方法-2-在子组件里用-emit-向父组件触发一个事件-父组件监听这个事件就行了。" aria-label="Permalink to &quot;方法 2：在子组件里用 $emit 向父组件触发一个事件，父组件监听这个事件就行了。&quot;">​</a></h3><p>父组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">fatherMethod</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">fatherMethod</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> child</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;~/components/dam/child&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		child</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		fatherMethod</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>子组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">childMethod</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		childMethod</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fatherMethod&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="方法-3-是父组件把方法传入子组件中-在子组件里直接调用这个方法" tabindex="-1">方法 3：是父组件把方法传入子组件中，在子组件里直接调用这个方法 <a class="header-anchor" href="#方法-3-是父组件把方法传入子组件中-在子组件里直接调用这个方法" aria-label="Permalink to &quot;方法 3：是父组件把方法传入子组件中，在子组件里直接调用这个方法&quot;">​</a></h3><p>父组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">fatherMethod</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">fatherMethod</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> child</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;~/components/dam/child&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		child</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		fatherMethod</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>子组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">childMethod</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		fatherMethod</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Function</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		childMethod</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fatherMethod</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fatherMethod</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="子组件可以直接改变父组件的数据吗" tabindex="-1">子组件可以直接改变父组件的数据吗？ <a class="header-anchor" href="#子组件可以直接改变父组件的数据吗" aria-label="Permalink to &quot;子组件可以直接改变父组件的数据吗？&quot;">​</a></h2><h3 id="分析-2" tabindex="-1">分析 <a class="header-anchor" href="#分析-2" aria-label="Permalink to &quot;分析&quot;">​</a></h3><blockquote><p>这是一个实践知识点，组件化开发过程中有个<code>单项数据流原则</code>，不在子组件中修改父组件是个常识问题。</p></blockquote><h3 id="思路-1" tabindex="-1">思路 <a class="header-anchor" href="#思路-1" aria-label="Permalink to &quot;思路&quot;">​</a></h3><ol><li>讲讲单项数据流原则，表明为何不能这么做</li><li>举几个常见场景的例子说说解决方案</li><li>结合实践讲讲如果需要修改父组件状态应该如何做</li></ol><p>文档：<a href="https://vuejs.org/guide/components/props" target="_blank" rel="noreferrer">Props | Vue.js (vuejs.org)</a></p><h3 id="回答" tabindex="-1">回答： <a class="header-anchor" href="#回答" aria-label="Permalink to &quot;回答：&quot;">​</a></h3><p><strong>子组件不可以直接改变父组件的数据。</strong></p><p>这样做主要是为了维护父子组件的单向数据流。每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。如果这样做了，Vue 会在浏览器的控制台中发出警告。</p><p>Vue 提倡单向数据流，即父级 props 的更新会流向子组件，但是反过来则不行。这是为了防止意外的改变父组件状态，使得应用的数据流变得难以理解，导致数据流混乱。如果破坏了单向数据流，当应用复杂时，debug 的成本会非常高。</p><p>只能通过 <code>$emit</code> 派发一个自定义事件，父组件接收到后，由父组件修改。</p><ol><li>所有的 prop 都使得其父子之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。另外，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器控制台中发出警告。</li><li>实际开发过程中有两个场景会想要修改一个属性：</li></ol><ul><li><code>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用</code>。在这种情况下，最好定义一个本地的 data，并将这个 prop 用作其初始值：</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> props</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineProps</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;initialCounter&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> counter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">initialCounter</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> props</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineProps</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// ❌ 下面行为会被警告, props是只读的!</span></span>
<span class="line"><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">foo</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;bar&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>这个 prop 以一种原始的值传入且需要进行转换</code>。在这种情况下，最好使用这个 prop 的值来定义一个计算属性：</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> props</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineProps</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;size&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// prop变化，计算属性自动更新</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> normalizedSize</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> props</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">size</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>实践中如果确实想要改变父组件属性应该<code>emit一个事件让父组件去做这个变更</code>。注意虽然我们不能直接修改一个传入的对象或者数组类型的 prop，但是我们还是能够直接改内嵌的对象或属性。</p><p>实际开发过程中有两个场景会想要修改一个属性：</p><ul><li><p>**这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。**在这种情况下，最好定义一个本地的 data，并将这个 prop 用作其初始值：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> props</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineProps</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;initialCounter&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> counter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">initialCounter</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>**这个 prop 以一种原始的值传入且需要进行转换。**在这种情况下，最好使用这个 prop 的值来定义一个计算属性：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> props</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineProps</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;size&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// prop变化，计算属性自动更新</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> normalizedSize</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> props</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">size</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><p>实践中如果确实想要改变父组件属性应该 emit 一个事件让父组件去做这个变更。注意虽然我们不能直接修改一个传入的对象或者数组类型的 prop，但是我们还是能够直接改内嵌的对象或属性。</p><h2 id="vue2-的-vue-observable-有了解过吗-说说看" tabindex="-1">vue2 的 Vue.observable 有了解过吗？说说看 <a class="header-anchor" href="#vue2-的-vue-observable-有了解过吗-说说看" aria-label="Permalink to &quot;vue2 的 Vue.observable 有了解过吗？说说看&quot;">​</a></h2><p>原理就是创建一个响应式对象，可以实现让组件共享数据，不管是平级 跨级或者父子组件，类似于 pinia 或者 vuex 类的状态管理工具。但是有缺陷，数据修改比较随意，开发中用的不多，vue3 也不会用这个 api。</p><h2 id="说说options-api-中的-provide-inject" tabindex="-1">说说options API 中的 provide/inject <a class="header-anchor" href="#说说options-api-中的-provide-inject" aria-label="Permalink to &quot;说说options API 中的 provide/inject&quot;">​</a></h2><p>在使用<code>optionsApi</code>（一般在 Vue2 时使用）时，可以这样使用<code>provide/inject</code>。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	provide</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;HelloWorld&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Lee</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>但是这种传参有一个缺点，那就是参数<code>不是响应式</code>的，如果传递<code>data中的数据呢</code>？</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Child&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">change</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;改变属性值&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		HelloWorld</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		change</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Father&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$refs</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Child</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Lee</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;HelloWorld&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Lee</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>传递<code>data</code>中的数据时，<code>provide</code>就要写成一个函数，返回一个<code>对象</code>，虽然传递的是<code>data中的数据</code>，但是<code>依旧不是响应式的</code>。</p><p>想要将它变成响应式，一共有三种方法：<code>传递父组件实例</code>、<code>使用Vue.observable</code>、<code>使用computed</code>。</p><h3 id="传递父组件实例" tabindex="-1">传递父组件实例 <a class="header-anchor" href="#传递父组件实例" aria-label="Permalink to &quot;传递父组件实例&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Child&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">change</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;改变属性值&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		HelloWorld</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			father</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		change</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Father&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$refs</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Child</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">father</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Father</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;HelloWorld&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;father&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">father</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Lee</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h3 id="使用-vue-observable" tabindex="-1">使用 Vue.observable <a class="header-anchor" href="#使用-vue-observable" aria-label="Permalink to &quot;使用 Vue.observable&quot;">​</a></h3><p><code>Vue.observable</code>是<code>Vue2.6.0</code>之后新增的一个 API，它的作用就是<code>让一个对象变成响应式的</code>。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Child&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">change</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;改变属性值&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		HelloWorld</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observable</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1.  {value: &#39;Lee&#39;}</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		change</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Father&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$refs</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Child</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Father</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;HelloWorld&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Lee</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h3 id="使用-computed" tabindex="-1">使用 computed <a class="header-anchor" href="#使用-computed" aria-label="Permalink to &quot;使用 computed&quot;">​</a></h3><p>在<code>Vue3</code>中，已经无法使用<code>Vue.observable</code>了，但是 vue3 提供了<code>computed函数</code>。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Child&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">change</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;改变属性值&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		HelloWorld</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		change</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Father&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$refs</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Child</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Father</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;HelloWorld&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Lee</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h2 id="说一下-vue-子组件和父组件创建和挂载顺序" tabindex="-1">说一下 Vue 子组件和父组件创建和挂载顺序 <a class="header-anchor" href="#说一下-vue-子组件和父组件创建和挂载顺序" aria-label="Permalink to &quot;说一下 Vue 子组件和父组件创建和挂载顺序&quot;">​</a></h2><p>这题考查大家对创建过程的理解程度。</p><h3 id="思路分析" tabindex="-1">思路分析 <a class="header-anchor" href="#思路分析" aria-label="Permalink to &quot;思路分析&quot;">​</a></h3><ol><li>给结论</li><li>阐述理由</li></ol><hr><h3 id="回答范例-4" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-4" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><p>1.创建过程自上而下，挂载过程自下而上；即：</p><ul><li>parent created</li><li>child created</li><li>child mounted</li><li>parent mounted</li></ul><p>2.之所以会这样是因为 Vue 创建过程是一个递归过程，先创建父组件，有子组件就会创建子组件，因此创建时先有父组件再有子组件；</p><p>3.子组件首次创建时会添加 mounted 钩子到队列，等到 patch 结束再执行它们，可见子组件的 mounted 钩子是先进入到队列中的，因此等到 patch 结束执行这些钩子时也先执行。</p><hr><h3 id="知其所以然-2" tabindex="-1">知其所以然 <a class="header-anchor" href="#知其所以然-2" aria-label="Permalink to &quot;知其所以然&quot;">​</a></h3><p>观察 beforeCreated 和 created 钩子的处理</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentOptions.ts%23L554-L555" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentOptions.ts%23L554-L555</a></p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentOptions.ts%23L741-L742" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentOptions.ts%23L741-L742</a></p><p>观察 beforeMount 和 mounted 钩子的处理</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L1310-L1311" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L1310-L1311</a></p><p>测试代码，test-v3.html</p><h2 id="vue2-中的-ref-是什么-作用是什么" tabindex="-1">Vue2 中的 ref 是什么？作用是什么？ <a class="header-anchor" href="#vue2-中的-ref-是什么-作用是什么" aria-label="Permalink to &quot;Vue2 中的 ref 是什么？作用是什么？&quot;">​</a></h2><p><code>ref </code>被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <code>$refs</code> 对象上。</p><p>如果在普通的 <code>DOM</code> 元素上使用，引用指向的就是 <code>DOM</code> 元素；如果用在子组件上，引用就指向组件实例。</p><p><code>ref</code> 的作用是被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <code>$refs</code> 对象上。其特点是：</p><ul><li>如果在普通的 <code>DOM</code> 元素上使用，引用指向的就是 <code>DOM</code> 元素</li><li>如果用在子组件上，引用就指向组件实例</li></ul><p>所以常见的使用场景有：</p><ol><li>基本用法，本页面获取 <code>DOM</code> 元素</li><li>获取子组件中的 <code>data</code></li><li>调用子组件中的方法</li></ol><h2 id="❤vue2的vue-extend" tabindex="-1">❤Vue2的Vue.extend <a class="header-anchor" href="#❤vue2的vue-extend" aria-label="Permalink to &quot;❤Vue2的Vue.extend&quot;">​</a></h2><p><a href="https://cn.vuejs.org/api/options-composition.html#extends" target="_blank" rel="noreferrer">组合选项 | Vue.js (vuejs.org)</a></p><p><code>extends</code> 是为选项式 API 设计的，不会处理 <code>setup()</code> 钩子的合并。</p><p>有时候由于业务需要我们可能要去动态的<code>生成一个组件</code>并且要独立<code>渲染到其它元素节点</code>中，这时它们就派上了用场；</p><h3 id="extend-原理" tabindex="-1">extend 原理 <a class="header-anchor" href="#extend-原理" aria-label="Permalink to &quot;extend 原理&quot;">​</a></h3><ul><li><code>Vue.extend</code> 作用是扩展组件生成一个构造器，它接受一个组件对象，使用原型继承的方法返回了<code>Vue</code>的子类，并且把传入组件的<code>options</code>和父类的<code>options</code>进行了合并；通常会与 <code>$mount</code> 一起使用。</li><li>所以，我们使用<code>extend</code>可以将组件转为构造函数，在实例化这个这个构造函数后，就会得到组件的真实<code>Dom</code>，这个时候我们就可以使用 <code>$mount</code> 去挂载到<code>DOM</code>上；</li></ul><p>从实现角度来看，<code>extends</code> 几乎和 <code>mixins</code> 相同。通过 <code>extends</code> 指定的组件将会当作第一个 mixin 来处理。</p><p>然而，<code>extends</code> 和 <code>mixins</code> 表达的是不同的目标。<code>mixins</code> 选项基本用于组合功能，而 <code>extends</code> 则一般更关注继承关系。</p><p>同 <code>mixins</code> 一样，所有选项 (<code>setup()</code> 除外) 都将使用相关的策略进行合并。</p><h3 id="使用示例" tabindex="-1">使用示例： <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例：&quot;">​</a></h3><p>这个 API 很少用到，作用是扩展组件生成一个构造器，通常会与 $mount 一起使用。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建组件构造器</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Component</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&lt;div&gt;test&lt;/div&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 挂载到 #app 上</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Component</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">$mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 除了上面的方式，还可以用来扩展已有的组件</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> SuperComponent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> SuperComponent</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	created</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> SuperComponent</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">$mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>2</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mount-point&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建构造器 </span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> Profile</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">({ </span></span>
<span class="line"><span style="color:#E06C75;">    template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&lt;p&gt;{{firstName}} {{lastName}} aka {{alias}}&lt;/p</span><span style="color:#FFFFFF;">&gt;</span></span>
<span class="line"><span style="color:#98C379;">&#39;,</span><span style="color:#FFFFFF;"> </span></span>
<span class="line"><span style="color:#E06C75;">    data</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () { </span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> { </span></span>
<span class="line"><span style="color:#E06C75;">            firstName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Walter&#39;</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#E06C75;">            lastName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;White&#39;</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#E06C75;">            alias</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Heisenberg&#39;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span></span>
<span class="line"><span style="color:#ABB2BF;">}) </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建 Profile 实例，并挂载到一个元素上。 </span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Profile</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">$mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#mount-point&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="vue2-中-mixin-与-extend-区别" tabindex="-1">Vue2 中 mixin 与 extend 区别？ <a class="header-anchor" href="#vue2-中-mixin-与-extend-区别" aria-label="Permalink to &quot;Vue2 中 mixin 与 extend 区别？&quot;">​</a></h2><p>mixin 和 extends 均是用于合并、拓展组件的，两者均通过 mergeOptions 方法实现合并。</p><p>mixins 接收一个混入对象的数组，其中混入对象可以像正常的实例对象一样包含实例选项，这些选项会被合并到最终的选项中。Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。</p><p>extends 主要是为了便于扩展单文件组件，接收一个对象或构造函数。</p><p><code>mixin</code> 全局注册混合对象（组件复用），会影响到所有之后创建的 vue 实例，而 <code>Vue.extend</code> 是对单个实例进行扩展。</p><p>同名钩子函数（bind，inserted，update，componentUpdate，unbind）将混合为一个数组，因此都将被调用，混合对象的钩子将在组件自身钩子之前调用 methods，components，directives 将被混为同一个对象。</p><p>两个对象的键名（方法名，属性名）冲突时，取组件（而非 mixin）对象的键值对。</p><h2 id="vue2-中mixin-和-mixins-区别" tabindex="-1">Vue2 中mixin 和 mixins 区别 <a class="header-anchor" href="#vue2-中mixin-和-mixins-区别" aria-label="Permalink to &quot;Vue2 中mixin 和 mixins 区别&quot;">​</a></h2><p>mixin 用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	beforeCreate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ...逻辑</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 这种方式会影响到每个组件的 beforeCreate 钩子函数</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><p>虽然文档不建议我们在应用中直接使用 mixin ，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的 ajax 或者一些工具函数等等。</p></li><li><p>mixins 应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 mixins 混入代码，比如上拉下拉加载数据这种逻辑等等。</p></li><li><p>另外需要注意的是 mixins 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并，具体可以阅读 文档。</p></li><li><p><code>mixin</code> 用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。</p></li><li><p><code>mixins</code> 用于多组件抽离。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 <code>mixins</code> 混入代码，比如上拉下拉加载数据这种逻辑等等。</p></li><li><p>另外需要注意的是 <code>mixins</code> 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并，具体可以阅读 文档。</p></li></ul><h2 id="vue2-中的vue-mixin-的使用场景和原理" tabindex="-1">Vue2 中的Vue.mixin 的使用场景和原理 <a class="header-anchor" href="#vue2-中的vue-mixin-的使用场景和原理" aria-label="Permalink to &quot;Vue2 中的Vue.mixin 的使用场景和原理&quot;">​</a></h2><p>mixin 可以用来扩展组件，将公共逻辑抽离出来，在需要该逻辑的组件里进行混入，采用策略模式针对不通的属性进行合并。如果混入的数据和组件本身的数据产生冲突，以组件自身的为准。</p><p>分为局部混入和全局混入。局部混入一般是复用逻辑，全局混入一般是编写插件。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 全局混入</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mixin</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 局部混入</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">mixins</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">mixins</span><span style="color:#ABB2BF;">] });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>合并策略（核心就是对象的合并处理）：</p><ol><li>props、methods、inject、computed 同名时会被替换</li><li>data 会被合并</li><li>生命周期和 watch 会被合并成队列</li><li>components（组件）、directives（指令）、filters（过滤器）会在原型链上叠加</li></ol><h2 id="vue-mixin" tabindex="-1">Vue.mixin <a class="header-anchor" href="#vue-mixin" aria-label="Permalink to &quot;Vue.mixin&quot;">​</a></h2><p>在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，可以通过 <code>Vue</code> 的 <code>mixin</code> 功能抽离公共的业务逻辑。</p><p><code>mixin</code>（混入）， 它提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。</p><p>使用场景： 不同组件中经常会用到一些相同或相似的代码，这些代码的功能相对独立。可以通过 mixin 将相同或相似的代码提出来。</p><p>公共逻辑：mixin.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;北京&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		showName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// eslint-disable-next-line</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// eslint-disable-next-line</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mixin mounted&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>组件使用公共逻辑混入 mixin.js 例子：MixinDemo.vue</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }} {{ </span><span style="color:#E06C75;">major</span><span style="color:#ABB2BF;"> }} {{ </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">showName</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;显示姓名&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> myMixin</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./mixin&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	mixins</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">myMixin</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 可以添加多个，会自动合并起来</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			major</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;web 前端&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// eslint-disable-next-line</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;component mounted&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>mixin 并不是完美的解决方案，会有一些问题</p><ul><li>变量来源不明确，不利于阅读</li><li>多 mixin 可能会造成命名冲突</li><li>mixin 和组件可能出现多对多的关系，复杂度较高</li></ul><p>Vue 3 提出的 Composition API 旨在解决这些问题</p><h4 id="mixin的缺点" tabindex="-1">mixin的缺点： <a class="header-anchor" href="#mixin的缺点" aria-label="Permalink to &quot;mixin的缺点：&quot;">​</a></h4><ol><li>变量来源不明确</li><li>多 mixin 可能会造成命名冲突（解决方式：Vue 3 的组合 API）</li><li>mixin 和组件出现多对多的关系，使项目复杂度变高。</li></ol><h2 id="vue-中相同逻辑如何进行抽离" tabindex="-1">Vue 中相同逻辑如何进行抽离？ <a class="header-anchor" href="#vue-中相同逻辑如何进行抽离" aria-label="Permalink to &quot;Vue 中相同逻辑如何进行抽离？&quot;">​</a></h2><h3 id="vue2-2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2-2" aria-label="Permalink to &quot;Vue2&quot;">​</a></h3><p>在 Vue 2 中，mixins 是创建可重用组件逻辑的主要方式。</p><p>可以使用 <code>vue</code> 里面的混入（mixin）技术。混入（mixin）提供了一种非常灵活的方式，来将 vue 中相同的业务逻辑进行抽离。</p><p>例如：</p><ul><li>在 data 中有很多是公用数据</li><li>引用封装好的组件也都是一样的</li><li>methods、watch、computed 中也都有大量的重复代码</li></ul><p>当然这个时候可以将所有的代码重复去写来实现功能，但是我们并不不推荐使用这种方式，无论是工作量、工作效率和后期维护来说都是不建议的，这个时候 <em>mixin</em> 就可以大展身手了。</p><p>一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。说白了就是给每个生命周期，函数等等中间加入一些公共逻辑。</p><p><strong>混入技术特点</strong></p><ul><li>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。比如，数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。</li><li>同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。</li><li>值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。</li></ul><h3 id="vue3-2" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3-2" aria-label="Permalink to &quot;Vue3&quot;">​</a></h3><p>尽管在 Vue 3 中保留了 mixins 支持，但对于组件间的逻辑复用，<a href="https://cn.vuejs.org/guide/reusability/composables.html" target="_blank" rel="noreferrer">使用组合式 API 的组合式函数</a>是现在更推荐的方式。</p><h2 id="vue-extend-和-vue-component-的区别" tabindex="-1">Vue.extend 和 Vue.component 的区别？ <a class="header-anchor" href="#vue-extend-和-vue-component-的区别" aria-label="Permalink to &quot;Vue.extend 和 Vue.component 的区别？&quot;">​</a></h2><p>参考答案：</p><p>Vue.extend 用于创建一个基于 Vue 构造函数的“子类”，其参数应为一个包含组件选项的对象。</p><p>Vue.component 用来注册全局组件。</p><p>Vue3中使用 <code>app.component()</code>注册全局组件</p><p><a href="https://cn.vuejs.org/guide/components/registration.html" target="_blank" rel="noreferrer">组件注册 | Vue.js (vuejs.org)</a></p><p><a href="https://cn.vuejs.org/api/application.html#app-component" target="_blank" rel="noreferrer">应用实例 API | Vue.js (vuejs.org)</a></p><h2 id="scoped-的实现原理" tabindex="-1">scoped 的实现原理 <a class="header-anchor" href="#scoped-的实现原理" aria-label="Permalink to &quot;scoped 的实现原理&quot;">​</a></h2><p><code>vue-loader</code>构建时会动态给 <code>scoped css</code> 块与相应的 <code>template</code> 标签加上随机哈希串 <code>data-v-xxx</code></p><p>vue 中的 scoped 属性的效果主要通过 PostCSS 转译实现的。PostCSS 给一个组件中的所有 DOM 添加了一个独一无二的动态属性，然后，给 CSS 选择器额外添加一个对应的属性选择器来选择该组件中 DOM，这种做法使得样式只作用于含有该属性的 DOM，即组件内部 DOM。</p><p>例如：</p><p>转译前</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;example&quot;</span><span style="color:#ABB2BF;">&gt;hi&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#D19A66;"> scoped</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#D19A66;">.example</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	color: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>转译后：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;example&quot;</span><span style="color:#D19A66;"> data-v-5558831a</span><span style="color:#ABB2BF;">&gt;hi&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#D19A66;">.example</span><span style="color:#C678DD;">[</span><span style="color:#D19A66;">data-v-5558831a</span><span style="color:#C678DD;">]</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	color: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="scoped-是如何实现样式穿透的" tabindex="-1">scoped 是如何实现样式穿透的？ <a class="header-anchor" href="#scoped-是如何实现样式穿透的" aria-label="Permalink to &quot;scoped 是如何实现样式穿透的？&quot;">​</a></h2><h3 id="什么场景下需要-scoped-样式穿透。" tabindex="-1">什么场景下需要 <code>scoped</code> 样式穿透。 <a class="header-anchor" href="#什么场景下需要-scoped-样式穿透。" aria-label="Permalink to &quot;什么场景下需要 \`scoped\` 样式穿透。&quot;">​</a></h3><p>在很多项目中，会出现这么一种情况，即：引用了第三方组件，需要在组件中局部修改第三方组件的样式，而又不想去除 <code>scoped</code> 属性造成组件之间的样式污染。此时只能通过特殊的方式，穿透 <code>scoped</code>。</p><p>有三种常用的方法来实现样式穿透。</p><h3 id="方法一-使用-v-deep-操作符-的别名" tabindex="-1">方法一：使用 <code>::v-deep</code> 操作符( &gt;&gt;&gt; 的别名) <a class="header-anchor" href="#方法一-使用-v-deep-操作符-的别名" aria-label="Permalink to &quot;方法一：使用 \`::v-deep\` 操作符( &gt;&gt;&gt; 的别名)&quot;">​</a></h3><p>如果希望<code>scoped</code> 样式中的一个选择器能够作用得“更深”，例如影响子组件，可以使用 <code>&gt;&gt;&gt;</code> 操作符：</p><p>vue2</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#D19A66;"> scoped</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#D19A66;">.a</span><span style="color:#FFFFFF;"> &gt;&gt;&gt;</span><span style="color:#D19A66;"> .b</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;scss&quot;</span><span style="color:#D19A66;"> scoped</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#D19A66;">.wrap</span><span style="color:#ABB2BF;"> /deep/ </span><span style="color:#D19A66;">.box</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	background: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>vue3</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#D19A66;"> scoped</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;scss&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">::v-deep(</span><span style="color:#D19A66;">.el-input-group__append</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  padding: </span><span style="color:#D19A66;">0</span><span style="color:#D19A66;"> 10</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上述代码将会编译成：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#D19A66;">.a</span><span style="color:#C678DD;">[</span><span style="color:#D19A66;">data-v-f3f3eg9</span><span style="color:#C678DD;">] </span><span style="color:#D19A66;">.b</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>后面的类名没有 data 属性，所以能选到子组件里面的类名。</p><p>有些像 <code>Sass</code> 之类的预处理器无法正确解析 <code>&gt;&gt;&gt;</code>，所以需要使用 <code>::v-deep</code> 操作符来代替。</p><h3 id="方法二-使用两个style标签" tabindex="-1">方法二：使用两个<code>style</code>标签 <a class="header-anchor" href="#方法二-使用两个style标签" aria-label="Permalink to &quot;方法二：使用两个\`style\`标签&quot;">​</a></h3><p>定义一个含有 <code>scoped</code> 属性的 style 标签之外，再定义一个不含有 <code>scoped</code> 属性的 <code>style</code> 标签，即在一个 vue 组件中定义一个全局的 style 标签，一个含有作用域的 style 标签：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* global styles */</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#D19A66;"> scoped</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* local styles */</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此时，我们只需要将修改第三方样式的 css 写在第一个 style 中即可。</p><h3 id="方法三-在组件的外层-dom-上添加唯一的-class-来区分不同组件" tabindex="-1">方法三：在组件的外层 DOM 上添加唯一的 class 来区分不同组件 <a class="header-anchor" href="#方法三-在组件的外层-dom-上添加唯一的-class-来区分不同组件" aria-label="Permalink to &quot;方法三：在组件的外层 DOM 上添加唯一的 class 来区分不同组件&quot;">​</a></h3><p>上面的方法一需要单独书写一个不含有 scoped 属性的 style 标签，可能会造成全局样式的污染。</p><p>更推荐的方式是在组件的外层 DOM 上添加唯一的 class 来区分不同组件，在书写样式时就可以正常针对针对这部分 DOM 书写样式。</p><h2 id="slot-是什么-有什么作用-原理是什么" tabindex="-1">slot 是什么？有什么作用？原理是什么？ <a class="header-anchor" href="#slot-是什么-有什么作用-原理是什么" aria-label="Permalink to &quot;slot 是什么？有什么作用？原理是什么？&quot;">​</a></h2><p>插槽是利用 slot 标签进行占位，在使用组件的时候，组件标签内容会分发到对于的 slot 中。</p><p>通过插槽可以更好的让用户对组件进行扩展和定制化，可以通过 name 来定义具名插槽，指定渲染的位置。</p><p>可以设置后备内容，为插槽指定默认值：我是插槽的默认值</p><p><code>slot</code>插槽，一般在封装组件的时候使用，在组件内不知道以那种形式来展示内容时，可以用<code>slot</code>来占据位置，最终展示形式由父组件以内容形式传递过来</p><h3 id="主要分为三种插槽" tabindex="-1">主要分为三种插槽： <a class="header-anchor" href="#主要分为三种插槽" aria-label="Permalink to &quot;主要分为三种插槽：&quot;">​</a></h3><h4 id="默认插槽" tabindex="-1">默认插槽： <a class="header-anchor" href="#默认插槽" aria-label="Permalink to &quot;默认插槽：&quot;">​</a></h4><p>又名匿名插槽，当<code>slot</code>没有指定<code>name</code>属性值的时候一个默认显示插槽，一个组件内只有有一个匿名插槽。</p><p>子组件用<code>&lt;slot&gt;</code>标签来确定渲染的位置，标签里面可以放<code>DOM</code>结构作为后备内容，当父组件在使用的时候，可以直接在子组件的标签内写入内容，该部分内容将插入子组件的<code>&lt;slot&gt;</code>标签位置。如果父组件使用的时候没有往插槽传入内容，后备内容就会显示在页面。</p><h4 id="具名插槽" tabindex="-1">具名插槽： <a class="header-anchor" href="#具名插槽" aria-label="Permalink to &quot;具名插槽：&quot;">​</a></h4><p>带有具体名字的插槽，也就是带有<code>name</code>属性的<code>slot</code>，一个组件可以出现多个具名插槽。</p><p>子组件用<code>name</code>属性来表示插槽的名字，没有指定<code>name</code>的插槽，会有隐含的名称叫做 <code>default</code>。父组件中在使用时在默认插槽的基础上通过<code>v-slot</code>指令指定元素需要放在哪个插槽中，<code>v-slot</code>值为子组件插槽<code>name</code>属性值。使用<code>v-slot</code>指令指定元素放在哪个插槽中，必须配合<code>&lt;template&gt;</code>元素，且一个<code>&lt;template&gt;</code>元素只能对应一个预留的插槽，即不能多个<code>&lt;template&gt;</code> 元素都使用<code>v-slot</code>指令指定相同的插槽。<code>v-slot</code>的简写是<code>#</code>，例如<code>v-slot:header</code>可以简写为<code>#header</code>。</p><p>子组件：通过<code>:slotData=&quot;website&quot;</code>传递数据到父组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">href</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 传递该插槽可使用的数据到父组件：在父组件可以使用这个组件的website的对象的数据 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">slotData</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">website</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			{{ </span><span style="color:#E5C07B;">website</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subTitle</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			&lt;!-- 默认值显示 subTitle ，即父组件不传内容时 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;url&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			website</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://wangEditor.com/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;wangEditor&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				subTitle</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;轻量级富文本编辑器&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>父组件：通过 <code>v-slot=&quot;slotProps&quot;</code> 接收子组件的传递过来的数据</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	&lt;!-- 引入组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">ScopedSlotDemo</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">url</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">website</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 插槽内容：通过v-slot来获取改组件传过来的数据 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> v-slot</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">slotProps</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			{{ </span><span style="color:#E5C07B;">slotProps</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slotData</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">ScopedSlotDemo</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="作用域插槽" tabindex="-1">作用域插槽： <a class="header-anchor" href="#作用域插槽" aria-label="Permalink to &quot;作用域插槽：&quot;">​</a></h4><p>默认插槽、具名插槽的一个变体，可以是匿名插槽，也可以是具名插槽，该插槽的不同点是在子组件渲染作用域插槽时，可以将子组件内部的数据传递给父组件，让父组件根据子组件的传递过来的数据决定如何渲染该插槽。</p><p>子组件在<code>&lt;slot&gt;</code>标签上绑定<code>props</code>数据，以将子组件数据传给父组件使用。父组件获取插槽绑定 props 数据的方法：</p><ol><li>scope=&quot;接收的变量名&quot;：<code>&lt;template scope=&quot;接收的变量名&quot;&gt;</code></li><li>slot-scope=&quot;接收的变量名&quot;：<code>&lt;template slot-scope=&quot;接收的变量名&quot;&gt;</code></li><li>v-slot:插槽名=&quot;接收的变量名&quot;：<code>&lt;template v-slot:插槽名=&quot;接收的变量名&quot;&gt;</code></li></ol><h3 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><p>当子组件<code>vm</code>实例化时，获取到父组件传入的<code>slot</code>标签的内容，存放在<code>vm.$slot</code>中，默认插槽为<code>vm.$slot.default</code>，具名插槽为<code>vm.$slot.xxx</code>，xxx 为插槽名，当组件执行渲染函数时候，遇到<code>slot</code>标签，使用<code>$slot</code>中的内容进行替换，此时可以为插槽传递数据，若存在数据，则可称该插槽为作用域插槽。</p><h2 id="说说你对-slot-的理解-slot-使用场景有哪些" tabindex="-1">说说你对 slot 的理解？slot 使用场景有哪些 <a class="header-anchor" href="#说说你对-slot-的理解-slot-使用场景有哪些" aria-label="Permalink to &quot;说说你对 slot 的理解？slot 使用场景有哪些&quot;">​</a></h2><h3 id="一、slot-是什么" tabindex="-1">一、slot 是什么 <a class="header-anchor" href="#一、slot-是什么" aria-label="Permalink to &quot;一、slot 是什么&quot;">​</a></h3><p>在 HTML 中 <code>slot</code> 元素 ，作为 <code>Web Components</code> 技术套件的一部分，是 Web 组件内的一个占位符</p><p>该占位符可以在后期使用自己的标记语言填充</p><p>举个栗子</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;element-details-template&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">slot</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;element-name&quot;</span><span style="color:#ABB2BF;">&gt;Slot template&lt;/</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">element-details</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">span</span><span style="color:#D19A66;"> slot</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;element-name&quot;</span><span style="color:#ABB2BF;">&gt;1&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">element-details</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">element-details</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">span</span><span style="color:#D19A66;"> slot</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;element-name&quot;</span><span style="color:#ABB2BF;">&gt;2&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">element-details</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>template</code>不会展示到页面中，需要用先获取它的引用，然后添加到<code>DOM</code>中，</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">customElements</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">define</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	&quot;element-details&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">	class</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> HTMLElement</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">			super</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> template</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">				&quot;element-details-template&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			).</span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> shadowRoot</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attachShadow</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">mode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;open&quot;</span><span style="color:#ABB2BF;"> }).</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">				template</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cloneNode</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在<code>Vue</code>中的概念也是如此</p><p><code>Slot</code> 艺名插槽，花名“占坑”，我们可以理解为<code>solt</code>在组件模板中占好了位置，当使用该组件标签时候，组件标签里面的内容就会自动填坑（替换组件模板中<code>slot</code>位置），作为承载分发内容的出口</p><h3 id="二、使用场景" tabindex="-1">二、使用场景 <a class="header-anchor" href="#二、使用场景" aria-label="Permalink to &quot;二、使用场景&quot;">​</a></h3><p>通过插槽可以让用户可以拓展组件，去更好地复用组件和对其做定制化处理</p><p>如果父组件在使用到一个复用组件的时候，获取这个组件在不同的地方有少量的更改，如果去重写组件是一件不明智的事情</p><p>通过<code>slot</code>插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用</p><p>比如布局组件、表格列、下拉选、弹框显示内容等。</p><h2 id="插槽与作用域插槽的区别是什么" tabindex="-1">插槽与作用域插槽的区别是什么？ <a class="header-anchor" href="#插槽与作用域插槽的区别是什么" aria-label="Permalink to &quot;插槽与作用域插槽的区别是什么？&quot;">​</a></h2><p>插槽的作用是：子组件提供了可替换模板，父组件可以更换模板的内容。</p><p>作用域插槽：子组件将数据返给父组件的能力，子组件一样可以复用，同时父组件也可以重新组织内容和样式。</p><h2 id="vue-中如何扩展一个组件" tabindex="-1">Vue 中如何扩展一个组件 <a class="header-anchor" href="#vue-中如何扩展一个组件" aria-label="Permalink to &quot;Vue 中如何扩展一个组件&quot;">​</a></h2><p>此题属于实践题，考察大家对 vue 常用 api 使用熟练度，答题时不仅要列出这些解决方案，同时最好说出他们异同。</p><h3 id="答题思路" tabindex="-1">答题思路： <a class="header-anchor" href="#答题思路" aria-label="Permalink to &quot;答题思路：&quot;">​</a></h3><ol><li>按照逻辑扩展和内容扩展来列举， <ul><li>逻辑扩展有：mixins、extends、composition api；</li><li>内容扩展有 slots；</li></ul></li><li>分别说出他们使用方法、场景差异和问题。</li><li>作为扩展，还可以说说 vue3 中新引入的 composition api 带来的变化</li></ol><h3 id="回答范例-5" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-5" aria-label="Permalink to &quot;回答范例：&quot;">​</a></h3><h4 id="_1-常见的组件扩展方法有-mixins-vue2-slots-extends-vue2-等" tabindex="-1">1.常见的组件扩展方法有：mixins(Vue2)，slots，extends(Vue2) 等 <a class="header-anchor" href="#_1-常见的组件扩展方法有-mixins-vue2-slots-extends-vue2-等" aria-label="Permalink to &quot;1.常见的组件扩展方法有：mixins(Vue2)，slots，extends(Vue2) 等&quot;">​</a></h4><h5 id="_1-1-混入-mixins-是分发-vue-组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。" tabindex="-1">1.1 混入 mixins 是分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。 <a class="header-anchor" href="#_1-1-混入-mixins-是分发-vue-组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。" aria-label="Permalink to &quot;1.1 混入 mixins 是分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。&quot;">​</a></h5><p>当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 复用代码：它是一个配置对象，选项和组件里面一样</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> mymixin</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		dosomething</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 全局混入：将混入对象传入</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mymixin</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 局部混入：做数组项设置到mixins选项，仅作用于当前组件</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Comp</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	mixins</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">mymixin</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><hr><h5 id="_1-2-slot插槽主要用于-vue-组件中的内容分发-也可以用于组件扩展。" tabindex="-1">1.2 slot插槽主要用于 vue 组件中的内容分发，也可以用于组件扩展。 <a class="header-anchor" href="#_1-2-slot插槽主要用于-vue-组件中的内容分发-也可以用于组件扩展。" aria-label="Permalink to &quot;1.2 slot插槽主要用于 vue 组件中的内容分发，也可以用于组件扩展。&quot;">​</a></h5><p>子组件 Child</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;slot&gt;这个内容会被父组件传递的内容替换&lt;/slot&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>父组件 Parent</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;Child&gt;来自老爹的内容&lt;/Child&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果要精确分发到不同位置可以使用具名插槽，如果要使用子组件中的数据可以使用作用域插槽。</p><p><strong>默认插槽和匿名插槽</strong></p><p>slot 用来获取组件中的原内容。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;kaikeba&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;如果没有原内容，则显示该内容&lt;/</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;// 默认插槽</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">		&quot;my-hello&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#hello&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>具名插槽</strong></p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;itany&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;my-hello&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;ul slot=&quot;s1&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;li&gt;aaa&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;li&gt;bbb&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;li&gt;ccc&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;ol slot=&quot;s2&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;li&gt;111&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;li&gt;222&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;li&gt;333&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/ol&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/my-hello&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">slot</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;s2&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;welcome to kaikeba&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">slot</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;s1&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#itany&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">		&quot;my-hello&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#hello&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><hr><h5 id="_1-3-组件选项中还有一个不太常用的选项-extends-也可以起到扩展组件的目的" tabindex="-1">1.3 组件选项中还有一个不太常用的选项 extends，也可以起到扩展组件的目的 <a class="header-anchor" href="#_1-3-组件选项中还有一个不太常用的选项-extends-也可以起到扩展组件的目的" aria-label="Permalink to &quot;1.3 组件选项中还有一个不太常用的选项 extends，也可以起到扩展组件的目的&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 扩展对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myextends</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		dosomething</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 组件扩展：做数组项设置到extends选项，仅作用于当前组件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 跟混入的不同是它只能扩展单个对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 另外如果和混入发生冲突，该选项优先级较高，优先起作用</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Comp</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	extends</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">myextends</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><hr><h4 id="_2-vue3-中引入的-composition-api" tabindex="-1">2.vue3 中引入的 <code>composition api</code> <a class="header-anchor" href="#_2-vue3-中引入的-composition-api" aria-label="Permalink to &quot;2.vue3 中引入的 \`composition api\`&quot;">​</a></h4><p>混入的数据和方法<strong>不能明确判断来源</strong>且可能和当前组件内变量<strong>产生命名冲突</strong>，vue3 中引入的 <code>composition api</code>，可以很好解决这些问题，利用独立出来的响应式模块可以很方便的编写独立逻辑并提供响应式的数据，然后在 setup 选项中组合使用，增强代码的可读性和维护性。例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 复用逻辑1</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useXX</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 复用逻辑2</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useYY</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 逻辑组合</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Comp</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">xx</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useXX</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">yy</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useYY</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">xx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">yy</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="可能的追问-2" tabindex="-1">可能的追问 <a class="header-anchor" href="#可能的追问-2" aria-label="Permalink to &quot;可能的追问&quot;">​</a></h3><p>Vue.extend 方法你用过吗？它能用来做组件扩展吗？</p><hr><h3 id="知其所以然-3" tabindex="-1">知其所以然 <a class="header-anchor" href="#知其所以然-3" aria-label="Permalink to &quot;知其所以然&quot;">​</a></h3><p>mixins 原理：</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiCreateApp.ts%23L232-L233" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiCreateApp.ts%23L232-L233</a></p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentOptions.ts%23L545" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentOptions.ts%23L545</a></p><p>slots 原理：</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentSlots.ts%23L129-L130" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentSlots.ts%23L129-L130</a></p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L1373-L1374" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L1373-L1374</a></p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/helpers/renderSlot.ts%23L23-L24" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/helpers/renderSlot.ts%23L23-L24</a></p><h2 id="说一下-vue-封装组件" tabindex="-1">说一下 vue 封装组件 <a class="header-anchor" href="#说一下-vue-封装组件" aria-label="Permalink to &quot;说一下 vue 封装组件&quot;">​</a></h2><p>vue 封装组件涉及三个部分：</p><ul><li>1、<strong>事件触发</strong>：v-on、$emit</li><li>2、<strong>prop 允许外部环境传递数据给组件</strong>：传参通过 props</li><li>3、<strong>slot 插槽允许外部环境将内容插入到组件的视图结构内</strong>：slot 作用主要是可以实现内容分发，组件标签内嵌套内容，可通过<code>&lt;slot&gt;&lt;/slot&gt;</code>来定义占位的内容 <ul><li>分为具名的 slot 和匿名的 slot</li></ul></li></ul><p>在编写可复用组件的时候，时刻考虑组件是否可复用是有好处的。一次性组件跟其他组件紧密耦合没关系，但是可复用组件一定要定义一个清晰的公开接口。</p><h2 id="请说下封装-vue-组件的过程" tabindex="-1">请说下封装 vue 组件的过程？ <a class="header-anchor" href="#请说下封装-vue-组件的过程" aria-label="Permalink to &quot;请说下封装 vue 组件的过程？&quot;">​</a></h2><p>组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。</p><h3 id="vue2-3" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2-3" aria-label="Permalink to &quot;Vue2&quot;">​</a></h3><p>使用 Vue.extend 方法创建一个组件，然后使用 Vue.component 方法注册组件。子组件需要数据，可以在 props 中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用 emit 方法。</p><h3 id="vue3-3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3-3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h3><h2 id="❤keep-alive组件" tabindex="-1">❤keep-alive组件 <a class="header-anchor" href="#❤keep-alive组件" aria-label="Permalink to &quot;❤keep-alive组件&quot;">​</a></h2><p>文档：<a href="https://cn.vuejs.org/guide/built-ins/keep-alive.html" target="_blank" rel="noreferrer">KeepAlive | Vue.js (vuejs.org)</a></p><p>keep-alive 是 Vue 的内置组件，能在组件切换的过程中缓存组件的实例，而不是销毁它们。在组件再次重新激活的时候，可以通过缓存的实例拿到之前渲染的 DOM 进行渲染，无需重新生成节点。</p><p>作用：实现组件缓存，保持组件的状态，避免反复渲染导致的性能问题。</p><p>被 keep-alive 包裹的组件会多两个钩子函数：activated 和 deactivated</p><ul><li>用 <code>keep-alive</code> 包裹动态组件时，可以实现组件缓存，当组件切换时不会对当前组件进行卸载。</li><li><code>keep-alive</code> 的中还运用了 <code>LRU</code>(最近最少使用) 算法，选择最近最久未使用的组件予以淘汰。</li></ul><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><p>Vue.js 内部将 DOM 节点，抽象成了一个个的 VNode 节点，<code>keep-alive</code>组件的缓存也是基于 VNode 节点的。它将满足条件的组件在 cache 对象中缓存起来，重新渲染的时候再将 VNode 节点从 cache 对象中取出并渲染。</p><p><code>keep-alive</code>内部其实是一个函数式组件，没有<code>template</code>标签。在<code>render</code>中通过获取组件的<code>name</code>和<code>include、exclude</code>进行匹配。匹配不成功，则不需要进行缓存，直接返回该组件的<code>vnode</code>。</p><p>匹配成功就进行缓存，获取组件的<code>key</code>在<code>cache</code>中进行查找，如果存在，则将他原来位置上的<code> key</code> 给移除，同时将这个组件的 <code>key</code> 放到数组最后面（<code>LRU</code>）也就实现了<code>max</code>功能。</p><p>不存在的话，就需要对组件进行缓存。将当前组件<code>push(key)</code>添加到尾部，然后再判断当前缓存的<code>max</code>是否超出指定个数，如果超出直接将第一个组件销毁（缓存淘汰策略 LRU）。</p><blockquote><p>LRU（<strong>Least recently used</strong>，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。</p></blockquote><h3 id="实现原理-1" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理-1" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><p>在<code>vue</code>的生命周期中，用 <code>keep-alive</code> 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>actived</code> 钩子函数。</p><p>在具体的实现上，keep-alive 在内部维护了一个 key 数组和一个缓存对象</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// keep-alive 内部的声明周期函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">created</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.cache </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> Object.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.keys </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>key 数组记录目前缓存的组件 key 值，如果组件没有指定 key 值，则会为其自动生成一个唯一的 key 值</p><p>cache 对象以 key 值为键，vnode 为值，用于缓存组件对应的虚拟 DOM</p><p>在 keep-alive 的渲染函数中，其基本逻辑是判断当前渲染的 vnode 是否有对应的缓存，如果有，从缓存中读取到对应的组件实例；如果没有则将其缓存。</p><p>当缓存数量超过 max 数值时，keep-alive 会移除掉 key 数组的第一个元素。</p><h3 id="属性-include、exclude、max" tabindex="-1">属性 include、exclude、max <a class="header-anchor" href="#属性-include、exclude、max" aria-label="Permalink to &quot;属性 include、exclude、max&quot;">​</a></h3><ul><li><code>include</code>：要缓存的组件 name，为数组、字符串 或正则表达式。只有名称匹配的组件会被缓存。</li><li><code>exclude</code>：不需要缓存的组件 name，为数组、字符串 或 正则表达式。(优先级大于 include)。任何名称匹配的组件都不会被缓存。</li><li>max：最大缓存的组件个数，当缓存的实例超过该数时，vue 会移除最久没有使用的组件缓存。 <ul><li>比如规定了<code>max=10</code>，当缓存的组件达到 10 个时，如果又添加进来一个<code>新的需要缓存的组件</code>，就会在<code>已缓存的10个组件中</code>找出<code>最久没有被访问的</code>，然后将新的组件替换（LRU 算法）。</li></ul></li></ul><h3 id="两个生命周期-activated-deactivated" tabindex="-1">两个生命周期 activated / deactivated <a class="header-anchor" href="#两个生命周期-activated-deactivated" aria-label="Permalink to &quot;两个生命周期 activated / deactivated&quot;">​</a></h3><p>用来得知当前组件是否处于活跃状态。</p><ul><li><p>当<code>keep-alive</code>中的组件被点击时，<code>activated</code>生命周期函数被激活执行一次，切换到其它组件时，<code>deactivated</code>被激活。</p><ul><li><p>当组件被换掉时，会被缓存到内存中、触发 deactivated 生命周期；</p><p>当组件被切回来时，再去缓存里找这个组件、触发 activated 钩子函数。</p></li></ul></li><li><p>同时，beforeDestroy 和 destroyed 就不会再被触发了，因为组件不会被真正销毁。</p></li><li><p>如果没有<code>keep-alive</code>包裹，没有办法触发<code>activated</code>生命周期函数。</p></li></ul><h3 id="lru-算法" tabindex="-1">LRU 算法 <a class="header-anchor" href="#lru-算法" aria-label="Permalink to &quot;LRU 算法&quot;">​</a></h3><ul><li><code>LRU</code>算法 就是维护一个队列；</li><li>当新数据来时，将新数据插入到尾部；</li><li>当缓存命中时，也将数据移动到尾部；</li><li>当队列满了，就把头部的数据丢弃；</li></ul><p><img src="`+v+`" alt="image-20240326163216194"></p><h4 id="使用场景-1" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景-1" aria-label="Permalink to &quot;使用场景&quot;">​</a></h4><p>1.动态组件可以采用 keep-alive 进行缓存</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">include</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">array</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> string</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">exclude</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">array</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> string</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">max</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;component :is=&quot;component&quot;&gt;&lt;/component&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2.在路由视图中使用 keep-alive（也可以通过 name 定义命名视图）</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">include</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">array</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> string</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">exclude</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">array</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> string</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">max</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;router-link&gt;&lt;/router-link&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>3.也可以通过 meta 属性指定哪些页面需要缓存。需要在路由规则里配置参数</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;keep-alive&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		// 需要缓存的组件</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;router-view v-if=&quot;$route.meta.keepAlive&quot; /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/keep-alive&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	// 不需要缓存的组件</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot; /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="组件状态缓存保持的组件-keep-alive" tabindex="-1">组件状态缓存保持的组件：keep-alive <a class="header-anchor" href="#组件状态缓存保持的组件-keep-alive" aria-label="Permalink to &quot;组件状态缓存保持的组件：keep-alive&quot;">​</a></h2><p><code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>组件包裹的组件状态会被缓存保持住，不会被销毁</p><p>KeepAlive 父组件：实现 tab 切换</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">changeState</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;A&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;A&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">changeState</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;B&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;B&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">changeState</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;C&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;C&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			&lt;!-- tab 切换 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">KeepAliveStageA</span><span style="color:#C678DD;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;A&#39;</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			&lt;!-- v-show --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">KeepAliveStageB</span><span style="color:#C678DD;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;B&#39;</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">KeepAliveStageC</span><span style="color:#C678DD;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;C&#39;</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> KeepAliveStageA</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./KeepAliveStateA&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> KeepAliveStageB</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./KeepAliveStateB&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> KeepAliveStageC</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./KeepAliveStateC&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		KeepAliveStageA</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		KeepAliveStageB</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		KeepAliveStageC</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			state</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		changeState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>三个子组件：</p><p>KeepAliveStateA</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;state A&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// eslint-disable-next-line</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;A mounted&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	destroyed</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// eslint-disable-next-line</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;A destroyed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>KeepAliveStateB</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;state B&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// eslint-disable-next-line</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;B mounted&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	destroyed</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// eslint-disable-next-line</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;B destroyed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>KeepAliveStateC</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;state C&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// eslint-disable-next-line</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;C mounted&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	destroyed</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// eslint-disable-next-line</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;C destroyed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="怎么缓存当前的组件-缓存后怎么更新" tabindex="-1">怎么缓存当前的组件？缓存后怎么更新？ <a class="header-anchor" href="#怎么缓存当前的组件-缓存后怎么更新" aria-label="Permalink to &quot;怎么缓存当前的组件？缓存后怎么更新？&quot;">​</a></h2><p>缓存组件使用 keep-alive 组件，这是一个非常常见且有用的优化手段，vue3 中 keep-alive 有比较大的更新，能说的点比较多。</p><h3 id="思路-2" tabindex="-1">思路 <a class="header-anchor" href="#思路-2" aria-label="Permalink to &quot;思路&quot;">​</a></h3><ol><li>缓存用 keep-alive，它的作用与用法</li><li>使用细节，例如缓存指定/排除、结合 router 和 transition</li><li>组件缓存后更新可以利用 activated 或者 beforeRouteEnter</li><li>原理阐述</li></ol><hr><h3 id="回答范例-6" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-6" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><p>1.开发中缓存组件使用 keep-alive 组件，keep-alive 是 vue 内置组件，keep-alive 包裹动态组件 component 时，会缓存不活动的组件实例，而不是销毁它们，这样在组件切换过程中将状态保留在内存中，防止重复渲染 DOM。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2.结合属性 include 和 exclude 可以明确指定缓存哪些组件或排除缓存指定组件。</p><p>vue3 中结合 vue-router 时变化较大，之前Vue2是<code>keep-alive</code>包裹<code>router-view</code>，现在Vue3需要反过来用<code>router-view</code>包裹<code>keep-alive</code>：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#D19A66;"> v-slot</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;"> }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;keep-alive&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;component :is=&quot;Component&quot;&gt;&lt;/component&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/keep-alive&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><p>缓存后如果要获取数据，解决方案可以有以下两种：</p><p>beforeRouteEnter：在有 vue-router 的项目，每次进入路由的时候，都会执行<code>beforeRouteEnter</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">beforeRouteEnter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#61AFEF;">  next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 每次进入路由执行</span></span>
<span class="line"><span style="color:#E5C07B;">    vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getData</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;">// 获取数据</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>actived：在<code>keep-alive</code>缓存的组件被激活的时候，都会执行<code>actived</code>钩子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">activated</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">	  this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getData</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 获取数据</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><p>keep-alive 是一个通用组件，它内部定义了一个 map，缓存创建过的组件实例，它返回的渲染函数内部会查找内嵌的 component 组件对应组件的 vnode，如果该组件在 map 中存在就直接返回它。由于 component 的 is 属性是个响应式数据，因此只要它变化，keep-alive 的 render 函数就会重新执行。</p><hr><h3 id="知其所以然-4" tabindex="-1">知其所以然 <a class="header-anchor" href="#知其所以然-4" aria-label="Permalink to &quot;知其所以然&quot;">​</a></h3><p>KeepAlive 定义</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts%23L73-L7" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts%23L73-L7</a></p><p>缓存定义</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts%23L102-L103" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts%23L102-L103</a></p><p>缓存组件</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts%23L215-L216" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts%23L215-L216</a></p><p>获取缓存组件</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts%23L241-L242" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts%23L241-L242</a></p><p>测试缓存特性，test-v3.html</p><h2 id="组件中写-name-选项有什么作用" tabindex="-1">组件中写 name 选项有什么作用？ <a class="header-anchor" href="#组件中写-name-选项有什么作用" aria-label="Permalink to &quot;组件中写 name 选项有什么作用？&quot;">​</a></h2><ul><li>1.项目使用 keep-alive 时，可搭配组件 name 进行缓存功能</li><li>2.vue-devtools 调试工具里显示的组见名称是由 vue 中组件 name 决定的</li><li>3.可以通过 name 标识组件的具体名称，方便调试和查找对应组件（跨级组件通信时非常重要）</li><li>4.DOM 做递归组件时需要调用自身 name：增加 name 选项会在 component 属性中增加组件自身，实现组件的递归调用（ 递归组件：组件自身调用自身 ）</li></ul><h2 id="对-vue-组件化的理解" tabindex="-1">对 Vue 组件化的理解 <a class="header-anchor" href="#对-vue-组件化的理解" aria-label="Permalink to &quot;对 Vue 组件化的理解&quot;">​</a></h2><p>1.组件是独立和可复用的代码组织单元。组件系统是 Vue 核心特性之一，它使开发者使用小型、独立和通常可复用的组件构建大型应用；</p><p>2.组件化开发能大幅提高应用开发效率、测试性、复用性等；</p><p>3.组件使用按分类有：页面组件、业务组件、通用组件；</p><p>4.vue 的组件是基于配置的，我们通常编写的组件是组件配置而非组件，框架后续会生成其构造函数，它们基于 VueComponent，扩展于 Vue；</p><p>5.vue 中常见组件化技术有：属性 prop，自定义事件，插槽等，它们主要用于组件通信、扩展等；6.合理的划分组件，有助于提升应用性能；</p><p>6.组件应该是高内聚、低耦合的；</p><p>7.遵循单向数据流的原则。</p><h2 id="v-for-产生的列表-实现-active-的切换" tabindex="-1">v-for 产生的列表，实现 active 的切换 <a class="header-anchor" href="#v-for-产生的列表-实现-active-的切换" aria-label="Permalink to &quot;v-for 产生的列表，实现 active 的切换&quot;">​</a></h2><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">desc</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tableIndex</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#E5C07B;"> descriptions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">firstface</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;ul class=&quot;controller-checkboxs clearfix&quot; &gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;li</span></span>
<span class="line"><span style="color:#ABB2BF;">        @click=&quot;currentIndex=index,currentTable=tableIndex&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        class=&quot;controller-checkbox-item&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        :class=&quot;{active:index===currentIndex&amp;&amp;tableIndex==currentTable}&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        v-for=&quot;(ctrlValue,index) in desc.args&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/li&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="说一下-vue-如何实现局部样式的" tabindex="-1">说一下 vue 如何实现局部样式的？ <a class="header-anchor" href="#说一下-vue-如何实现局部样式的" aria-label="Permalink to &quot;说一下 vue 如何实现局部样式的？&quot;">​</a></h2><p><strong>或者说如何实现组件之间样式不冲突的和实现原理是什么？</strong></p><p><strong>或者说如何让 CSS 样式值只在当前的组件中起作用</strong></p><p>css 没有局部样式的概念，vue 脚手架通过实现了，即在 style 标签上添加 scoped</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#D19A66;"> scoped</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>scoped 的实现原理：vue 通过 postcss 给每个 dom 元素添加一个以 data-开头的随机自定义属性实现的。</p><h2 id="vue-中递归组件的理解" tabindex="-1">Vue 中递归组件的理解 <a class="header-anchor" href="#vue-中递归组件的理解" aria-label="Permalink to &quot;Vue 中递归组件的理解&quot;">​</a></h2><p>递归组件就是层层递进，最后拼接到一起，特点就是层级分明。例如组件库里的树组件，其实现就是通过递归的方式。</p><h3 id="核心思路" tabindex="-1">核心思路： <a class="header-anchor" href="#核心思路" aria-label="Permalink to &quot;核心思路：&quot;">​</a></h3><p>（1）循环出一级类别</p><p>（2）判断如果有多级，再调用自身</p><p>每个组件都会有一个 name 属性，这个 name 其实就是为了帮助我们实现递归的。</p><p>代码逻辑也很简单，重点在我的子组件。但父组件传过来的树形数据结构到子组件后，我们需要拿到数据并做遍历，然后再下一行加入核心逻辑：</p><p>if 发现我们有子数据，那么我们直接调用自身组件，也就是直接使用 name 值做组件声明。最关键的是要把子数据结构再传入我们自身组件，那么我们就成功的实现了数据的层层遍历。</p><h2 id="什么是递归组件" tabindex="-1">什么是递归组件？ <a class="header-anchor" href="#什么是递归组件" aria-label="Permalink to &quot;什么是递归组件？&quot;">​</a></h2><p>概念：组件是可以在它们自己的模板中调用自身的。</p><p>递归组件，一定要有一个结束的条件，否则就会使组件循环引用，最终出现的错误，我们可以使用 <code>v-if=&quot;false&quot;</code> 作递归组件的结束条件。</p><p>当遇到 <code>v-if</code> 为 <code>false</code> 时，组件将不会再进行渲染。</p><p>既然要用递归组件，那么对我们的数据格式肯定是需要满足递归的条件的。就像下边这样，这是一个树状的递归数据。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// tree组件数据</span></span>
<span class="line"><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;web全栈工程师&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		cList</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">			{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#E06C75;">				name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;react&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				cList</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">					{</span></span>
<span class="line"><span style="color:#E06C75;">						name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;javascrict&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">						cList</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;css&quot;</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				],</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		],</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;web高级工程师&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;web初级工程师&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		cList</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;javascript&quot;</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;css&quot;</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>案例：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">li</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> list</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">tree-muen</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">list</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    	treeMuen</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#61AFEF;">    data</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">    	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            list</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">                {</span></span>
<span class="line"><span style="color:#E06C75;">                    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;web全栈工程师&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                    cList</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">                        { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">                        {</span></span>
<span class="line"><span style="color:#E06C75;">                            name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;react&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                            cList</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">                                {</span></span>
<span class="line"><span style="color:#E06C75;">                                    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;javascrict&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                                    cList</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;css&quot;</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">                                },</span></span>
<span class="line"><span style="color:#ABB2BF;">                            ],</span></span>
<span class="line"><span style="color:#ABB2BF;">                        },</span></span>
<span class="line"><span style="color:#ABB2BF;">                    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">                },</span></span>
<span class="line"><span style="color:#ABB2BF;">                { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;web高级工程师&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">                {</span></span>
<span class="line"><span style="color:#E06C75;">                    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;web初级工程师&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                    cList</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;javascript&quot;</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;css&quot;</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">                },</span></span>
<span class="line"><span style="color:#ABB2BF;">            ];</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    methods</span><span style="color:#ABB2BF;">: {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>总结：</p><p>通过 props 从父组件拿到数据，递归组件每次进行递归的时候都会 tree-menus 组件传递下一级 treeList 数据，整个过程结束之后，递归也就完成了，对于折叠树状菜单来说，我们一般只会去渲染一级的数据，当点击一级菜单时，再去渲染一级菜单下的结构，如此往复。</p><p>那么 v-if 就可以实现我们的这个需求，当 v-if 设置为 false 时，递归组件将不会再进行渲染，设置为 true 时，继续渲染。</p><h2 id="动态、异步组件" tabindex="-1">动态、异步组件 <a class="header-anchor" href="#动态、异步组件" aria-label="Permalink to &quot;动态、异步组件&quot;">​</a></h2><p>动态组件：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">is</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">NextTickName</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!--组件名：NextTickName--&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 使用场景：多个组件在对象中集合v-for遍历出来 --&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>异步组件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 异步导入组件</span></span>
<span class="line"><span style="color:#61AFEF;">		FormDemo</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../BaseUse/FormDemo&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="动态组件的使用方法" tabindex="-1">动态组件的使用方法 <a class="header-anchor" href="#动态组件的使用方法" aria-label="Permalink to &quot;动态组件的使用方法&quot;">​</a></h2><p>（1）基本用法</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// currentTabComponent可以包括已注册组件的名字或者一个组件的选项对象</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">is</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">currentTabComponent</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>（2）进阶用法</p><p>2.1 搭配异步组件，延迟加载</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">loadComponent</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;load component&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">is</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">currentComponent</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">currentComponent</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    async</span><span style="color:#61AFEF;"> loadComponent</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> component</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./componentA.vue&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">currentComponent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> component</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">default</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>2.2 使用命名视图</p><p>使用 vue-router 时候，需要通过 router-view 来定义视图出口。有时候需要多个视图出口，渲染不同的内容的时候，我们来可以通过 name 属性来定义命名视图。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	&lt;!-- 默认name为defaut --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	&lt;!-- 此处渲染Header组件内容 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;header&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	&lt;!-- 此处渲染footer组件内容 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;footer&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 路由层面配置</span></span>
<span class="line"><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;home&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		components</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">header</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Header</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">footer</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Footer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">MainBody</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>2.3 传入动态 props</p><p>动态组件传递 props 和其他组件都一样，通过 v-bind 来动态绑定动态数据。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">component</span><span style="color:#D19A66;"> :is</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;currentTabComponent&quot;</span><span style="color:#D19A66;"> :message</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;message&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="vue-中异步组件的作用和原理" tabindex="-1">Vue 中异步组件的作用和原理 <a class="header-anchor" href="#vue-中异步组件的作用和原理" aria-label="Permalink to &quot;Vue 中异步组件的作用和原理&quot;">​</a></h2><h3 id="_1、概念" tabindex="-1">1、概念 <a class="header-anchor" href="#_1、概念" aria-label="Permalink to &quot;1、概念&quot;">​</a></h3><p>Vue 允许你以一个工厂函数的方式，定义你的组件，这个工厂函数会异步解析你的组件定义，在需要的时候再去加载。推荐做法是将异步组件和 webpack 的 code-splitting 功能一起搭配使用。</p><h3 id="_2、写法" tabindex="-1">2、写法 <a class="header-anchor" href="#_2、写法" aria-label="Permalink to &quot;2、写法&quot;">​</a></h3><h4 id="_2-1-回调写法" tabindex="-1">2.1 回调写法 <a class="header-anchor" href="#_2-1-回调写法" aria-label="Permalink to &quot;2.1 回调写法&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">        &quot;my-component&quot;</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#61AFEF;">                resolve</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">                    render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">h</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">                        return</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"><span style="color:#ABB2BF;">                })</span></span>
<span class="line"><span style="color:#ABB2BF;">            }, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_2-2-promise-写法-类似路由懒加载的写法-引入异步组件" tabindex="-1">2.2 promise 写法（类似路由懒加载的写法，引入异步组件） <a class="header-anchor" href="#_2-2-promise-写法-类似路由懒加载的写法-引入异步组件" aria-label="Permalink to &quot;2.2 promise 写法（类似路由懒加载的写法，引入异步组件）&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">        &quot;my-component&quot;</span><span style="color:#ABB2BF;">: ()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">            import</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/*webpackChunkName: &quot;B4&quot;*/</span><span style="color:#98C379;"> &quot;./component/B4.vue&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-3-对象写法" tabindex="-1">2.3 对象写法 <a class="header-anchor" href="#_2-3-对象写法" aria-label="Permalink to &quot;2.3 对象写法&quot;">​</a></h4><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> asyncComponent</span><span style="color:#E5C07B;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#E5C07B;">=</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 需要加载的组件，应该是一个Promise</span></span>
<span class="line"><span style="color:#E06C75;">    components</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./myComponent.vue&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 加载中展示的组件</span></span>
<span class="line"><span style="color:#E06C75;">    loading</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">LoadingComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 加载失败时展示的组件</span></span>
<span class="line"><span style="color:#C678DD;">    error</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">ErrorComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 展示加载时组件的时间，毫秒</span></span>
<span class="line"><span style="color:#E06C75;">    delay</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 超过时间没有加载出，则使用失败的组件。默认值是：Infinity</span></span>
<span class="line"><span style="color:#E06C75;">    timeout</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3000</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_3、异步组件的原理" tabindex="-1">3、异步组件的原理 <a class="header-anchor" href="#_3、异步组件的原理" aria-label="Permalink to &quot;3、异步组件的原理&quot;">​</a></h3><ol><li>默认渲染异步占位符节点</li><li>组件加载完毕后，调用$forceUpdate 强制更新，渲染加载完毕后的组件</li></ol><h2 id="为什么要使用异步组件" tabindex="-1">为什么要使用异步组件 <a class="header-anchor" href="#为什么要使用异步组件" aria-label="Permalink to &quot;为什么要使用异步组件&quot;">​</a></h2><ol><li>节省打包出的结果，异步组件分开打包，采用<code>jsonp</code>的方式进行加载，有效解决文件过大的问题。</li><li>核心就是包组件定义变成一个函数，依赖<code>import()</code> 语法，可以实现文件的分割加载。</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">	AddCustomerSchedule</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../components/AddCustomer&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// require([])</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>原理</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> ( </span><span style="color:#E06C75;font-style:italic;">Ctor</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">VNodeData</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">children</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">&gt;, </span><span style="color:#E06C75;font-style:italic;">tag</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> ): </span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // async component</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> asyncFactory</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cid</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">        asyncFactory</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> Ctor</span></span>
<span class="line"><span style="color:#E06C75;">        Ctor</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> resolveAsyncComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">asyncFactory</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">baseCtor</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 默认调用此函数时返回 undefiend</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 第二次渲染时Ctor不为undefined</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">Ctor</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#61AFEF;"> createAsyncPlaceholder</span><span style="color:#ABB2BF;">( </span><span style="color:#7F848E;font-style:italic;">// 渲染占位符 空虚拟节点</span></span>
<span class="line"><span style="color:#E06C75;">                asyncFactory</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                context</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                children</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                tag</span></span>
<span class="line"><span style="color:#ABB2BF;">            )</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> resolveAsyncComponent</span><span style="color:#ABB2BF;"> ( </span><span style="color:#61AFEF;">factory</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">baseCtor</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">&gt; ): </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">factory</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">resolved</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 3.在次渲染时可以拿到获取的最新组件</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> factory</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">resolved</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> resolve</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> once</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">&gt;) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        factory</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">resolved</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ensureCtor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">baseCtor</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">sync</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">            forceRender</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//2. 强制更新视图重新渲染</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            owners</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> reject</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> once</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">factory</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">errorComp</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">            factory</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">error</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#61AFEF;"> forceRender</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> factory</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">// 1.将resolve方法和reject方法传入，用户调用 resolve方法后</span></span>
<span class="line"><span style="color:#E06C75;">    sync</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> factory</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">resolved</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h2 id="何时要使用异步组件" tabindex="-1">何时要使用异步组件 <a class="header-anchor" href="#何时要使用异步组件" aria-label="Permalink to &quot;何时要使用异步组件&quot;">​</a></h2><ul><li><p>加载的大组件</p></li><li><p>路由异步加载：</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 异步导入组件</span></span>
<span class="line"><span style="color:#61AFEF;">		FormDemo</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../BaseUse/FormDemo&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="函数式组件" tabindex="-1">函数式组件 <a class="header-anchor" href="#函数式组件" aria-label="Permalink to &quot;函数式组件&quot;">​</a></h2><p>我们可以将组件标记为 <code>functional</code>，来表示这个组件不需要实例化，无状态，没有生命周期</p><h3 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>由于函数式组件不需要实例化，无状态，没有生命周期，所以渲染性能要好于普通组件</li><li>函数式组件结构比较简单，代码结构更清晰</li></ul><h2 id="函数式组件优势和原理" tabindex="-1">函数式组件优势和原理 <a class="header-anchor" href="#函数式组件优势和原理" aria-label="Permalink to &quot;函数式组件优势和原理&quot;">​</a></h2><h3 id="函数式组件特点" tabindex="-1">函数式组件特点： <a class="header-anchor" href="#函数式组件特点" aria-label="Permalink to &quot;函数式组件特点：&quot;">​</a></h3><ul><li>stateless：无状态，不需要管理任何状态</li><li>instanceless：无实例，也就没有 this</li><li>没有生命周期函数，不需要初始化</li><li>只接受一些 props 的函数</li><li>渲染开销很低，渲染相对较快</li><li>函数式组件没有 this，参数就靠 context 来传递 <ul><li>context 包括：children、props、parent、data、linstener、injections、slots</li></ul></li></ul><h3 id="函数组件的特点" tabindex="-1">函数组件的特点 <a class="header-anchor" href="#函数组件的特点" aria-label="Permalink to &quot;函数组件的特点&quot;">​</a></h3><ol><li>函数式组件需要在声明组件是指定 <code>functional:true</code></li><li>不需要实例化，所以没有<code>this</code>,<code>this</code>通过<code>render</code>函数的第二个参数<code>context</code>来代替</li><li>没有生命周期钩子函数，不能使用计算属性，<code>watch</code></li><li>不能通过<code>$emit</code> 对外暴露事件，调用事件只能通过<code>context.listeners.click</code>的方式调用外部传入的事件</li><li>因为函数式组件是没有实例化的，所以在外部通过<code>ref</code>去引用组件时，实际引用的是<code>HTMLElement</code></li><li>函数式组件的<code>props</code>可以不用显示声明，所以没有在<code>props</code>里面声明的属性都会被自动隐式解析为<code>prop</code>,而普通组件所有未声明的属性都解析到<code>$attrs</code>里面，并自动挂载到组件根元素上面(可以通过<code>inheritAttrs</code>属性禁止)</li></ol><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个函数式组件 </span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;">{ </span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;functional-button&#39;</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#E06C75;">    functional</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#61AFEF;">    render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createElement</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">){ </span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;button&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#7F848E;font-style:italic;">// app中引入函数式组件</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">FunctionalButton</span><span style="color:#ABB2BF;">&gt; click me &lt;/</span><span style="color:#E06C75;">FunctionalButton</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="优点-3" tabindex="-1">优点 <a class="header-anchor" href="#优点-3" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li>由于函数式组件不需要实例化，无状态，没有生命周期，所以渲染性能要好于普通组件</li><li>函数式组件结构比较简单，代码结构更清晰</li></ol><h3 id="使用场景-2" tabindex="-1">使用场景： <a class="header-anchor" href="#使用场景-2" aria-label="Permalink to &quot;使用场景：&quot;">​</a></h3><ul><li>一个简单的展示组件，作为容器组件使用 比如 <code>router-view</code> 就是一个函数式组件</li><li>“高阶组件”——用于接收一个组件作为参数，返回一个被包装过的组件</li></ul><p>例子</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;functional&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 构造函数产生虚拟节点的</span></span>
<span class="line"><span style="color:#E06C75;">	functional</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 函数式组件 // data={attrs:{}}</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">h</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>源码相关</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// functional component</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isTrue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">functional</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 带有functional的属性的就是函数式组件</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> createFunctionalComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">propsData</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// extract listeners, since these needs to be treated as</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// child component listeners instead of DOM listeners</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> listeners</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">on</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 处理事件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// replace with listeners with .native modifier</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// so it gets processed during parent component patch.</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">on</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nativeOn</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 处理原生事件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// install component management hooks onto the placeholder node</span></span>
<span class="line"><span style="color:#61AFEF;">installComponentHooks</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 安装组件相关钩子 （函数式组件没有调用此方法，从而性能高于普通组件）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h1 id="三、vue-模板指令、插件" tabindex="-1">三、Vue 模板指令、插件 <a class="header-anchor" href="#三、vue-模板指令、插件" aria-label="Permalink to &quot;三、Vue 模板指令、插件&quot;">​</a></h1><ul><li>内置指令（v-if、v-for、v-show、v-bind、v-model）</li><li>自定义指令</li><li>插件的使用和开发</li></ul><h2 id="v-model-双向绑定" tabindex="-1">v-model 双向绑定？ <a class="header-anchor" href="#v-model-双向绑定" aria-label="Permalink to &quot;v-model 双向绑定？&quot;">​</a></h2><h3 id="_1-概念" tabindex="-1">1.概念： <a class="header-anchor" href="#_1-概念" aria-label="Permalink to &quot;1.概念：&quot;">​</a></h3><p>Vue 中双向绑定是一个指令<code>v-model</code>，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。</p><p><code>v-model</code>是语法糖，默认情况下相当于<code>:value</code>和<code>@input</code>，使用<code>v-model</code>可以减少大量繁琐的事件处理代码，提高开发效率。</p><h3 id="_2-使用" tabindex="-1">2.使用： <a class="header-anchor" href="#_2-使用" aria-label="Permalink to &quot;2.使用：&quot;">​</a></h3><p>通常在表单项上使用<code>v-model</code>，还可以在自定义组件上使用，表示某个值的输入和输出控制。</p><h3 id="_3-原理" tabindex="-1">3.原理： <a class="header-anchor" href="#_3-原理" aria-label="Permalink to &quot;3.原理：&quot;">​</a></h3><p><code>v-model</code>是一个指令，双向绑定实际上是 Vue 的编译器完成的，通过输出包含<code>v-model</code>模版的组件渲染函数，实际上还是<code>value</code>属性的绑定及<code>input</code>事件监听，事件回调函数中会做相应变量的更新操作。</p><p>Vue 中数据双向绑定是一个指令<code>v-model</code>，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。</p><ul><li><strong>当作用在表单上</strong>：通过<code>v-bind:value</code>绑定数据，<code>v-on:input</code>来监听数据变化并修改<code>value</code></li><li><strong>当作用在组件上</strong>：本质上是一个父子通信语法糖，通过<code>props</code>和<code>$emit</code>实现。</li></ul><h4 id="vue3-4" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3-4" aria-label="Permalink to &quot;Vue3&quot;">​</a></h4><p><a href="https://cn.vuejs.org/guide/components/v-model.html" target="_blank" rel="noreferrer">组件 v-model | Vue.js (vuejs.org)</a></p><h2 id="vue2-自定义-v-model" tabindex="-1">Vue2 自定义 v-model <a class="header-anchor" href="#vue2-自定义-v-model" aria-label="Permalink to &quot;Vue2 自定义 v-model&quot;">​</a></h2><p>v-bind:value=&quot;xxx&quot; 和 @input，意思是绑定了一个 value 属性的值，子组件可对 value 属性监听，通过$emit(&#39;input&#39;, xxx)的方式给父组件通讯。</p><p>自己实现 v-model 方式的组件也是这样的思路。</p><p>在 input 标签的基础上自定义 <code>v-model</code></p><p>input 组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">input</span></span>
<span class="line"><span style="color:#D19A66;">			type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			:</span><span style="color:#D19A66;">value</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			@</span><span style="color:#D19A66;">input</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;change&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">$event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	&lt;!--</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		1.上面的 input 使用了 :value 而不是 v-model</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		2.上面的 change 和 model.event 要对应起来</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		3.text 属性对应起来</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    model</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        prop</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;text&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 对应的 props text</span></span>
<span class="line"><span style="color:#E06C75;">        event</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;change&#39;</span><span style="color:#7F848E;font-style:italic;"> // 触发事件</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        text</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">        default</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>父组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">CustomVModel</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="vue3-自定义-v-model" tabindex="-1">Vue3 自定义 v-model <a class="header-anchor" href="#vue3-自定义-v-model" aria-label="Permalink to &quot;Vue3 自定义 v-model&quot;">​</a></h2><h2 id="v-model-语法糖的组件中的使用" tabindex="-1">v-model 语法糖的组件中的使用 <a class="header-anchor" href="#v-model-语法糖的组件中的使用" aria-label="Permalink to &quot;v-model 语法糖的组件中的使用&quot;">​</a></h2><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">mes</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时 mes 值就与 input 的值进行双向绑定</p><p>实际上上面的代码是下面代码的语法糖。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">value</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">mes</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">input</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">mes</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> $event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>要理解这行代码，首先你要知道 input 元素本身有个 oninput 事件，这是 HTML5 新增加的，类似 onchange ，每当输入框内容发生变化，就会触发 oninput ，把最新的 value 传递给 mes。从而实现了 v-model</p><h4 id="v-model-用在组件上的时候" tabindex="-1">v-model 用在组件上的时候 <a class="header-anchor" href="#v-model-用在组件上的时候" aria-label="Permalink to &quot;v-model 用在组件上的时候&quot;">​</a></h4><p>我们知道 v-model 可以实现数据的双向绑定，但是，如果说这是一个复杂的输入框，在项目中也经常使用。此时我们我们就把这个输入框封装成组件，那怎么利用 v-mode 让父组件的值与子组件 input 框里的</p><p>值双向绑定起来。看下面的例子:</p><p>1）父组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">InputBox</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">mes</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">InputBox</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>根据上面讲的 v-model 语法糖，所以 InputBox 那行代码也可以写成</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">InputBox</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">value</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">input</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">mes</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> $event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">InputBox</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2）子组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;input&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">value</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#D19A66;">           v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">input</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">inputNew</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">$event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">            value</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">                default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">        data</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">        created</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;">        methods</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#61AFEF;">            inputNew</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">                this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;input&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>所以说：</p><ul><li>1）接受一个 value prop</li><li>2）在有新的值时触发 input 事件并将新值作为参数 。</li></ul><p>这样，我们就可以看到子组件和父组件的值就可以联动起来。但是我们看到 v-model 中的事件是 input,如果碰到单选复选按钮这种 check 事件，那我们就需要去自定义 v-model</p><h4 id="v-model-自定义" tabindex="-1">v-model 自定义 <a class="header-anchor" href="#v-model-自定义" aria-label="Permalink to &quot;v-model 自定义&quot;">​</a></h4><p>父组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">InputCheckout</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">InputCheckout</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">InputBox</span><span style="color:#D19A66;"> v-bind</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">value</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">input</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">mes</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> $event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">InputBox</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是单选复选框不会触发 input 事件，只会触发 change 事件。所以在子组件我们需要自定义 v-model。我们来看看代码：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">tempLate</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    	&lt;input </span></span>
<span class="line"><span style="color:#ABB2BF;">           type=&quot;checkbox&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">           @change=&quot;newValue($event.target.checked)&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">           :checked=&quot;checked&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">           &gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">export default {</span></span>
<span class="line"><span style="color:#ABB2BF;">    props:[&#39;checked&#39;],</span></span>
<span class="line"><span style="color:#ABB2BF;">    // 这里就不用 value 了，而是 checke</span></span>
<span class="line"><span style="color:#ABB2BF;">    model:{</span></span>
<span class="line"><span style="color:#ABB2BF;">        prop: &#39;checked&#39;, </span></span>
<span class="line"><span style="color:#ABB2BF;">        event: &#39;changeEvent&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    data(){</span></span>
<span class="line"><span style="color:#ABB2BF;">        return {}</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    created(){},</span></span>
<span class="line"><span style="color:#ABB2BF;">	methods:{</span></span>
<span class="line"><span style="color:#ABB2BF;">        newValue(val){</span></span>
<span class="line"><span style="color:#ABB2BF;">            this.$emit(&#39;changeEvent&#39;, val)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="vue-delete" tabindex="-1">Vue.delete <a class="header-anchor" href="#vue-delete" aria-label="Permalink to &quot;Vue.delete&quot;">​</a></h2><p>删除对象或数组中元素，通过 key 或数组索引，可以触发视图更新</p><ul><li>Vue.set(array, indexOfItem, newValue)</li><li>this.array.$set(indexOfItem, newValue)</li><li>Vue.set(obj, keyOfItem, newValue)</li><li>this.obj.$set(keyOfItem, newValue)</li></ul><h4 id="数组修改" tabindex="-1">数组修改 <a class="header-anchor" href="#数组修改" aria-label="Permalink to &quot;数组修改&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delete</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">indexOfItem</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$delete</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">indexOfItem</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="对象修改" tabindex="-1">对象修改 <a class="header-anchor" href="#对象修改" aria-label="Permalink to &quot;对象修改&quot;">​</a></h4><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">Vue.delete(obj, keyOfItem) this.obj.$delete(keyOfItem)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="数组对象直接修改属性-可以触发视图更新" tabindex="-1">数组对象直接修改属性，可以触发视图更新 <a class="header-anchor" href="#数组对象直接修改属性-可以触发视图更新" aria-label="Permalink to &quot;数组对象直接修改属性，可以触发视图更新&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">show</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">show</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="splice-方法修改数组-可以触发视图更新" tabindex="-1">splice 方法修改数组，可以触发视图更新 <a class="header-anchor" href="#splice-方法修改数组-可以触发视图更新" aria-label="Permalink to &quot;splice 方法修改数组，可以触发视图更新&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">indexOfItem</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newElement</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="数组整体修改-可以触发视图更新" tabindex="-1">数组整体修改，可以触发视图更新 <a class="header-anchor" href="#数组整体修改-可以触发视图更新" aria-label="Permalink to &quot;数组整体修改，可以触发视图更新&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> tempArray</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">tempArray</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">show</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">array</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tempArray</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="用-object-assign-或-lodash-assign-可以为对象添加响应式属性-可以触发视图更新" tabindex="-1">用 Object.assign 或 lodash.assign 可以为对象添加响应式属性，可以触发视图更新 <a class="header-anchor" href="#用-object-assign-或-lodash-assign-可以为对象添加响应式属性-可以触发视图更新" aria-label="Permalink to &quot;用 Object.assign 或 lodash.assign 可以为对象添加响应式属性，可以触发视图更新&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Object.assign的单层的覆盖前面的属性，不会递归的合并属性</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">obj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">({}, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// assign与Object.assign一样</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> .</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">({}, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// merge会递归的合并属性</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> .</span><span style="color:#61AFEF;">merge</span><span style="color:#ABB2BF;">({}, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="vue-包含一组观察数组变异的方法-使用它们改变数组也会触发视图更新" tabindex="-1">Vue 包含一组观察数组变异的方法，使用它们改变数组也会触发视图更新 <a class="header-anchor" href="#vue-包含一组观察数组变异的方法-使用它们改变数组也会触发视图更新" aria-label="Permalink to &quot;Vue 包含一组观察数组变异的方法，使用它们改变数组也会触发视图更新&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">()      向数组的末尾添加一个或多个元素，并返回新的长度。</span></span>
<span class="line"><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">()       删除最后一个元素，把数组长度减 1，并且返回它删除的元素的值。</span></span>
<span class="line"><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">()     把数组的第一个元素从其中删除，并返回第一个元素的值。</span></span>
<span class="line"><span style="color:#61AFEF;">unshift</span><span style="color:#ABB2BF;">()   向数组的开头添加一个或更多元素，并返回新的长度。</span></span>
<span class="line"><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">()    向/从数组中添加/删除项目，然后返回被删除的项目。 该方法会改变原始数组。</span></span>
<span class="line"><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">()      对数组的元素进行排序。</span></span>
<span class="line"><span style="color:#61AFEF;">reverse</span><span style="color:#ABB2BF;">()   颠倒数组中元素的顺序。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>不变异的方法:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">他们返回的是一个新数组，使用这些方法时，可以用新数组来替换原始数组</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>原理:</p><p>-- Vue 在检测到数组变化时，并不是直接重新渲染整个列表，而是最大化复用 DOM 元素。替换的数组中，含有相同元素的项不会被重新渲染，因此可以大胆的用新数组来替换旧数组，不用担心性能问题。</p><p>-- 值得注意的是：</p><p>以下变动的数组中 Vue 是不能检测到的，也不会触发视图更新。</p><ul><li>1.通过索引直接设置项， 比如 <code>this.books[3]={...}</code></li><li>2.修改数组长度， 比如 <code>this.books.length = 1;</code></li></ul><p>两个问题都可以用 splice 来解决：</p><p>第一个问题 还可以用 set 方法 <code>this.$set(this.books,3,{...})</code></p><h2 id="删除数组用-delete-和-vue-delete-有什么区别" tabindex="-1">删除数组用 delete 和 Vue.delete 有什么区别？ <a class="header-anchor" href="#删除数组用-delete-和-vue-delete-有什么区别" aria-label="Permalink to &quot;删除数组用 delete 和 Vue.delete 有什么区别？&quot;">​</a></h2><ul><li>delete：只是被删除数组成员变为 empty / undefined，其他元素键值不变</li><li>Vue.delete：直接删了数组成员，并改变了数组的键值（对象是响应式的，确保删除能触发更新视图，这个方法主要用于避开 Vue 不能检测到属性被删除的限制）</li></ul><h2 id="vue-中-v-html-会导致哪些问题" tabindex="-1">Vue 中 v-html 会导致哪些问题 <a class="header-anchor" href="#vue-中-v-html-会导致哪些问题" aria-label="Permalink to &quot;Vue 中 v-html 会导致哪些问题&quot;">​</a></h2><h3 id="v-html-的原理" tabindex="-1">v-html 的原理 <a class="header-anchor" href="#v-html-的原理" aria-label="Permalink to &quot;v-html 的原理&quot;">​</a></h3><p>会先移除节点下的所有节点，调用<code>html</code>方法，通过<code>addProp</code>添加<code>innerHTML</code>属性，归根结底还是设置<code>innerHTML</code>为<code>v-html</code>的值。</p><h3 id="v-html-会导致哪些问题" tabindex="-1">v-html 会导致哪些问题 <a class="header-anchor" href="#v-html-会导致哪些问题" aria-label="Permalink to &quot;v-html 会导致哪些问题&quot;">​</a></h3><ul><li>可能会导致 <code>xss</code> 攻击</li><li><code>v-html</code> 会替换掉标签内部的子元素</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> template</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;vue-template-compiler&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> r</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> template</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`&lt;div v-html=&quot;&#39;&lt;span&gt;hello&lt;/span&gt;&#39;&quot;&gt;&lt;/div&gt;\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// with(this){return _c(&#39;div&#39;,{domProps: {&quot;innerHTML&quot;:_s(&#39;&lt;span&gt;hello&lt;/span&gt;&#39;)}})}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">r</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">render</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// _c 定义在core/instance/render.js</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// _s 定义在core/instance/render-helpers/index,js</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;textContent&#39;</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> key</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;innerHTML&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cur</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> oldProps</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">continue</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // #6601 work around Chrome version &lt;= 55 bug where single textNode </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // replaced by innerHTML/textContent retains its parentNode property</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">elm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">childNodes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        elm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">elm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">childNodes</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="v-on-可以监听多个方法吗" tabindex="-1">v-on 可以监听多个方法吗？ <a class="header-anchor" href="#v-on-可以监听多个方法吗" aria-label="Permalink to &quot;v-on 可以监听多个方法吗？&quot;">​</a></h2><p>可以监听多个方法。关于监听多个方法提供了几种不同的写法：</p><p>写法一：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-on</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">事件类型</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">事件处理函数</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">事件类型</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">事件处理函数</span><span style="color:#ABB2BF;"> }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>写法二：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">事件类型</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">“</span><span style="color:#E06C75;">事件处理函数</span><span style="color:#ABB2BF;">”</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">事件类型</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">“</span><span style="color:#E06C75;">事件处理函数</span><span style="color:#ABB2BF;">”</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>写法三：在一个事件里面书写多个事件处理函数</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">事件类型</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">“</span><span style="color:#E06C75;">事件处理函数1</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">事件处理函数2</span><span style="color:#ABB2BF;">”</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>写法四：在事件处理函数内部调用其他的函数</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>v-on 可以监听多个方法</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;about&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">myclick</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;world&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;你好世界&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">$event</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			点我text</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- v-on在vue2.x中测试,以下两种均可--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> v-on</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">mouseenter</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">onEnter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">mouseleave</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">onLeave</span><span style="color:#ABB2BF;"> }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			鼠标进来1</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">mouseenter</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">onEnter</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">mouseleave</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">onLeave</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;鼠标进来2&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 一个事件绑定多个函数，按顺序执行，这里分隔函数可以用逗号也可以用分号--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">a</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">b</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点我ab&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">one</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点我onetwothree&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- v-on修饰符 .stop .prevent .capture .self 以及指定键.{keyCode|keyAlias} --&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 这里的.stop 和 .prevent也可以通过传入&amp;event进行操作 --&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 全部按键别名有：enter tab delete esc space up down left right --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">form</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">keyup</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">delete</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">onKeyup</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">submit</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">prevent</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">onSubmit</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;"> placeholder</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;在这里按delete&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;submit&quot;</span><span style="color:#ABB2BF;">&gt;点我提交&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">form</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//这里是es6对象里函数写法</span></span>
<span class="line"><span style="color:#61AFEF;">		a</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		b</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		one</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;one&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">two</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">three</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		two</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;two&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		three</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;three&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		myclick</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">msg1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">msg1</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> msg2</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;--&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> msg3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		onKeyup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;you press &#39;delete&#39;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		onSubmit</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sumited&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		onEnter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mouse enter&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		onLeave</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mouse leave&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div><h2 id="vue2-常用的属性、指令有哪些" tabindex="-1">Vue2 常用的属性、指令有哪些 <a class="header-anchor" href="#vue2-常用的属性、指令有哪些" aria-label="Permalink to &quot;Vue2 常用的属性、指令有哪些&quot;">​</a></h2><h3 id="属性" tabindex="-1"><strong>属性</strong>： <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;**属性**：&quot;">​</a></h3><ul><li><code>data</code>：用于定义组件的初始数据。</li><li><code>props</code>：用于传递数据给子组件。</li><li><code>computed</code>：用于定义计算属性。</li><li><code>methods</code>：用于定义组件的方法。</li><li><code>watch</code>：用于监听组件的数据变化。</li><li><code>components</code>：用于注册子组件。可以通过 <code>components</code> 属性将其他组件注册为当前组件的子组件，从而在模板中使用这些子组件。</li></ul><h3 id="指令-1" tabindex="-1"><strong>指令</strong>： <a class="header-anchor" href="#指令-1" aria-label="Permalink to &quot;**指令**：&quot;">​</a></h3><ul><li><code>v-if</code>：条件渲染指令，根据表达式的真假来决定是否渲染元素。</li><li><code>v-show</code>：条件显示指令，根据表达式的真假来决定元素的显示和隐藏。</li><li><code>v-for</code>：列表渲染指令，用于根据数据源循环渲染元素列表。</li><li><code>v-bind</code>：属性绑定指令，用于动态绑定元素属性到 <code>Vue</code> 实例的数据。</li><li><code>v-on</code>：事件绑定指令，用于监听 <code>DOM</code> 事件，并执行对应的 <code>Vue</code> 方法。</li><li><code>v-model</code>：双向数据绑定指令，用于在表单元素和 <code>Vue</code> 实例的数据之间建立双向绑定关系。</li><li><code>v-text</code>：文本插值指令，用于将数据插入到元素的文本内容中。</li><li><code>v-html</code>：<code>HTML</code> 插值指令，用于将数据作为 <code>HTML</code> 解析并插入到元素中。</li></ul><h2 id="vue2的set-方法-动态添加删除属性-实现数据响应" tabindex="-1">Vue2的Set() 方法：动态添加删除属性，实现数据响应？ <a class="header-anchor" href="#vue2的set-方法-动态添加删除属性-实现数据响应" aria-label="Permalink to &quot;Vue2的Set() 方法：动态添加删除属性，实现数据响应？&quot;">​</a></h2><p>文档：<a href="https://v2.cn.vuejs.org/v2/api/#Vue-set" target="_blank" rel="noreferrer">API — Vue.js (vuejs.org)</a></p><p>可手动添加响应式数据，解决数据变化视图未更新问题。当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，会发现页面并没有更新。</p><p>这是因为 <code>Object.defineProperty()</code> 的限制，监听不到数据变化，可通过<code>this.$set(数组或对象，数组下标或对象的属性名，更新后的值)</code> 解决。</p><h3 id="什么情况要用-set" tabindex="-1">什么情况要用 set() <a class="header-anchor" href="#什么情况要用-set" aria-label="Permalink to &quot;什么情况要用 set()&quot;">​</a></h3><p>在两种情况下修改数据 <code>Vue</code> 是不会触发视图更新的</p><ul><li>在实例创建之后添加新的属性到实例上（给响应式对象新增属性）</li><li>直接更改数组下标来修改数组的值</li></ul><h3 id="set-的原理" tabindex="-1">set() 的原理 <a class="header-anchor" href="#set-的原理" aria-label="Permalink to &quot;set() 的原理&quot;">​</a></h3><ul><li>目标是对象，就用 <code>defineReactive</code> 给新增的属性去添加 <code>getter</code> 和 <code>setter</code>；</li><li>目标是数组，就直接调用数组本身的 <code>splice</code> 方法去触发响应式</li><li></li><li>给对应和数组本身都增加了<code>dep</code>属性</li><li>当给对象新增不存在的属性则触发对象依赖的<code>watcher</code>去更新</li><li>当修改数组索引时，我们调用数组本身的<code>splice</code>去更新数组（数组的响应式原理就是重新了<code>splice</code>等方法，调用<code>splice</code>就会触发视图更新）</li></ul><h3 id="vue-set-响应式新增与修改数据" tabindex="-1">Vue.set 响应式新增与修改数据 <a class="header-anchor" href="#vue-set-响应式新增与修改数据" aria-label="Permalink to &quot;Vue.set 响应式新增与修改数据&quot;">​</a></h3><p>vue 主要通过用 <code>this.$set(对象, &#39;属性&#39;, 值)</code> 实现动态添加属性，以实现数据的响应注意是添加，我记忆中如果是修改引用类型属性的值，是可以自动渲染的。</p><p>可以设置对象或数组的值，通过 key 或数组索引，可以触发视图更新</p><p>调用方法：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>Vue.set(target, key, value )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>target</code>：要更改的数据源(可以是对象或者数组)</li><li><code>key</code>：要更改的具体数据</li><li><code>value</code> ：重新赋的值</li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;{{user.name}} {{user.age}}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1. 依赖收集的特点：给每个属性都增加一个dep属性，dep属性会进行收集，收集的是watcher</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2. vue会给每个对象也增加一个dep属性</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// vm.data</span></span>
<span class="line"><span style="color:#E06C75;">		user</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;poetry&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对象的话：调用defineReactive在user对象上定义一个age属性，增加到响应式数据中，触发对象本身的watcher，ob.dep.notify()更新</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果是数组 通过调用 splice方法，触发视图更新</span></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 不能给根属性添加，因为给根添加属性 性能消耗太大，需要做很多处理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 修改肯定是同步的 -&gt; 更新都是一步的  queuewatcher</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="数组修改-1" tabindex="-1">数组修改 <a class="header-anchor" href="#数组修改-1" aria-label="Permalink to &quot;数组修改&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">indexOfItem</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">indexOfItem</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="对象修改-1" tabindex="-1">对象修改 <a class="header-anchor" href="#对象修改-1" aria-label="Permalink to &quot;对象修改&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">keyOfItem</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">keyOfItem</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="实现原理-2" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理-2" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><p><code>$set</code>解决的就是<code>对象/数组添加新属性不是响应式</code>的问题，因此它的核心就是调用此方法，<code>vue内部帮助我们把添加的属性变成响应式</code>。</p><h4 id="相关源码" tabindex="-1">相关源码 <a class="header-anchor" href="#相关源码" aria-label="Permalink to &quot;相关源码&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// src/core/observer/index.js 44</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Observer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// new Observer(value)</span></span>
<span class="line"><span style="color:#E06C75;">	value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	dep</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	vmCount</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// number of vms that have this object as root $data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dep</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 给所有对象类型增加dep属性</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// src/core/observer/index.js 201</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 1.是开发环境 target 没定义或者是基础类型则报错</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E5C07B;">		process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;production&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#61AFEF;"> isPrimitive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">	) {</span></span>
<span class="line"><span style="color:#61AFEF;">		warn</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			\`Cannot set reactive property on undefined, null, or primitive value: </span><span style="color:#C678DD;">\${</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">)}\`</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 2.如果是数组 Vue.set(array,1,100); 调用我们重写的splice方法 (这样可以更新视图)</span></span>
<span class="line"><span style="color:#ABB2BF;">	if (Array.isArray(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) &amp;&amp; isValidArrayIndex(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">		target.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 利用数组的splice变异方法触发响应式</span></span>
<span class="line"><span style="color:#ABB2BF;">		target.splice(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, val);</span></span>
<span class="line"><span style="color:#ABB2BF;">		return val;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 3.如果是对象本身的属性，则直接添加即可</span></span>
<span class="line"><span style="color:#61AFEF;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">		target[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span><span style="color:#E06C75;"> = val; </span><span style="color:#7F848E;font-style:italic;">// 直接修改属性值</span></span>
<span class="line"><span style="color:#E06C75;">		return val;</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 4.如果是Vue实例 或 根数据data时 报错,（更新_data 无意义）</span></span>
<span class="line"><span style="color:#E06C75;">	const ob = (target</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">any</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">_ob__</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isVue</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">ob</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> ob</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vmCount</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">		process.env.NODE_ENV !== </span><span style="color:#98C379;">&quot;production&quot;</span><span style="color:#E06C75;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">			warn(</span></span>
<span class="line"><span style="color:#98C379;">				&quot;Avoid adding reactive properties to a Vue instance or its root $data &quot;</span><span style="color:#E06C75;"> +</span></span>
<span class="line"><span style="color:#98C379;">					&quot;at runtime - declare it upfront in the data option.&quot;</span></span>
<span class="line"><span style="color:#E06C75;">			);</span></span>
<span class="line"><span style="color:#E06C75;">		return val;</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 5.如果不是响应式的也不需要将其定义成响应式属性</span></span>
<span class="line"><span style="color:#E06C75;">	if (!ob) {</span></span>
<span class="line"><span style="color:#E06C75;">		target[key] = val;</span></span>
<span class="line"><span style="color:#E06C75;">		return val;</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 6.将属性定义成响应式的</span></span>
<span class="line"><span style="color:#E06C75;">	defineReactive(ob.value, key, val);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 通知视图更新</span></span>
<span class="line"><span style="color:#E06C75;">	ob.dep.notify();</span></span>
<span class="line"><span style="color:#E06C75;">	return val;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p><strong>我们阅读以上源码可知，vm.$set 的实现原理是：</strong></p><ul><li><strong>如果目标是数组</strong> ，直接使用数组的 <code>splice</code> 方法触发相应式；</li><li><strong>如果目标是对象</strong> ，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 <code>defineReactive</code> 方法进行响应式处理（ <code>defineReactive</code> 方法就是 <code>Vue</code> 在初始化对象时，给对象属性采用 <code>Object.defineProperty</code> 动态添加 <code>getter</code> 和 <code>setter</code> 的功能所调用的方法）</li></ul><h4 id="执行过程" tabindex="-1">执行过程 <a class="header-anchor" href="#执行过程" aria-label="Permalink to &quot;执行过程&quot;">​</a></h4><ol><li>判断传入的对象是否为<code>数组</code>，并且<code>key是否为一个正确的索引</code>，如果是，就会<code>修改数组长度为key和原数组长度的最大值</code>，然后调用数组的<code>splice</code>方法进行更新数组，我们知道<code>splice方法也是不能被defineProperty监听的</code>，为什么这里要调用此方法呢？这是因为 Vue 内部帮我们重写了数组原型的该方法。</li><li>如果传入的是一个对象，那么就判断<code>传入的key值是否在对象中</code>，并且<code>不是在对象的原型上</code>，如果已经在对象中的话，不管<code>当前对象是否为响应式对象</code>，直接通过<code>target[key] = val</code>修改属性值就行了（如果原对象是响应式，那么它已有的属性肯定是响应式的，如果不是，那它已有的属性也不需要是响应式）。</li><li>如果传入的对象是<code>vue实例</code>，那么就会抛出警告；</li><li>最后通过<code>target._ob__</code>判断传入的对象是否为<code>响应式的</code>，如果<code>不是响应式</code>，那么给非响应式对象添加属性时，也不需要是响应式，直接使用<code>target[key]=val</code>就行了，如果对象<code>是一个响应式的</code>，那么给它添加新属性，也必须要变成响应式，于是就会调用<code>defineReactive方法将该属性添加getter/setter（本质就是使用Object.defineProperty）</code>将其变成响应式。</li></ol><h2 id="vue-中的vue-set对象更改检测的注意事项" tabindex="-1">vue 中的Vue.set对象更改检测的注意事项 <a class="header-anchor" href="#vue-中的vue-set对象更改检测的注意事项" aria-label="Permalink to &quot;vue 中的Vue.set对象更改检测的注意事项&quot;">​</a></h2><p>还是由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// \`vm.a\` 现在是响应式的</span></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// \`vm.b\` 不是响应式的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式属性。</p><p>但是，可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式属性。</p><p>例如，对于：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		userProfile</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Anika&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>你可以添加一个新的 age 属性到嵌套的 userProfile 对象：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userProfile</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">27</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你还可以使用 vm.$set 实例方法，它只是全局 Vue.set 的别名：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userProfile</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">27</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>有时你可能需要为已有对象赋值多个新属性，比如使用 Object.assign() 或 .extend()。在这种情况下，你应该用两个对象的属性创建一个新的对象。所以，如果你想添加新的响应式属性，不要像这样：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userProfile</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">27</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	favoriteColor</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Vue Green&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>你应该这样做：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userProfile</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">({}, </span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userProfile</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">27</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	favoriteColor</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Vue Green&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="说一下在-vue2-中如何检测数组的变化" tabindex="-1">说一下在 Vue2 中如何检测数组的变化？ <a class="header-anchor" href="#说一下在-vue2-中如何检测数组的变化" aria-label="Permalink to &quot;说一下在 Vue2 中如何检测数组的变化？&quot;">​</a></h2><p>参考答案：</p><p>使用了函数劫持的方式，重写了数组的方法，Vue 将 data 中的数组进行了原型链重写，指向了自己定义的数组原型方法。这样当调用数组 api 时，可以通知依赖更新。如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。</p><p>Vue2.x 中实现检测数组变化的方法，是将数组的常用方法进行了重写。Vue 将 data 中的数组进行了原型链重写，指向了自己定义的数组原型方法。这样当调用数组 api 时，可以通知依赖更新。如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。</p><p>流程:</p><ol><li>初始化传入 data 数据执行 initData</li><li>将数据进行观测 new Observer</li><li>将数组原型方法指向重写的原型</li><li>深度观察数组中的引用类型</li></ol><p>有两种情况无法检测到数组的变化。</p><ol><li>当利用索引直接设置一个数组项时，例如 <code>vm.items[indexOfItem] = newValue</code></li><li>当修改数组的长度时，例如 <code>vm.items.length = newLength</code></li></ol><p>不过这两种场景都有对应的解决方案。</p><p><strong>利用索引设置数组项的替代方案</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用该方法进行更新视图</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// vm.$set，Vue.set的一个别名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">indexOfItem</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>修改数组的长度的替代方案</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用该方法进行更新视图</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Array.prototype.splice</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">indexOfItem</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="vue-use-插件机制" tabindex="-1">Vue.use 插件机制 <a class="header-anchor" href="#vue-use-插件机制" aria-label="Permalink to &quot;Vue.use 插件机制&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ul><li><code>Vue</code>是支持插件的，可以使用 <code>Vue.use</code> 来安装 <code>Vue.js</code> 插件。如果插件是一个对象，必须提供<code>install</code>方法。如果插件是一个函数，它会被作为 <code>install</code> 方法。<code>install</code> 方法调用时，会将 <code>Vue</code> 作为参数传入。</li><li>该方法需要在调用 <code>new Vue()</code> 之前被调用。</li><li>当 <code>install</code> 方法被同一个插件多次调用，插件将只会被安装一次。</li></ul><h4 id="插件的功能" tabindex="-1">插件的功能： <a class="header-anchor" href="#插件的功能" aria-label="Permalink to &quot;插件的功能：&quot;">​</a></h4><ul><li>添加全局指令、全局过滤器、全局组件</li><li>通过全局混入来添加一些组件选项</li><li>添加 Vue 实例方法，通过把他们添加到 <code>Vue.prototype</code> 上实现</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> plugin1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">_vue</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_vue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> plugin2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_vue</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_vue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin2</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h3><p><code>Vue.use</code>的原理其实不复杂，它的功能主要就是两点：安装<code>Vue</code>插件、已安装插件不会重复安装；</p><ul><li>先声明一个数组，用来存放安装过的插件，如果已安装就不重复安装；</li><li>然后判断 <code>plugin</code> 是不是对象，如果是对象就判断对象的 <code>install</code> 是不是一个方法，如果是就将参数传入并执行 <code>install</code> 方法，完成插件的安装；</li><li>如果 <code>plugin</code> 是一个方法，就直接执行；</li><li>最后将 <code>plugin</code> 推入上述声明的数组中，表示插件已经安装；</li><li>最后返回 <code>Vue</code> 实例</li></ul><h2 id="在-vue-中使用插件的步骤" tabindex="-1">在 Vue 中使用插件的步骤 <a class="header-anchor" href="#在-vue-中使用插件的步骤" aria-label="Permalink to &quot;在 Vue 中使用插件的步骤&quot;">​</a></h2><ul><li>采用<code>ES6</code>的<code>import ... from ...</code>语法或<code>CommonJS</code>的<code>require()</code>方法引入插件</li><li>使用全局方法<code>Vue.use(plugin)</code>使用插件,可以传入一个选项对象<code>Vue.use(MyPlugin, { someOption: true })</code></li></ul><h2 id="vue-use-怎么实现的链式调用" tabindex="-1">Vue.use 怎么实现的链式调用 <a class="header-anchor" href="#vue-use-怎么实现的链式调用" aria-label="Permalink to &quot;Vue.use 怎么实现的链式调用&quot;">​</a></h2><p><code>Vue.use</code>的作用是给<code>Vue实例</code>注册插件。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> initUse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">GlobalAPI</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> installedPlugins</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">installedPlugins</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">installedPlugins</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">installedPlugins</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// additional parameters</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> args</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> toArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unshift</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">plugin</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">install</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">			plugin</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">install</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">			plugin</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		installedPlugins</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>在 Vue2 的<code>Vue.use</code>的源码中我们可以看到，Vue.use 的参数是<code>一个函数或者一个any类型</code>，然后会拿到<code>已经注册的插件</code>，看传入的插件是否已经被注册，如果已经被注册就会直接返回<code>this</code>，如果没有被注册，就会看<code>参数是否有install属性，并且该属性是否为一个函数</code>，或者直接判断<code>参数是不是一个函数</code>，如果满足这两种情况，会<code>调用参数或参数中的install方法注册插件</code>。最后返回<code>this</code>。</p><p>而这里返回的<code>this</code>就是<code>Vue</code>，因此我们调用完<code>Vue.use</code>，它的返回值还是一个 Vue，我们又可以通过<code>.use</code>去注册下一个插件，这样就可以实现了链式调用。</p><h2 id="vue-自定义指令" tabindex="-1">Vue 自定义指令 <a class="header-anchor" href="#vue-自定义指令" aria-label="Permalink to &quot;Vue 自定义指令&quot;">​</a></h2><p>Vue2文档：<a href="https://v2.cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noreferrer">自定义指令 — Vue.js (vuejs.org)</a></p><p>Vue3文档：<a href="https://cn.vuejs.org/guide/reusability/custom-directives.html" target="_blank" rel="noreferrer">自定义指令 | Vue.js (vuejs.org)</a></p><h3 id="概述-1" tabindex="-1">概述 <a class="header-anchor" href="#概述-1" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>除了内置的 <code>v-model</code>、<code>v-show</code>指令之外，<code>Vue</code>还允许注册<code>自定义指令</code>；</p><p>可以用来做 <code>权限控制</code>、<code>按钮防抖节流</code>、<code>图片按需加载等</code>；</p><h3 id="自定义指令的钩子函数-生命周期" tabindex="-1">自定义指令的钩子函数（生命周期） <a class="header-anchor" href="#自定义指令的钩子函数-生命周期" aria-label="Permalink to &quot;自定义指令的钩子函数（生命周期）&quot;">​</a></h3><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li><li><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li><code>update</code>：被绑定于元素所在的模板更新时调用，而无论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新。</li><li><code>componentUpdated</code>：被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用。</li></ul><p>钩子函数的参数 (包括 el，binding，vnode，oldVnode)</p><ul><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM 。</li><li><code>binding</code>：一个对象，包含以下属性： <ul><li><code>name</code>：指令名</li><li><code>value</code>：指令的绑定值</li><li><code>oldValue</code>：指令绑定的前一个值</li><li><code>expression</code>：绑定值的字符串形式</li><li><code>arg</code>：传给指令的参数</li><li><code>modifiers</code>：一个包含修饰符的对象。</li></ul></li><li><code>vnode</code>：Vue 编译生成的虚拟节点。</li><li><code>oldVnode</code>：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><h3 id="vue3-指令的钩子函数" tabindex="-1">Vue3 指令的钩子函数 <a class="header-anchor" href="#vue3-指令的钩子函数" aria-label="Permalink to &quot;Vue3 指令的钩子函数&quot;">​</a></h3><ul><li><code>created</code>: 已经创建出元素，但在绑定元素 <code>attributes</code>之前触发</li><li><code>beforeMount</code>：元素被插入到页面上之前</li><li><code>mounted</code>：父元素以及父元素下的所有子元素都插入到页面之后</li><li><code>beforeUpdate</code>： 绑定元素的父组件更新前调用</li><li><code>updated</code>：在绑定元素的父组件及他自己的所有子节点都更新后调用</li><li><code>beforeUnmount</code>：绑定元素的父组件卸载前调用</li><li><code>unmounted</code>：绑定元素的父组件卸载后</li></ul><p>指令回调中传递四个参数：</p><ul><li>绑定指令的节点元素</li><li>绑定值，里面包含表达式值、装饰符、参数等</li><li>当前 <code>vnode</code> 值</li><li>变更前的 <code>vnode</code> 值</li></ul><h3 id="实现-vue-自定义指令" tabindex="-1">实现 Vue 自定义指令 <a class="header-anchor" href="#实现-vue-自定义指令" aria-label="Permalink to &quot;实现 Vue 自定义指令&quot;">​</a></h3><p>在 <code>bind</code> 和 <code>update</code> 时触发相同行为，而不关心其它的钩子，就简写即可。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">directive</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;permission&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">binding</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vnode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//在这里检查页面的路由信息和权限表数组的信息是否匹配</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> permissionKey</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> binding</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextTick</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parentNode</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parentNode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="一、注册全局指令" tabindex="-1">一、注册全局指令： <a class="header-anchor" href="#一、注册全局指令" aria-label="Permalink to &quot;一、注册全局指令：&quot;">​</a></h4><p>全局自定义指令：<code>Vue.directive(&#39;指令名&#39;, { inserted(el) { } })</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 注册一个全局自定义指令 \`v-focus\`</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">directive</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;focus&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 当被绑定的元素插入到 DOM 中时……</span></span>
<span class="line"><span style="color:#61AFEF;">	inserted</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">binding</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 当前指令绑定的dom元素</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//console.log(el);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 指令传入的参数、修饰符、值 v-指令名称:参数.修饰符=值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(binding)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 聚焦元素</span></span>
<span class="line"><span style="color:#E5C07B;">		el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">focus</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="二、注册局部指令-组件中也接受一个-directives-的选项" tabindex="-1">二、注册局部指令： 组件中也接受一个 directives 的选项 <a class="header-anchor" href="#二、注册局部指令-组件中也接受一个-directives-的选项" aria-label="Permalink to &quot;二、注册局部指令： 组件中也接受一个 directives 的选项&quot;">​</a></h4><p>局部自定义指令：<code>directives:{ }</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">directives</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    focus</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 指令的定义</span></span>
<span class="line"><span style="color:#E06C75;">        inserted</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        	el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">focus</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>使用也很简单：直接在元素上面使用 v-focus 即可：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;"> v-focus</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>下面再举一个自定义指令的小例子：拖拽</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">directive</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;drag&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 当指令绑定到元素上的时候执行</span></span>
<span class="line"><span style="color:#61AFEF;">	bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">binding</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(&#39;bind&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 当前指令绑定的dom元素</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//console.log(el);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 指令传入的参数、修饰符、值 v-指令名称:参数.修饰符=值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(binding)</span></span>
<span class="line"><span style="color:#E5C07B;">		el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onmousedown</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> event</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> disX</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientX</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;"> el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">offsetLeft</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> disY</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientY</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;"> el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">offsetTop</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onmousemove</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> event</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E5C07B;"> L</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientX</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> disX</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E5C07B;"> T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientY</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> disY</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">binding</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">modifiers</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">limit</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">L</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">						L</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#E5C07B;">				el</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">left</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> L</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;px&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				el</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">top</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> T</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;px&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#E5C07B;">			document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onmouseup</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onmousemove</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>使用也很简单，只用在元素上添加 v-drag 或者 v-drag.limit</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;div1&quot;</span><span style="color:#D19A66;"> v-drag</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">limit</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;div2&quot;</span><span style="color:#D19A66;"> v-drag</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="vue-常用指令" tabindex="-1">Vue 常用指令 <a class="header-anchor" href="#vue-常用指令" aria-label="Permalink to &quot;Vue 常用指令&quot;">​</a></h3><ul><li><code>v-model</code>：多用于表单元素实现双向数据绑定（同 angular 中的 ng-model）</li><li><code>v-for</code>：格式： <code>v-for=&quot;字段名 in(of) 数组 json&quot;</code> 循环数组或 json(同 angular 中的 ng-repeat)，需要注意从 vue2 开始取消了 <code>$index</code></li><li><code>v-show</code>：显示内容 （同 angular 中的 ng-show）</li><li><code>v-hide</code>：隐藏内容（同 angular 中的 ng-hide）</li><li><code>v-if</code>：显示与隐藏 （dom 元素的删除添加 同 angular 中的 ng-if 默认值为 false）</li><li><code>v-if/v-else-if/v-else</code>：用于<code>条件渲染</code>，在标签上使用<code>v-if</code>时，需要传入判断条件，满足条件的才会渲染，不满足的不会渲染；</li><li><code>v-bind</code>：动态绑定 作用： 及时对页面的数据进行更改</li><li><code>v-on:click</code>：给标签绑定函数，<code>v-on</code>可以缩写为<code>@</code>，例如绑定一个点击函数 函数必须写在 methods 里面</li><li><code>v-text</code>：解析文本</li><li><code>v-html</code>：解析 html 标签</li><li><code>v-bind:class</code>：三种绑定方法 <ul><li>1、对象型 &#39;{red:isred}&#39;</li><li>2、三元型 &#39;isred?&quot;red&quot;:&quot;blue&quot;&#39;</li><li>3、数组型</li></ul></li><li><code>[{red:&quot;isred&quot;},{blue:&quot;isblue&quot;}]</code></li><li><code>v-once</code>：进入页面时 只渲染一次 不在进行渲染</li><li><code>v-cloak</code>：防止闪烁</li><li><code>v-pre</code>：把标签内部的元素原位输出：跳过这个元素和它的子元素的编译过程。可以用来显示原始Mustache 标签。跳过大量没有指令的节点会加快编译。</li><li><code>v-slot</code>：只能用于<code>template</code>标签上，用于<code>绑定插槽</code>，传入指定的插槽名从而绑定对应的插槽，语法糖为<code>#</code>；</li><li><code>v-memo</code>：用于<code>缓存节点</code>，需要传入一个<code>数组</code>，如果下次更新时，数组中的元素都没有改变，那么该标签和它的子节点就会使用缓存，不进行更新，当传入一个<code>空数组时</code>，效果和<code>v-once一样</code>，通常可以和<code>v-for</code>一起使用，来达到优化的效果；</li></ul><h2 id="自定义指令的应用场景" tabindex="-1">自定义指令的应用场景 <a class="header-anchor" href="#自定义指令的应用场景" aria-label="Permalink to &quot;自定义指令的应用场景&quot;">​</a></h2><p>指令的目的就是将操作 DOM 的逻辑进行复用</p><h3 id="_1、指令的生命周期" tabindex="-1">1、指令的生命周期 <a class="header-anchor" href="#_1、指令的生命周期" aria-label="Permalink to &quot;1、指令的生命周期&quot;">​</a></h3><ol><li>bind：只调用一次，指令第一次绑定到元素时候调用</li><li>inserted： 被绑定元素插入父节点时调用</li><li>update：组件的 VNode 更新时候调用，但可能发生在其子 VNode 更新之前</li><li>componentUpdated：指令所在组件 VNode 以及其子 VNode 全部更新后调用</li><li>unbind：只调用一次，指令与元素解绑的时候调用</li></ol><h3 id="_2、常见的指令编写" tabindex="-1">2、常见的指令编写 <a class="header-anchor" href="#_2、常见的指令编写" aria-label="Permalink to &quot;2、常见的指令编写&quot;">​</a></h3><ul><li>图片懒加载 v-lazy</li><li>防抖 v-debounce</li><li>按钮权限 v-has</li><li>自动聚焦 v-focus</li><li>加载中 v-loading</li></ul><h2 id="自定义指令-v-check、v-focus-的方法有哪些-它有哪些钩子函数-还有哪些钩子函数参数" tabindex="-1">自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？ <a class="header-anchor" href="#自定义指令-v-check、v-focus-的方法有哪些-它有哪些钩子函数-还有哪些钩子函数参数" aria-label="Permalink to &quot;自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？&quot;">​</a></h2><p><strong>全局定义指令</strong>：在 vue 对象的 directive 方法里面有两个参数，一个是指令名称，另外一个是函数。</p><p><strong>组件内定义指令</strong>：directives</p><p><strong>钩子函数</strong>：bind（绑定事件触发）、inserted(节点插入的时候触发)、update（组件内相关更新）</p><p><strong>钩子函数参数</strong>：el、binding</p><h2 id="说出至少-4-种-vue-当中的指令和它的用法" tabindex="-1">说出至少 4 种 vue 当中的指令和它的用法？ <a class="header-anchor" href="#说出至少-4-种-vue-当中的指令和它的用法" aria-label="Permalink to &quot;说出至少 4 种 vue 当中的指令和它的用法？&quot;">​</a></h2><p>v-if：判断是否隐藏；</p><p>v-for：数据循环出来；</p><p>v-bind:class：绑定一个属性；</p><p>v-model：实现双向绑定</p><h2 id="v-once-的使用场景有哪些" tabindex="-1">v-once 的使用场景有哪些 <a class="header-anchor" href="#v-once-的使用场景有哪些" aria-label="Permalink to &quot;v-once 的使用场景有哪些&quot;">​</a></h2><p>v-once 是 Vue 的内置指令，作用是仅渲染组件和元素一次，并跳过未来对其更新。</p><p>随后的重新渲染，元素、组件以及其所有的子节点都将被视为静态内容并跳过。这可以用于优化更新性能。</p><p>使用场景：为已知一些组件不需要更新</p><p><strong>Vue3.2 之后，增加了 v-memo 指令，通过依赖列表的方式控制页面的渲染。</strong></p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// 只有在依赖项value1 value2发生变化的时候，内部元素才会重新渲染</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-memo</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">value1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value2</span><span style="color:#ABB2BF;">]</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    {{ message }}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="v-once原理" tabindex="-1">v-once原理： <a class="header-anchor" href="#v-once原理" aria-label="Permalink to &quot;v-once原理：&quot;">​</a></h3><p>编译器发现元素上面有<code>v-once</code>时，会将首次计算结果存入缓存，组件再次渲染时就会从缓存获取，避免再次计算。</p><h2 id="vue2-过滤器的应用场景有哪些" tabindex="-1">Vue2 过滤器的应用场景有哪些？ <a class="header-anchor" href="#vue2-过滤器的应用场景有哪些" aria-label="Permalink to &quot;Vue2 过滤器的应用场景有哪些？&quot;">​</a></h2><p>过滤器不会改变原始数据，它只是对数据进行加工处理后，返回过滤后的数据，最终将过滤后的数据展示在页面上。我们也可以将它理解成是纯函数。</p><h3 id="_1、注册过滤器" tabindex="-1">1、注册过滤器 <a class="header-anchor" href="#_1、注册过滤器" aria-label="Permalink to &quot;1、注册过滤器&quot;">​</a></h3><p>全局注册：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>局部注册：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">filters</span><span style="color:#ABB2BF;">: { ... } })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2、使用过滤器" tabindex="-1">2、使用过滤器 <a class="header-anchor" href="#_2、使用过滤器" aria-label="Permalink to &quot;2、使用过滤器&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		xxx</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> 过滤器</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">或</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">属性</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;xxx | 过滤器&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 过滤器也可以串联：</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		xxx</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> 过滤器1</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> 过滤器2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">或</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">属性</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;xxx | 过滤器 | 过滤器 2&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="_3、传参" tabindex="-1">3、传参 <a class="header-anchor" href="#_3、传参" aria-label="Permalink to &quot;3、传参&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// message 是作为第一个参数被传递的，参数 1 参数 2 分别作为第 2 3 参数传递</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		message</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;"> 过滤器</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;参数1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;参数2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>全局和局部命名重复时，以局部为准。</p><p>常用场景：单位转换、时间格式化、文本格式化等</p><blockquote><p>Vue3 放弃了过滤器。</p></blockquote><h2 id="vue2-中自定义过滤器" tabindex="-1">Vue2 中自定义过滤器 <a class="header-anchor" href="#vue2-中自定义过滤器" aria-label="Permalink to &quot;Vue2 中自定义过滤器&quot;">​</a></h2><p>过滤器是一个通过输入数据，能够及时对数据进行处理并返回一个数据结果的简单函数。Vue 有很多很便利的过滤器，过滤器通常会使用管道标志 “ | ”。</p><p>使用:</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">td</span><span style="color:#ABB2BF;">&gt;{{item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)}}&lt;/</span><span style="color:#E06C75;">td</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="自定义全局过滤器" tabindex="-1">自定义全局过滤器 <a class="header-anchor" href="#自定义全局过滤器" aria-label="Permalink to &quot;自定义全局过滤器&quot;">​</a></h4><p>虽然 VueJs 给我们提供了很多强有力的过滤器，但有时候还是不够。值得庆幸的，Vue 给我们提供了一个干净简洁的方式来定义我们自己的过滤器，之后我们就可以利用管道 “ | ” 来完成过滤。</p><p>定义一个全局的自定义过滤器，需要使用 <code>Vue.filter()</code> 构造器。这个构造器需要两个参数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个全局过滤器</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dataFormat&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pattern</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> dt</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取年月日</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFullYear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> m</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMonth</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDate</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 否则，就返回 年-月-日 时：分：秒</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">pattern</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;yyyy-mm-dd&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">y</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">m</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">d</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 获取时分秒</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> hh</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHours</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> mm</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMinutes</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> ss</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSeconds</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">y</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">m</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">d</span><span style="color:#C678DD;">}</span><span style="color:#C678DD;"> \${</span><span style="color:#E06C75;">hh</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">:</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">mm</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">:</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">ss</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="自定义私有过滤器" tabindex="-1">自定义私有过滤器 <a class="header-anchor" href="#自定义私有过滤器" aria-label="Permalink to &quot;自定义私有过滤器&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">    filters</span><span style="color:#ABB2BF;">: { </span><span style="color:#7F848E;font-style:italic;">// 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span></span>
<span class="line"><span style="color:#61AFEF;">    dataFormat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pattern</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// 在参数列表中 通过 pattern=&quot;&quot; 来指定形参默认值，防止报错</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> dt</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取年月日</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFullYear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> m</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMonth</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDate</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 否则，就返回 年-月-日 时：分：秒</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">pattern</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &#39;yyyy-mm-dd&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        	return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">y</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">m</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">d</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取时分秒</span></span>
<span class="line"><span style="color:#C678DD;">            var</span><span style="color:#E06C75;"> hh</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHours</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            var</span><span style="color:#E06C75;"> mm</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMinutes</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            var</span><span style="color:#E06C75;"> ss</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSeconds</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">y</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">m</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">d</span><span style="color:#C678DD;">}</span><span style="color:#C678DD;"> \${</span><span style="color:#E06C75;">hh</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">:</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">mm</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">:</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">ss</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h1 id="四、vue-高级特性" tabindex="-1">四、Vue 高级特性 <a class="header-anchor" href="#四、vue-高级特性" aria-label="Permalink to &quot;四、Vue 高级特性&quot;">​</a></h1><p>组合在了组件知识内</p><ul><li>自定义 v-model</li><li>$nextTick</li><li>refs</li><li>slot</li><li>动态组件</li><li>异步组件</li><li>keep-alive</li><li>动画实现</li></ul><h2 id="vue的-nexttick" tabindex="-1">Vue的$nextTick <a class="header-anchor" href="#vue的-nexttick" aria-label="Permalink to &quot;Vue的$nextTick&quot;">​</a></h2><p>Vue2 和 Vue3 中使用nextTick 的方式和 <code>实现的原理</code> 都不一样。</p><p>Vue2文档：<a href="https://v2.cn.vuejs.org/v2/api/#Vue-nextTick" target="_blank" rel="noreferrer">API — Vue.js (vuejs.org)</a></p><p><code>$nextTick</code>是 Vue.js 提供的一个异步更新 DOM 的方法。</p><p><strong>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</strong></p><p><code>nextTick</code> 是 Vue 提供的一个全局 API，由于 Vue 的异步更新策略，导致我们对数据修改后不会直接体现在 DOM 上，此时如果想要立即获取更新后的 DOM 状态，就需要借助该方法。</p><p>因为 Vue 的更新是<code>异步</code>的，如果你想在改变某个属性之后立即去操作 DOM，可能结果并不是你想要的，而<code>nextTick</code>允许你在当前 DOM 更新循环结束之后执行一个回调函数，这样可以<code>确保在回调函数中操作的DOM是最新的</code>。</p><p>Vue 在更新 DOM 时是异步执行的。当数据发生变化，Vue 将开启一个异步更新队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 <code>watcher</code> 被多次触发，只会被推入队列一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。<code>nextTick</code>方法会在队列中加入一个回调函数，确保该函数在前面的 DOM 操作完成后才调用。</p><p>因为 Vue 的异步更新队列，$nextTick 是用来知道什么时候 DOM 更新完成的。详细解读：我们先来看这样一个场景：有一个 div，默认用 v-if 将它隐藏，点击一个按钮后，改变 v-if 的值，让它显示出来，同时拿到这个 div 的文本内容。</p><p>如果 v-if 的值是 false，直接去获取 div 内容是获取不到的，因为此时 div 还没有被创建出来，那么应该在点击按钮后，改变 v-if 的值为 true，div 才会被创建，此时再去获取。</p><p>使用场景：</p><ol><li>如果想要在修改数据后立刻得到更新后的<code>DOM</code>结构，可以使用<code>Vue.nextTick()</code></li><li>在<code>created</code>生命周期中进行<code>DOM</code>操作</li></ol><p>vue 中的 nextTick 主要用于处理数据动态变化后，DOM 还未及时更新的问题，用 nextTick 就可以获取数据更新后最新 DOM 的变化适用场景：</p><p>第一种：有时需要根据数据动态的为页面某些 dom 元素添加事件，这就要求在 dom 元素渲染完毕时去设置，但是 created 与 mounted 函数执行时一般 dom 并没有渲染完毕，所以就会出现获取不到，添加不了事件的问题，这回就要用到 nextTick 处理</p><p>第二种：在使用某个第三方插件时 ，希望在 vue 生成的某些 dom 动态发生变化时重新应用该插件，也会用到该方法，这时候就需要在 $nextTick 的回调函数中执行重新应用插件的方法，例如：应用滚动插件 better-scroll 时</p><p>第三种：数据改变后获取焦点</p><ul><li><code>$nextTick</code> 可以让我们在下次 <code>DOM</code> 更新结束之后执行回调，用于获得更新后的 <code>DOM</code>；</li><li><code>使用场景</code>在于响应式数据变化后想获取<code>DOM</code>更新后的情况；</li></ul><p>用法：将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。</p><p>它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。</p><p>Vue 是异步染（原理部分会详细讲解）</p><p>data 改变之后，DOM 不会立刻渲染</p><p>$nextTick 会在 DOM 渲染之后被触发，以获取最新 DOM 节点</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ul1&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">li</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> list</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				{{ </span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">addItem</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;添加一项&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			list</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		addItem</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 1. 异步渲染，$nextTick 待 DOM 渲染完再回调</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 3. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$nextTick</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 获取 DOM 元素</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> ulElem</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$refs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ul1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// eslint-disable-next-line</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ulElem</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">childNodes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;div id=&quot;div&quot; v-if=&quot;showDiv&quot;&gt;这是一段文本&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">getText</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;获取div内容&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	var app = new Vue({</span></span>
<span class="line"><span style="color:#ABB2BF;">		el: &quot;#app&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		data: { showDiv: false },</span></span>
<span class="line"><span style="color:#ABB2BF;">		methods: {</span></span>
<span class="line"><span style="color:#ABB2BF;">			getText: function () {</span></span>
<span class="line"><span style="color:#ABB2BF;">				this.showDiv = true;</span></span>
<span class="line"><span style="color:#ABB2BF;">				var text = document.getElementById(&quot;div&quot;).innnerHTML;</span></span>
<span class="line"><span style="color:#ABB2BF;">				console.log(text);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p><strong>$nextTick 就是用来知道什么时候 DOM 更新完成的</strong>，所以上面的示例代码需要修改为：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;div id=&quot;div&quot; v-if=&quot;showDiv&quot;&gt;这是一段文本&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">getText</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;获取div内容&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	var app = new Vue({</span></span>
<span class="line"><span style="color:#ABB2BF;">		el: &quot;#app&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		data: { showDiv: false },</span></span>
<span class="line"><span style="color:#ABB2BF;">		methods: {</span></span>
<span class="line"><span style="color:#ABB2BF;">			getText: function () {</span></span>
<span class="line"><span style="color:#ABB2BF;">				this.showDiv = true;</span></span>
<span class="line"><span style="color:#ABB2BF;">				this.$nextTick(function () {</span></span>
<span class="line"><span style="color:#ABB2BF;">					var text = document.getElementById(&quot;div&quot;).innnerHTML;</span></span>
<span class="line"><span style="color:#ABB2BF;">					console.log(text);</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>这时再点击事件，控制台就打印出 div 的内容“这是一段文本“了。</p><p>理论上，我们应该不用去主动操作 DOM，因为 Vue 的核心思想就是数据驱动 DOM，但在很多业务里，我们避免不了会使用一些第三方库，比如 popper.js、swiper 等，这些基于原生 javascript 的库都有创建和更新及销毁的完整生命周期，与 Vue 配合使用时，就要利用好$nextTick。</p><h3 id="nexttick-的应用场景" tabindex="-1">$nextTick() 的应用场景 <a class="header-anchor" href="#nexttick-的应用场景" aria-label="Permalink to &quot;$nextTick() 的应用场景&quot;">​</a></h3><p>在 vue 的生命周期 created() 钩子函数中进行 dom 操作，一定要放在 $nextTick() 函数中执行。</p><p>在 created() 钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的代码放进 nextTick() 的回调函数中。</p><p>mounted() 钩子函数，因为该钩子函数执行时，所有的 DOM 挂载和 渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题，在数据变化后要执行某个操作，而这个操作需要随数据改变而改变 DOM 结构时，这个操作都是需要放置$nextTick() 的回调函数中。</p><h3 id="vue2使用-nexttick" tabindex="-1">Vue2使用$nextTick <a class="header-anchor" href="#vue2使用-nexttick" aria-label="Permalink to &quot;Vue2使用$nextTick&quot;">​</a></h3><p>在 Vue2 中，我们可以直接使用<code>this.$nextTick</code>去使用该函数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> flushCallbacks</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">  pending</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> copies</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> callbacks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">  callbacks</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> copies</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    copies</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Promise is available, we will use it:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* istanbul ignore next, $flow-disable-line */</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E5C07B;"> Promise</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;undefined&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> isNative</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">  timerFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushCallbacks</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // In problematic UIWebViews, Promise.then doesn&#39;t completely break, but</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // it can get stuck in a weird state where callbacks are pushed into the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // microtask queue but the queue isn&#39;t being flushed, until the browser</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // needs to do some other work, e.g. handle a timer. Therefore we can</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isIOS</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">noop</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  isUsingMicroTask</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#56B6C2;">  !</span><span style="color:#E06C75;">isIE</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#C678DD;">  typeof</span><span style="color:#E06C75;"> MutationObserver</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;undefined&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#61AFEF;">isNative</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">MutationObserver</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // PhantomJS and iOS 7.x</span></span>
<span class="line"><span style="color:#E5C07B;">    MutationObserver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &#39;[object MutationObserverConstructor]&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // Use MutationObserver where native Promise is not available,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // e.g. PhantomJS, iOS7, Android 4.4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // (#6466 MutationObserver is unreliable in IE11)</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> counter</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> observer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MutationObserver</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushCallbacks</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> textNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createTextNode</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">  observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">textNode</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">    characterData</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#61AFEF;">  timerFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    counter</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">counter</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">%</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#E5C07B;">    textNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  isUsingMicroTask</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> setImmediate</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;undefined&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> isNative</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">setImmediate</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // Fallback to setImmediate.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // Technically it leverages the (macro) task queue,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // but it is still a better choice than setTimeout.</span></span>
<span class="line"><span style="color:#61AFEF;">  timerFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    setImmediate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushCallbacks</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // Fallback to setTimeout.</span></span>
<span class="line"><span style="color:#61AFEF;">  timerFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushCallbacks</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> nextTick</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">cb</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: object) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> _resolve</span></span>
<span class="line"><span style="color:#E5C07B;">  callbacks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        cb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        handleError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;nextTick&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_resolve</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      _resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">pending</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    pending</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#61AFEF;">    timerFunc</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // $flow-disable-line</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">cb</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E5C07B;"> Promise</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;undefined&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      _resolve</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> resolve</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br></div></div><p>从 Vue2 的 nextTick 的源码实现中我们可以看到，传入 nextTick 的回调函数，会放入<code>callbacks数组中</code>，然后会<code>遍历callbacks数组</code>，依次执行其中的函数。具体在什么时机执行呢？如果<code>支持Promise</code>，就使用<code>Promise.then</code>，否则就使用<code>MutationObserver</code>，这两种是<code>微任务</code>，如果都不支持，会判断是否支持<code>setImmediate</code>（Node 中），如果不支持则会使用<code>setTimeout</code>的方式来进行异步执行。</p><p>如何确保 nextTick 的内容<code>一定会在</code>数据更新之后执行呢？</p><p>这个其实是无法完全保证的，我们对数据的更新<code>也是通过nextTick添加到异步任务队列</code>进行异步更新的，当我们在数据更新之后手动调用<code>nextTick</code>时，我们的代码就会放在<code>数据更新之后</code>进行执行了。比如我们先改变了数据，Vue 内部的任务队列此时会有<code>[a]</code>一个任务，这个任务就是准备更新数据的任务，此时我们<code>手动调用nextTick</code>，这时任务队列就会有<code>[a,b]</code>两个任务，到时候执行时先执行 a，然后才会去执行我们的回调任务。</p><h3 id="vue3使用-nexttick" tabindex="-1">Vue3使用$nextTick <a class="header-anchor" href="#vue3使用-nexttick" aria-label="Permalink to &quot;Vue3使用$nextTick&quot;">​</a></h3><p>Vue3 中，由于无法访问<code>this</code>，因此在使用时变成了<code>导入nextTick函数</code>进行调用，并且该函数<code>返回一个Promise对象</code>，我们可以使用<code>await或者.then</code>来获取异步操作的结果。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> nextTick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">R</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">&gt;(</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">	this</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	fn</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: (</span><span style="color:#E5C07B;font-style:italic;">this</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> R</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Awaited</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> currentFlushPromise</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> resolvedPromise</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> fn</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> fn</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>由此可见，Vue3 中的<code>nextTick</code>只是利用了<code>promise</code>来实现的（我感觉是因为 Vue3 已经打算放弃兼容那些低版本浏览器了，因此才会这么做），而<code>nextTick的回调</code>其实就像相当于放在<code>Promise.then()</code>中来执行的。当然还有各种细节，有兴趣的可以去看下源码（在 runtime-core 文件夹下的 src 文件夹中的 scheduler.ts 文件）。</p><h3 id="nexttick-的原理" tabindex="-1">NextTick 的原理 <a class="header-anchor" href="#nexttick-的原理" aria-label="Permalink to &quot;NextTick 的原理&quot;">​</a></h3><ul><li><p><code>$nextTick</code> 本质是对<code>事件循环</code>原理的一种应用，它主要使用了<code>宏任务</code>和<code>微任务</code>，采用<code>微任务</code>优先的方式去执行 <code>nextTick</code> 包装的方法；</p></li><li><p>并且根据不同环境，为了<code>兼容性</code>做了很多<code>降级处理</code>：</p></li><li><p>2.6 版本中的降级处理：Promise &gt; MutationObserver &gt; setImmediate &gt; setTimeout</p><ul><li>因为 <code>Vue</code>是异步更新的，<code>NextTick</code> 就在更新<code>DOM</code>的<code>微任务</code>队列后追加了我们自己的回调函数</li></ul></li></ul><h3 id="nexttick-的作用是什么-他的实现原理是什么" tabindex="-1">nextTick 的作用是什么？他的实现原理是什么？ <a class="header-anchor" href="#nexttick-的作用是什么-他的实现原理是什么" aria-label="Permalink to &quot;nextTick 的作用是什么？他的实现原理是什么？&quot;">​</a></h3><p>作用：vue 更新 DOM 是异步更新的，数据变化，DOM 的更新不会马上完成，nextTick 的回调是在下次 DOM 更新循环结束之后执行的延迟回调。</p><p>实现原理：nextTick 主要使用了宏任务和微任务。根据执行环境分别尝试采用</p><ul><li>Promise：可以将函数延迟到当前函数调用栈最末端</li><li>MutationObserver ：是 H5 新加的一个功能，其功能是监听 DOM 节点的变动，在所有 DOM 变动完成后，执行回调函数</li><li>setImmediate：用于中断长时间运行的操作，并在浏览器完成其他操作（如事件和显示更新）后立即运行回调函数</li><li>如果以上都不行则采用 setTimeout 把函数延迟到 DOM 更新之后再使用，原因是宏任务消耗大于微任务，优先使用微任务，最后使用消耗最大的宏任务。</li></ul><p>在下次 DOM 更新循环结束之后执行延迟回调。nextTick 主要使用了宏任务和微任务。根据执行环境分别尝试采用</p><ul><li>Promise</li><li>MutationObserver</li><li>setImmediate</li><li>如果以上都不行则采用 setTimeout</li></ul><p>定义了一个异步方法，多次调用 nextTick 会将方法存入队列中，通过这个异步方法清空当前队列。</p><h3 id="vue-的异步更新策略原理" tabindex="-1">Vue 的异步更新策略原理 <a class="header-anchor" href="#vue-的异步更新策略原理" aria-label="Permalink to &quot;Vue 的异步更新策略原理&quot;">​</a></h3><ul><li><code>Vue</code>的 <code>DOM</code> 更新是异步的，当数据变化时，<code>Vue</code> 就会开启一个队列，然后把在同一个 <code>事件循环</code> 中观察到数据变化的 <code>watcher</code> 推送进这个队列；</li><li>同时如果这个 <code>watcher</code> 被触发多次，只会被推送到队列一次；</li><li>而在下一个 <code>事件循环</code> 时，<code>Vue</code>会清空这个队列，并进行必要的 <code>DOM</code> 更新；</li><li>这也就是响应式的数据 <code>for</code> 循环改变了<code>100</code>次视图也只更新一次的原因；</li></ul><blockquote><p>为什么<code>Vue</code>采用异步渲染呢：</p></blockquote><p><code>Vue</code> 是组件级更新，如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染</p><h3 id="vue-nexttick-和-vm-nexttick-区别" tabindex="-1">Vue.nextTick 和 vm.$nextTick 区别 <a class="header-anchor" href="#vue-nexttick-和-vm-nexttick-区别" aria-label="Permalink to &quot;Vue.nextTick 和 vm.$nextTick 区别&quot;">​</a></h3><ul><li>两者都是在 <code>DOM</code> 更新之后执行回调；</li><li>然而 <code>vm.$nextTick</code> 回调的 <code>this</code> 自动绑定到调用它的实例上；</li></ul><h3 id="nexttick-的版本迭代变化" tabindex="-1">NextTick 的版本迭代变化 <a class="header-anchor" href="#nexttick-的版本迭代变化" aria-label="Permalink to &quot;NextTick 的版本迭代变化&quot;">​</a></h3><p><code>Vue</code>在<code>2.4</code>版本、<code>2.5</code>版本和<code>2.6</code>版本中对于<code>nextTick</code>进行反复变动，原因是浏览器对于<strong>微任务</strong>的不兼容性影响、<strong>微任务</strong>和<strong>宏任务</strong>各自优缺点的权衡。</p><ul><li><code>2.4</code>的整体优先级：<code>Promise</code> <strong>&gt;</strong> <code>MutationObserver</code> <strong>&gt;</strong> <code>setTimeout</code></li><li><code>2.5</code>的整体优先级：<code>Promise</code>&gt; <code>setImmediate</code>&gt; <code>MessageChannel</code>&gt; <code>setTimeout</code></li><li><code>2.6</code>的整体优先级：<code>Promise</code> <strong>&gt;</strong> <code>MutationObserver</code> <strong>&gt;</strong> <code>setImmediate</code> <strong>&gt;</strong> <code>setTimeout</code></li></ul><h4 id="_2-4-版本的-nexttick" tabindex="-1">2.4 版本的 NextTick <a class="header-anchor" href="#_2-4-版本的-nexttick" aria-label="Permalink to &quot;2.4 版本的 NextTick&quot;">​</a></h4><p>在 <code>Vue 2.4</code> 和之前都优先使用 <code>microtasks</code>，但是 <code>microtasks</code>的优先级过高，在某些情况下可能会出现比事件冒泡更快的情况，但如果都使用 <code>macrotasks</code>又可能会出现渲染的性能问题。</p><p><code>2.4</code>的<code>$nexttick</code>是采用<code>微任务</code>，兼容降级<code>宏任务</code>，但是由于微任务的优先级太高了，执行的比较快，会导致一个问题：在连续事件发生的期间（比如<code>冒泡事件</code>），<code>微任务</code>就已经执行了，所以会导致事件不断的被触发；但是如果全部都改成 <code>macroTask</code>，对一些有重绘和动画的场景也会有性能的影响。</p><h4 id="_2-5-版本的-nexttick" tabindex="-1">2.5 版本的 NextTick <a class="header-anchor" href="#_2-5-版本的-nexttick" aria-label="Permalink to &quot;2.5 版本的 NextTick&quot;">​</a></h4><p><code>2.5</code>的<code>$nexttick</code>一样是采用<code>微任务</code>，兼容降级<code>宏任务</code>，然后暴露出了一个<code>withMacroTask</code>方法：用于处理一些 <code>DOM</code> 交互事件，如 <code>v-on</code> 绑定的事件回调函数的处理，会强制走 <code>macrotask</code>。</p><p><strong>但是这样又引出了一些其余问题，在</strong><code>vue2.6</code><strong>里的注释是说：</strong></p><ul><li>在重绘之前状态发生改变会有轻微的问题；也就是<code>css</code>定义<code>@\`\`media</code>查询，<code>window</code>监听了<code>resize</code>事件，触发事件是需要的是<code>state</code>变化，样式也要变化，但是是宏任务，就产生了问题。</li><li>而且使用<code>macrotasks</code>在任务队列中会有几个特别奇怪的行为没办法避免。有些时候由于使用 <code>macroTask</code> 处理 <code>DOM</code> 操作，会使得有些时候触发和执行之间间隔太大</li></ul><h4 id="_2-6-版本的-nexttick" tabindex="-1">2.6 版本的 NextTick <a class="header-anchor" href="#_2-6-版本的-nexttick" aria-label="Permalink to &quot;2.6 版本的 NextTick&quot;">​</a></h4><p><code>2.6</code>的<code>&amp;nexttick</code>由于以上问题，又回到了在任何地方优先使用<code>microtasks</code>的方案。</p><h3 id="源码解读" tabindex="-1">源码解读 <a class="header-anchor" href="#源码解读" aria-label="Permalink to &quot;源码解读&quot;">​</a></h3><p>组件更新函数入队：</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L1547-L1548" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L1547-L1548</a></p><p>入队函数：</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/scheduler.ts%23L84-L85" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/scheduler.ts%23L84-L85</a></p><p>nextTick 定义：</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/scheduler.ts%23L58-L59" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/scheduler.ts%23L58-L59</a></p><p>测试案例，test-v3.html</p><h2 id="谈谈你对-nexttick-的理解" tabindex="-1">谈谈你对 nextTick 的理解 <a class="header-anchor" href="#谈谈你对-nexttick-的理解" aria-label="Permalink to &quot;谈谈你对 nextTick 的理解&quot;">​</a></h2><p>Vue 中视图更新是异步的，使用 nextTick 方法可以保证用户定义的逻辑在更新之后执行的，可以拿到渲染后的 dom 元素</p><p>多次调用 nextTick 的话，会被合并执行。</p><h2 id="vue-中的-nexttick-有什么作用" tabindex="-1">Vue 中的 <code>$nextTick</code> 有什么作用 <a class="header-anchor" href="#vue-中的-nexttick-有什么作用" aria-label="Permalink to &quot;Vue 中的 \`$nextTick\` 有什么作用&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> callbacks</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> pending</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 完成两件事：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   1、用 try catch 包装 flushSchedulerQueue 函数，然后将其放入 callbacks 数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   2、如果 pending 为 false，表示现在浏览器的任务队列中没有 flushCallbacks 函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     如果 pending 为 true，则表示浏览器的任务队列中已经被放入了 flushCallbacks 函数，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     待执行 flushCallbacks 函数时，pending 会被再次置为 false，表示下一个 flushCallbacks 函数可以进入</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     浏览器的任务队列了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * pending 的作用：保证在同一时刻，浏览器的任务队列中只有一个 flushCallbacks 函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {*}</span><span style="color:#E06C75;font-style:italic;"> cb</span><span style="color:#7F848E;font-style:italic;"> 接收一个回调函数 =&gt; flushSchedulerQueue</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {*}</span><span style="color:#E06C75;font-style:italic;"> ctx</span><span style="color:#7F848E;font-style:italic;"> 上下文</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@returns</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> nextTick</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">cb</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> _resolve</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 用 callbacks 数组存储经过包装的 cb 函数</span></span>
<span class="line"><span style="color:#E5C07B;">	callbacks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 用 try catch 包装回调函数，便于错误捕获</span></span>
<span class="line"><span style="color:#C678DD;">			try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				cb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">				handleError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;nextTick&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_resolve</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			_resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">pending</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		pending</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 执行 timerFunc，在浏览器的任务队列中（首选微任务队列）放入 flushCallbacks 函数</span></span>
<span class="line"><span style="color:#61AFEF;">		timerFunc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// $flow-disable-line</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">cb</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E5C07B;"> Promise</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			_resolve</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> resolve</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>官方对其的定义</p><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p><p>什么意思呢？</p><p>我们可以理解成，Vue 在更新 DOM 时是异步执行的。当数据发生变化，Vue 将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新</p><p>Vue 的异步更新机制的核心是利用了浏览器的异步任务队列来实现的，首选微任务队列，宏任务队列次之。</p><ul><li>当响应式数据更新后，会调用 dep.notify 方法，通知 dep 中收集的 watcher 去执行 update 方法，watcher.update 将 watcher 自己放入一个 watcher 队列（全局的 queue 数组）。</li><li>然后通过 nextTick 方法将一个刷新 watcher 队列的方法（flushSchedulerQueue）放入一个全局的 callbacks 数组中。</li><li>如果此时浏览器的异步任务队列中没有一个叫 flushCallbacks 的函数，则执行 timerFunc 函数，将 flushCallbacks 函数放入异步任务队列。如果异步任务队列中已经存在 flushCallbacks 函数，等待其执行完成以后再放入下一个 flushCallbacks 函数。</li><li>flushCallbacks 函数负责执行 callbacks 数组中的所有 flushSchedulerQueue 函数。</li><li>flushSchedulerQueue 函数负责刷新 watcher 队列，即执行 queue 数组中每一个 watcher 的 run 方法，从而进入更新阶段，比如执行组件更新函数或者执行用户 watch 的回调函数。</li></ul><h2 id="说一下-vue-转场动画如何实现的" tabindex="-1">说一下 vue 转场动画如何实现的 <a class="header-anchor" href="#说一下-vue-转场动画如何实现的" aria-label="Permalink to &quot;说一下 vue 转场动画如何实现的&quot;">​</a></h2><p>答：vue 转场动画主要通过 vue 中的提供的 transition 组件实现的，例如；</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">transition</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;名称&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;router-view&gt;&lt;/router-view&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中 name 为转场的名称，自己定义，可通过定义进入和离开两种转场动画，格式为：</p><ul><li><code>.名称-enter {}</code>：将要进入动画</li><li><code>.名称-enter-active {}</code>：定义进入的过程动画</li><li><code>.名称-leave {}</code>：将要离开的动画</li><li><code>.名称-leave-active {}</code>：定义离开过程中的动画</li></ul><h1 id="_4-1-vue-ssr服务端渲染-和-nuxt-js" tabindex="-1">4.1 Vue SSR服务端渲染 和 Nuxt.js <a class="header-anchor" href="#_4-1-vue-ssr服务端渲染-和-nuxt-js" aria-label="Permalink to &quot;4.1 Vue SSR服务端渲染 和 Nuxt.js&quot;">​</a></h1><h2 id="如何使用-vue-的服务端渲染-ssr" tabindex="-1">如何使用 vue 的服务端渲染(SSR) <a class="header-anchor" href="#如何使用-vue-的服务端渲染-ssr" aria-label="Permalink to &quot;如何使用 vue 的服务端渲染(SSR)&quot;">​</a></h2><p>Vue 的服务端渲染（SSR）是一种技术，它允许 Vue 组件在服务器上渲染成 HTML 字符串，然后发送到浏览器，最终在浏览器端激活成为可交互的应用。这种方法可以提高首屏加载速度，改善 SEO，并且对于内容到达时间与转化率直接相关的应用来说至关重要。下面是使用 Vue 进行服务端渲染的基本步骤：</p><ol><li><p><strong>创建 Vue 实例</strong>： 首先，你需要在服务器上创建一个 Vue 实例。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createSSRApp</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createSSRApp</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ... 应用的根组件</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>创建渲染器</strong>： 使用 <code>vue/server-renderer</code> 提供的 <code>renderToString</code> 函数来创建一个渲染器。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">renderToString</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vue/server-renderer&#39;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>渲染为 HTML 字符串</strong>： 将 Vue 实例渲染为 HTML 字符串。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">renderToString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">html</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 处理渲染后的 HTML ...</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>服务器设置</strong>： 设置服务器以处理请求并返回渲染后的 HTML。 例如，使用 Express.js：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> express</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;express&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> server</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">server</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;*&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 创建 Vue 实例并渲染为 HTML</span></span>
<span class="line"><span style="color:#61AFEF;">  renderToString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">html</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">html</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/body&gt;&lt;/html&gt;\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">server</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p><strong>客户端激活</strong>： 在客户端，Vue 会“激活”这些静态标记，使其变为可交互的应用。</p></li></ol><p>请注意，服务端渲染涉及到一些开发限制和更多的构建配置要求。例如，某些浏览器特定的代码只能在特定的生命周期钩子中使用，一些外部库可能需要特殊处理才能在服务端渲染的应用中运行。此外，服务端渲染的应用需要一个 Node.js 服务器运行环境，这与完全静态的 SPA 不同，后者可以部署在任意的静态文件服务器上。</p><p>以上是 Vue SSR 的基本概念和步骤。如果你需要更详细的指导和示例，可以参考 Vue.js 官方文档中的<a href="https://cn.vuejs.org/guide/scaling-up/ssr.html" target="_blank" rel="noreferrer">服务端渲染 (SSR) 指南</a>。这将为你提供更深入的信息和更复杂的配置选项。</p><h2 id="说一下-vue-ssr-的实现原理" tabindex="-1">说一下 Vue SSR 的实现原理 <a class="header-anchor" href="#说一下-vue-ssr-的实现原理" aria-label="Permalink to &quot;说一下 Vue SSR 的实现原理&quot;">​</a></h2><p>SSR 也就是服务端渲染，<code>也就是将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端</code>。</p><p>SSR 有着更好的 SEO、并且首屏加载速度更快等优点。不过它也有一些缺点，比如我们的开发条件会受到限制，服务器端渲染只支持<code>beforeCreate</code>和<code>created</code>两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。还有就是服务器会有更大的负载需求。</p><ul><li>app.js 作为客户端与服务端的公用入口，导出 Vue 根实例，供客户端 entry 与服务端 entry 使用。客户端 entry 主要作用挂载到 DOM 上，服务端 entry 除了创建和返回实例，还需要进行路由匹配与数据预获取。</li><li>webpack 为客服端打包一个 ClientBundle，为服务端打包一个 ServerBundle。</li><li>服务器接收请求时，会根据 url，加载相应组件，获取和解析异步数据，创建一个读取 Server Bundle 的 BundleRenderer，然后生成 html 发送给客户端。</li><li>客户端混合，客户端收到从服务端传来的 DOM 与自己的生成的 DOM 进行对比，把不相同的 DOM 激活，使其可以能够响应后续变化，这个过程称为客户端激活（也就是转换为单页应用）。为确保混合成功，客户 端与服务器端需要共享同一套数据。在服务端，可以在渲染之前获取数据，填充到 store 里，这样，在客户端挂载到 DOM 之前，可以直接从 store 里取数据。首屏的动态数据通过 window.INITIAL_STATE_ 发送到客户端</li><li>VueSSR 的原理，主要就是通过 vue-server-renderer 把 Vue 的组件输出成一个完整 HTML，输出到客户端，到达客户端后重新展开为一个单页应用。</li></ul><h2 id="关于-vue-ssr-的理解" tabindex="-1">关于 Vue SSR 的理解？ <a class="header-anchor" href="#关于-vue-ssr-的理解" aria-label="Permalink to &quot;关于 Vue SSR 的理解？&quot;">​</a></h2><p><code>SSR</code>即<code>服务端渲染（Server Side Render）</code>，就是将 Vue 在客户端把标签渲染成 html 的工作放在服务端完成，然后再把 html 直接返回给客户端。</p><h3 id="优点-4" tabindex="-1">优点： <a class="header-anchor" href="#优点-4" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><p>有着更好的 SEO，并且首屏加载速度更快。</p><h3 id="缺点-2" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><p>开发条件会受限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。服务器会有更大的负载需求。</p><h2 id="在-vue-项目中你是如何做的-ssr-渲染" tabindex="-1">在 Vue 项目中你是如何做的 SSR 渲染 <a class="header-anchor" href="#在-vue-项目中你是如何做的-ssr-渲染" aria-label="Permalink to &quot;在 Vue 项目中你是如何做的 SSR 渲染&quot;">​</a></h2><p>与传统 SPA (单页应用程序 (Single-Page Application)) 相比，服务器端渲染 (SSR) 的优势主要在于：</p><ul><li>更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。</li><li>更快的内容到达时间 (time-to-content)，特别是对于缓慢的网络情况或运行缓慢的设备。</li></ul><p>Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记&quot;激活&quot;为客户端上完全可交互的应用程序</p><p>服务器渲染的 Vue.js 应用程序也可以被认为是&quot;同构&quot;或&quot;通用&quot;，因为应用程序的大部分代码都可以在服务器和客户端上运行</p><ul><li>Vue SSR 是一个在 SPA 上进行改良的服务端渲染</li><li>通过 Vue SSR 渲染的页面，需要在客户端激活才能实现交互</li><li>Vue SSR 将包含两部分：服务端渲染的首屏，包含交互的 SPA</li></ul><p>使用 ssr 不存在单例模式，每次用户请求都会创建一个新的 vue 实例 实现 ssr 需要实现服务端首屏渲染和客户端激活 服务端异步获取数据 asyncData 可以分为首屏异步获取和切换组件获取 首屏异步获取数据，在服务端预渲染的时候就应该已经完成 切换组件通过 mixin 混入，在 beforeMount 钩子完成数据获取</p><h2 id="实现-vue-ssr" tabindex="-1">实现 Vue SSR <a class="header-anchor" href="#实现-vue-ssr" aria-label="Permalink to &quot;实现 Vue SSR&quot;">​</a></h2><h3 id="其基本实现原理" tabindex="-1">其基本实现原理 <a class="header-anchor" href="#其基本实现原理" aria-label="Permalink to &quot;其基本实现原理&quot;">​</a></h3><ul><li>app.js 作为客户端与服务端的公用入口，导出 Vue 根实例，供客户端 entry 与服务端 entry 使用。客户端 entry 主要作用挂载到 DOM 上，服务端 entry 除了创建和返回实例，还进行路由匹配与数据预获取。</li><li>webpack 为客服端打包一个 Client Bundle ，为服务端打包一个 Server Bundle 。</li><li>服务器接收请求时，会根据 url ，加载相应组件，获取和解析异步数据，创建一个读取 Server Bundle 的 BundleRenderer ，然后生成 html 发送给客户端。</li><li>客户端混合，客户端收到从服务端传来的 DOM 与自己的生成的 DOM 进行对比，把不相同的 DOM 激活，使其可以能够响应后续变化，这个过程称为客户端激活 。为确保混合成功，客户端与服务器端需要共享同一套数据。在服务端，可以在渲染之前获取数据，填充到 stroe 里，这样，在客户端挂载到 DOM 之前，可以直接从 store 里取数据。首屏的动态数据通过 window.<strong>INITIAL_STATE</strong> 发送到客户端 <ul><li>Vue SSR 的实现，主要就是把 Vue 的组件输出成一个完整 HTML , vue-server-renderer 就是⼲这事的</li></ul></li><li>Vue SSR 需要做的事多点（输出完整 HTML），除了 complier -&gt; vnode ，还需如数据获取填充⾄ HTML 、客户端混合（ hydration ）、缓存等等。 相比于其他模板引擎（ ejs , jade 等），最终要实现的目的是一样的，性能上可能要差点</li></ul><h1 id="五、vue-router" tabindex="-1">五、Vue Router <a class="header-anchor" href="#五、vue-router" aria-label="Permalink to &quot;五、Vue Router&quot;">​</a></h1><p><strong>Vue Router 开源地址</strong>：<a href="https://github.com/vuejs/router" target="_blank" rel="noreferrer">https://github.com/vuejs/router</a></p><p><strong>Vue Router 官网</strong>：<a href="https://router.vuejs.org/zh/introduction.html" target="_blank" rel="noreferrer">介绍 | Vue Router (vuejs.org)</a></p><h2 id="vue-router-知识路径" tabindex="-1">Vue Router 知识路径 <a class="header-anchor" href="#vue-router-知识路径" aria-label="Permalink to &quot;Vue Router 知识路径&quot;">​</a></h2><p>Vue Router 是 Vue.js 的官方路由管理器，用于构建单页面应用（SPA）。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。以下是 Vue Router 的核心特点和功能：</p><ol><li><strong>声明式路由映射</strong>：Vue Router 允许你通过简单的配置来定义路由和组件之间的关系。这样，当用户访问一个特定的 URL 时，可以轻松地展示对应的组件。</li><li><strong>嵌套路由</strong>：对于需要多层布局的应用，Vue Router 提供了嵌套路由的功能。这意味着在一个主视图内，你可以有多个子视图。</li><li><strong>模块化、组件化的路由配置</strong>：路由配置是模块化和组件化的，这使得管理大型应用中的路由变得更加容易。</li><li><strong>细粒度导航控制</strong>：Vue Router 提供了一系列的导航钩子函数，如 <code>beforeEach</code> 和 <code>afterEach</code>，这些函数可以在路由改变前后执行，允许你进行更细粒度的导航控制。</li><li><strong>链接活动类</strong>：当用户导航到一个路由时，Vue Router 可以自动为对应的链接元素添加 “active” CSS 类，这样可以方便地高亮当前活动的路由链接。</li><li><strong>历史模式和哈希模式</strong>：Vue Router 支持两种模式来管理浏览器的历史记录。其中，HTML5 历史模式使用 pushState API 来管理浏览器历史，而哈希模式则使用 URL 的哈希部分。</li></ol><h2 id="vue-router-的使用" tabindex="-1">Vue Router 的使用 <a class="header-anchor" href="#vue-router-的使用" aria-label="Permalink to &quot;Vue Router 的使用&quot;">​</a></h2><p><code>SPA单页面应用</code>其中特点之一就是<code>更改HTML显示内容</code>，来模拟页面跳转。而<code>vue-router</code>可以帮助我们做到这一点。</p><h3 id="_1-路由模式" tabindex="-1">（1）路由模式 <a class="header-anchor" href="#_1-路由模式" aria-label="Permalink to &quot;（1）路由模式&quot;">​</a></h3><p><code>vue-router</code>提供了三种路由模式，分别是<code>Hash模式</code>、<code>History模式</code>以及在 Vue-Router4.x 新增的<code>Memory模式</code>（一般不会用于浏览器环境），开发者可以通过设置<code>mode（vue-router4.x之后为history）</code>属性，去选择不同的路由模式。</p><h3 id="_2-hash-模式实现原理" tabindex="-1">（2）Hash 模式实现原理 <a class="header-anchor" href="#_2-hash-模式实现原理" aria-label="Permalink to &quot;（2）Hash 模式实现原理&quot;">​</a></h3><p><code>Hash模式</code>下，URL 的样子是这样的<code>https://xxx.com#123</code>。</p><p><code>Hash模式</code>是 vue-router 的默认使用方式。这种方式是利用了<code>URL的hash</code>，<code>URL的hash</code>就是<code>#</code>，也可以称之为<code>锚点</code>，只改变 URL 中<code>#</code>之后的部分其实是相当于更改了<code>网页的位置</code>，也相当于更改了<code>window.location.hash</code>的属性值，但是网页地址还是没有改变，因此<code>不会进行刷新网页</code>，在进行请求接口时，也只会向<code>#</code>之前的地址进行请求，并不会带上<code>#</code>之后的内容，因此不会对服务端产生影响。</p><p>每次改变<code>#之后</code>的内容时，都会在浏览器的<code>历史记录</code>中增加一个记录，使用浏览器的<code>后退/前进</code>功能可以回到上一次或下一次的页面位置，而根据<code>#之后的值</code>，我们就可以<code>渲染不同的页面</code>，从而达到<code>模拟页面跳转</code>的操作，而且可以通过<code>hashchange</code>监听 URL-hash 的变化。</p><h3 id="_3-history-模式实现原理" tabindex="-1">（3）History 模式实现原理 <a class="header-anchor" href="#_3-history-模式实现原理" aria-label="Permalink to &quot;（3）History 模式实现原理&quot;">​</a></h3><p><code>Hash模式</code>下，URL 会出现一个<code>#</code>符号，影响美观，而<code>History模式</code>不会有这个符号，因此当我们不想要这个符号时，可以设置为<code>History模式</code>。</p><p><code>History模式</code>是利用了<code>HTML5中新增的history API</code>来进行 URL 管理，主要利用<code>pushState()</code>和<code>replaceState()</code>来改变 URL，使用这两种方法，可以给浏览器的历史记录添加一条新纪录或者替换记录，但是这两种方法改变 URL 时，<code>不会立即</code>向服务器发送请求，只有在执行<code>history.back()</code>、<code>history.forward()</code>、<code>history.go()</code>的时候才会向服务器发送请求，可以通过监听<code>popstate事件</code>，来监听浏览器的<code>前进回退操作</code>，然后进行<code>路由的匹配</code>。</p><p><code>History模式</code>需要服务端的支持，因为它在进行浏览器<code>前进/回退操作</code>时会发送请求，如果这时没有匹配到资源，就会出现<code>404</code>，因此需要服务端对这种场景做处理。</p><h3 id="_4-vue-router-的使用和配置" tabindex="-1">（4）vue-router 的使用和配置 <a class="header-anchor" href="#_4-vue-router-的使用和配置" aria-label="Permalink to &quot;（4）vue-router 的使用和配置&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// router文件夹下index.js文件</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	createRouter</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	createWebHistory</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	createWebHashHistory</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue-router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入组件</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HomePage</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;@/components/home-page.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> SecondPage</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;@/components/second-page.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义路由,将路由路径和组件进行映射</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> routes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">HomePage</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/second&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 可以设置路由的name属性</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;second&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">SecondPage</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建路由</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置history模式路由</span></span>
<span class="line"><span style="color:#E06C75;">	history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置hash模式路由</span></span>
<span class="line"><span style="color:#E06C75;">	history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导出路由实例</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> router</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Vue项目入口main.js文件</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createApp</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./App.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> router</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;@/router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h3 id="_5-路由跳转方法" tabindex="-1">（5）路由跳转方法 <a class="header-anchor" href="#_5-路由跳转方法" aria-label="Permalink to &quot;（5）路由跳转方法&quot;">​</a></h3><p><code>vue-router</code>提供了<code>router-link</code>标签来实现路由的跳转，相当于一个<code>a标签</code>，但是可以使用<code>vue-router</code>提供的一些方法；</p><p><code>vue-router</code>还提供了<code>push</code>、<code>replace</code>、<code>go</code>、<code>forward</code>、<code>back</code>等常用方法进行<code>编程式导航</code>。</p><ul><li><code>push</code>：用于跳转下一个页面，会在历史记录添加一条新纪录；</li><li><code>replace</code>：和 push 相同，只是会将当前历史记录替换掉；</li><li><code>go</code>：可以传入一个数字，如果是负数则代表后退几条历史记录，如果是正数则代表前进；</li><li><code>forward</code>：相当于 go(1)；</li><li><code>back</code>：相当于 go(-1)；</li></ul><p>此外，在 Vue2 中，可以通过<code>this.$router</code>去执行相应的方法，而在 Vue3 中，则需要先引入<code>useRouter</code>组合式 API，然后调用该方法得到一个 router 对象，才能够执行相应的方法。</p><h3 id="_6-路由的传参" tabindex="-1">（6）路由的传参 <a class="header-anchor" href="#_6-路由的传参" aria-label="Permalink to &quot;（6）路由的传参&quot;">​</a></h3><p>路由的传参方式一共有两种，一种是<code>query</code>，另一种是<code>params</code>。</p><ul><li><code>query</code>参数会在 URL 显式存在，<code>params</code>一般不会出现在 URL 上（动态路由除外）；</li><li><code>query</code>传参可以和<code>path</code>属性一起使用，<code>params</code>不能和<code>path</code>属性一起使用，只能和<code>name</code>属性一起使用；</li><li><code>params</code>传参在刷新页面时会<code>参数丢失</code>（动态路由不会），而<code>query</code>传参不会有这种情况。</li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// 第一个页面通过query方式传参</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useRouter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue-router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRouter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> jumpPage</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/second&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		query</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">// 跳转后的URL为 http://localhost:8080/second?a=1&amp;b=2 </span></span>
<span class="line"><span style="color:#ABB2BF;">// 第一个页面通过params方式传参</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useRouter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue-router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRouter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> jumpPage</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 报警告：[Vue Router warn]: Path &quot;/second&quot; was passed with params but they will be ignored. Use a named route alongside params instead.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// router.push({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//   path: &#39;/second&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//   params: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//     a: 1,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//     b: 2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// })</span></span>
<span class="line"><span style="color:#E5C07B;">	router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;second&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		params</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">// 跳转后的URL为 http://localhost:8080/second</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>如何获取传递的参数呢？</p><p>Vue2 中可以通过<code>this.$route.query/this.$route.params</code>来获取，而 Vue3 中可以通过引入<code>useRoute</code>，然后调用该函数，得到 route 对象，访问<code>route.params/route.query</code>。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// in second-page.vue</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useRoute</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue-router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> route</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRoute</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(route.query)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [Vue Router warn]: Discarded invalid param(s) &quot;a&quot;, &quot;b&quot; when navigating.</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>在 vue-router<code>4.14版本之前</code>，是可以访问到<code>params传参内容的</code>，但是这种传参方式一直是<code>不被提倡的</code>，因为刷新页面会使参数丢失。虽然这种情况可以通过<code>vuex或pinia等工具进行缓存</code>，在刷新页面时重新赋值，但是这种操作也会带来一定的风险。于是在 4.14 版本之后，如果<code>没有使用动态路由</code>，直接使用 params 传参，参数是不会被下个页面接收的。</p></blockquote><h3 id="_7-动态路由" tabindex="-1">（7）动态路由 <a class="header-anchor" href="#_7-动态路由" aria-label="Permalink to &quot;（7）动态路由&quot;">​</a></h3><p><code>动态路由</code>就是路由的 URL 并不固定，是根据传入的参数动态决定的，动态路由的参数<code>必须通过params</code>传递，并且可以在<code>params中接收</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> routes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">HomePage</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 此时second就是一个动态路由，它可以接收两个参数a、b</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/second/:a/:b&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;second&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">SecondPage</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>此时进行 params 传参：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- home-page.vue --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useRouter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue-router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRouter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> jumpPage</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;second&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		params</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- second-page --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useRoute</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue-router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> route</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRoute</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// {a: &#39;1&#39;, b: &#39;2&#39;}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>此时 params 的参数就可以被<code>正常接收了</code>，也就是说在 vue-router<code>4.14版本之后</code>，如果我们想要通过 params 的方式给下个页面传递参数，那么必须使用<code>动态路由</code>，也就是说必须先将要传递的参数定义在路由中。</p><h3 id="_8-路由中的-props" tabindex="-1">（8）路由中的 props <a class="header-anchor" href="#_8-路由中的-props" aria-label="Permalink to &quot;（8）路由中的 props&quot;">​</a></h3><p>每个路由对象中可以设置<code>props</code>属性，默认为 false，设置为 true 表示通过<code>params传参的参数会作为组件的props传入</code>。</p><p>但是这种通过路由传递过来的参数，类型都会变成<code>string</code>，因此在使用时要注意。</p><p>此外<code>props属性</code>还可以被设置成<code>函数</code>或者<code>其它一些特殊场景的处理</code>，可以看：<a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%B0%86-props-%E4%BC%A0%E9%80%92%E7%BB%99%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6" target="_blank" rel="noreferrer">将 props 传递给路由组件 | Vue Router (vuejs.org)</a></p><h3 id="_9-router和-route-的区别" tabindex="-1">（9）$router和$route 的区别 <a class="header-anchor" href="#_9-router和-route-的区别" aria-label="Permalink to &quot;（9）$router和$route 的区别&quot;">​</a></h3><p><code>$router</code>在 Vue3 中以<code>useRouter</code>的方式使用，<code>$route</code>在 Vue3 中以<code>useRoute</code>的方式使用。</p><p>这是<code>$router</code>包含的内容：</p><p><img src="`+D+'" alt="image-20240326164359558"></p><p>这是<code>$route</code>包含的内容：</p><p><img src="'+g+`" alt="image-20240326164427281"></p><p>从中可以看到，<code>$router</code>中包含了路由的一些公共方法，比如<code>跳转</code>、<code>路由拦截</code>等，而<code>$route</code>则包含了一些<code>当前路由的属性</code>，比如<code>params</code>、<code>query</code>、<code>hash</code>等。</p><ul><li>我们可以把<code>$router</code>视为<code>全局的路由对象</code>，操作路由一些方法时，使用<code>$router</code>；</li><li>我们可以把<code>$route</code>视为<code>当前活跃的路由对象</code>，当访问当前路由信息的时候，使用<code>$route</code>；</li></ul><h3 id="_10-一个页面使用多个路由" tabindex="-1">（10）一个页面使用多个路由 <a class="header-anchor" href="#_10-一个页面使用多个路由" aria-label="Permalink to &quot;（10）一个页面使用多个路由&quot;">​</a></h3><p>可以使用多个<code>router-view</code>，设置<code>不同的name</code>，然后在路由中配置不同 name 映射的组件。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- App.vue主文件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;router-wrap&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;left&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;router-item&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;router-item&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;right&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;router-item&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#D19A66;"> scoped</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#D19A66;">.router-wrap</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	display: </span><span style="color:#D19A66;">flex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.router-item</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	width: </span><span style="color:#56B6C2;">calc</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">vw</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	height: </span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">vh</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 路由文件 </span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createRouter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createWebHistory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vue-router&#39;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入组件 </span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HomePage</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@/components/home-page.vue&#39;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> SecondPage</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@/components/second-page.vue&#39;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> LastPage</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@/components/last-page.vue&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义路由,将路由路径和组件进行映射 </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> routes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [ </span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span></span>
<span class="line"><span style="color:#E06C75;">        path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#E06C75;">      	components</span><span style="color:#ABB2BF;">: { </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置不同name对应的组件 </span></span>
<span class="line"><span style="color:#E06C75;">            left</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">HomePage</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#E06C75;">            default</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">SecondPage</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">right</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">LastPage</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span></span>
<span class="line"><span style="color:#ABB2BF;">] </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建路由 </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createRouter</span><span style="color:#ABB2BF;">({ </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置history模式路由 </span></span>
<span class="line"><span style="color:#E06C75;">    history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">}) </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导出路由实例</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> router</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><h3 id="_11-设置-404-页面" tabindex="-1">（11）设置 404 页面 <a class="header-anchor" href="#_11-设置-404-页面" aria-label="Permalink to &quot;（11）设置 404 页面&quot;">​</a></h3><p>在<code>Vue2</code>中，vue-router 为我们提供了一个<code>*通配符</code>，可以匹配到那些<code>未定义的路由</code>，从而可以让我们对这种场景进行一些处理，在<code>Vue3</code>中，删掉了<code>*通配符</code>，具体使用方法可以看：<a href="https://router.vuejs.org/zh/guide/migration/#%E5%88%A0%E9%99%A4%E4%BA%86-%E6%98%9F%E6%A0%87%E6%88%96%E9%80%9A%E9%85%8D%E7%AC%A6-%E8%B7%AF%E7%94%B1" target="_blank" rel="noreferrer">从 Vue2 迁移 | Vue Router (vuejs.org)</a>。</p><h3 id="_12-路由的懒加载" tabindex="-1">（12）路由的懒加载 <a class="header-anchor" href="#_12-路由的懒加载" aria-label="Permalink to &quot;（12）路由的懒加载&quot;">​</a></h3><p><code>路由懒加载</code>就是将路由组件的<code>静态导入</code>变为<code>动态导入</code>，从而实现只有在<code>第一次进入页面时</code>，才会进行加载，后续将使用缓存。</p><p>就拿我们上面定义的路由文件来说，它们可以通过懒加载改造成这样：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createRouter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createWebHistory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue-router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> HomePage</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@/components/home-page.vue&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> routes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">HomePage</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/second&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;second&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		component</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@/components/second-page.vue&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> router</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><code>component/components</code>接收一个<code>返回Promise组件</code>的函数，这样就实现了<code>路由的懒加载</code>，在我们使用<code>脚手架</code>进行开发时，借助<code>webpack</code>之类的打包工具，可以将代码打包时进行<code>分包</code>。</p><p>比如在 webpack 中，我们可以通过<code>魔法注释</code>和<code>分包配置</code>，将路由组件打包到不同的包里去：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createRouter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createWebHistory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue-router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> HomePage</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">	import</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/* webpackChunkName: &quot;group-a&quot; */</span><span style="color:#98C379;"> &quot;@/components/home-page.vue&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> routes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">HomePage</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/second&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;second&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		component</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">			import</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/* webpackChunkName: &quot;group-b&quot; */</span><span style="color:#98C379;"> &quot;@/components/second-page.vue&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> router</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_13-路由的导航守卫" tabindex="-1">（13）路由的导航守卫 <a class="header-anchor" href="#_13-路由的导航守卫" aria-label="Permalink to &quot;（13）路由的导航守卫&quot;">​</a></h3><p>路由的<code>导航守卫</code>可以分为<code>全局前置守卫</code>、<code>全局解析守卫</code>、<code>全局后置钩子</code>、<code>路由独享守卫</code>、<code>组件内的守卫</code>等几大类。</p><h4 id="全局前置守卫" tabindex="-1">全局前置守卫 <a class="header-anchor" href="#全局前置守卫" aria-label="Permalink to &quot;全局前置守卫&quot;">​</a></h4><p><code>全局前置守卫</code>就是<code>router.beforeEach</code>，从名字来看，它的含义代表在进入路由<code>之前</code>。它一共有三个参数<code>to</code>、<code>from</code>、<code>next（可选）</code>。</p><ul><li>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是<code>异步解析执行</code>，此时导航在所有守卫<code> resolve 完之前</code>一直处于<code>等待中</code>，也就是说等待我们的全局前置守卫执行完毕才会进入导航；</li><li>第一个参数<code>to</code>代表要导航去哪个路由；</li><li>第二个参数<code>from</code>代表从哪里来，或者说准备要离开的路由；</li><li>返回值可以是<code>false</code>，代表<code>取消导航</code>，回到 from 的位置；</li><li>返回值可以是一个<code>路由地址</code>，比如<code>return({name: second})</code>，那么将会中断当前导航，相当于重新创建一个<code>to为{name:second}</code>的导航；</li><li>返回值如果是<code>undefined或者true</code>，说明导航是有效的，直接调用下一个导航守卫；</li><li>第三个参数<code>next()</code>，它可以<code>直接调用</code>，也可以<code>传入一个路由地址</code>，直接调用相当于直接调用下一个导航守卫，这个参数已经被<code>移除</code>，但是目前还支持使用，最好还是不要使用，以防哪天官方移除该属性，如果使用，请保证<code>在同一逻辑处理下，该函数只被调用了一次</code>。</li></ul><h4 id="全局解析守卫" tabindex="-1">全局解析守卫 <a class="header-anchor" href="#全局解析守卫" aria-label="Permalink to &quot;全局解析守卫&quot;">​</a></h4><p><code>全局解析守卫</code>就是<code>router.beforeResolve</code>，和<code>router.beforeEach</code>类似，每次进入导航之前都会调用，但是它会在<code>导航被确认之前</code>、<code>所有组件内守卫和异步路由守卫被解析之后</code>再进行调用。</p><h4 id="全局后置钩子" tabindex="-1">全局后置钩子 <a class="header-anchor" href="#全局后置钩子" aria-label="Permalink to &quot;全局后置钩子&quot;">​</a></h4><p><code>全局后置钩子</code>就是<code>afterEach</code>，它在导航完成之后调用，因此它不需要调用<code>next</code>，也不会改变导航本身，一般的作用就是<code>分析、更改页面标题</code>。</p><h4 id="路由独享守卫" tabindex="-1">路由独享守卫 <a class="header-anchor" href="#路由独享守卫" aria-label="Permalink to &quot;路由独享守卫&quot;">​</a></h4><p><code>路由独享守卫</code>就是<code>beforeEnter</code>，它是定义在<code>路由文件中</code>的，只会在从<code>不同路由进入</code>时触发，如果只是<code>params、query、hash的改变</code>，不会触发该守卫，比如<code>/user/1</code>到<code>/user/2</code>并不会触发，因为这只是相当于<code>params的改变</code>，只有从<code>/home到/user/2</code>的时候才会被触发。</p><p><code>路由独享守卫</code>可以接收<code>多个函数</code>，可以将一个<code>函数数组</code>传递给该属性，触发守卫时数组中所有函数都会被触发。</p><h4 id="组件内的守卫" tabindex="-1">组件内的守卫 <a class="header-anchor" href="#组件内的守卫" aria-label="Permalink to &quot;组件内的守卫&quot;">​</a></h4><p><code>组件内的守卫</code>一共有三种，分别为<code>beforeRouteEnter</code>、<code>beforeRouteUpdate</code>、<code>beforeRouteLeave</code>，用法类似于组件的<code>生命周期</code>，只是在这些守卫里<code>访问不到组件实例</code>，因为守卫发生在<code>导航确认之前</code>。但是可以在它的 next 中传入一个<code>回调函数</code>，回调函数接收<code>组件实例作为参数</code>，等到组件实例可以被访问时触发该回调，做一些相应的处理。</p><ul><li><code>beforeRouteEnter</code>不能访问组件实例，其它两个可以；</li><li><code>beforeRouteUpdate</code>会在组件实例复用时触发，比如<code>动态路由</code>，因为只是参数不同，但是会将路由复用。</li></ul><h4 id="完整的导航解析流程" tabindex="-1">完整的导航解析流程 <a class="header-anchor" href="#完整的导航解析流程" aria-label="Permalink to &quot;完整的导航解析流程&quot;">​</a></h4><ul><li>导航被触发；</li><li>在失活的组件里调用<code>beforeRouteLeave</code>守卫；</li><li>调用全局的<code>beforeEach</code>守卫；</li><li>在重用的组件里调用<code>beforeRouteUpdate</code>守卫；</li><li>在路由配置里调用<code>beforeEnter</code>守卫；</li><li>解析异步路由组件；</li><li>在被激活的组件里调用<code>beforeRouteEnter</code>守卫；</li><li>调用全局的<code>beforeResolve</code>守卫；</li><li>导航被确认；</li><li>调用全局<code>afterEach</code>钩子；</li><li>触发 dom 更新；</li><li>调用<code>beforeRouteEnter</code>守卫中 next 的<code>回调函数</code>，创建好的组件实例会作为回调函数的参数传入。</li></ul><h2 id="vue-router3-和-4-版本区别" tabindex="-1">Vue Router3 和 4 版本区别 <a class="header-anchor" href="#vue-router3-和-4-版本区别" aria-label="Permalink to &quot;Vue Router3 和 4 版本区别&quot;">​</a></h2><p>文档：<a href="https://router.vuejs.org/zh/guide/migration/" target="_blank" rel="noreferrer">从 Vue2 迁移 | Vue Router (vuejs.org)</a></p><p>Vue Router 3 和 Vue Router 4 之间有一些关键的区别，主要是因为 Vue Router 4 是专门为 Vue 3 设计的，而 Vue Router 3 是为 Vue 2 设计的。以下是一些主要的区别：</p><ol><li><strong>创建路由实例</strong>: <ul><li>Vue Router 4 使用<code>createRouter</code>方法来创建路由实例。</li><li>Vue Router 3 使用<code>new VueRouter()</code>来创建实例。</li></ul></li><li><strong>路由模式</strong>: <ul><li>Vue Router 4 引入了<code>createWebHistory</code>、<code>createWebHashHistory</code>和<code>createMemoryHistory</code>方法来创建不同的路由模式。</li><li>Vue Router 3 中，路由模式是通过传递<code>history</code>、<code>hash</code>或<code>abstract</code>来指定的。</li></ul></li><li><strong>动态路由和懒加载</strong>: <ul><li>Vue Router 4 支持动态路由和路由级别的代码分割，这意味着可以为每个路由生成一个单独的代码块（chunk），并在访问路由时懒加载。</li></ul></li><li><strong>Composition API</strong>: <ul><li>Vue Router 4 与 Vue 3 的 Composition API 兼容，允许开发者使用<code>setup</code>函数中的路由钩子。</li></ul></li><li><strong>类型支持</strong>: <ul><li>Vue Router 4 提供了更好的 TypeScript 支持。</li></ul></li></ol><p>这些变化使得 Vue Router 4 更加灵活和强大，特别是在使用 Vue 3 构建单页应用程序时。如果你正在使用 Vue 3，推荐使用 Vue Router 4 来充分利用其新特性和改进。</p><h1 id="_5-1-vue-router-面试题" tabindex="-1">5.1 Vue Router 面试题 <a class="header-anchor" href="#_5-1-vue-router-面试题" aria-label="Permalink to &quot;5.1 Vue Router 面试题&quot;">​</a></h1><h2 id="vue-router-路由模式-hash、history-和-abstract-和它们区别" tabindex="-1">Vue-router 路由模式 hash、history 和 abstract 和它们区别 <a class="header-anchor" href="#vue-router-路由模式-hash、history-和-abstract-和它们区别" aria-label="Permalink to &quot;Vue-router 路由模式 hash、history 和 abstract 和它们区别&quot;">​</a></h2><h3 id="hash-模式-默认" tabindex="-1">Hash 模式(默认) <a class="header-anchor" href="#hash-模式-默认" aria-label="Permalink to &quot;Hash 模式(默认)&quot;">​</a></h3><p>简介： hash 模式是开发中默认的模式，它的 URL 带着一个#，例如：<a href="http://www.abc.com/#/vue%EF%BC%8C%E5%AE%83%E7%9A%84" target="_blank" rel="noreferrer">http://www.abc.com/#/vue，它的</a> hash 值就是#/vue。</p><p>hash 是 URL 中的锚点，代表的是网页中的一个位置，单单改变#后的部分，浏览器只会加载相应位置的内容，不会重新加载页面。</p><ul><li>即#是用来指导浏览器动作的，对服务器端完全无用，HTTP 请求中，不包含#。</li><li>每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置。</li></ul><p>特点：hash 值会出现在 URL 里面，但是不会出现在 HTTP 请求中，对后端完全没有影响。所以改变 hash 值，不会重新加载页面。这种模式的浏览器支持度很好，低版本的 IE 浏览器也支持这种模式。hash 路由被称为是前端路由，已经成为 SPA（单页面应用）的标配。</p><ul><li>在浏览器中符号<code>#</code>以及<code>#</code>后面的字符称之为<code>hash</code>，用<code>window.location.hash</code>读取； 特点：<code>hash</code>虽然在<code>URL</code>中，但不被包括在<code>HTTP</code>请求中；用来指导浏览器动作，对服务端安全无用，<code>hash</code>不会重加载页面。</li><li>使用 URL 的 hash（<code>#</code>）来模拟一个完整的 URL，因此当 URL 改变时，页面不会重新加载。</li><li>Hash 模式的 URL 看起来像这样：<code>http://example.com/#/user/id</code>。</li><li>这种模式的优点是兼容性好，不需要服务器端配置。</li><li>缺点是 URL 中会有额外的<code>#</code>符号，可能不够美观。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createRouter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createWebHashHistory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue-router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHashHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 定义路由配置</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>原理：是通过<code>onhashchange()</code>事件监听<code>hash</code>值变化，在页面<code>hash</code>值发生变化后，<code>window</code>就可以监听到事件改变，并按照规则加载相应的代码。<code>hash</code>值变化对应的 URL 都会被记录下来，这样就能实现浏览器历史页面前进后退。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onhashchange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">oldURL</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">newURL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> hash</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> location</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用 onhashchange()事件的好处就是，在页面的 hash 值发生变化时，无需向后端发起请求，window 就可以监听事件的改变，并按规则加载相应的代码。除此之外，hash 值变化对应的 URL 都会被浏览器记录下来，这样浏览器就能实现页面的前进和后退。虽然是没有请求后端服务器，但是页面的 hash 值和对应的 URL 关联起来了。</p><h3 id="h5-history-模式-需要服务端支持" tabindex="-1">H5 History 模式 (需要服务端支持) <a class="header-anchor" href="#h5-history-模式-需要服务端支持" aria-label="Permalink to &quot;H5 History 模式 (需要服务端支持)&quot;">​</a></h3><p>history 模式的 URL 中没有#，它使用的是传统的路由分发模式，即用户在输入一个 URL 时，服务器会接收这个请求，并解析这个 URL，然后做出相应的逻辑处理。</p><p>这样相对<code>hash</code>模式更好看，但是需要后台配置支持。</p><p>特点 ： 当 使 用 history 模 式 时 ， URL 就 像 这 样 ：<a href="http://abc.com/user/id%E3%80%82%E7%9B%B8%E6%AF%94" target="_blank" rel="noreferrer">http://abc.com/user/id。相比</a> hash 模式更加好看。但是，history 模式需要后台配置支持。如果后台没有正确配置，访问时会返回 404。</p><ul><li><code>history</code>采用<code>HTML5</code>的新特性；且提供了两个新方法：<code>pushState（）</code>，<code>replaceState（）</code>可以对浏览器历史记录栈进行修改，以及<code>popState</code>事件的监听到状态变更。</li><li>利用 HTML5 的 History API 来实现，允许你改变 URL 而不重新加载页面。</li><li>History 模式的 URL 看起来像传统的 URL：<code>http://example.com/user/id</code>。</li><li>这种模式可以使 URL 看起来更美观，更适合 SEO。</li><li>缺点是需要服务器端支持，如果服务器没有正确配置，直接访问非首页的 URL 可能会返回 404 错误。</li><li>使用 History 模式时，你的服务器需要进行相应的配置，以确保在直接访问路由时能够正确返回页面：<a href="https://router.vuejs.org/guide/essentials/history-mode.html%E3%80%82" target="_blank" rel="noreferrer">https://router.vuejs.org/guide/essentials/history-mode.html。</a></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createRouter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createWebHistory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue-router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	history</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createWebHistory</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 定义路由配置</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>虽然 history 模式丢弃了丑陋的#。但是，它也有自己的缺点，就是在刷新页面的时候，如果没有相应的路由或资源，就会刷出 404 来。</p><p>vue-router 如果想要切换到 history 模式，就要进行以下配置（后端也要进行配置）：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    mode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;history&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    routes</span><span style="color:#ABB2BF;">: [...]</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>history</code>原理：是使用<code>HTML5 history</code>提供的<code>pushState</code>、<code>replaceState</code>两个 API，用于浏览器记录历史浏览栈，并且在修改 URL 时不会触发页面刷新和后台数据请求。</p><p>API： history api 可以分为两大部分，切换历史状态和修改历史状态：</p><ul><li>修 改 历 史 状 态 ： 包 括 了 HTML5 History Interface 中 新 增 的 pushState() 和 replaceState() 方法，这两个方法应用于浏览器的历史记录栈，提供了对历史记录进行修改的功能。只是当他们进行修改时，虽然修改了 url，但浏览器不会立即向后端发送请求。如果要做到改变 url 但又不刷新页面的效果，就需要前端用上这两个 API。</li><li>切换历史状态： 包括 forward()、back()、go()三个方法，对应浏览器的前进，后退，跳转操作。</li></ul><h3 id="两种模式比较" tabindex="-1">两种模式比较 <a class="header-anchor" href="#两种模式比较" aria-label="Permalink to &quot;两种模式比较&quot;">​</a></h3><p>调用 history.pushState() 相比于直接修改 hash，存在以下优势：</p><p>pushState() 设置的新 URL 可以是与当前 URL 同源的任意 URL；而 hash 只可修改 # 后面的部分，因此只能设置与当前 URL 同文档的 URL；</p><p>pushState() 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中；而 hash 设置的新值必须与原来不一样才会触发动作将记录添加到栈中；</p><p>pushState() 通过 stateObject 参数可以添加任意类型的数据到记录中；而 hash 只可添加短字符串；</p><p>pushState() 可额外设置 title 属性供后续使用。</p><p>hash 模式下，仅 hash 符号之前的 url 会被包含在请求中，后端如果没有做到对路由的全覆盖，也不会返回 404 错误；history 模式下，前端的 url 必须和实际向后端发起请求的 url 一致，如果没有对用的路由处理，将返回 404 错误。</p><p>hash 模式和 history 模式都有各自的优势和缺陷，还是要根据实际情况选择性的使用。</p><p>当比较 Vue Router 的 <strong>hash 模式</strong> 和 <strong>history 模式</strong> 时，以下是一些关键区别：</p><p><strong>1.URL 格式</strong>:</p><ul><li><strong>Hash 模式</strong>使用 URL 中的<code>#</code>符号来模拟完整的 URL 路径，例如：<code>http://example.com/#/user/id</code>。</li><li><strong>History 模式</strong>的 URL 更接近传统的路径，没有额外的<code>#</code>，例如：<code>http://example.com/user/id</code>。</li></ul><p><strong>2.美观性</strong>:</p><ul><li><strong>Hash 模式</strong>的 URL 包含<code>#</code>，可能不够美观。</li><li><strong>History 模式</strong>的 URL 更清晰，更适合 SEO，因为它不包含<code>#</code>。</li></ul><p><strong>3.兼容性</strong>:</p><ul><li><strong>Hash 模式</strong>在所有浏览器中都能正常工作，不需要服务器端配置。</li><li><strong>History 模式</strong>需要服务器端支持，因为它使用 HTML5 的 History API。</li></ul><p><strong>4.直接访问</strong>:</p><ul><li><strong>Hash 模式</strong>下，直接访问带有<code>#</code>的 URL 仍然可以正常显示页面。</li><li><strong>History 模式</strong>下，直接访问非首页的 URL 可能会返回 404 错误，除非服务器正确配置。</li></ul><p>综上所述，如果你更关心 URL 的美观和 SEO，推荐使用<strong>history 模式</strong>。但如果你需要兼容较旧的浏览器或无法控制服务器配置，那么<strong>hash 模式</strong>是更好的选择。</p><h3 id="abstract-模式" tabindex="-1">abstract 模式 <a class="header-anchor" href="#abstract-模式" aria-label="Permalink to &quot;abstract 模式&quot;">​</a></h3><p>支持所有 JavaScript 运行环境，如 Node.js 服务器端</p><p>abstract 模式是使用一个不依赖于浏览器的浏览历史虚拟管理后端。</p><p>根据平台差异可以看出，在 Weex 环境中只支持使用 abstract 模式。</p><p>不过，vue-router 自身会对环境做校验，如果发现没有浏览器的 API，vue-router 会自动强制进入 abstract 模式，所以 在使用 vue-router 时只要不写 mode 配置即可，默认会在浏览器环境中使用 hash 模式，在移动端原生环境中使用 abstract 模式。</p><p>（当然，你也可以明确指定在所有情况下都使用 abstract 模式）。</p><h2 id="了解-h5的-history-api有哪些方法吗-说下它们的区别" tabindex="-1">了解 H5的 history API有哪些方法吗？说下它们的区别 <a class="header-anchor" href="#了解-h5的-history-api有哪些方法吗-说下它们的区别" aria-label="Permalink to &quot;了解 H5的 history API有哪些方法吗？说下它们的区别&quot;">​</a></h2><blockquote><p><code>history</code> 这个对象在<code>html5</code>的时候新加入两个<code>api</code> <code>history.pushState()</code> 和 <code>history.repalceState()</code> 这两个<code>API</code>可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录。</p></blockquote><p>从参数上来说：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//state：需要保存的数据，这个数据在触发popstate事件时，可以在event.state里获取</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//title：标题，基本没用，一般传null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//url：设定新的历史纪录的url。新的url与当前url的origin必须是一样的，否则会抛出错误。url可以时绝对路径，也可以是相对路径。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//如 当前url是 https://www.baidu.com/a/,执行history.pushState(null, null, &#39;./qq/&#39;)，则变成 https://www.baidu.com/a/qq/，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//执行history.pushState(null, null, &#39;/qq/&#39;)，则变成 https://www.baidu.com/qq/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//与pushState 基本相同，但她是修改当前历史纪录，而 pushState 是创建新的历史纪录</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>另外还有：</p><ul><li><code>window.history.back()</code> 后退</li><li><code>window.history.forward()</code>前进</li><li><code>window.history.go(1)</code> 前进或者后退几步</li><li><code>window.history.go(0);</code> 刷新当前页面</li></ul><p>从触发事件的监听上来说：</p><ul><li><code>window.history.pushState()</code>和<code>window.history.replaceState()</code>不能被<code>window.history.popstate</code>事件所监听</li><li>而后面三者可以，且用户点击浏览器前进后退键时也可以</li></ul><h2 id="说说-vue-router-的-hash-模式" tabindex="-1">说说 Vue Router 的 hash 模式 <a class="header-anchor" href="#说说-vue-router-的-hash-模式" aria-label="Permalink to &quot;说说 Vue Router 的 hash 模式&quot;">​</a></h2><h3 id="简介" tabindex="-1">简介： <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介：&quot;">​</a></h3><p>hash 模式是开发中默认的模式，它的 URL 带着一个#，例如：<code>www.abc.com/#/vue</code>，它的 hash 值就是<code>#/vue</code>。</p><h3 id="特点" tabindex="-1">特点： <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点：&quot;">​</a></h3><p>hash 值会出现在 URL 里面，但是不会出现在 HTTP 请求中，对后端完全没有影响。所以改变 hash 值，不会重新加载页面。这种模式的浏览器支持度很好，低版本的 IE 浏览器也支持这种模式。hash 路由被称为是前端路由，已经成为 SPA（单页面应用）的标配。</p><h3 id="原理-1" tabindex="-1">原理： <a class="header-anchor" href="#原理-1" aria-label="Permalink to &quot;原理：&quot;">​</a></h3><p>hash 模式的主要原理就是 onhashchange() 事件。</p><p>使用 onhashchange() 事件的好处就是，在页面的 hash 值发生变化时，无需向后端发起请求，window 就可以监听事件的改变，并按规则加载相应的代码。</p><p>除此之外，hash 值变化对应的 URL 都会被浏览器记录下来，这样浏览器就能实现页面的前进和后退。</p><p>虽然是没有请求后端服务器，但是页面的 hash 值和对应的 URL 关联起来了。</p><h2 id="完整的-vue-router-导航解析流程" tabindex="-1">完整的 vue-router 导航解析流程 <a class="header-anchor" href="#完整的-vue-router-导航解析流程" aria-label="Permalink to &quot;完整的 vue-router 导航解析流程&quot;">​</a></h2><ul><li>1）导航被触发。</li><li>2）在失活的组件里调用离开守卫。</li><li>3）调用全局的 beforeEach 守卫。</li><li>4）在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>5）在路由配置里调用 beforeEnter 。</li><li>6）解析异步路由组件。</li><li>7）在被激活的组件里调用 beforeRouteEnter 。</li><li>8）调用全局的 beforeResolve 守卫 (2.5+)。</li><li>9）导航被确认。</li><li>10）调用全局的 afterEach 钩子。</li><li>11）触发 DOM 更新。</li></ul><p>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</p><p><img src="`+f+`" alt="image-20240317005539186"></p><h2 id="vue-router-有哪些钩子函数" tabindex="-1">vue-router 有哪些钩子函数? <a class="header-anchor" href="#vue-router-有哪些钩子函数" aria-label="Permalink to &quot;vue-router 有哪些钩子函数?&quot;">​</a></h2><p>有的时候，需要通过路由来进行一些操作，比如最常见的登录权限验证，当用户满足条件时，才让其进入导航，否则就取消跳转，并跳到登录页面让其登录。</p><p>路由守卫有三种：<strong>全局前置守卫</strong>、<strong>路由独享守卫</strong> 和 <strong>组件内守卫</strong>。</p><h3 id="全局守卫" tabindex="-1">全局守卫 <a class="header-anchor" href="#全局守卫" aria-label="Permalink to &quot;全局守卫&quot;">​</a></h3><h4 id="全局前置守卫-router-beforeeach" tabindex="-1">全局前置守卫：<code>router.beforeEach</code> <a class="header-anchor" href="#全局前置守卫-router-beforeeach" aria-label="Permalink to &quot;全局前置守卫：\`router.beforeEach\`&quot;">​</a></h4><p><code>beforeEach(to, from, next)</code>：在<strong>路由切换之前</strong>触发，to 和 from 分别表示即将进入的和离开的路由对象，next 是一个必须被调用的函数，用于切换路由。</p><p>在每个路由进入之前触发，可以进行一些全局的拦截(判断是否登录了，没登录就跳转到登录页)、用户权限验证等操作。</p><p>beforeEach ()参数</p><ul><li><p>to ：即将要进入的目标路由对象</p></li><li><p>from：当前正要离开的路由对象</p></li><li><p>next：路由控制参数</p></li><li><p>next()：如果一切正常，则调用这个方法进入下一个钩子</p></li><li><p>next(false)：取消导航（即路由不发生改变）</p></li><li><p>next(&#39;/login&#39;)：当前导航被中断，然后进行一个新的导航</p></li><li><p>next(error)：如果一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError ()</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// to: 即将进入的目标</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// from:当前导航正要离开的路由</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 返回false用于取消导航</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Login&quot;</span><span style="color:#ABB2BF;"> }; </span><span style="color:#7F848E;font-style:italic;">// 返回到对应name的页面</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Login&quot;</span><span style="color:#ABB2BF;"> }); </span><span style="color:#7F848E;font-style:italic;">// 进入到对应的页面</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 放行</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 全局路由导航守卫</span></span>
<span class="line"><span style="color:#E5C07B;">vueRouter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> nextRoute</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;detail&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> auth</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;username&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E5C07B;"> FROMPATH</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 跳转至上述 3 个页面</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">nextRoute</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 上述数组中的路径，是相当于有权限的页面，访问数组列表中的页面就应该是在登陆状态下</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">auth</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> params</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">frompath</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">FROMPATH</span><span style="color:#ABB2BF;"> }, </span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			next</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/newlogin&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 已登录的情况再去登录页，跳转至首页</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;newlogin&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">auth</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// vueRouter.push({name: &#39;index&#39;});</span></span>
<span class="line"><span style="color:#61AFEF;">			next</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断登录</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> ifInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$common</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSession</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;userData&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 判断是否登录的存储信息</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">ifInfo</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// sessionStorage里没有储存user信息</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;/&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//如果是登录页面路径，就直接next()</span></span>
<span class="line"><span style="color:#61AFEF;">			next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//不然就跳转到登录</span></span>
<span class="line"><span style="color:#E5C07B;">			Message</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">warning</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;请重新登录！&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">href</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$loginUrl</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// </span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullPath</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullPath</span><span style="color:#56B6C2;"> !=</span><span style="color:#98C379;"> &quot;/login&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果不是登录组件</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;username&quot;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果没有登录，就先进入login组件进行登录</span></span>
<span class="line"><span style="color:#61AFEF;">			next</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/login&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果登录了，那就继续</span></span>
<span class="line"><span style="color:#61AFEF;">			next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果是登录组件，那就继续。</span></span>
<span class="line"><span style="color:#61AFEF;">		next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><h4 id="全局解析守卫-router-beforeresolve" tabindex="-1">全局解析守卫：<code>router.beforeResolve</code> <a class="header-anchor" href="#全局解析守卫-router-beforeresolve" aria-label="Permalink to &quot;全局解析守卫：\`router.beforeResolve\`&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeResolve</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">canCopy</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 也可取消导航</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="全局后置钩子-router-aftereach" tabindex="-1">全局后置钩子：<code>router.afterEach</code> <a class="header-anchor" href="#全局后置钩子-router-aftereach" aria-label="Permalink to &quot;全局后置钩子：\`router.afterEach\`&quot;">​</a></h4><p><code>afterEach(to, from)</code>：在<strong>路由切换之后</strong>触发，to 和 from 分别表示进入的和离开的路由对象。</p><p>在每个路由离开之后触发，可以进行一些全局的收尾操作，比如清除全局状态等。</p><ul><li>常用自动让页面返回最顶端</li><li>用法相似，少了 next 参数</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">afterEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 登录用户信息参数获取</span></span>
<span class="line"><span style="color:#61AFEF;">	logInfo</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullPath</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 跳转之后滚动条回到顶部</span></span>
<span class="line"><span style="color:#E5C07B;">	window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">scrollTo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="导航错误钩子-导航发生错误调用-onerror" tabindex="-1">导航错误钩子，导航发生错误调用：onError <a class="header-anchor" href="#导航错误钩子-导航发生错误调用-onerror" aria-label="Permalink to &quot;导航错误钩子，导航发生错误调用：onError&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onError</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	logError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="路由独享" tabindex="-1">路由独享 <a class="header-anchor" href="#路由独享" aria-label="Permalink to &quot;路由独享&quot;">​</a></h3><h4 id="路由独享的守卫-beforeenter" tabindex="-1">路由独享的守卫：<code>beforeEnter</code> <a class="header-anchor" href="#路由独享的守卫-beforeenter" aria-label="Permalink to &quot;路由独享的守卫：\`beforeEnter\`&quot;">​</a></h4><p>beforeEnter(to, from, next)：在当前路由配置的 beforeEnter 属性中定义，与全局 beforeEach 相同。</p><p>路由独享守卫，beforeEnter 可以传入单个函数，也可传入多个函数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">beforeEnter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;login&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">login</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		beforeEnter</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;即将进入登录页面&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/foo&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Foo</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">			beforeEnter</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#61AFEF;">			beforeEnter</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="组件内的守卫钩子" tabindex="-1">组件内的守卫钩子 <a class="header-anchor" href="#组件内的守卫钩子" aria-label="Permalink to &quot;组件内的守卫钩子&quot;">​</a></h3><h4 id="beforerouteenter-、-beforerouteupdate-、-beforerouteleave" tabindex="-1"><code>beforeRouteEnter</code> 、 <code>beforeRouteUpdate</code> 、 <code>beforeRouteLeave</code> <a class="header-anchor" href="#beforerouteenter-、-beforerouteupdate-、-beforerouteleave" aria-label="Permalink to &quot;\`beforeRouteEnter\` 、 \`beforeRouteUpdate\` 、 \`beforeRouteLeave\`&quot;">​</a></h4><ul><li><code>beforeRouteEnter(to, from, next)</code>：在组件被<strong>激活之前</strong>触发，to 和 from 分别表示即将进入的和离开的路由对象，next 是一个必须被调用的函数，用于切换路由。 <ul><li>在进入该路由前，可以进行一些异步操作，比如获取数据等。</li><li>该组件的对应路由被 comfirm 前调用。</li><li>此时实例还没被创建，所以不能获取实例（this）</li></ul></li><li><code>beforeRouteUpdate(to, from, next)</code>：在组件被<strong>复用时</strong>触发，to 和 from 分别表示当前路由对象和上一个路由对象，next 是一个必须被调用的函数，用于切换路由。 <ul><li>在路由更新（参数发生变化）时触发。</li><li>当前路由改变，但改组件被复用时候调用</li><li>该函数内可以访问组件实例(this)</li></ul></li><li><code>beforeRouteLeave(to, from, next)</code>：在<strong>离开当前路由配置时</strong>触发，to 和 from 分别表示即将进入的和离开的路由对象，next 是一个必须被调用的函数，用于切换路由。 <ul><li>在离开当前路由时，可以进行一些确认操作，比如提示用户保存未保存的数据等。</li><li>当导航离开组件的对应路由时调用。</li><li>该函数内可以访问获取组件实例（this）</li></ul></li></ul><p>这三个钩子都有三个参数 ∶to、from、next</p><p>适用场景：动态设置页面标题，判断用户登录权限等:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Home</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`...\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	beforeRouteEnter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 在渲染该组件的对应路由被 confirm 前调用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 此时组件实例还未被创建，不能获取this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 因为当钩子执行前，组件实例还没被创建</span></span>
<span class="line"><span style="color:#61AFEF;">        next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &#39;/classProcess&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isFromProcess</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	beforeRouteUpdate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 当前路由改变，但是组件被复用的时候调用，此时组件已挂载好</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 在当前路由改变，但是该组件被复用时调用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 可以访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	beforeRouteLeave</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 导航离开渲染组件的对应路由时调用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 可以访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>以上所有钩子函数都有三个参数：to、from 和 next。其中，to 表示即将进入的路由对象；from 表示当前离开的路由对象；next 是一个必须被调用的函数，用于进行路由切换。</p><p>to（去的那个路由）</p><p>from（离开的路由）</p><p>next（一定要用这个函数才能去到下一个路由，如果不用就拦截）</p><blockquote><p>这些钩子函数都有两个参数，<strong>to</strong>和<strong>from</strong>。其中 beforeEach 还有一个<strong>next 函数</strong>作为参数。</p></blockquote><h3 id="vue-路由钩子在生命周期函数的体现" tabindex="-1">Vue 路由钩子在生命周期函数的体现 <a class="header-anchor" href="#vue-路由钩子在生命周期函数的体现" aria-label="Permalink to &quot;Vue 路由钩子在生命周期函数的体现&quot;">​</a></h3><h4 id="_1-完整的路由导航解析流程-不包括其他生命周期" tabindex="-1">1.完整的路由导航解析流程（不包括其他生命周期） <a class="header-anchor" href="#_1-完整的路由导航解析流程-不包括其他生命周期" aria-label="Permalink to &quot;1.完整的路由导航解析流程（不包括其他生命周期）&quot;">​</a></h4><ul><li>触发进入其他路由。</li><li>调用要离开路由的组件守卫 beforeRouteLeave</li><li>调用局前置守卫 ∶ beforeEach</li><li>在重用的组件里调用 beforeRouteUpdate</li><li>调用路由独享守卫 beforeEnter。</li><li>解析异步路由组件。</li><li>在将要进入的路由组件中调用 beforeRouteEnter</li><li>调用全局解析守卫 beforeResolve</li><li>导航被确认。</li><li>调用全局后置钩子的 afterEach 钩子。</li><li>触发 DOM 更新（mounted）。</li><li>执行 beforeRouteEnter 守卫中传给 next 的回调函数</li></ul><h4 id="_2-触发钩子的完整顺序" tabindex="-1">2.触发钩子的完整顺序 <a class="header-anchor" href="#_2-触发钩子的完整顺序" aria-label="Permalink to &quot;2.触发钩子的完整顺序&quot;">​</a></h4><p>路由导航、keep-alive、和组件生命周期钩子结合起来的，触发顺序，假设是从 a 组件离开，第一次进入 b 组件 ∶</p><ul><li>beforeRouteLeave：路由组件的组件离开路由前钩子，可取消路由离开。</li><li>beforeEach：路由全局前置守卫，可用于登录验证、全局路由 loading 等。</li><li>beforeEnter：路由独享守卫</li><li>beforeRouteEnter：路由组件的组件进入路由前钩子。</li><li>beforeResolve：路由全局解析守卫</li><li>afterEach：路由全局后置钩子</li><li>beforeCreate：组件生命周期，不能访问 tAis。</li><li>created：组件生命周期，可以访问 tAis，不能访问 dom。</li><li>beforeMount：组件生命周期</li><li>deactivated：离开缓存组件 a，或者触发 a 的 beforeDestroy 和 destroyed 组件销毁钩子。</li><li>mounted：访问/操作 dom。</li><li>activated：进入缓存组件，进入 a 的嵌套子组件（如果有的话）。</li><li>执行 beforeRouteEnter 回调函数 next。</li></ul><h4 id="_3-导航行为被触发到导航完成的整个过程" tabindex="-1">3.导航行为被触发到导航完成的整个过程 <a class="header-anchor" href="#_3-导航行为被触发到导航完成的整个过程" aria-label="Permalink to &quot;3.导航行为被触发到导航完成的整个过程&quot;">​</a></h4><ul><li>导航行为被触发，此时导航未被确认。</li><li>在失活的组件里调用离开守卫 beforeRouteLeave。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)。</li><li>在路由配置里调用 beforeEnteY。</li><li>解析异步路由组件（如果有）。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫（2.5+），标示解析阶段完成。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>非重用组件，开始组件实例的生命周期：beforeCreate&amp;created、beforeMount&amp;mounted</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li><li>导航完成</li></ul><h3 id="路由监测变化" tabindex="-1">路由监测变化 <a class="header-anchor" href="#路由监测变化" aria-label="Permalink to &quot;路由监测变化&quot;">​</a></h3><p>监听到路由对象发生变化，从而对路由变化做出响应</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    template</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    watch</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">        &#39;$route&#39;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 对路由做出响应</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // to , from 分别表示从哪跳转到哪，都是一个对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // to.path ( 表示的是要跳转到的路由的地址 eg: /home );</span></span>
<span class="line"><span style="color:#ABB2BF;">    	}</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 多了一个watch，这会带来依赖追踪的内存开销，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 修改</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    template</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    watch</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">        &#39;$route.query.id&#39;</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	// 请求个人描述</span></span>
<span class="line"><span style="color:#E06C75;">        },</span></span>
<span class="line"><span style="color:#98C379;">        &#39;$route.query.page&#39;</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	// 请求列表</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>总结：</p><p>路由中的导航钩子有三种</p><ul><li>全局</li><li>组件</li><li>路由配置</li></ul><p>在做页面登陆权限时候可以使用到路由导航配置 （举例两三个即可）</p><p>监听路由变化怎么做</p><blockquote><p>使用 watch 来对$route 监听</p></blockquote><h2 id="router-和-route-的区别" tabindex="-1">router 和 route 的区别 <a class="header-anchor" href="#router-和-route-的区别" aria-label="Permalink to &quot;router 和 route 的区别&quot;">​</a></h2><p><strong>$router</strong> 是 VueRouter 的实例对象，通过 <code>Vue.use(VueRouter)</code> 和 <code>VueRouter</code> 构造函数得到一个 router 的实例对象，是一个全局的路由对象，包含了所有路由的对象和属性：路由跳转方法( push 、 replace )、钩子函数等。</p><p><strong>$route</strong> 是一个跳转的路由对象，每一个路由都会有一个 route 对象，是一个局部的对象，是当前组件的路由管理，指当前激活的路由对象，包含当前 url 解析得到的数据，可以从对象里获取一些数据：<code>name</code>、<code>path</code>、<code>params</code>、<code>query</code>、<code>fullPath</code>、<code>matched</code>、<code>name</code>等路由信息参数。</p><h2 id="如何配置-vue-router-的异步加载" tabindex="-1">如何配置 Vue-router 的异步加载 <a class="header-anchor" href="#如何配置-vue-router-的异步加载" aria-label="Permalink to &quot;如何配置 Vue-router 的异步加载&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	routers</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">			component</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">				import</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					/* webpackChunkName: &quot;navigator&quot; */</span></span>
<span class="line"><span style="color:#98C379;">					&quot;./../components/Navigator&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">				),</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/feedback&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">			component</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">				import</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					/* webpackChunkName: &quot;feedback&quot; */</span></span>
<span class="line"><span style="color:#98C379;">					&quot;./../components/FeedBack&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">				),</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="实现vue-router路由懒加载" tabindex="-1">实现vue-router路由懒加载 <a class="header-anchor" href="#实现vue-router路由懒加载" aria-label="Permalink to &quot;实现vue-router路由懒加载&quot;">​</a></h2><p>当打包构建 Vue 应用时，JavaScript 包可能会变得非常大，影响页面加载速度。为了提高应用的加载效率，我们可以使用<strong>路由懒加载</strong>，即在路由被访问时才加载对应的组件。</p><p>vue 路由懒加载主要解决打包后文件过大的问题，事件触发才加载对应组件中的 js<strong>说一下如何解决 vue 首屏加载慢或白屏？</strong></p><p>通过路由懒加载，我们可以更高效地加载 Vue 应用的组件，提高用户体验和性能。</p><p>以下是如何在 Vue Router 中实现路由懒加载的方法：</p><h3 id="_1-使用异步组件" tabindex="-1">1.使用异步组件: <a class="header-anchor" href="#_1-使用异步组件" aria-label="Permalink to &quot;1.使用异步组件:&quot;">​</a></h3><p>首先，将异步组件定义为返回一个 Promise 的工厂函数，该函数应该 resolve 组件本身：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Foo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">	Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* 组件定义对象 */</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>然后，在 Webpack 2 及以上版本中，可以使用动态 import 语法来定义代码分块点：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./Foo.vue&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 返回Promise</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>结合这两者，就可以定义一个能够被 Webpack 自动代码分割的异步组件：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 方法1：</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Foo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./Foo.vue&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方法2：</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Foo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./Foo.vue&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_2-webpack-按组分块" tabindex="-1">2.Webpack 按组分块: <a class="header-anchor" href="#_2-webpack-按组分块" aria-label="Permalink to &quot;2.Webpack 按组分块:&quot;">​</a></h3><p>有时候我们想把某个路由下的所有组件都打包在同个异步块（chunk）中。</p><p>使用命名 chunk，一个特殊的注释语法来提供 chunk name（需要 Webpack &gt; 2.4）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Foo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/* webpackChunkName: &quot;group-foo&quot; */</span><span style="color:#98C379;"> &quot;./Foo.vue&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Bar</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/* webpackChunkName: &quot;group-foo&quot; */</span><span style="color:#98C379;"> &quot;./Bar.vue&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Baz</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/* webpackChunkName: &quot;group-foo&quot; */</span><span style="color:#98C379;"> &quot;./Baz.vue&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Webpack 会将任何一个异步模块与相同的块名称组合到相同的异步块中。</p><p>在路由配置中，不需要改变任何内容，只需要像往常一样使用这些异步组件。例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/foo&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Foo</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 其他路由配置</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="vue-router-的动态路由匹配" tabindex="-1">vue-router 的动态路由匹配 <a class="header-anchor" href="#vue-router-的动态路由匹配" aria-label="Permalink to &quot;vue-router 的动态路由匹配&quot;">​</a></h2><p><strong>定义 vue-router 的动态路由，获取传过来的动态参数？</strong></p><p>我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。</p><p>那么，我们可以在 vue-router 的路由路径中使用“动态路径参数”(dynamic segment) 来达到这个效果：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> User</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&lt;div&gt;User&lt;/div&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 动态路径参数 以冒号开头</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/user/:id&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>现在呢，像 /user/foo 和 /user/bar 都将映射到相同的路由。</p><p>一个“路径参数”使用冒号 : 标记。当匹配到一个路由时，参数值会被设置到 this.$route.params ，可以在每个组件内使用。于是，我们可以更新 User 的模板，输出当前用户的 ID：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> User</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&lt;div&gt;User {{ $route.params.id }}&lt;/div&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>你可以在一个路由中设置多段“路径参数”，对应的值都会设置到$route.params 中。例如：</p><table><thead><tr><th>模式</th><th>匹配路径</th><th>$route.params</th></tr></thead><tbody><tr><td><code>/user/:username</code></td><td><code>/user/evan</code></td><td><code>{ username: &#39;evan&#39; }</code></td></tr><tr><td><code>/user/:username/post/:post_id</code></td><td><code>/user/evan/post/123</code></td><td><code>{ username: &#39;evan&#39;, post_id:&#39;123&#39; }</code></td></tr></tbody></table><p>除了 <code>$route.params</code> 外， <code>$route</code> 对象还提供了其它有用的信息，例如， <code>$route.query</code> (如果 URL 中有查询参数)、 <code>$route.hash</code> 等等。</p><p>Vue Router 中的<strong>动态路由</strong>允许我们根据 URL 中的参数来动态匹配不同的路由。这对于传递数据或参数以及根据实时网络变化显示不同内容的页面非常有用。</p><p>在 router 目录下的 index.js 文件中，在 Vue Router 中，我们可以使用<strong>动态段</strong>来定义动态路由。动态段使用冒号（<code>:</code>）来表示 URL 路径中的动态部分。</p><h3 id="对-path-属性加上-id。" tabindex="-1">对 path 属性加上/:id。 <a class="header-anchor" href="#对-path-属性加上-id。" aria-label="Permalink to &quot;对 path 属性加上/:id。&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/user/:id&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这里的User组件将会接收动态参数id</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在上面的示例中，<code>/user/:id</code>表示用户访问的 URL 路径中的<code>:id</code>部分是动态的。</p><h3 id="获取动态参数-使用-router-对象的-arams-id" tabindex="-1">获取动态参数：使用 router 对象的 arams.id <a class="header-anchor" href="#获取动态参数-使用-router-对象的-arams-id" aria-label="Permalink to &quot;获取动态参数：使用 router 对象的 arams.id&quot;">​</a></h3><p>在组件中，我们可以通过<code>$route.params</code>来获取动态参数。</p><p>例如，在<code>User</code>组件中，我们可以这样获取<code>id</code></p><p>参数：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		userId</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>现在，<code>this.userId</code>将包含从 URL 中获取的动态参数值。</p><h3 id="如何响应动态路由参数的变化" tabindex="-1">如何响应动态路由参数的变化 <a class="header-anchor" href="#如何响应动态路由参数的变化" aria-label="Permalink to &quot;如何响应动态路由参数的变化&quot;">​</a></h3><p>在 Vue 中，你可以使用以下方法来响应动态路由参数的变化：</p><h4 id="_1-使用watch属性" tabindex="-1">1.使用<code>watch</code>属性： <a class="header-anchor" href="#_1-使用watch属性" aria-label="Permalink to &quot;1.使用\`watch\`属性：&quot;">​</a></h4><p>在组件中，你可以通过监听<code>$route</code>对象来检测路由参数的变化。例如：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;用户ID: {{ </span><span style="color:#E06C75;">userId</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			userId</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	watch</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">		&quot;$route.params.id&quot;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newId</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 处理新的用户ID</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userId</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newId</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="_2-使用beforerouteupdate导航守卫" tabindex="-1">2.使用<code>beforeRouteUpdate</code>导航守卫： <a class="header-anchor" href="#_2-使用beforerouteupdate导航守卫" aria-label="Permalink to &quot;2.使用\`beforeRouteUpdate\`导航守卫：&quot;">​</a></h4><p>如果你希望在路由参数变化之前执行一些操作，你可以使用<code>beforeRouteUpdate</code>导航守卫。例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> routes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/users/:id&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		beforeRouteUpdate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 处理路由参数变化前的逻辑</span></span>
<span class="line"><span style="color:#61AFEF;">			next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_3-使用key属性" tabindex="-1">3.使用<code>key</code>属性： <a class="header-anchor" href="#_3-使用key属性" aria-label="Permalink to &quot;3.使用\`key\`属性：&quot;">​</a></h4><p>在<code>&lt;router-view&gt;</code>元素上添加<code>key</code>属性，让 Vue 跟踪视图的变化。这样，当路由参数发生变化时，组件会被销毁并重新创建，触发组件的生命周期钩子。例如：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullPath</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="vue-router-如何定义嵌套路由" tabindex="-1">vue-router 如何定义嵌套路由？ <a class="header-anchor" href="#vue-router-如何定义嵌套路由" aria-label="Permalink to &quot;vue-router 如何定义嵌套路由？&quot;">​</a></h2><p>在 Vue Router 中，<strong>嵌套路由</strong>允许我们在一个路由内部嵌套其他路由，从而构建更复杂的用户界面。例如，我们可以在一个用户页面内嵌套显示用户的个人资料、照片等不同组件。</p><h3 id="在-vue-router-中定义嵌套路由的步骤如下" tabindex="-1">在 Vue Router 中定义嵌套路由的步骤如下： <a class="header-anchor" href="#在-vue-router-中定义嵌套路由的步骤如下" aria-label="Permalink to &quot;在 Vue Router 中定义嵌套路由的步骤如下：&quot;">​</a></h3><ol><li><strong>创建组件</strong>：首先，你需要为每个路由级别创建 Vue 组件。例如，你可能有一个<code>User</code>组件，以及<code>UserProfile</code>和<code>UserPosts</code>作为子组件。</li><li><strong>配置父路由</strong>：在你的路由配置中，定义一个父路由，它将包含子路由。父路由会有一个<code>children</code>属性，这是一个包含子路由对象的数组。</li><li><strong>定义子路由</strong>：在<code>children</code>数组中，你可以定义任意数量的子路由。每个子路由都会有自己的<code>path</code>和<code>component</code>。</li><li><strong>使用<code>&lt;router-view&gt;</code></strong>：在父组件的模板中，使用<code>&lt;router-view&gt;</code>标签来渲染匹配的子路由组件。</li></ol><p>下面是一个简单的代码示例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1. 导入组件</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> User</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/User.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> UserProfile</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/UserProfile.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> UserPosts</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/UserPosts.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2. 定义路由</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> routes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/user/:id&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		children</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 当 &quot;/user/:id/profile&quot; 匹配成功，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// UserProfile 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span>
<span class="line"><span style="color:#E06C75;">				path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;profile&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">UserProfile</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 当 &quot;/user/:id/posts&quot; 匹配成功，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// UserPosts 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span>
<span class="line"><span style="color:#E06C75;">				path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;posts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">UserPosts</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		],</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3. 创建 router 实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// (缩写) 相当于 routes: routes</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 4. 创建和挂载根实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	router</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">$mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>在这个例子中，<code>User</code>组件是父组件，它的模板中应该包含一个<code>&lt;router-view&gt;</code>标签来渲染子路由<code>UserProfile</code>和<code>UserPosts</code>。</p><p>当访问<code>/user/:id/profile</code>时，<code>UserProfile</code>组件会被渲染；</p><p>当访问<code>/user/:id/posts</code>时，<code>UserPosts</code>组件会被渲染。</p><h3 id="使用嵌套路由" tabindex="-1">使用嵌套路由: <a class="header-anchor" href="#使用嵌套路由" aria-label="Permalink to &quot;使用嵌套路由:&quot;">​</a></h3><p>在父级路由的组件中，我们可以使用<code>&lt;router-view&gt;</code>来渲染子路由的内容。</p><p>例如，在<code>UserRoot</code>组件中，我们可以这样使用嵌套的<code>&lt;router-view&gt;</code>：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;User Page&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 渲染子路由的内容 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>通过嵌套路由，我们可以构建更复杂的用户界面，将不同的组件嵌套在一起，提高应用的可维护性和扩展性。</p><p>更多关于嵌套路由的信息，可以参考 Vue Router 的 <a href="https://router.vuejs.org/zh/guide/essentials/nested-routes.html" target="_blank" rel="noreferrer">官方文档</a>。</p><h2 id="vue-router-的路由跳转传参路由传参方式" tabindex="-1">vue-router 的路由跳转传参路由传参方式？ <a class="header-anchor" href="#vue-router-的路由跳转传参路由传参方式" aria-label="Permalink to &quot;vue-router 的路由跳转传参路由传参方式？&quot;">​</a></h2><ul><li><p><code>vue-router</code>导航有两种方式：<code>声明式导航</code>和<code>编程式导航</code></p></li><li><p><code>声明式跳转</code>就是使用 <code>router-link</code> 组件，添加 <code>:to=</code> 属性的方式</p></li><li><p><code>编程式跳转</code>就是 <code>router.push</code></p></li><li><p>使用<code>query</code>方法传入的参数使用<code>this.$route.query</code>接受</p></li><li><p>使用<code>params</code>方式传入的参数使用<code>this.$route.params</code>接受</p></li><li><p>如果不仅仅考虑用路由的话，还可以用<code>vuex</code>、<code>localstorage</code>等</p></li></ul><h3 id="几种路由跳转几种方式的区别" tabindex="-1">几种路由跳转几种方式的区别 <a class="header-anchor" href="#几种路由跳转几种方式的区别" aria-label="Permalink to &quot;几种路由跳转几种方式的区别&quot;">​</a></h3><ul><li>this.$router.push：跳转到指定 url 路径，并想 history 栈中添加一个记录，点击后退会返回到上一个页面</li><li>this.$router.replace：跳转到指定 url 路径，但是 history 栈中不会有记录，点击返回会跳转到上上个页面 (就是直接替换了当前页面)</li><li>this.$router.go(n)：向前或者向后跳转 n 个页面，n 可为正整数或负整数</li></ul><h3 id="_1-声明式导航-router-link" tabindex="-1">1.声明式导航：<code>router-link</code> <a class="header-anchor" href="#_1-声明式导航-router-link" aria-label="Permalink to &quot;1.声明式导航：\`router-link\`&quot;">​</a></h3><p>标签直接拼接参数实现跳转</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#98C379;">&#39;/users?userId:1&#39;</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">userId</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> } }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/users&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">userId</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> } }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>a.首先：to 需要绑定；</li><li>b.传参使用类似与对象的形式；</li><li>c.name 就是我们在配置路由时候取的名字；</li><li>d.参数也是采用对象的形式。</li></ul><p>router-link 标签直接拼接参数实现跳转</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#D19A66;"> to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/t?index=1&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;button class=&quot;btn btn-default&quot;&gt;点击跳转&lt;/button&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>router-link 标签使用 to 属性结合 query 实现跳转，里面是参数字典</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/t&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> } }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;button class=&quot;btn btn-default&quot;&gt;点击跳转&lt;/button&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>接收参数</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;传递的名字是：{{$route.params.username}}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-编程式导航-router-push" tabindex="-1">2.编程式导航：$router.push <a class="header-anchor" href="#_2-编程式导航-router-push" aria-label="Permalink to &quot;2.编程式导航：$router.push&quot;">​</a></h3><p><strong>this.$router.push() (@click 函数里面调用)</strong></p><h4 id="_1-使用-name-传递" tabindex="-1">1）使用 name 传递 <a class="header-anchor" href="#_1-使用-name-传递" aria-label="Permalink to &quot;1）使用 name 传递&quot;">​</a></h4><p>之前一直在配置路由的时候出现一个 name,但不知道他具体有什么用，在路由里他可以用来传递参数。</p><p>在 index.js 中将路由的 name 都写好</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Router</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这些分别都是路由的名字，我们要获取这些name</span></span>
<span class="line"><span style="color:#E06C75;">    routes</span><span style="color:#ABB2BF;">:[ </span><span style="color:#7F848E;font-style:italic;">// 配置路由，这里是个数组，每一个连接都是一个对象</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#E06C75;">            path</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 路径，就是我们之前打开1ocalhost:8080一样，#后面接</span></span>
<span class="line"><span style="color:#E06C75;">            name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;HelloWorld&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 路由名称叫helloworld</span></span>
<span class="line"><span style="color:#E06C75;">            component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">HelloWorld</span><span style="color:#7F848E;font-style:italic;"> // 对应的组件模板</span></span>
<span class="line"><span style="color:#ABB2BF;">        },{</span></span>
<span class="line"><span style="color:#E06C75;">            path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/hellovue&#39;</span></span>
<span class="line"><span style="color:#E06C75;">            name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;hellovue&#39;</span></span>
<span class="line"><span style="color:#E06C75;">            component</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">hellovue</span></span>
<span class="line"><span style="color:#ABB2BF;">        },{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">            path</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;/mycente</span><span style="color:#FFFFFF;">r</span></span>
<span class="line"><span style="color:#E06C75;">            component</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">mycenter</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            children</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">                { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;mycenter&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">mycenter</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">                { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;myinfo&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;myinfo&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Gomponent</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">myinfo</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        		// path内可以直接带参数</span></span>
<span class="line"><span style="color:#ABB2BF;">        		{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;myjob/:jobid/:jobtitle&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;myjob&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">omponent</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">myjob</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">            ]</span></span>
<span class="line"><span style="color:#ABB2BF;">    	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	]</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>接收参数：</p><p>在我们需要接收它的页面里添加</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;我是router-name:{{$route.name}}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;jobid是:{{$route.params.jobid}},&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;jobtitle是:{{$route.params.jobtitle}}&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>比如我在这里是在 APP.vue 中接收的，我希望切换每个页面都能看见参数。</p><p>但这种方法不太常用。</p><h4 id="_2-通过params传参" tabindex="-1">2）通过<code>params</code>传参 <a class="header-anchor" href="#_2-通过params传参" aria-label="Permalink to &quot;2）通过\`params\`传参&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    params</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        userId</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 路由配置</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/users&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 跳转后获取路由参数</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userId</span><span style="color:#7F848E;font-style:italic;"> // 为 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_3-通过query传参" tabindex="-1">3）通过<code>query</code>传参 <a class="header-anchor" href="#_3-通过query传参" aria-label="Permalink to &quot;3）通过\`query\`传参&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/路径?参数=1&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/users&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    query</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        userId</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 路由配置</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/users&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 跳转后获取路由参数</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">query</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userId</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 接收参数;</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">query</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="_4-动态路由" tabindex="-1">4）动态路由 <a class="header-anchor" href="#_4-动态路由" aria-label="Permalink to &quot;4）动态路由&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/users/\${userId}&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 路由配置</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/users/:userId&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 跳转后获取路由参数</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userId</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="路由传参方式" tabindex="-1">路由传参方式 <a class="header-anchor" href="#路由传参方式" aria-label="Permalink to &quot;路由传参方式&quot;">​</a></h3><h4 id="params-传参" tabindex="-1">params 传参 <a class="header-anchor" href="#params-传参" aria-label="Permalink to &quot;params 传参&quot;">​</a></h4><ul><li>路由配置： <code>/index/:id</code></li><li>路由跳转：<code>this.$router.push({name: &#39;index&#39;, params: {id: &quot;zs&quot;}});</code></li><li>路由参数获取：<code>$route.params.id</code></li><li>最后形成的路由：<code>/index/zs</code></li></ul><h4 id="query-传参" tabindex="-1">query 传参 <a class="header-anchor" href="#query-传参" aria-label="Permalink to &quot;query 传参&quot;">​</a></h4><ul><li>路由配置：<code>/index</code>正常的路由配置</li><li>路由跳转：<code>this.$rouetr.push({path: &#39;index&#39;, query:{id: &quot;zs&quot;}});</code></li><li>路由参数获取：<code>$route.query.id</code></li><li>最后形成的路由：<code>/index?id=zs</code></li></ul><h4 id="query-和-params-区别" tabindex="-1">query 和 params 区别 <a class="header-anchor" href="#query-和-params-区别" aria-label="Permalink to &quot;query 和 params 区别&quot;">​</a></h4><ul><li><p>获取参数方式不一样，一个通过 <code>$route.params</code>，一个通过 <code>$route.query</code></p></li><li><p>参数的生命周期不一样，<code>query</code>参数在 URL 地址栏中显示不容易丢失，<code>params</code>参数不会在地址栏显示，刷新后会消失</p></li><li><p>query 类似 get，跳转之后页面 url 后面会拼接参数，类似?id=1，非重要性的可以这样传，密码之类还是用 params 刷新页面 id 还在</p></li><li><p>params 类似 post，跳转之后页面 url 后面不会拼接参数，但是刷新页面 id 会消失</p></li></ul><h2 id="router-link-router-link-组件及其属性" tabindex="-1"><code>&lt;router-link&gt;&lt;/router-link&gt;</code> 组件及其属性 <a class="header-anchor" href="#router-link-router-link-组件及其属性" aria-label="Permalink to &quot;\`&lt;router-link&gt;&lt;/router-link&gt;\` 组件及其属性&quot;">​</a></h2><p>支持用户在具有路由功能的应用中 (点击) 导航 通过 to 属性指定目标地址</p><h3 id="一-router-link-组件的-props" tabindex="-1">一：router-link 组件的 props： <a class="header-anchor" href="#一-router-link-组件的-props" aria-label="Permalink to &quot;一：router-link 组件的 props：&quot;">​</a></h3><h4 id="to" tabindex="-1">to <a class="header-anchor" href="#to" aria-label="Permalink to &quot;to&quot;">​</a></h4><p>表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push() 有组件引用组件中有 router-view 组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">Home</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;Home&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">渲染结果：</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">a</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Home&quot;</span><span style="color:#ABB2BF;">&gt;Home&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span></span>
<span class="line"><span style="color:#ABB2BF;">	:</span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;register&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;fjw&#39;</span><span style="color:#ABB2BF;"> } }</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;router&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">渲染结果：</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">a</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/register?name=fjw&quot;</span><span style="color:#ABB2BF;">&gt;router&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="tag" tabindex="-1">tag： <a class="header-anchor" href="#tag" aria-label="Permalink to &quot;tag：&quot;">​</a></h4><p>指定 <code>&lt;router-link&gt;</code> 组件最终被渲染成什么标签；非必须；如果没有 tag 属性，router-link 最终会被渲染成 a 标签。在上面的栗子中，渲染成了 li 标签。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">Home</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> tag</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">&gt;Home&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">渲染结果：</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;Home&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">此时依旧会监听点击事件，触发导航</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="replace" tabindex="-1">replace： <a class="header-anchor" href="#replace" aria-label="Permalink to &quot;replace：&quot;">​</a></h4><p>当点击时，会调用 router.replace() 而不是 router.push()，于是导航后不会留下 history 记录。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/abc&#39;</span><span style="color:#ABB2BF;"> }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> replace</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="append" tabindex="-1">append： <a class="header-anchor" href="#append" aria-label="Permalink to &quot;append：&quot;">​</a></h4><p>则在当前 (相对) 路径前添加基路径。/a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">to</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;relative/path&#39;</span><span style="color:#ABB2BF;"> }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> append</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="active-class" tabindex="-1">active-class： <a class="header-anchor" href="#active-class" aria-label="Permalink to &quot;active-class：&quot;">​</a></h4><p>表示激活这个链接时，添加的 class，默认是 router-link-class。默认值可以通过路由的构造选项 linkActiveClass 来全局配置。</p><h4 id="exact" tabindex="-1">exact： <a class="header-anchor" href="#exact" aria-label="Permalink to &quot;exact：&quot;">​</a></h4><p>&quot;是否激活&quot; 默认类名的依据是 inclusive match (全包含匹配)。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 这个链接只会在地址为 / 的时候被激活 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">router-link</span><span style="color:#D19A66;"> to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#D19A66;"> exact</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="event" tabindex="-1">event： <a class="header-anchor" href="#event" aria-label="Permalink to &quot;event：&quot;">​</a></h4><p>默认值: &#39;click&#39; 声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。</p><h2 id="vue-router-跳转和-location-href-有什么区别" tabindex="-1">Vue-router 跳转和 location.href 有什么区别 <a class="header-anchor" href="#vue-router-跳转和-location-href-有什么区别" aria-label="Permalink to &quot;Vue-router 跳转和 location.href 有什么区别&quot;">​</a></h2><p>使用 <code>location.href= /url</code> 来跳转，简单方便，但是刷新了页面；</p><p>使用 <code>history.pushState( /url )</code> ，无刷新页面，静态跳转；</p><p>引进 router ，然后使用 <code>router.push(/url)</code> 来跳转，使用了 diff 算法，实现了按需加载，减少了 dom 的消耗。</p><p>其实使用 <code>router</code> 跳转和使用 <code>history.pushState()</code> 没什么差别的，因为 <code>vue-router</code> 就是用了 <code>history.pushState()</code> ，尤其是在 history 模式下。</p><h2 id="vue3-和-vue2-路由的区别" tabindex="-1">Vue3 和 Vue2 路由的区别 <a class="header-anchor" href="#vue3-和-vue2-路由的区别" aria-label="Permalink to &quot;Vue3 和 Vue2 路由的区别&quot;">​</a></h2><h3 id="router-实例化方式" tabindex="-1">Router 实例化方式： <a class="header-anchor" href="#router-实例化方式" aria-label="Permalink to &quot;Router 实例化方式：&quot;">​</a></h3><p>在 Vue2 中，使用 VueRouter 实例来定义路由</p><p>而在 Vue3 中，使用<strong>createRouter</strong>函数来创建路由实例。</p><h3 id="history-模式" tabindex="-1">History 模式： <a class="header-anchor" href="#history-模式" aria-label="Permalink to &quot;History 模式：&quot;">​</a></h3><p>在 Vue3 中，对于<code>history</code>模式的路由，需要使用 <strong>createWebHistory</strong>函数来创建路由实例</p><p>在 Vue2 中则是直接配置 mode 参数为<code>history</code>。</p><h3 id="路由守卫" tabindex="-1">路由守卫： <a class="header-anchor" href="#路由守卫" aria-label="Permalink to &quot;路由守卫：&quot;">​</a></h3><p>在 Vue2 中，路由守卫是通过<code>router.beforeEach和router.afterEach</code>来实现的。</p><p>在 Vue3 中，路由守卫是通过<code>router.beforeRouteEnter、router.beforeRouteUpdate和router.beforeRouteLeave</code>来实现的。</p><h3 id="动态路由匹配" tabindex="-1">动态路由匹配： <a class="header-anchor" href="#动态路由匹配" aria-label="Permalink to &quot;动态路由匹配：&quot;">​</a></h3><p>在 Vue3 中，动态路由匹配的写法有所改变，需要使用<code>params</code>属性来获取动态参数</p><p>在 Vue2 中则是直接在 <code>$route.params</code> 中获取。</p><h2 id="createwebhistory-和-createwebhashhistory-的区别" tabindex="-1">createWebhistory 和 createwebhashhistory 的区别 <a class="header-anchor" href="#createwebhistory-和-createwebhashhistory-的区别" aria-label="Permalink to &quot;createWebhistory 和 createwebhashhistory 的区别&quot;">​</a></h2><p>在 Vue.js 中，Vue Router 是非常重要的路由管理工具，它提供了多种路由模式来满足不同的需求。其中，createWebHistory 和 createWebHashHistory 是两种常用的路由模式，它们在 URL 的处理方式上有着显著的区别。</p><h3 id="_1-createwebhistory" tabindex="-1">1. createWebHistory <a class="header-anchor" href="#_1-createwebhistory" aria-label="Permalink to &quot;1. createWebHistory&quot;">​</a></h3><p><strong>原理：</strong> createWebHistory 使用 HTML5 History API 来管理路由，它通过浏览器的 History API 来改变 URL，实现路由的跳转和管理。在使用 createWebHistory 时，URL 中的路由信息是以正常的路径形式呈现，不带有#号。</p><p><strong>应用场景：</strong></p><ul><li>适用于支持 HTML5 History API 的现代浏览器，如 Chrome、Firefox、Safari 等。</li><li>适用于需要更加友好的 URL 形式，不带有#号，更符合用户的预期和习惯。</li><li>适用于需要利用浏览器的前进和后退按钮进行导航的场景。</li></ul><p><strong>优点：</strong></p><ul><li>URL 更加美观，不带有#号，提升了用户体验。</li><li>支持 HTML5 History API，能够利用浏览器的前进和后退按钮进行导航。</li></ul><p><strong>缺点：</strong></p><ul><li>不兼容低版本的浏览器，需要特殊处理。</li><li>在部署时需要服务器端的配置支持，以避免刷新页面时出现 404 错误。</li></ul><h3 id="_2-createwebhashhistory" tabindex="-1">2. createWebHashHistory <a class="header-anchor" href="#_2-createwebhashhistory" aria-label="Permalink to &quot;2. createWebHashHistory&quot;">​</a></h3><p><strong>原理：</strong> createWebHashHistory 使用浏览器的 URL 的哈希（#）部分来管理路由，它通过监听浏览器的 hashchange 事件来实现路由的跳转和管理。在使用 createWebHashHistory 时，URL 中的路由信息是以哈希（#）的形式呈现。</p><p><strong>应用场景：</strong></p><ul><li>适用于兼容性要求较高的场景，哈希模式在大多数浏览器中都能正常工作。</li><li>适用于不支持 HTML5 History API 的浏览器，如 IE9 及以下版本。</li></ul><p><strong>优点：</strong></p><ul><li>兼容性较好，适用于大多数现代浏览器以及不支持 HTML5 History API 的旧版本浏览器。</li><li>不需要服务器端的特殊配置，可以直接部署上线。</li></ul><p><strong>缺点：</strong></p><ul><li>URL 带有#号，不够美观，可能会影响用户体验。</li><li>无法利用浏览器的前进和后退按钮进行导航，需要自行实现路由的导航逻辑。</li></ul><h3 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h3><p>createWebHistory 和 createWebHashHistory 是 Vue Router 提供的两种常用的路由模式，它们在 URL 的处理方式上有着显著的区别。createWebHistory 使用 HTML5 History API 来管理路由，URL 中不带有#号，适用于现代浏览器；而 createWebHashHistory 使用 URL 的哈希部分来管理路由，URL 中带有#号，兼容性较好，适用于不支持 HTML5 History API 的浏览器。</p><p>在实际开发中，根据项目的需求和目标浏览器的兼容性要求，合理选择适当的路由模式非常重要。如果项目不需要考虑兼容性问题，并且希望 URL 更加友好美观，可以选择 createWebHistory；如果项目需要兼容性较好，并且不介意 URL 中带有#号，可以选择 createWebHashHistory。</p><p>深入理解 createWebHistory 和 createWebHashHistory 的原理和应用场景，可以帮助我们更好地选择合适的路由模式，提升 Vue.js 应用的开发效率和用户体验。</p><h2 id="vue-router-有哪些组件" tabindex="-1">vue-router 有哪些组件？ <a class="header-anchor" href="#vue-router-有哪些组件" aria-label="Permalink to &quot;vue-router 有哪些组件？&quot;">​</a></h2><p><code>router-link</code>、<code>router-view</code></p><h2 id="如何处理-404-not-found-路由" tabindex="-1">如何处理 404 Not Found 路由 <a class="header-anchor" href="#如何处理-404-not-found-路由" aria-label="Permalink to &quot;如何处理 404 Not Found 路由&quot;">​</a></h2><p>在 Vue 中处理 404 Not Found 路由，通常涉及到使用 Vue Router 的动态路由匹配功能。这里有一些步骤和代码示例来帮助你设置 404 页面：</p><h3 id="_1-定义-404-组件" tabindex="-1">1.定义 404 组件： <a class="header-anchor" href="#_1-定义-404-组件" aria-label="Permalink to &quot;1.定义 404 组件：&quot;">​</a></h3><p>首先，你需要创建一个表示 404 错误的 Vue 组件，例如<code>NotFound.vue</code>。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;404，你的页面走丢了&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;NotFound&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_2-配置路由" tabindex="-1">2.配置路由： <a class="header-anchor" href="#_2-配置路由" aria-label="Permalink to &quot;2.配置路由：&quot;">​</a></h3><p>在你的路由配置文件中，添加一个通配符路由<code>*</code>或<code>/:catchAll(.*)</code>，并将其指向 404 组件。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> NotFound</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;@/views/NotFound.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> routes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...其他路由</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/:catchAll(.*)&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;NotFound&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">NotFound</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-使用路由守卫" tabindex="-1">3.使用路由守卫： <a class="header-anchor" href="#_3-使用路由守卫" aria-label="Permalink to &quot;3.使用路由守卫：&quot;">​</a></h3><p>你可以使用<code>router.beforeEach</code>守卫来检查用户是否访问了未定义的路由，并重定向到 404 页面。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">matched</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		next</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;NotFound&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_4-服务器配置" tabindex="-1">4.服务器配置： <a class="header-anchor" href="#_4-服务器配置" aria-label="Permalink to &quot;4.服务器配置：&quot;">​</a></h3><p>如果你使用的是单页应用(SPA)，你还需要确保服务器配置正确，以便所有的路由请求都返回到 Vue 的入口文件，然后由 Vue Router 处理路由。</p><p>以上步骤应该可以帮助你在 Vue 应用中处理 404 Not Found 路由。如果你需要更详细的指导或示例，Vue Router 的<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html" target="_blank" rel="noreferrer">官方文档</a>提供了全面的信息和指南。</p><h1 id="_5-2-vue-router-原理" tabindex="-1">5.2 Vue Router 原理 <a class="header-anchor" href="#_5-2-vue-router-原理" aria-label="Permalink to &quot;5.2 Vue Router 原理&quot;">​</a></h1><p>Vue Router 是 Vue.js 的官方路由管理库，用于实现单页面应用（SPA）中不同页面之间的切换。</p><h2 id="vue-router-原理和实现" tabindex="-1">Vue Router 原理和实现 <a class="header-anchor" href="#vue-router-原理和实现" aria-label="Permalink to &quot;Vue Router 原理和实现&quot;">​</a></h2><p>让我们深入了解一下 Vue Router 的工作原理。</p><h3 id="前端路由的核心原理" tabindex="-1">前端路由的核心原理 <a class="header-anchor" href="#前端路由的核心原理" aria-label="Permalink to &quot;前端路由的核心原理&quot;">​</a></h3><h4 id="什么是前端路由" tabindex="-1">什么是前端路由？ <a class="header-anchor" href="#什么是前端路由" aria-label="Permalink to &quot;什么是前端路由？&quot;">​</a></h4><p>在 Web 前端单页应用（SPA）中，路由描述了 URL 与页面之间的映射关系。这种映射是单向的，即 URL 变化引起 UI 更新，而无需刷新整个页面。</p><h4 id="如何实现前端路由" tabindex="-1">如何实现前端路由？ <a class="header-anchor" href="#如何实现前端路由" aria-label="Permalink to &quot;如何实现前端路由？&quot;">​</a></h4><p><code>前端路由</code>的本质就是监听 <code>URL</code> 的变化，然后匹配路由规则，显示相应的页面，并且无须刷新页面。</p><p>要实现前端路由，我们需要解决两个核心问题：</p><ol><li>如何改变 URL 但不引起页面刷新？</li><li>如何检测 URL 的变化？</li></ol><p>下面，我们分别使用 hash 和 history 两种实现方式来回答这两个问题。</p><h3 id="_1-基于-hash-的实现方式-对应-hashhistory" tabindex="-1">1. 基于 Hash 的实现方式（对应 HashHistory） <a class="header-anchor" href="#_1-基于-hash-的实现方式-对应-hashhistory" aria-label="Permalink to &quot;1. 基于 Hash 的实现方式（对应 HashHistory）&quot;">​</a></h3><p>hash（“#”）符号的本来作用是加在 URL 中指示网页中的位置：</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>http://www.example.com/index.html#print</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>#符号本身以及它后面的字符称之为 hash(也就是我之前为什么地址栏都会有一个‘#’)，可通过 window.location.hash 属性读取。它具有如下特点：</p><p>1.hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中。它是用来指导浏览器动作的，对服务器端完全无用，因此，改变 hash 不会重新加载页面</p><p>2.可以为 hash 的改变添加监听事件：</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>window.addEventListener(&quot;hashchange&quot;, funcRef, false)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.每一次改变 hash（window.location.hash），都会在浏览器的访问历史中增加一个记录</p><p>利用 hash 的以上特点，就可以来实现前端路由“更新视图但不重新请求页面”的功能了。</p><h3 id="_2-history-对应-html5history" tabindex="-1">2. History （对应 HTML5History） <a class="header-anchor" href="#_2-history-对应-html5history" aria-label="Permalink to &quot;2. History （对应 HTML5History）&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noreferrer">History</a>是浏览器历史记录栈提供的接口，通过 back(), forward(), go()等方法，我们可以读取浏览器历史记录栈的信息，进行各种跳转操作。</p><p>从 HTML5 开始，History interface 提供了两个新的方法：pushState(), replaceState()使得我们可以对浏览器历史记录栈进行修改：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stateObject</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stateObject</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>stateObject: 当浏览器跳转到新的状态时，将触发 popState 事件，该事件将携带这个 stateObject 参数的副本 title: 所添加记录的标题 URL: 所添加记录的 URL</p><h3 id="这两个方法有个共同的特点" tabindex="-1">这两个方法有个共同的特点： <a class="header-anchor" href="#这两个方法有个共同的特点" aria-label="Permalink to &quot;这两个方法有个共同的特点：&quot;">​</a></h3><p>当调用他们修改浏览器历史记录栈后，虽然当前 URL 改变了，但浏览器不会刷新页面，这就为单页应用前端路由“更新视图但不重新请求页面”提供了基础。 浏览器历史记录可以看作一个「栈」。</p><p>栈是一种后进先出的结构，可以把它想象成一摞盘子</p><ul><li>用户每点开一个新网页，都会在上面加一个新盘子，叫「入栈」。</li><li>用户每次点击「后退」按钮都会取走最上面的那个盘子，叫做「出栈」。而每次浏览器显示的自然是最顶端的盘子的内容。</li></ul><h3 id="❤vue-router-源码分析-❤" tabindex="-1">❤Vue Router 源码分析 ❤ <a class="header-anchor" href="#❤vue-router-源码分析-❤" aria-label="Permalink to &quot;❤Vue Router 源码分析 ❤&quot;">​</a></h3><h4 id="模式参数" tabindex="-1">模式参数 <a class="header-anchor" href="#模式参数" aria-label="Permalink to &quot;模式参数&quot;">​</a></h4><p>Vue Router 通过管理路由与组件的动态映射，实现了单页面应用的不同页面之间的切换。它监听 URL 变化，映射匹配的路由配置，然后渲染目标组件。各种路由钩子也让我们可以更好地控制路由导航。</p><p>在 Vue 项目中，我们可以选择使用 hash 模式或 history 模式。默认情况下，Vue Router 使用 hash 模式，但我们也可以通过设置<code>mode</code>属性来切换到 history 模式。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// mode: &#39;history&#39;, // 后端支持可开启</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">constantRouterMap</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// [...]</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>创建 VueRouter 的实例对象时，mode 以构造函数参数的形式传入。带着问题阅读源码，我们就可以从 VueRouter 类的定义入手。</p><p>一般插件对外暴露的类都是定义在源码 src 根目录下的 index.js 文件中，打开该文件，可以看到 VueRouter 类的定义，摘录与 mode 参数有关的部分如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> VueRouter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	mode</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 传入的字符串参数，指示history类别</span></span>
<span class="line"><span style="color:#E06C75;">	history</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HashHistory</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">HTML5History</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">AbstractHistory</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 实际起作用的对象属性，必须是以上三个类的枚举</span></span>
<span class="line"><span style="color:#E06C75;">	fallback</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 如浏览器不支持，&#39;history&#39;模式需回滚为&#39;hash&#39;模式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RouterOptions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> mode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mode</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;hash&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 默认为&#39;hash&#39;模式</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fallback</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> mode</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;history&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">supportsPushState</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 通过supportsPushState判断浏览器是否支持&#39;history&#39;模式</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fallback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			mode</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hash&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">inBrowser</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			mode</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;abstract&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 不在浏览器环境下运行需强制为&#39;abstract&#39;模式</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> mode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 根据mode确定history实际的类并实例化</span></span>
<span class="line"><span style="color:#C678DD;">		switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">mode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;history&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">history</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HTML5History</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;hash&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">history</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HashHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fallback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;abstract&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">history</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> AbstractHistory</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;production&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">					assert</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">\`invalid mode: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">mode</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	init</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#7F848E;font-style:italic;"> /* Vue component instance */</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> history</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 根据history的类别执行相应的初始化操作和监听</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">history</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> HTML5History</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getCurrentLocation</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">history</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> HashHistory</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#61AFEF;"> setupHashListener</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setupListeners</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#E5C07B;">			history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">				history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getCurrentLocation</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">				setupHashListener</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				setupHashListener</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">apps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				app</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">route</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> route</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// VueRouter类暴露的以下方法实际是调用具体history对象的方法</span></span>
<span class="line"><span style="color:#61AFEF;">	push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">location</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RawLocation</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">onComplete</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">onAbort</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onComplete</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onAbort</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">location</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RawLocation</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">onComplete</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">onAbort</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onComplete</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onAbort</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><h5 id="可以看出" tabindex="-1">可以看出： <a class="header-anchor" href="#可以看出" aria-label="Permalink to &quot;可以看出：&quot;">​</a></h5><ol><li><p>作为参数传入的字符串属性 mode 只是一个标记，用来指示实际起作用的对象属性 history 的实现类，两者对应关系如下：</p><p>modehistory&#39;history&#39;</p><p>HTML5History&#39;hash&#39;HashHistory</p><p>&#39;abstract&#39;AbstractHistory</p></li><li><p>在初始化对应的 history 之前，会对 mode 做一些校验：若浏览器不支持 HTML5History 方式（通过 supportsPushState 变量判断），则 mode 强制设为&#39;hash&#39;；若不是在浏览器环境下运行，则 mode 强制设为&#39;abstract&#39;</p></li><li><p>VueRouter 类中的 onReady(), push()等方法只是一个代理，实际是调用的具体 history 对象的对应方法，在 init()方法中初始化时，也是根据 history 对象具体的类别执行不同操作</p></li></ol><p>在浏览器环境下的两种方式，分别就是在 HTML5History，HashHistory 两个类中实现的。他们都定义在 src/history 文件夹下，继承自同目录下 base.js 文件中定义的 History 类。</p><p>这样就有了两种模式。确定好了 vue-router 使用哪种模式后，就到了 init。 先来看看 router 的 init 方法就干了哪些事情，在 <a href="https://github.com/vuejs/vue-router/blob/dev/src/index.js" target="_blank" rel="noreferrer">src/index.js</a> 中</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">any</span><span style="color:#7F848E;font-style:italic;"> /* Vue component instance */</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ....</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> history</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">history</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">history</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> HTML5History</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getCurrentLocation</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">history</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> HashHistory</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#61AFEF;"> setupHashListener</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setupListeners</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#E5C07B;">      history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">        history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getCurrentLocation</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">        setupHashListener</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        setupHashListener</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">apps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        app</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">route</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> route</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ....</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// VueRouter类暴露的以下方法实际是调用具体history对象的方法</span></span>
<span class="line"><span style="color:#61AFEF;">  push</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">RawLocation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onComplete</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onAbort</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onComplete</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onAbort</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  replace</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">RawLocation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onComplete</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onAbort</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onComplete</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onAbort</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>如果是 HTML5History，则执行</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getCurrentLocation</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果是 Hash 模式，则执行</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> setupHashListener</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setupListeners</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">	history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getCurrentLocation</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">	setupHashListener</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	setupHashListener</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>可以看出，两种模式都执行了 transitionTo( )函数。 接下来看一下两种模式分别是怎么执行的，首先看一下 Hash 模式</p><h4 id="hashhistory-push" tabindex="-1">HashHistory.push() <a class="header-anchor" href="#hashhistory-push" aria-label="Permalink to &quot;HashHistory.push()&quot;">​</a></h4><p>我们来看 HashHistory 中的 push()方法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">RawLocation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onComplete</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onAbort</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    pushHash</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullPath</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    onComplete</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> onComplete</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#E06C75;">onAbort</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> pushHash</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hash</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> path</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>transitionTo()方法是父类中定义的是用来处理路由变化中的基础逻辑的，push()方法最主要的是对 window 的 hash 进行了直接赋值：</p><p>window.location.hash = route.fullPath hash 的改变会自动添加到浏览器的访问历史记录中。</p><p>那么视图的更新是怎么实现的呢，我们来看父类 History 中 transitionTo()方法的这么一段：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">RawLocation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onComplete</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onAbort</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 调用 match 得到匹配的 route 对象</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> route</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">confirmTransition</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">updateRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">updateRoute</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Route</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cb</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cb</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cb</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cb</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cb</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>可以看到，当路由变化时，调用了 History 中的 this.cb 方法，而 this.cb 方法是通过 History.listen(cb)进行设置的。回到 VueRouter 类定义中，找到了在 init()方法中对其进行了设置：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">any</span><span style="color:#7F848E;font-style:italic;"> /* Vue component instance */</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">apps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">  history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">apps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">      app</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">route</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> route</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>代码中的 app 指的是 Vue 的实例，.route 本不是本身的组件中定义的内置属性，而是在 Vue.use(Router)加载 vue-router 插件的时候，通过 Vue.mixin()方法，全局注册一个混合，影响注册之后所有创建的每个 Vue 实例，该混合在 beforeCreate 钩子中通过 Vue.util.defineReactive()定义了响应式的<a href="./https//router.vuejs.org/zh-cn/api/route-object.html">route</a>)。</strong></p><p><strong>所谓响应式属性，即当_route 值改变时，会自动调用 Vue 实例的 render()方法，更新视图。vm.render()是根据当前的<a href="https://router.vuejs.org/zh-cn/api/route-object.html" target="_blank" rel="noreferrer">route</a>的 path，name 等属性，来将路由对应的组件渲染到<code>&lt;router-view&gt;&lt;/router-view&gt;</code></strong> <strong>所以总结下来，从路由改变到视图的更新流程如下：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">)  </span><span style="color:#56B6C2;">--&gt;</span><span style="color:#E5C07B;">  HashHistory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">--&gt;</span><span style="color:#E5C07B;">  History</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#56B6C2;">--&gt;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;">  route</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 会进行地址匹配，得到一个对应当前地址的route(路由信息对象)</span></span>
<span class="line"><span style="color:#56B6C2;">--&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">History</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">updateRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">route</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">route</span><span style="color:#7F848E;font-style:italic;"> // (Vue实例的_route改变)   由于_route属性是采用vue的数据劫持，当_route的值改变时，会执行响应的render( )</span></span>
<span class="line"><span style="color:#56B6C2;">--</span><span style="color:#56B6C2;"> &gt;</span></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">()   </span><span style="color:#7F848E;font-style:italic;">// 具体是在&lt;router-view&gt;&lt;/router-view&gt; 中render</span></span>
<span class="line"><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hash</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullpath</span><span style="color:#7F848E;font-style:italic;"> // (浏览器地址栏显示新的路由的path)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="hashhistory-replace" tabindex="-1">HashHistory.replace() <a class="header-anchor" href="#hashhistory-replace" aria-label="Permalink to &quot;HashHistory.replace()&quot;">​</a></h4><p>说完了 HashHistory.push()，该说 HashHistory.replace()了。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">RawLocation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onComplete</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onAbort</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    replaceHash</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullPath</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    onComplete</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> onComplete</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#E06C75;">onAbort</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> replaceHash</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">href</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">  window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">    window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">href</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> i</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39;#&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> path</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>可以看出来，HashHistory.replace 它与 push()的实现结构上基本相似，不同点在于它不是直接对 window.location.hash 进行赋值，而是调用 window.location.replace 方法将路由进行替换。这样不会将新路由添加到浏览器访问历史的栈顶，而是替换掉当前的路由。</p><h4 id="监听地址栏" tabindex="-1">监听地址栏 <a class="header-anchor" href="#监听地址栏" aria-label="Permalink to &quot;监听地址栏&quot;">​</a></h4><p>可以看出来，上面的过程都是在代码内部进行路由的改变的，比如项目中常见的<code>this.$router.push()</code>，<code>&lt;router-link to=&#39;&#39;&gt;</code>等方法。</p><p>然后将浏览器的地址栏置为新的 hash 值。那么如果直接在地址栏中输入 URL 从而改变路由呢，例如</p><p><img src="`+q+`" alt="image-20240507191431260"></p><p>我将 dashboadr 删除，然后置为 article/hotSpot，然后回车，vue 又是如何处理的呢？</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">setupListeners</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">  window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hashchange&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">ensureSlash</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getHash</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">      replaceHash</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullPath</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>该方法设置监听了浏览器事件 hashchange，调用的函数为 replaceHash，即在浏览器地址栏中直接输入路由相当于代码调用了 replace()方法.后面的步骤自然与 HashHistory.replace()相同，一样实现页面渲染。</p><h4 id="html5history" tabindex="-1">HTML5History <a class="header-anchor" href="#html5history" aria-label="Permalink to &quot;HTML5History&quot;">​</a></h4><p>History interface 是浏览器历史记录栈提供的接口，通过 back(), forward(), go()等方法，我们可以读取浏览器历史记录栈的信息，进行各种跳转操作。</p><p>从 HTML5 开始，History interface 提供了两个新的方法：pushState(), replaceState()使得我们可以对浏览器历史记录栈进行修改：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stateObject</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stateObject</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>stateObject: 当浏览器跳转到新的状态时，将触发 popState 事件，该事件将携带这个 stateObject 参数的副本</li><li>title: 所添加记录的标题</li><li>URL: 所添加记录的 URL</li></ul><p>这两个方法有个共同的特点：当调用他们修改浏览器历史记录栈后，虽然当前 URL 改变了，但浏览器不会立即发送请求该 URL（the browser won&#39;t attempt to load this URL after a call to pushState()），这就为单页应用前端路由“更新视图但不重新请求页面”提供了基础。</p><p>我们来看 vue-router 中的源码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">RawLocation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onComplete</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onAbort</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">fromRoute</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    pushState</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">cleanPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullPath</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#61AFEF;">    handleScroll</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fromRoute</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    onComplete</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> onComplete</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#E06C75;">onAbort</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">RawLocation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onComplete</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onAbort</span><span style="color:#C678DD;">?:</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">fromRoute</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    replaceState</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">cleanPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullPath</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#61AFEF;">    handleScroll</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fromRoute</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    onComplete</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> onComplete</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#E06C75;">onAbort</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// src/util/push-state.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> pushState</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">replace</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">  saveScrollPosition</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // try...catch the pushState call to get around Safari</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // DOM Exception 18 where it limits to 100 pushState calls</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> history</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">history</span></span>
<span class="line"><span style="color:#C678DD;">  try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">replace</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">_key</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      _key</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> genKey</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">      history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushState</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">_key</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">replace</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &#39;replace&#39;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &#39;assign&#39;</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> replaceState</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">  pushState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>HTML5History 模式的 vue-router 代码结构以及更新视图的逻辑与 hash 模式基本类似，和 HashHistory 的步骤基本一致，只是 HashHistory 的 push 和 replace()变成了<code>HTML5History.pushState()</code>和<code>HTML5History.replaceState()</code></p><p>对 window.location.hash 直接进行赋值 window.location.replace()改为了调用 history.pushState()和 history.replaceState()方法。</p><p>在 HTML5History 中添加对修改浏览器地址栏 URL 的监听是直接在构造函数中执行的，对 HTML5History 的 popstate 事件进行监听：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">constructor</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Router</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  window.addEventListener(</span><span style="color:#98C379;">&#39;popstate&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transitionTo</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getLocation</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">expectScroll</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        handleScroll</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>当然了 HTML5History 用到了 HTML5 的新特特性，是需要特定浏览器版本的支持的，前文已经知道，浏览器是否支持是通过变量 supportsPushState 来检查的：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// src/util/push-state.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> supportsPushState</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E06C75;">	inBrowser</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> ua</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userAgent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			(</span><span style="color:#E5C07B;">ua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Android 2.&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> ua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Android 4.0&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">			ua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Mobile Safari&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">			ua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Chrome&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">			ua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Windows Phone&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">		) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">history</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#98C379;"> &quot;pushState&quot;</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>以上就是 hash 模式与 history 模式源码的导读，这两种模式都是通过浏览器接口实现的，除此之外 vue-router 还为非浏览器环境准备了一个 abstract 模式，其原理为用一个数组 stack 模拟出浏览器历史记录栈的功能。当然，以上只是一些核心逻辑</p><h4 id="两种模式比较-1" tabindex="-1">两种模式比较 <a class="header-anchor" href="#两种模式比较-1" aria-label="Permalink to &quot;两种模式比较&quot;">​</a></h4><p>hash 模式 会在浏览器的 URL 中加入&#39;#&#39;，而 HTM5History 就没有&#39;#&#39;号，URL 和正常的 URL 一样。 另外： history.pushState()相比于直接修改 hash 主要有以下优势：</p><ol><li>pushState 设置的新 URL 可以是与当前 URL 同源的任意 URL；而 hash 只可修改#后面的部分，故只可设置与当前同文档的 URL</li><li>pushState 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中；而 hash 设置的新值必须与原来不一样才会触发记录添加到栈中</li><li>pushState 通过 stateObject 可以添加任意类型的数据到记录中；而 hash 只可添加短字符串</li><li>pushState 可额外设置 title 属性供后续使用</li></ol><h5 id="history-模式的一个问题" tabindex="-1">history 模式的一个问题 <a class="header-anchor" href="#history-模式的一个问题" aria-label="Permalink to &quot;history 模式的一个问题&quot;">​</a></h5><p>我们知道对于单页应用来讲，理想的使用场景是仅在进入应用时加载 index.html，后续在的网络操作通过 Ajax 完成，不会根据 URL 重新请求页面，但是难免遇到特殊情况，比如用户直接在地址栏中输入并回车，浏览器重启重新加载应用等。</p><p>hash 模式仅改变 hash 部分的内容，而 hash 部分是不会包含在 HTTP 请求中的：</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>http://oursite.com/#/user/id   // 如重新请求只会发送http://oursite.com/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>故在 hash 模式下遇到根据 URL 请求页面的情况不会有问题。</p><p>而 history 模式则会将 URL 修改得就和正常请求后端的 URL 一样</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>http://oursite.com/user/id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在此情况下重新向后端发送请求，如后端没有配置对应/user/id 的路由处理，则会返回 404 错误。官方推荐的解决办法是在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。同时这么做以后，服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件。</p><p>为了避免这种情况，在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。或者，如果是用 Node.js 作后台，可以使用服务端的路由来匹配 URL，当没有匹配到路由的时候返回 404，从而实现 fallback。</p><h2 id="如果让你从零开始写一个-vue-路由-说说你的思路" tabindex="-1">如果让你从零开始写一个 vue 路由，说说你的思路 <a class="header-anchor" href="#如果让你从零开始写一个-vue-路由-说说你的思路" aria-label="Permalink to &quot;如果让你从零开始写一个 vue 路由，说说你的思路&quot;">​</a></h2><h3 id="思路分析-1" tabindex="-1">思路分析： <a class="header-anchor" href="#思路分析-1" aria-label="Permalink to &quot;思路分析：&quot;">​</a></h3><p>首先思考 vue 路由要解决的问题：用户点击跳转链接内容切换，页面不刷新。</p><ul><li>借助 hash 或者 history api 实现 url 跳转页面不刷新</li><li>同时监听 hashchange 事件或者 popstate 事件处理跳转</li><li>根据 hash 值或者 state 值从 routes 表中匹配对应 component 并渲染之</li></ul><hr><h3 id="回答范例-7" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-7" aria-label="Permalink to &quot;回答范例：&quot;">​</a></h3><p>一个 SPA 应用的路由需要解决的问题是<strong>页面跳转内容改变同时不刷新</strong>，同时路由还需要以插件形式存在，所以：</p><ol><li><p>首先我会定义一个</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>createRouter</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>函数，返回路由器实例，实例内部做几件事：</p><ul><li>保存用户传入的配置项</li><li>监听 hash 或者 popstate 事件</li><li>回调里根据 path 匹配对应路由</li></ul></li><li><p>将 router 定义成一个 Vue 插件，即实现 install 方法，内部做两件事：</p><ul><li>实现两个全局组件：router-link 和 router-view，分别实现页面跳转和内容显示</li><li>定义两个全局变量：$route和$router，组件内可以访问当前路由和路由器实例</li></ul></li></ol><hr><h3 id="知其所以然-5" tabindex="-1">知其所以然： <a class="header-anchor" href="#知其所以然-5" aria-label="Permalink to &quot;知其所以然：&quot;">​</a></h3><ul><li>createRouter 如何创建实例</li></ul><p><a href="https://github1s.com/vuejs/router/blob/HEAD/src/router.ts%23L355-L356" target="_blank" rel="noreferrer">github1s.com/vuejs/route…</a></p><ul><li>事件监听</li></ul><p><a href="https://github1s.com/vuejs/router/blob/HEAD/src/history/html5.ts%23L314-L315" target="_blank" rel="noreferrer">github1s.com/vuejs/route…</a> RouterView</p><ul><li>页面跳转 RouterLink</li></ul><p><a href="https://github1s.com/vuejs/router/blob/HEAD/src/RouterLink.ts%23L184-L185" target="_blank" rel="noreferrer">github1s.com/vuejs/route…</a></p><ul><li>内容显示 RouterView</li></ul><p><a href="https://github1s.com/vuejs/router/blob/HEAD/src/RouterView.ts%23L43-L44" target="_blank" rel="noreferrer">github1s.com/vuejs/route…</a></p><h2 id="vue-router-路由的两个模式的原理和实现" tabindex="-1">Vue Router 路由的两个模式的原理和实现 <a class="header-anchor" href="#vue-router-路由的两个模式的原理和实现" aria-label="Permalink to &quot;Vue Router 路由的两个模式的原理和实现&quot;">​</a></h2><h3 id="hash-模式" tabindex="-1">hash 模式 <a class="header-anchor" href="#hash-模式" aria-label="Permalink to &quot;hash 模式&quot;">​</a></h3><ul><li>hash 变化会触发网页跳转，即浏览器的前进、后退</li><li>hash 变化不会刷新页面，SPA 必需的特点</li><li>hash 永远不会提交到 server 端(前端自生自灭)</li></ul><h3 id="实现-hash-路由" tabindex="-1">实现 hash 路由 <a class="header-anchor" href="#实现-hash-路由" aria-label="Permalink to &quot;实现 hash 路由&quot;">​</a></h3><p>MDN 的<code>location.hash</code>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/hash" target="_blank" rel="noreferrer">Location: hash - Web API 接口参考 | MDN (mozilla.org)</a></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ie=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;hash test&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;hash test&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;btn1&quot;</span><span style="color:#ABB2BF;">&gt;修改 hash&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// hash 变化，包括：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// a. JS 修改 url</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// b. 手动修改 url 的 hash</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// c. 浏览器前进、后退</span></span>
<span class="line"><span style="color:#E5C07B;">			window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onhashchange</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;old url&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">oldURL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;new url&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">newURL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hash:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hash</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 页面初次加载，获取 hash</span></span>
<span class="line"><span style="color:#E5C07B;">			document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;DOMContentLoaded&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hash:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hash</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// JS 修改 url</span></span>
<span class="line"><span style="color:#E5C07B;">			document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;btn1&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">href</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;#/user&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h3 id="history-模式-1" tabindex="-1">history 模式 <a class="header-anchor" href="#history-模式-1" aria-label="Permalink to &quot;history 模式&quot;">​</a></h3><ul><li><a href="https://github.com/xxx" target="_blank" rel="noreferrer">https://github.com/xxx</a> 刷新页面</li><li><a href="https://github.com/xxx/yyy" target="_blank" rel="noreferrer">https://github.com/xxx/yyy</a> 前端跳转，不刷新页面</li><li><a href="https://github.com/xxx/yyy/zzz" target="_blank" rel="noreferrer">https://github.com/xxx/yyy/zzz</a> 前端跳转，不刷新页面</li></ul><h3 id="实现-history-路由" tabindex="-1">实现 history 路由 <a class="header-anchor" href="#实现-history-路由" aria-label="Permalink to &quot;实现 history 路由&quot;">​</a></h3><p>MDN history API 文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noreferrer">History - Web API 接口参考 | MDN (mozilla.org)</a></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ie=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;history API test&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;history API test&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;btn1&quot;</span><span style="color:#ABB2BF;">&gt;修改 url&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 页面初次加载，获取 path</span></span>
<span class="line"><span style="color:#E5C07B;">			document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;DOMContentLoaded&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;load&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pathname</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 打开一个新的路由</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 【注意】用 pushState 方式，浏览器不会刷新页面</span></span>
<span class="line"><span style="color:#E5C07B;">			document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;btn1&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;page1&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;切换路由到&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;page1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;page1&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 重要！！</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 监听浏览器前进、后退</span></span>
<span class="line"><span style="color:#E5C07B;">			window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onpopstate</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 重要！！</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;onpopstate&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pathname</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 需要 server 端配合，可参考</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h3 id="总结-3" tabindex="-1">总结 <a class="header-anchor" href="#总结-3" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>hash - window.onhashchange</li><li>H5 history - <code>history.pushState</code> 和 <code>window.onpopstate</code></li><li>H5 history 需要后端支持</li></ul><h3 id="两者选择" tabindex="-1">两者选择 <a class="header-anchor" href="#两者选择" aria-label="Permalink to &quot;两者选择&quot;">​</a></h3><ul><li>to B 的系统，推荐用 hash，简单易用，对 url 规范不敏感</li><li>to C 的系统，可以考虑选择 H5 history，但需要服务端支持</li><li>能选择简单的，就别用复杂的，要考虑成本和收益</li></ul><h2 id="路由实现原理" tabindex="-1">路由实现原理 <a class="header-anchor" href="#路由实现原理" aria-label="Permalink to &quot;路由实现原理&quot;">​</a></h2><p>涉及面试题：前端路由原理？两种实现方式有什么区别？</p><p>前端路由实现起来其实很简单，本质就是监听 URL 的变化，然后匹配路由规 则，显示相应的页面，并且无须刷新页面。目前前端使用的路由就只有两种实 现方式</p><h3 id="_1-hash-模式" tabindex="-1">1.Hash 模式 <a class="header-anchor" href="#_1-hash-模式" aria-label="Permalink to &quot;1.Hash 模式&quot;">​</a></h3><p>www.test.com/#/ 就是 Hash URL ，当 # 后面的哈希值发生变化时，可以通过 hashchange 事件来监听到 URL 的变化，从而进行跳转页面，并且无论哈希值如何变化，服务端接收到的 URL 请求永远是：www.test.com</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hashchange&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ... 具体逻辑</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Hash 模式相对来说更简单，并且兼容性也更好</p><h3 id="_2-history-模式" tabindex="-1">2.History 模式 <a class="header-anchor" href="#_2-history-模式" aria-label="Permalink to &quot;2.History 模式&quot;">​</a></h3><p>History 模式是 HTML5 新推出的功能，主要使用 history.pushState 和 history.replaceState 改变 URL</p><p>通过 History 模式改变 URL 同样不会引起页面的刷新，只会更新浏览器的历史记录。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 新增历史记录</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pushState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stateObject</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 替换当前历史记录</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stateObject</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当用户做出浏览器动作时，比如点击后退按钮时会触发 popState 事件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;popstate&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// e.state 就是 pushState(stateObject) 中的 stateObject</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="两种模式对比" tabindex="-1">两种模式对比 <a class="header-anchor" href="#两种模式对比" aria-label="Permalink to &quot;两种模式对比&quot;">​</a></h3><ul><li><strong>Hash</strong> 模式只可以更改 # 后面的内容， History 模式可以通过 API 设置任意的同源 URL</li><li><strong>History</strong> 模式可以通过 API 添加任意类型的数据到历史记录中， Hash 模式只能更改哈希值，也就是字符串</li><li><strong>Hash</strong> 模式无需后端配置，并且兼容性好。 History 模式在用户手动输入地址或者刷新页面的时候会发起 URL 请求，后端需要配置 index.html 页面用于匹配不到静态资源的时候</li></ul><h2 id="如何监听-pushstate-和-replacestate-的变化呢" tabindex="-1">如何监听 pushstate 和 replacestate 的变化呢？ <a class="header-anchor" href="#如何监听-pushstate-和-replacestate-的变化呢" aria-label="Permalink to &quot;如何监听 pushstate 和 replacestate 的变化呢？&quot;">​</a></h2><p><code>History.replaceState</code> 和 <code>pushState</code> 不会触发 <code>popstate</code> 事件，所以我们可以通过在方法中创建一个新的全局事件来实现 <code>pushstate</code> 和 <code>replacestate</code> 变化的监听。</p><p>具体做法为：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> _wr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> orig</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> history</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> rv</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> orig</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Event</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">arguments</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatchEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> rv</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pushState</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> _wr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;pushState&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">replaceState</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> _wr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;replaceState&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这样就创建了 <em>2</em> 个全新的事件，事件名为 <code>pushState</code> 和 <code>replaceState</code>，我们就可以在全局监听：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;replaceState&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;THEY DID IT AGAIN! replaceState 111111&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;pushState&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;THEY DID IT AGAIN! pushState 2222222&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这样就可以监听到 <code>pushState</code> 和 <code>replaceState</code> 行为。</p><h2 id="说一下-vue-路由或前端路由实现原理" tabindex="-1">说一下 vue 路由或前端路由实现原理 <a class="header-anchor" href="#说一下-vue-路由或前端路由实现原理" aria-label="Permalink to &quot;说一下 vue 路由或前端路由实现原理&quot;">​</a></h2><p>答：前端路由实现原理主要通过以下两种技术实现的</p><p>第一种：利用 H5 的 history API 实现</p><p>主要通过 history.pushState 和 history.replaceState 来实现，不同之处在于，pushState 会增加一条新的历史记录，而 replaceState 则会替换当前的历史记录[发布项目时,需要配置下 apache]</p><p>第二种：利用 url 的 hash 实现</p><p>我们经常在 url 中看到 #，这个 # 有两种情况，一个是我们所谓的锚点，路由里的 # 不叫锚点，我们称之为 hash，我们说的就是 hash,主要利用监听哈希值的变化来触发事件 —— hashchange 事件来做页面局部更新</p><p>总结：hash 方案兼容性好，而 H5 的 history 主要针对高级浏览器。</p><p>以下为具体的 API 的区别:</p><p>this.$router.push(location, onComplete?, onAbort?)这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。并且点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code>等同于调用 router.push(...)。</p><p>this.$router.replace(location, onComplete?, onAbort?)这个方法不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录，所以，当用户点击浏览器后退按钮时，并不会回到之前的 URL。</p><p>this.$router.go(n)这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。</p><p>以上也可能会形成一个新的面试题:<strong>replace 和 push 的区别</strong></p><p><strong>可以说,以前在一个项目里面配置了一个二级路由,里面有 tab 切换部分(详情,评价,说明),因为返回上一页的时候,不能在这几个选项卡之间来回切换.所以我使用了 this.$router.replace 方法,不计入 history 记录中,所以不会出现,反复切换的 bug</strong></p><h2 id="路由守卫原理" tabindex="-1">路由守卫原理 <a class="header-anchor" href="#路由守卫原理" aria-label="Permalink to &quot;路由守卫原理&quot;">​</a></h2><p><code>runGuardQueue(guards)</code>链式的执行用户在各级别注册的守卫钩子函数，通过则继续下一个级别的守卫，不通过进入<code>catch</code>流程取消原本导航</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 源码</span></span>
<span class="line"><span style="color:#61AFEF;">runGuardQueue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">guards</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// check global guards beforeEach</span></span>
<span class="line"><span style="color:#E06C75;">		guards</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> guard</span><span style="color:#C678DD;"> of</span><span style="color:#E5C07B;"> beforeGuards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">			guards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">guardToPromiseFn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">guard</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		guards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">canceledNavigationCheck</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> runGuardQueue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">guards</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// check in components beforeRouteUpdate</span></span>
<span class="line"><span style="color:#E06C75;">		guards</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> extractComponentsGuards</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">			updatingRecords</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">			&quot;beforeRouteUpdate&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			to</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			from</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> record</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> updatingRecords</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			record</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">updateGuards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">guard</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				guards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">guardToPromiseFn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">guard</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		guards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">canceledNavigationCheck</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// run the queue of per route beforeEnter guards</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> runGuardQueue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">guards</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// check the route beforeEnter</span></span>
<span class="line"><span style="color:#E06C75;">		guards</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> record</span><span style="color:#C678DD;"> of</span><span style="color:#E5C07B;"> to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">matched</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// do not trigger beforeEnter on reused views</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">record</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">beforeEnter</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">matched</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">record</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">record</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">beforeEnter</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">					for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> beforeEnter</span><span style="color:#C678DD;"> of</span><span style="color:#E5C07B;"> record</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">beforeEnter</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">						guards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">guardToPromiseFn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">beforeEnter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">					guards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">guardToPromiseFn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">record</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">beforeEnter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		guards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">canceledNavigationCheck</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// run the queue of per route beforeEnter guards</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> runGuardQueue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">guards</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// NOTE: at this point to.matched is normalized and does not contain any () =&gt; Promise&lt;Component&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// clear existing enterCallbacks, these are added by extractComponentsGuards</span></span>
<span class="line"><span style="color:#E5C07B;">		to</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">matched</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">record</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">record</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">enterCallbacks</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// check in-component beforeRouteEnter</span></span>
<span class="line"><span style="color:#E06C75;">		guards</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> extractComponentsGuards</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">			enteringRecords</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">			&quot;beforeRouteEnter&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			to</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			from</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#E5C07B;">		guards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">canceledNavigationCheck</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// run the queue of per route beforeEnter guards</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> runGuardQueue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">guards</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// check global guards beforeResolve</span></span>
<span class="line"><span style="color:#E06C75;">		guards</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> guard</span><span style="color:#C678DD;"> of</span><span style="color:#E5C07B;"> beforeResolveGuards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">			guards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">guardToPromiseFn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">guard</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		guards</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">canceledNavigationCheck</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> runGuardQueue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">guards</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// catch any navigation canceled</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">		isNavigationFailure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ErrorTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NAVIGATION_CANCELLED</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			?</span><span style="color:#E06C75;"> err</span></span>
<span class="line"><span style="color:#C678DD;">			:</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><p>源码位置：<a href="https://github1s.com/vuejs/router/blob/HEAD/packages/router/src/router.ts#L808-L809" target="_blank" rel="noreferrer">router.ts - vuejs/router - GitHub1s</a></p><h1 id="六、vuex" tabindex="-1">六、Vuex <a class="header-anchor" href="#六、vuex" aria-label="Permalink to &quot;六、Vuex&quot;">​</a></h1><p><strong>Vuex 官网文档</strong>：<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noreferrer">Vuex 是什么？ | Vuex (vuejs.org)</a></p><ul><li>状态管理和 Store 概念</li><li>State、Getters、Mutations、Actions</li><li>模块化和命名空间</li></ul><p><strong>Vuex 的 GitHub 地址</strong>：<a href="https://github.com/vuejs/vuex" target="_blank" rel="noreferrer">https://github.com/vuejs/vuex</a></p><h2 id="vuex-版本相关" tabindex="-1">Vuex 版本相关 <a class="header-anchor" href="#vuex-版本相关" aria-label="Permalink to &quot;Vuex 版本相关&quot;">​</a></h2><p>文档：<a href="https://vuex.vuejs.org/zh/guide/migrating-to-4-0-from-3-x.html" target="_blank" rel="noreferrer">https://vuex.vuejs.org/zh/guide/migrating-to-4-0-from-3-x.html</a></p><p>Vuex3 和 Vuex4 之间有一些关键的区别，主要包括：</p><ol><li><strong>安装过程</strong>的变化：为了与 Vue 3 的初始化过程保持一致，Vuex 4 的安装方式发生了变化。现在应该使用<code>createStore</code>方法来创建 store 实例。</li><li><strong>TypeScript 支持</strong>的改进：Vuex 4 删除了<code>this.$store</code>在 Vue 组件中的全局类型声明，需要开发者声明自己的模块补充。</li><li><strong>打包产物</strong>的更新：Vuex 4 的打包产物已经与 Vue 3 配套，例如全局构建为 IIFE 而不是 UMD，并且生产环境版本已经压缩过。</li><li><strong>新特性</strong>：Vuex 4 引入了新的 API，如<code>useStore</code>组合式函数，用于在组合式 API 中与 store 进行交互。</li><li><strong>响应性控制</strong>的改进：Vuex 4 通过引入<code>markRaw</code>和<code>shallowRef</code>的概念，对响应性进行了进一步改进，使得状态管理更加精细和高效。</li><li><strong>插件接口</strong>的改进：Vuex 4 中，插件是通过<code>store</code>的<code>subscribe</code>方法来实现的，这种插件接口比较简单，只能监听全部的状态变化。</li></ol><p>总的来说，Vuex 4 相比于 Vuex 3 提供了更多功能和性能上的改进，并且更适配 Vue 3 的特性。如果你正在使用 Vue 3，那么 Vuex 4 将是更好的选择。</p><p>如果你还在使用 Vue 2，那么可以继续使用 Vuex 3，直到你准备好迁移到 Vue 3。</p><h2 id="vuex-的基本使用" tabindex="-1">Vuex 的基本使用 <a class="header-anchor" href="#vuex-的基本使用" aria-label="Permalink to &quot;Vuex 的基本使用&quot;">​</a></h2><ul><li>state : 状态中⼼</li><li>mutations : 更改状态</li><li>actions : 异步更改状态</li><li>getters : 获取状态</li><li>modules : 将 state 分成多个 modules ，便于管理</li></ul><p>在 Vue 中使用：</p><ul><li><p>dispatch</p></li><li><p>commit</p></li><li><p>mapState</p></li><li><p>mapGetters</p></li><li><p>mapActions</p></li><li><p>mapMutations</p></li></ul><h3 id="_1-vuex-介绍" tabindex="-1">1 vuex 介绍 <a class="header-anchor" href="#_1-vuex-介绍" aria-label="Permalink to &quot;1 vuex 介绍&quot;">​</a></h3><p>Vuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过 Mutation 提交修改信息， Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。</p><p>而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走 Action ，但 Action 也是无法直接修改 State 的，还是需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。</p><h3 id="_2-vuex-中核心概念" tabindex="-1">2 vuex 中核心概念 <a class="header-anchor" href="#_2-vuex-中核心概念" aria-label="Permalink to &quot;2 vuex 中核心概念&quot;">​</a></h3><p><code>state</code> ： vuex 的唯一数据源，如果获取多个 state ，可以使用 ...mapState 。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 注意Store的S大写</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;!-- 状态储存 --&gt;</span></span>
<span class="line"><span style="color:#E06C75;">    state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        productList</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">            {</span></span>
<span class="line"><span style="color:#E06C75;">                name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;goods 1&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                price</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        ]</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>getter</code> : 可以将 getter 理解为计算属性， getter 的返回值根据他的依赖缓存起来，依赖发生变化才会被重新计算。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vuex</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vuex&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vuex</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		productList</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#E06C75;">				name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;goods 1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				price</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		],</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 辅助对象 mapGetter</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		getSaledPrice</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> saleProduct</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">productList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">					name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;**&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;**&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					price</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">price</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				};</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> saleProduct</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>获取 getter 计算后的值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取getter计算后的值</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			productList</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getSaledPrice</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>mutation</code> ：更改 state 中唯一的方法是提交 mutation 都有一个字符串和一个回调函数。回调函数就是使劲进行状态修改的地方。并且会接收 state 作为第一个参数 payload 为第二个参数， payload 为自定义函数， mutation 必须是同步函数。</p><p>辅助对象 mapMutations</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 辅助对象 mapMutations</span></span>
<span class="line"><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#56B6C2;">    &lt;!--</span><span style="color:#E06C75;"> payload</span><span style="color:#E06C75;"> 为自定义函数名</span><span style="color:#56B6C2;">--&gt;</span></span>
<span class="line"><span style="color:#E06C75;">    reducePrice</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">productList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">product</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        	product</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">price</span><span style="color:#56B6C2;"> -=</span><span style="color:#E06C75;"> payload</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>页面使用</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">methods: { reducePrice(){ this.$store.commit(&#39;reducePrice&#39;, 4) } }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>action</code> ： action 类似 mutation 都是修改状态，不同之处,</p><blockquote><p>action 提交的 mutation 不是直接修改状态 action 可以包含异步操作，而 mutation 不行 action 中的回调函数第一个参数是 context ，是一个与 store 实例具有相同属性的 方法的对象 action 通过 store.dispatch 触发， mutation 通过 store.commit 提交</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 提交的是mutation，可以包含异步操作</span></span>
<span class="line"><span style="color:#E06C75;">	reducePriceAsync</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;reducePrice&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// reducePrice为上一步mutation中的属性</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>页面使用</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// 辅助对象 mapActions methods: { reducePriceAsync(){</span></span>
<span class="line"><span style="color:#ABB2BF;">this.$store.dispatch(&#39;reducePriceAsync&#39;, 2) }, }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>module</code> ：由于是使用单一状态树，应用的所有状态集中到比较大的对象，当应用变得非常复杂是， store 对象就有可能变得相当臃肿。为了解决以上问题， vuex 允许我们将 store 分割成模块，每个模块拥有自己的 state,mutation,action,getter ,甚至是嵌套子模块从上至下进行同样方式分割。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> moduleA</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    state</span><span style="color:#ABB2BF;">: {...},</span></span>
<span class="line"><span style="color:#E06C75;">    mutations</span><span style="color:#ABB2BF;">: {...},</span></span>
<span class="line"><span style="color:#E06C75;">    actions</span><span style="color:#ABB2BF;">: {...},</span></span>
<span class="line"><span style="color:#E06C75;">    getters</span><span style="color:#ABB2BF;">: {...}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> moduleB</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    state</span><span style="color:#ABB2BF;">: {...},</span></span>
<span class="line"><span style="color:#E06C75;">    mutations</span><span style="color:#ABB2BF;">: {...},</span></span>
<span class="line"><span style="color:#E06C75;">    actions</span><span style="color:#ABB2BF;">: {...},</span></span>
<span class="line"><span style="color:#E06C75;">    getters</span><span style="color:#ABB2BF;">: {...}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">moduleA</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    b</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">moduleB</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_3-vuex-中数据存储-localstorage" tabindex="-1">3 vuex 中数据存储 localStorage <a class="header-anchor" href="#_3-vuex-中数据存储-localstorage" aria-label="Permalink to &quot;3 vuex 中数据存储 localStorage&quot;">​</a></h3><p>vuex 是 vue 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，具体做法应该在 vuex 里数据改变的时候把数据拷贝一份保存到 localStorage 里面，刷新之后，如果 localStorage 里有保存的数据，取出来再替换 store 里的 state 。</p><p>例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> defaultCity</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;上海&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 用户关闭了本地存储功能，此时在外层加个try...catch</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">defaultCity</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// f复制一份</span></span>
<span class="line"><span style="color:#E06C75;">		defaultCity</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;defaultCity&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		city</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">defaultCity</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		changeCity</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">city</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">city</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> city</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;defaultCity&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 数据改变的时候把数据拷贝一份保存到localStorage里面</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>注意：vuex 里保存的状态，都是数组，而 localStorage 只支持字符串。</p><h3 id="总结-4" tabindex="-1">总结： <a class="header-anchor" href="#总结-4" aria-label="Permalink to &quot;总结：&quot;">​</a></h3><ul><li>首先说明 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所</li><li>有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li><li>vuex 核心概念 重点同步异步实现 action mutation</li><li>vuex 中做数据存储 --------- local storage</li><li>如何选用 vuex</li></ul><h1 id="_6-1-vuex-面试题" tabindex="-1">6.1 Vuex 面试题 <a class="header-anchor" href="#_6-1-vuex-面试题" aria-label="Permalink to &quot;6.1 Vuex 面试题&quot;">​</a></h1><h2 id="vuex-是什么" tabindex="-1">Vuex 是什么？ <a class="header-anchor" href="#vuex-是什么" aria-label="Permalink to &quot;Vuex 是什么？&quot;">​</a></h2><p>Vuex 是专门为 Vuejs 官方设计提供的应用程序集中式管理的状态管理工具。采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化</p><p>简单来说，就是用来集中管理数据；</p><p><code>Vuex</code>实现了一个单向数据流，在全局拥有一个<code>State</code>存放数据，当组件要更改<code>State</code>中的数据时，必须通过<code>Mutation</code>提交修改信息，<code>Mutation</code>同时提供了订阅者模式供外部插件调用获取<code>State</code>数据的更新。</p><p>而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走<code>Action</code>，但<code>Action</code>也是无法直接修改<code>State</code>的，还是需要通过<code>Mutation</code>来修改 State 的数据。最后，根据<code>State</code>的变化，渲染到视图上。</p><p>优点：对组件间关系没有限制, 且相比于 pubsub 库管理更集中, 更方便</p><h2 id="vuex-的具体工作" tabindex="-1">Vuex 的具体工作 <a class="header-anchor" href="#vuex-的具体工作" aria-label="Permalink to &quot;Vuex 的具体工作&quot;">​</a></h2><ul><li>vuex 是一种状态管理机制，将全局组件的共享状态抽取出来为一个 store，以一个单例模式存在，应用任何一个组件中都可以使用</li><li>vuex 更改 state 的唯一途径是通过 mutation，mutation 需要 commit 触发，action 实际触发是 mutation，其中 mutation 处理同步任务，action 处理异步任务</li></ul><h2 id="vuex-有哪几种属性" tabindex="-1">Vuex 有哪几种属性? <a class="header-anchor" href="#vuex-有哪几种属性" aria-label="Permalink to &quot;Vuex 有哪几种属性?&quot;">​</a></h2><p><strong>有五种，分别是 State 、 Getter 、 Mutation 、 Action 、 Module</strong></p><ul><li>state =&gt; 存储的单一状态，存储的基本数据(数据源存放地)</li><li>getters =&gt; 从基本数据派生出来的数据：是 store 的计算属性，对 state 的加工，是派生出来的数据。就像 computed 计算属性一样，getter 返回的值会根据它的依赖被缓存起来，只有当它的依赖值发生改变才会被重新计算</li><li>mutations =&gt; 同步提交更改数据的方法：使用 store.commit 方法更改 state 存储的状态</li><li>actions =&gt; 像一个装饰器，包裹 mutations 提交，使之可以异步：不是直接变更状态（actions 可以包含任何异步操作）。</li><li>modules =&gt; 模块化 Vuex：</li><li>store 分隔的模块，每个模块都有自己的 state、getters、mutations、actions</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> moduleA</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {...},</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">:{...},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">:{...},</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">:{...}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> moduleB</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {...},</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">: {...},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {...}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	modules</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		a</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">moduleA</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		b</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">moduleB</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#7F848E;font-style:italic;">     // -&gt;  moduleA的状态</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#7F848E;font-style:italic;">     // -&gt; moduleB 的状态</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="处理-store-的辅助函数" tabindex="-1">处理 store 的辅助函数 <a class="header-anchor" href="#处理-store-的辅助函数" aria-label="Permalink to &quot;处理 store 的辅助函数&quot;">​</a></h3><p>Vuex 提供了 mapState、MapGetters、MapActions、mapMutations 等辅助函数给开发在 vm 中处理 store</p><h2 id="vuex-的-state-特性是" tabindex="-1">Vuex 的 State 特性是？ <a class="header-anchor" href="#vuex-的-state-特性是" aria-label="Permalink to &quot;Vuex 的 State 特性是？&quot;">​</a></h2><p>一、Vuex 就是一个仓库，仓库里面放了很多对象。其中 state 就是数据源存放地，对应于与一般 Vue 对象里面的 data</p><p>二、state 里面存放的数据是响应式的，Vue 组件从 store 中读取数据，若是 store 中的数据发生改变，依赖这个数据的组件也会发生更新</p><p>三、它通过 mapState 把全局的 state 和 getters 映射到当前组件的 computed 计算属性中</p><h2 id="vuex-的-getter-特性" tabindex="-1">Vuex 的 Getter 特性 <a class="header-anchor" href="#vuex-的-getter-特性" aria-label="Permalink to &quot;Vuex 的 Getter 特性&quot;">​</a></h2><p>A、getters 可以对 State 进行计算操作，它就是 Store 的计算属性</p><p>B、 虽然在组件内也可以做计算属性，但是 getters 可以在多组件之间复用</p><p>C、 如果一个状态只在一个组件内使用，是可以不用 getters</p><h2 id="vuex-的-mutation-特性" tabindex="-1">vuex 的 Mutation 特性 <a class="header-anchor" href="#vuex-的-mutation-特性" aria-label="Permalink to &quot;vuex 的 Mutation 特性&quot;">​</a></h2><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作</li></ul><h2 id="不用-vuex-会带来什么问题" tabindex="-1">不用 Vuex 会带来什么问题？ <a class="header-anchor" href="#不用-vuex-会带来什么问题" aria-label="Permalink to &quot;不用 Vuex 会带来什么问题？&quot;">​</a></h2><p>一、可维护性会下降，你要想修改数据，你得维护三个地方</p><p>二、可读性会下降，因为一个组件里的数据，你根本就看不出来是从哪来的</p><p>三、增加耦合，大量的上传派发，会让耦合性大大的增加，本来 Vue 用 Component 就是为了减少耦合，现在这么用，和组件化的初衷相背。</p><p>但兄弟组件有大量通信的，建议一定要用，不管大项目和小项目，因为这样会省很多事</p><h2 id="vuex-是什么-核心流程" tabindex="-1">Vuex 是什么？核心流程？ <a class="header-anchor" href="#vuex-是什么-核心流程" aria-label="Permalink to &quot;Vuex 是什么？核心流程？&quot;">​</a></h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p><ul><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样可以方便地跟踪每一个状态的变化。</li></ul><p>核心流程中的主要功能：</p><p><img src="`+l+`" alt="image-20240326193247053"></p><ul><li>Vue Components 是 vue 组件，组件会触发（dispatch）一些事件或动作，也就是图中的 Actions;</li><li>在组件中发出的动作，肯定是想获取或者改变数据的，但是在 vuex 中，数据是集中管理的，不能直接去更改数据，所以会把这个动作提交（Commit）到 Mutations 中;</li><li>然后 Mutations 就去改变（Mutate）State 中的数据;</li><li>当 State 中的数据被改变之后，就会重新渲染（Render）到 Vue Components 中去，组件展示更新后的数据，完成一个流程。</li></ul><h2 id="vuex-解决了什么问题" tabindex="-1">Vuex 解决了什么问题？ <a class="header-anchor" href="#vuex-解决了什么问题" aria-label="Permalink to &quot;Vuex 解决了什么问题？&quot;">​</a></h2><p>解决两个问题</p><ul><li>多个组件依赖于同一状态时，对于多层嵌套的组件的传参将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。</li><li>来自不同组件的行为需要变更同一状态。以往采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</li></ul><h2 id="vuex-中的-action-和-mutation-有何区别" tabindex="-1">Vuex 中的 action 和 mutation 有何区别 <a class="header-anchor" href="#vuex-中的-action-和-mutation-有何区别" aria-label="Permalink to &quot;Vuex 中的 action 和 mutation 有何区别&quot;">​</a></h2><ul><li>action 中处理异步，mutation 不可以</li><li>mutation 做原子操作</li><li>action 可以整合包含多个 mutation</li><li>Mutation 专注于修改 State，理论上是修改 State 的唯一途径；Action 业务代码、异步请求。</li><li>Mutation：必须同步执行；Action：可以异步，但不能直接操作 State。</li><li>在视图更新时，先触发 actions，actions 再触发 mutation</li><li>mutation 的参数是 state，它包含 store 中的数据；store 的参数是 context，它是 state 的父级，包含 state、getters</li><li>action 处理异步，action 中可以提交 mutation。mutation 处理同步逻辑，修改数据</li><li>在 action 里可以多次进行 commit 操作，也可以调用其他的 action</li><li>在非 mutation 里修改数据，严格模式下是会发生异常</li><li>dispatch 会将 action 包装成 promise，mutation 不会进行包装</li></ul><h2 id="为什么-vuex-的-mutation-中不能做异步操作" tabindex="-1">为什么 Vuex 的 mutation 中不能做异步操作？ <a class="header-anchor" href="#为什么-vuex-的-mutation-中不能做异步操作" aria-label="Permalink to &quot;为什么 Vuex 的 mutation 中不能做异步操作？&quot;">​</a></h2><p>Vuex 中所有的状态更新的唯一途径都是 mutation，异步操作通过 Action 来提交 mutation 实现，这样可以方便地跟踪每一个状态的变化，从而能够实现一些工具帮助更好地了解我们的应用。</p><p>每个 mutation 执行完成后都会对应到一个新的状态变更，这样 devtools 就可以打个快照存下来，然后就可以实现 time-travel 了。</p><p>如果 mutation 支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。</p><h2 id="有使用过-vuex-的-module-吗-什么情况下会使用" tabindex="-1">有使用过 Vuex 的 module 吗？什么情况下会使用 <a class="header-anchor" href="#有使用过-vuex-的-module-吗-什么情况下会使用" aria-label="Permalink to &quot;有使用过 Vuex 的 module 吗？什么情况下会使用&quot;">​</a></h2><p>使用单一状态树，应用所有的状态会集中到一个比较大对象，当应用比较复杂时，store 对象就会变得比较臃肿，这个时候就最好使用模块。</p><p>Vuex 允许我们将 store 分割成模块（module），每个模块都有自己的 state、getter、mutation、action，甚至还会有自己的子模块</p><h2 id="vuex-有什么优缺点-在开发过程中有遇到什么问题吗" tabindex="-1">vuex 有什么优缺点？在开发过程中有遇到什么问题吗？ <a class="header-anchor" href="#vuex-有什么优缺点-在开发过程中有遇到什么问题吗" aria-label="Permalink to &quot;vuex 有什么优缺点？在开发过程中有遇到什么问题吗？&quot;">​</a></h2><p><strong>Vuex</strong> 是 <strong>Vue.js</strong> 中的状态管理系统。它是一个集中式存储，遵循严格的规则，帮助管理 Vue 应用程序中所有组件的状态。虽然 Vuex 是一个强大的工具，但它并不总是适用于所有场景。让我们来看看一些 Vuex 的优缺点。</p><h3 id="vuex-的优点" tabindex="-1">Vuex 的优点： <a class="header-anchor" href="#vuex-的优点" aria-label="Permalink to &quot;Vuex 的优点：&quot;">​</a></h3><ol><li><strong>集中式状态管理</strong>：Vuex 将整个模块的状态抽象出来，存储在一个中心化的地方，使组件之间可以共享状态。这有助于避免组件之间状态管理的复杂性。</li><li><strong>单一数据源</strong>：Vuex 被称为“单一数据源”，因为它将应用程序的状态集中存储在一个地方。这有助于更好地跟踪和维护应用程序的状态。</li><li><strong>方便的状态变更</strong>：通过 Vuex，您可以轻松地在组件之间共享状态，并在需要时更改状态。</li></ol><h3 id="vuex-的缺点" tabindex="-1">Vuex 的缺点： <a class="header-anchor" href="#vuex-的缺点" aria-label="Permalink to &quot;Vuex 的缺点：&quot;">​</a></h3><p><strong>1.冗长的代码</strong>：Vuex 需要遵循一定的模式，以确保状态的更改是有意义的。因此，使用 Vuex 的代码通常会比不使用它的代码更冗长。例如，下面是一个使用 Vuex 的基本 todo 组件与一个不使用 Vuex 的组件的对比：</p><p>使用 Vuex 的 todo 组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">li</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">todo</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> todos</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">mapState</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vuex&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#61AFEF;">mapState</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;todos&#39;</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>不使用 Vuex 的 todo 组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">li</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">todo</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> localTodos</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      localTodos</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">todos</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>使用 Vuex 的代码更长，但它确实提供了更好的状态管理。</p><p><strong>2.不适用于简单应用</strong>：</p><p>对于简单的应用程序，使用 Vuex 可能会显得过于繁琐。如果您的应用程序状态较少且组件之间的通信不复杂，您可以考虑不使用 Vuex。</p><h2 id="说一下你对-vuex-的理解" tabindex="-1">说一下你对 vuex 的理解 <a class="header-anchor" href="#说一下你对-vuex-的理解" aria-label="Permalink to &quot;说一下你对 vuex 的理解&quot;">​</a></h2><p>答：</p><p>vuex 是一个状态管理工具，主要解决大中型复杂项目的数据共享问题，主要包括 state，actions，mutations，getters 和 modules 5 个要素</p><p>主要流程：组件通过 dispatch 到 actions，actions 是异步操作，再 actions 中通过 commit 到 mutations，mutations 再通过逻辑操作改变 state，从而同步到组件，更新其数据状态，而 getters 相当于组件的计算属性对，组件中获取到的数据做提前处理的。</p><p>再说到辅助函数的作用。</p><h3 id="概念-1" tabindex="-1">概念： <a class="header-anchor" href="#概念-1" aria-label="Permalink to &quot;概念：&quot;">​</a></h3><p>Vuex 是 Vue 专用的状态管理库，它以全局方式集中管理应用的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h3 id="解决的问题" tabindex="-1">解决的问题： <a class="header-anchor" href="#解决的问题" aria-label="Permalink to &quot;解决的问题：&quot;">​</a></h3><p>Vuex 主要解决的问题是多组件之间状态共享。利用各种通信方式，虽然也能够实现状态共享，但是往往需要在多个组件之间保持状态的一致性，这种模式很容易出问题，也会使程序逻辑变得复杂。Vuex 通过把组件的共享状态抽取出来，以全局单例模式管理，这样任何组件都能用一致的方式获取和修改状态，响应式的数据也能够保证简洁的单向流动，使代码变得更具结构化且易于维护。</p><h3 id="什么时候用" tabindex="-1">什么时候用: <a class="header-anchor" href="#什么时候用" aria-label="Permalink to &quot;什么时候用:&quot;">​</a></h3><p>Vuex 并非是必须的，它能够管理状态，但同时也带来更多的概念和框架。如果我们不打算开发大型单页应用或应用里没有大量全局的状态需要维护，完全没有使用 Vuex 的必要，一个简单的 store 模式就够了。反之，Vuex 将是自然而然的选择。</p><h3 id="用法" tabindex="-1">用法： <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法：&quot;">​</a></h3><p>Vuex 将全局状态放入<code>state</code>对象中，它本身是一颗状态树，组件中使用<code>store</code>实例的<code>state</code>访问这些状态；</p><p>然后用配套的<code>mutation</code>方法修改这些状态，并且只能用<code>mutation</code>修改状态，在组件中调用<code>commit</code>方法提交<code>mutation</code>；</p><p>如果应用中有异步操作或复杂逻辑组合，需要编写<code>action</code>，执行结束如果有状态修改仍需提交<code>mutation</code>，组件中通过<code>dispatch</code>派发<code>action</code>。</p><p>最后是模块化，通过<code>modules</code>选项组织拆分出去的各个子模块，在访问状态（state）时需注意添加子模块的名称，如果子模块有设置<code>namespace</code>，那么提交<code>mutation</code>和派发<code>action</code>时还需要额外的命名空间前缀。</p><h2 id="谈谈-vuex" tabindex="-1">谈谈 Vuex <a class="header-anchor" href="#谈谈-vuex" aria-label="Permalink to &quot;谈谈 Vuex&quot;">​</a></h2><h3 id="简介-1" tabindex="-1">简介 <a class="header-anchor" href="#简介-1" aria-label="Permalink to &quot;简介&quot;">​</a></h3><ul><li>Vuex 是一个专门为 Vue.js 应用程序开发的状态管理模式。采用集中式存储管理应用的所有组件的状态。核心就是解决数据的共享。</li><li>以相应的规则保证状态以一种可预测的方式发生变化</li></ul><h3 id="vuex-的核心概念" tabindex="-1">Vuex 的核心概念 <a class="header-anchor" href="#vuex-的核心概念" aria-label="Permalink to &quot;Vuex 的核心概念&quot;">​</a></h3><ul><li><code>state</code>：是 <code>vuex</code> 的数据存放地；<code>state</code> 里面存放的数据是响应式的，<code>vue</code> 组件从 <code>store</code> 读取数据，若是 <code>store</code> 中的数据发生改变，依赖这相数据的组件也会发生更新；它通过 <code>mapState</code> 把全局的 <code>state</code> 和 <code>getters</code> 映射到当前组件的 <code>computed</code> 计算属性</li><li><code>getter</code>：可以对 state 进行计算操作；</li><li><code>mutation</code>：用来更改 <code>Vuex</code> 中 <code>store</code> 的 状态</li><li><code>action</code>：类似于 <code>mutation</code> ，但不同于 <code>action</code> 提交的是 <code>mutation</code>，而不是直接变更 <code>state</code>，且 <code>action</code> 可以包含异步操作；</li><li><code>module</code>： 面对复杂的应用程序，当管理的状态比较多时；我们需要将<code>vuex</code>的<code>store</code>对象分割成模块(<code>modules</code>)。</li></ul><h3 id="vuex-状态修改" tabindex="-1">Vuex 状态修改 <a class="header-anchor" href="#vuex-状态修改" aria-label="Permalink to &quot;Vuex 状态修改&quot;">​</a></h3><ul><li>组件中同步修改： commit() =&gt; mutation =&gt; 修改状态</li><li>组件中异步修改： dispatch() =&gt; actions =&gt; commit() =&gt; mutation =&gt; 修改状态</li></ul><h3 id="mutation-和-action-的区别" tabindex="-1">mutation 和 action 的区别 <a class="header-anchor" href="#mutation-和-action-的区别" aria-label="Permalink to &quot;mutation 和 action 的区别&quot;">​</a></h3><ul><li>修改<code>state</code>顺序，先触发<code>Action</code>，<code>Action</code>再触发<code>Mutation</code>。</li><li><code>mutation</code> 专注于修改 <code>state</code>，理论上要是修改 <code>state</code> 的唯一途径，而<code>action</code>可以处理业务代码和异步请求等</li><li><code>mutation</code> 必须同步执行，而 <code>action</code> 可以异步；</li></ul><h3 id="mutation-同步的意义" tabindex="-1">mutation 同步的意义 <a class="header-anchor" href="#mutation-同步的意义" aria-label="Permalink to &quot;mutation 同步的意义&quot;">​</a></h3><p>同步的意义在于每一个 <code>mutaion</code> 执行完成后都可以对应到一个新的状态，这样 <code>devtools</code> 就可以打一个快照下来；</p><h3 id="模块-和-命名空间-的作用" tabindex="-1">模块 和 命名空间 的作用 <a class="header-anchor" href="#模块-和-命名空间-的作用" aria-label="Permalink to &quot;模块 和 命名空间 的作用&quot;">​</a></h3><p><strong>模块化：</strong></p><ul><li>如果使用单一状态树，应用的所有状态会集中到一个比较大的对象。所以 <code>Vuex</code> 允许我们将 <code>store</code> 分割成模块（<code>module</code>）。</li><li>每个模块拥有自己的 <code>state</code>、<code>mutation</code>、<code>action</code>、<code>getter</code>、甚至是嵌套子模块。</li></ul><p><strong>命名空间：</strong></p><ul><li>默认情况下，模块内部的 <code>action</code>、<code>mutation</code> 和 <code>getter</code> 是注册在全局命名空间的，这样使得多个模块能够对同一 <code>mutation</code> 或 <code>action</code> 作出响应。</li><li>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。</li><li>当模块被注册后，它的所有 <code>getter</code>、<code>action</code> 及 <code>mutation</code> 都会自动根据模块注册的路径调整命名。</li></ul><h3 id="缺点-3" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-3" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p>Vuex 中 store 只有一份，对于复杂的数据，则需要依赖与模块。Vuex 状态是一个树状结构，最终会将模块的状态挂载到跟模块上。</p><ul><li>模块需要增加 namespaced：true（独立的命名空间）</li><li>更改状态 mutation 和 action 选取</li><li>模块和状态的名字冲突</li></ul><h3 id="原理-2" tabindex="-1">原理 <a class="header-anchor" href="#原理-2" aria-label="Permalink to &quot;原理&quot;">​</a></h3><p>Vuex3：核心就是创建一个 new Vue 实例，进行数据共享。</p><p>Vuex4：核心就是通过创建一个响应式对象，进行数据共享 reactive()</p><h2 id="vuex-的核心概念-如何使用-vuex-实现状态管理" tabindex="-1">Vuex 的核心概念（如何使用 vuex 实现状态管理） <a class="header-anchor" href="#vuex-的核心概念-如何使用-vuex-实现状态管理" aria-label="Permalink to &quot;Vuex 的核心概念（如何使用 vuex 实现状态管理）&quot;">​</a></h2><p>Vuex 是 Vue.js 应用的状态管理模式，它采用集中式存储管理所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。以下是 Vuex 的五大核心概念，它们共同构成了 Vuex 的架构和使用方法：</p><p>1.<strong>State</strong>: State 是 Vuex 中的核心，用于存储全局状态。它是单一状态树，所有组件的共享状态都集中到这里。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>2.<strong>Getters</strong>: Getters 类似于 Vue 中的计算属性，用于从 State 中派生出一些状态，以便于组件使用。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    todos</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;...&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;...&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">    doneTodos</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">todos</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">todo</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>3.<strong>Mutations</strong>: Mutations 是改变 State 的唯一方法，它们是同步的事务。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">    increment</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 变更状态</span></span>
<span class="line"><span style="color:#E5C07B;">      state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>4.<strong>Actions</strong>: Actions 类似于 Mutations，但是它们可以包含任意异步操作。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">    incrementAsync</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;font-style:italic;">commit</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#61AFEF;">      setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;increment&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>5.<strong>Modules</strong>: 当应用变得非常复杂时，可以将 Store 分割成模块（Modules）。每个模块拥有自己的 state、mutations、actions、getters。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> moduleA</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({ ... }),</span></span>
<span class="line"><span style="color:#E06C75;">  mutations</span><span style="color:#ABB2BF;">: { ... },</span></span>
<span class="line"><span style="color:#E06C75;">  actions</span><span style="color:#ABB2BF;">: { ... },</span></span>
<span class="line"><span style="color:#E06C75;">  getters</span><span style="color:#ABB2BF;">: { ... }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  modules</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">moduleA</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>使用 Vuex 进行状态管理的基本步骤包括：创建一个 Store，定义 State、Getters、Mutations 和 Actions，然后在 Vue 组件中通过 <code>this.$store</code> 访问状态或者触发状态变化。</p><p>Vuex 提供了一种机制来集中管理应用中所有组件的状态，并以一种可预测的方式来确保状态的变化。这使得状态变化可以被跟踪和调试，有助于大型应用的开发和维护。</p><h2 id="vuex-状态管理库的使用" tabindex="-1">Vuex 状态管理库的使用 <a class="header-anchor" href="#vuex-状态管理库的使用" aria-label="Permalink to &quot;Vuex 状态管理库的使用&quot;">​</a></h2><p><strong>优点：</strong></p><ul><li>提供了一种集中式的状态管理方案，适用于复杂的应用场景。</li><li>严格的状态管理机制确保了状态的可预测性和可维护性。</li><li>支持插件和开发者工具，方便调试和扩展。</li></ul><p><strong>缺点：</strong></p><ul><li>对于小型应用来说可能会显得繁琐，增加了一些额外的复杂度。</li><li>需要额外学习和理解 Vuex 的概念和工作原理。</li></ul><h3 id="如何在组件中使用这些数据" tabindex="-1">如何在组件中使用这些数据 <a class="header-anchor" href="#如何在组件中使用这些数据" aria-label="Permalink to &quot;如何在组件中使用这些数据&quot;">​</a></h3><h4 id="_1-中央事件总线" tabindex="-1">1. 中央事件总线 <a class="header-anchor" href="#_1-中央事件总线" aria-label="Permalink to &quot;1. 中央事件总线&quot;">​</a></h4><p>使用中央事件总线时，你可以通过在组件中访问全局的事件总线实例来获取 Vue 的数据。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 在组件中获取 Vue 数据</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> message</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$root</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-vuex" tabindex="-1">2. Vuex <a class="header-anchor" href="#_2-vuex" aria-label="Permalink to &quot;2. Vuex&quot;">​</a></h4><p>使用 Vuex 管理状态时，你可以通过在组件中使用 <code>mapState</code> 辅助函数或直接访问 Vuex store 实例来获取 Vue 的数据。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 mapState 辅助函数</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">mapState</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vuex&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">		...</span><span style="color:#61AFEF;">mapState</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;message&quot;</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 或者直接访问 store 实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> message</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="vuex-进行状态管理" tabindex="-1">Vuex 进行状态管理 <a class="header-anchor" href="#vuex-进行状态管理" aria-label="Permalink to &quot;Vuex 进行状态管理&quot;">​</a></h2><p>在大型项目中，如何有效地使用 Vuex 进行状态管理？请描述 Vuex 的核心概念（如 state、mutations、actions、getters），并阐述它们在解决跨组件通信和状态一致性问题上的作用。</p><h3 id="解答" tabindex="-1">解答 <a class="header-anchor" href="#解答" aria-label="Permalink to &quot;解答&quot;">​</a></h3><p>Vuex 是 Vue 生态中广泛使用的状态管理库，它通过集中管理应用的状态（state），提供了一系列核心概念来确保状态的清晰、可控和一致性：</p><ul><li><strong>State</strong>：是整个应用层级的共享状态对象，存储全局数据。所有组件都可以通过<code>this.$store.state</code>或者<code>mapState</code>辅助函数访问状态。</li><li><strong>Mutations</strong>：是唯一更改 Vuex 状态的地方，每个 mutation 都有一个字符串类型的事件类型（type）和一个回调函数（handler）。回调函数负责执行实际的状态变更，且必须是同步的。组件通过<code>commit</code>方法触发 mutation 来更新状态。这种方式确保了状态变更的可跟踪性和可调试性。</li><li><strong>Actions</strong>：用于处理异步操作和触发多个 mutation。Actions 通过<code>dispatch</code>方法触发，可以包含异步逻辑（如 API 请求），并在内部调用 mutations 来更新状态。将异步操作隔离在 actions 中，有助于保持 mutation 的纯函数性质，并使复杂的业务流程更具可读性和可维护性。</li><li><strong>Getters</strong>：类似于计算属性，用于从 state 派生出新的状态。Getters 接收 state 作为输入，返回经过处理的值。其他组件或 actions 可以通过<code>this.$store.getters</code>或<code>mapGetters</code>辅助函数来访问这些派生状态，无需直接依赖底层 state，从而简化组件逻辑并提高代码复用性。</li></ul><p>在大型项目中，Vuex 通过上述核心概念解决了跨组件通信和状态一致性问题：</p><ul><li><strong>跨组件通信</strong>：全局状态在 store 中统一管理，各组件无需通过繁琐的 props drilling 或事件广播来传递数据，只需直接访问或通过映射辅助函数使用 store 中的状态和 getter，大大简化了组件间的交互。</li><li><strong>状态一致性</strong>：所有的状态变更都通过定义明确的 mutation 进行，确保了任何状态变化都有迹可循。Actions 作为异步操作的集中处理点，保证了即使在复杂的异步场景下，状态变更也能有序进行。同时，借助 Vuex 的中间件、模块化和严格模式等功能，可以进一步强化状态管理的规范性和健壮性。</li></ul><h2 id="如何监听-vuex-中数据的变化" tabindex="-1">如何监听 Vuex 中数据的变化 <a class="header-anchor" href="#如何监听-vuex-中数据的变化" aria-label="Permalink to &quot;如何监听 Vuex 中数据的变化&quot;">​</a></h2><ul><li>通过 Vue 的 watch 监控 Vuex 中数据的变化</li><li>通过 store 的 subscribe 监控状态变化（多在插件里使用，平时业务基本用不到）</li></ul><h2 id="vuex-中数据存储-localstorage" tabindex="-1">vuex 中数据存储 localStorage <a class="header-anchor" href="#vuex-中数据存储-localstorage" aria-label="Permalink to &quot;vuex 中数据存储 localStorage&quot;">​</a></h2><p><code>vuex</code> 是 <code>vue</code> 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，具体做法应该在<code>vuex</code>里数据改变的时候把数据拷贝一份保存到<code>localStorage</code>里面，刷新之后，如果<code>localStorage</code>里有保存的数据，取出来再替换<code>store</code>里的<code>state</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> defaultCity</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;上海&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 用户关闭了本地存储功能，此时在外层加个try...catch</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">defaultCity</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// f复制一份</span></span>
<span class="line"><span style="color:#E06C75;">		defaultCity</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;defaultCity&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		city</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">defaultCity</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		changeCity</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">city</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">city</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> city</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;defaultCity&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 数据改变的时候把数据拷贝一份保存到localStorage里面</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>注意：vuex 里，保存的状态，都是数组，而 localStorage 只支持字符串，所以需要用 JSON 转换：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subscribeList</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// array -&gt; string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;subscribeList&quot;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// string -&gt; array</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="vuex-如何实现数据持久化-即刷新后数据还保留" tabindex="-1">vuex 如何实现数据持久化（即刷新后数据还保留）？ <a class="header-anchor" href="#vuex-如何实现数据持久化-即刷新后数据还保留" aria-label="Permalink to &quot;vuex 如何实现数据持久化（即刷新后数据还保留）？&quot;">​</a></h2><p>答：因为 vuex 中的 state 是存储在内存中的，一刷新就没了，例如登录状态，解决方案有：</p><p>第一种：利用 H5 的本地存储(localStorage，sessionStorage)</p><p>第二种：下载持久化存储插件，例如：vuex-along，vuex-persist、vuex-persistedstate</p><p>下面以 vuex-persistedstate 库为例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> vuex-persistedstate</span><span style="color:#D19A66;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>引入配置：在 store 下的 indexjs 中</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> createPersistedState</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vuex-persistedstate&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VuexStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#E06C75;">	plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#61AFEF;">createPersistedState</span><span style="color:#ABB2BF;">()],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="vue-中-ajax-请求代码应该写在组件的-methods-中还是-vuex-的-actions-中" tabindex="-1">Vue 中 ajax 请求代码应该写在组件的 methods 中还是 vuex 的 actions 中？ <a class="header-anchor" href="#vue-中-ajax-请求代码应该写在组件的-methods-中还是-vuex-的-actions-中" aria-label="Permalink to &quot;Vue 中 ajax 请求代码应该写在组件的 methods 中还是 vuex 的 actions 中？&quot;">​</a></h2><p>一、如果请求来的数据是不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入 vuex 的 state 里。</p><p>二、如果被其他地方复用，这个很大几率上是需要的，如果需要，请将请求放入 action 里，方便复用，并包装成 promise 返回，在调用处用 async await 处理返回的数据。如果不要复用这个请求，那么直接写在 vue 文件里很方便。</p><h2 id="为什么要用-vuex-或者-redux" tabindex="-1">为什么要用 Vuex 或者 Redux <a class="header-anchor" href="#为什么要用-vuex-或者-redux" aria-label="Permalink to &quot;为什么要用 Vuex 或者 Redux&quot;">​</a></h2><p>由于传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致代码无法维护。</p><p>所以需要把组件的共享状态抽取出来，以一个全局单例模式管理。在这种模式下，组件树构成了一个巨大的&quot;视图&quot;，不管在树的哪个位置，任何组件都能获取状态或者触发行为。</p><p>另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，代码将会变得更结构化且易维护。</p><h2 id="vuex3-和-vue4-有什么区别" tabindex="-1">Vuex3 和 Vue4 有什么区别 <a class="header-anchor" href="#vuex3-和-vue4-有什么区别" aria-label="Permalink to &quot;Vuex3 和 Vue4 有什么区别&quot;">​</a></h2><p>Vuex3：核心就是创建一个 new Vue 实例，进行数据共享。</p><p>Vuex4：核心就是通过创建一个响应式对象，进行数据共享 reactive()</p><h2 id="redux-和-vuex-有什么区别-它们的共同思想" tabindex="-1">Redux 和 Vuex 有什么区别，它们的共同思想 <a class="header-anchor" href="#redux-和-vuex-有什么区别-它们的共同思想" aria-label="Permalink to &quot;Redux 和 Vuex 有什么区别，它们的共同思想&quot;">​</a></h2><h3 id="_1-redux-和-vuex-区别" tabindex="-1">（1）Redux 和 Vuex 区别 <a class="header-anchor" href="#_1-redux-和-vuex-区别" aria-label="Permalink to &quot;（1）Redux 和 Vuex 区别&quot;">​</a></h3><ul><li>Vuex 改进了 Redux 中的 Action 和 Reducer 函数，以 mutations 变化函数取代 Reducer，无需 switch，只需在对应的 mutation 函数里改变 state 值即可</li><li>Vuex 由于 Vue 自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的 State 即可</li><li>Vuex 数据流的顺序是 ∶View 调用 store.commit 提交对应的请求到 Store 中对应的 mutation 函数-&gt;store 改变（vue 检测到数据变化自动渲染）</li></ul><p>通俗点理解就是，vuex 弱化 dispatch，通过 commit 进行 store 状态的一次更变;取消了 action 概念，不必传入特定的 action 形式进行指定变更;弱化 reducer，基于 commit 参数直接对数据进行转变，使得框架更加简易;</p><h3 id="_2-共同思想" tabindex="-1">（2）共同思想 <a class="header-anchor" href="#_2-共同思想" aria-label="Permalink to &quot;（2）共同思想&quot;">​</a></h3><ul><li>单—的数据源</li><li>变化可以预测</li><li>本质上：redux 与 vuex 都是对 mvvm 思想的服务，将数据从视图中抽离的一种方案; 形式上：vuex 借鉴了 redux，将 store 作为全局的数据中心，进行 mode 管理;</li></ul><h2 id="vuex-和-localstorage-的区别" tabindex="-1">Vuex 和 localStorage 的区别 <a class="header-anchor" href="#vuex-和-localstorage-的区别" aria-label="Permalink to &quot;Vuex 和 localStorage 的区别&quot;">​</a></h2><p>Vuex 是状态管理，是为了解决跨组件之间数据共享问题的，一个组件的数据变化会映射到使用这个数据的其他组件当中。如果刷新页面，之前存储的 vuex 数据全部都会被初始化掉。</p><p>localStorage 是 H5 提供的一个更简单的数据存储方式，之前是用 cookie 存放数据，但是 cookie 的数据量太小，所以就用 localStorage，它可以有 5M 的限制，不受刷新页面的控制，长久保存。</p><ul><li><code>Vuex</code>存储在内存中，页面关闭刷新就会消失。而<code>localstorage</code>存储在本地，读取内存比读取硬盘速度要快</li><li><code>Vuex</code>应用于组件之间的传值，<code>localstorage</code>主要用于不同页面之间的传递</li><li><code>Vuex</code>是响应式的，<code>localstorage</code>需要刷新</li></ul><h3 id="_1-最重要的区别" tabindex="-1">（1）最重要的区别 <a class="header-anchor" href="#_1-最重要的区别" aria-label="Permalink to &quot;（1）最重要的区别&quot;">​</a></h3><ul><li>vuex 存储在内存中</li><li>localstorage 则以文件的方式存储在本地，只能存储字符串类型的数据，存储对象需要 JSON 的 stringify 和 parse 方法进行处理。 读取内存比读取硬盘速度要快</li></ul><h3 id="_2-应用场景" tabindex="-1">（2）应用场景 <a class="header-anchor" href="#_2-应用场景" aria-label="Permalink to &quot;（2）应用场景&quot;">​</a></h3><ul><li>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。vuex 用于组件之间的传值。</li><li>localstorage 是本地存储，是将数据存储到浏览器的方法，一般是在跨页面传递数据时使用 。</li><li>Vuex 能做到数据的响应式，localstorage 不能</li></ul><h3 id="_3-永久性" tabindex="-1">（3）永久性 <a class="header-anchor" href="#_3-永久性" aria-label="Permalink to &quot;（3）永久性&quot;">​</a></h3><ul><li>刷新页面时 vuex 存储的值会丢失，localstorage 不会。</li><li>注意： 对于不变的数据确实可以用 localstorage 可以代替 vuex，但是当两个组件共用一个数据源（对象或数组）时，如果其中一个组件改变了该数据源，希望另一个组件响应该变化时，localstorage 无法做到，原因就是区别。</li></ul><h2 id="vuex-和单纯的全局对象有什么区别" tabindex="-1">Vuex 和单纯的全局对象有什么区别？ <a class="header-anchor" href="#vuex-和单纯的全局对象有什么区别" aria-label="Permalink to &quot;Vuex 和单纯的全局对象有什么区别？&quot;">​</a></h2><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p><p>不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样可以方便地跟踪每一个状态的变化，从而能够实现一些工具帮助更好地了解我们的应用。</p><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：</p><ul><li>**1、Vuex 的状态存储是响应式的。**当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>**2、你不能直接改变 store 中的状态。**改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li></ul><h1 id="_6-2-vuex-原理" tabindex="-1">6.2 Vuex 原理 <a class="header-anchor" href="#_6-2-vuex-原理" aria-label="Permalink to &quot;6.2 Vuex 原理&quot;">​</a></h1><h2 id="待定原理源码解析" tabindex="-1">待定原理源码解析 <a class="header-anchor" href="#待定原理源码解析" aria-label="Permalink to &quot;待定原理源码解析&quot;">​</a></h2><p><a href="https://blog.51cto.com/u_15581727/5177034" target="_blank" rel="noreferrer">Vuex 实现原理解析——vuex 原理</a></p><h2 id="vuex-的原理" tabindex="-1">Vuex 的原理 <a class="header-anchor" href="#vuex-的原理" aria-label="Permalink to &quot;Vuex 的原理&quot;">​</a></h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以 Vue 的响应式系统保证状态以可预测的方式发生变化。</p><p>每一个 Vuex 应用的核心就是 store（仓库）。</p><p>“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p><p>改 变 store 中 的 状 态 的 唯 一 途 径 就 是 显 式 地 提 交 (commit)mutation。这样可以方便地跟踪每一个状态的变化。</p><p>Vuex 为 Vue Components 建立起了一个完整的生态圈，包括开发中的 API 调用一环。</p><p><img src="`+k+'" alt="image-20240507202946524"></p><h3 id="vuex-的核心概念包括" tabindex="-1">Vuex 的核心概念包括： <a class="header-anchor" href="#vuex-的核心概念包括" aria-label="Permalink to &quot;Vuex 的核心概念包括：&quot;">​</a></h3><ol><li>State：单一状态树，用一个对象包含全应用的状态。</li><li>Getters：从 state 中派生出状态。</li><li>Mutations：同步函数，用于更改 state 中的状态，每个 mutation 都需要是同步函数。</li><li>Actions：异步函数，用于提交 mutations，而不是直接变更状态。</li><li>Modules：将 store 分割成模块，每个模块拥有自己的 state、getters、mutations、actions 和 modules。</li><li>辅助函数：Vuex 提供了 mapState、MapGetters、MapActions、mapMutations 等辅助函数给开发在 vm 中处理 store。</li></ol><h3 id="_1-核心流程中的主要功能" tabindex="-1">（1）核心流程中的主要功能： <a class="header-anchor" href="#_1-核心流程中的主要功能" aria-label="Permalink to &quot;（1）核心流程中的主要功能：&quot;">​</a></h3><p>① Vue Components 是我们的 vue 组件，组件会触发（dispatch）一些事件或动作，也就是图中的 Actions；</p><p>② 我们在组件中发出的动作，肯定是想获取或者改变数据的，但是在 vuex 中，数据是集中管理的，我们不能直接去更改数据，所以会把这个动作提交（Commit）到 Mutations 中；</p><p>③ 然后 Mutations 就去改变（Mutate）State 中的数据；</p><p>④ 当 State 中的数据被改变之后，就会重新渲染（Render）到 Vue Components 中去，组件展示更新后的数据，完成一个流程。</p><h3 id="_2-各模块在核心流程中的主要功能" tabindex="-1">（2）各模块在核心流程中的主要功能： <a class="header-anchor" href="#_2-各模块在核心流程中的主要功能" aria-label="Permalink to &quot;（2）各模块在核心流程中的主要功能：&quot;">​</a></h3><p>**Vue Components：**Vue 组件。HTML 页面上，负责接收用户操作等交互行为，执行 dispatch 方法触发对应 action 进行回应。</p><p>**dispatch：**操作行为触发方法，是唯一能执行 action 的方法。</p><p>**actions：**操作行为处理模块。负责处理 Vue Components 接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台 API 请求的操作就在这个模块中进行，包括触发其他 action 以及提交 mutation 的操作。该模块提供了 Promise 的封装，以支持 action 的链式触发。</p><p>**commit：**状态改变提交操作方法。对 mutation 进行提交，是唯一能执行 mutation 的方法。</p><p>**mutations：**状态改变操作方法。是 Vuex 修改 state 的唯一推荐方法，其他修改方式在严格模式下将会报错。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些 hook 暴露出来，以进行 state 的监控等。</p><p>**state：**页面状态管理容器对象。集中存储 Vue components 中 data 对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用 Vue 的细粒度数据响应机制来进行高效的状态更新。</p><p>**getters：**state 对象读取方法。图中没有单独列出该模块，应该被包含在了 render 中，Vue Components 通过该方法读取全局 state 对象。</p><h3 id="什么情况下应该使用-vuex" tabindex="-1">什么情况下应该使用 Vuex <a class="header-anchor" href="#什么情况下应该使用-vuex" aria-label="Permalink to &quot;什么情况下应该使用 Vuex&quot;">​</a></h3><p>虽然 Vuex 可以帮助我们管理共享状态，但也附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p><p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。</p><p>一个简单的 global event bus 就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。</p><h3 id="总结-5" tabindex="-1">总结 <a class="header-anchor" href="#总结-5" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>Vuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过 Mutation 提交修改信息，Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。</p><p>而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走 Action ，但 Action 也是无法直接修改 State 的，还是需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。</p><h3 id="原理数据图" tabindex="-1">原理数据图 <a class="header-anchor" href="#原理数据图" aria-label="Permalink to &quot;原理数据图&quot;">​</a></h3><p><img src="'+l+`" alt="image-20240326193247053"></p><ul><li><code>Vue Components</code> 负责接收用户操作交互行为，执行 dispatch 触发对应的 action 进行回应</li><li><code>dispatch</code>唯一能执行 action 的方法</li><li><code>action</code>用来接收 components 的交互行为，包含异步同步操作</li><li><code>commit</code>对 mutation 进行提交，唯一能执行 mutation 的方法</li><li><code>mutation</code>唯一可以修改 state 状态的方法</li><li><code>state</code>页面状态管理容器，用于存储状态</li><li><code>getters</code>读取 state 方法</li></ul><p>Vue 组件接收交互行为，调用<code>dispatch</code>方法触发<code>action</code>相关处理，若页面状态需要改变，则调用<code>commit</code>方法提交<code>mutation</code>修改<code>state</code>，通过<code>getters</code>获取到<code>state</code>新值，重新渲染<code>Vue Components</code>，界面随之更新。</p><p>Vuex 是通过全局注入 store 对象，来实现组件间的状态共享。在大型复杂的项目中（多级组件嵌套），需要实现一个组件更改某个数据，多个组件自动获取更改后的数据进行业务逻辑处理，这时候使用 vuex 比较合适。</p><p>假如只是多个组件间传递数据，使用 vuex 未免有点大材小用，其实只用使用组件间常用的通信方法即可。</p><h2 id="vuex-的设计思想" tabindex="-1">Vuex 的设计思想 <a class="header-anchor" href="#vuex-的设计思想" aria-label="Permalink to &quot;Vuex 的设计思想&quot;">​</a></h2><p>Vuex 的设计思想，借鉴了 Flux、Redux，将数据存放到全局的 store，再将 store 挂载到每个 vue 实例组件中，利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。</p><p>看了 Vuex 设计思想，心里难免会有这样的疑问：</p><ul><li>vuex 的 store 是如何挂载注入到组件中呢？</li><li>vuex 的 state 和 getters 是如何映射到各个组件实例中响应式更新状态呢？</li></ul><h2 id="vuex-的原理解析" tabindex="-1">Vuex 的原理解析 <a class="header-anchor" href="#vuex-的原理解析" aria-label="Permalink to &quot;Vuex 的原理解析&quot;">​</a></h2><p>我们来看下 vuex 的源码，分析看看上面 2 个疑惑的问题：</p><h3 id="疑问-1-vuex-的-store-是如何挂载注入到组件中呢" tabindex="-1">疑问 1：vuex 的 store 是如何挂载注入到组件中呢？ <a class="header-anchor" href="#疑问-1-vuex-的-store-是如何挂载注入到组件中呢" aria-label="Permalink to &quot;疑问 1：vuex 的 store 是如何挂载注入到组件中呢？&quot;">​</a></h3><p>1、在 vue 项目中先安装 vuex，核心代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vuex</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;vuex&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vuex</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">// vue的插件机制</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>2、利用 vue 的 <a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noreferrer">插件机制</a>，使用 Vue.use(vuex)时，会调用 vuex 的 install 方法，装载 vuex，install 方法的代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> install</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">Vue</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> _Vue</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;production&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">        &#39;[vuex] already installed. Vue.use(Vuex) should be called only once.&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _Vue</span></span>
<span class="line"><span style="color:#61AFEF;">  applyMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>3、applyMixin 方法使用 vue<a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noreferrer">混入机制</a>，vue 的生命周期 beforeCreate 钩子函数前混入 vuexInit 方法，核心代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">beforeCreate</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">vuexInit</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> vuexInit</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // store injection</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;function&#39;</span></span>
<span class="line"><span style="color:#C678DD;">        ?</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">store</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">        :</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>分析源码，我们知道了 vuex 是利用 vue 的 mixin 混入机制，在 beforeCreate 钩子前混入 vuexInit 方法，vuexInit 方法实现了 store 注入 vue 组件实例，并注册了 vuex store 的引用属性$store。store 注入过程如下图所示：</p><p><img src="`+x+`" alt="img"></p><h3 id="疑问-2-vuex-的-state-和-getters-是如何映射到各个组件实例中响应式更新状态呢" tabindex="-1">疑问 2：vuex 的 state 和 getters 是如何映射到各个组件实例中响应式更新状态呢？ <a class="header-anchor" href="#疑问-2-vuex-的-state-和-getters-是如何映射到各个组件实例中响应式更新状态呢" aria-label="Permalink to &quot;疑问 2：vuex 的 state 和 getters 是如何映射到各个组件实例中响应式更新状态呢？&quot;">​</a></h3><blockquote><p>store 实现的源码在 src/store.js</p></blockquote><p>1、我们在源码中找到 resetStoreVM 核心方法：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> resetStoreVM</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">hot</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> oldVm</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置 getters 属性</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> wrappedGetters</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wrappedGetters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> computed</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 遍历 wrappedGetters 属性</span></span>
<span class="line"><span style="color:#61AFEF;">	forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">wrappedGetters</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 给 computed 对象添加属性</span></span>
<span class="line"><span style="color:#E06C75;">		computed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> partial</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 重写 get 方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// store.getters.xx 其实是访问了store.vm[xx]，其中添加 computed 属性</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">			get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">			enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// for local getters</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> silent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">silent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">silent</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 创建Vue实例来保存state，同时让state变成响应式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// store.vm.data.$$state = store.state</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			$$state</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		computed</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">silent</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> silent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 只能通过commit方式更改状态</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">strict</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		enableStrictMode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>从上面源码，我们可以看出 Vuex 的 state 状态是响应式，是借助 vue 的 data 是响应式，将 state 存入 vue 实例组件的 data 中；Vuex 的 getters 则是借助 vue 的计算属性 computed 实现数据实时监听。</p><p>computed 计算属性监听 data 数据变更主要经历以下几个过程：</p><p><img src="`+V+`" alt="img"></p><h2 id="vuex-的实现的底层原理" tabindex="-1">vuex 的实现的底层原理 <a class="header-anchor" href="#vuex-的实现的底层原理" aria-label="Permalink to &quot;vuex 的实现的底层原理&quot;">​</a></h2><h3 id="_1-实现一个受保护的-state" tabindex="-1">(1)实现一个受保护的 state <a class="header-anchor" href="#_1-实现一个受保护的-state" aria-label="Permalink to &quot;(1)实现一个受保护的 state&quot;">​</a></h3><p>通过 new 去初始化一个 vue 实例，利用 vue 中的 data 是响应式的。在 data 中定义</p><p>state（不会被代理）属性，值就是传递 state 对象，然后通过访问 get 的方式去访问 state。在 get 中返回的值式：this.vm.data.state（不会被代理）属性，值就是传递 state 对象，然后通过访问 get 的方式去访问 state。</p><p>在 get 中返回的值式：this.vm.data.state</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 在一个属性前面加上两个$, 那么这个属性是不被代理的</span></span>
<span class="line"><span style="color:#E06C75;">      $$state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过访问器的方式来访问state</span></span>
<span class="line"><span style="color:#E06C75;">get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_2-实现单项数据流" tabindex="-1">(2) 实现单项数据流 <a class="header-anchor" href="#_2-实现单项数据流" aria-label="Permalink to &quot;(2) 实现单项数据流&quot;">​</a></h3><p>定义 commit 方法和 dispatch 方法，这两个方法都分别接受两个参数 type（传递的数据类型）和 payload(载荷信息)，获取到 mutations 和 actions 这两个选项。然后分别在 commit 和 dispatch 方法中通过 type 属性获取到函数并执行。commit 中的函数执行的时候需要传递 state 和 payload 作为参数；dispatch 中的函数在执行的时候需要传递 store 作为参数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> entry</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">    entry</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> entry</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> entry</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">    entry</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> entry</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-getters-的实现" tabindex="-1">(3) getters 的实现 <a class="header-anchor" href="#_3-getters-的实现" aria-label="Permalink to &quot;(3) getters 的实现&quot;">​</a></h3><p>getters 的实现借助了 vue 中的 computed 属性。遍历 getters 中的所有 key，并在 computed 中通过 key 声明一个无参函数，并返回一个带有参数的 state 的函数（这个函数就是定义在 getters 中的函数），然后通过 object.defineproperty 一个 getters 对象。只提供 get 方法。在 get 方法中返回计算属性 computed 的结果</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> computed</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">   const</span><span style="color:#E5C07B;"> fn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getters</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">   computed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">     return</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   // 定义get方式即可</span></span>
<span class="line"><span style="color:#61AFEF;">   get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">   computed</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="待定" tabindex="-1">待定 <a class="header-anchor" href="#待定" aria-label="Permalink to &quot;待定&quot;">​</a></h2><h3 id="store-是怎么注册的" tabindex="-1">store 是怎么注册的？ <a class="header-anchor" href="#store-是怎么注册的" aria-label="Permalink to &quot;store 是怎么注册的？&quot;">​</a></h3><p>1、 Vuex 在 vue 的生命周期中的初始化钩子前插入一段 Vuex 初始化代码，给 Vue 的实例注入一个<code>$store</code>的属性，这就是为什么我们在 Vue 的组件中可以通过<code>this.$store.xxx</code>,访问到 Vuex 的各种数据和状态</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取当前Vue的版本</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> version</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">version</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">version</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.x通过hook的方式注入</span></span>
<span class="line"><span style="color:#E5C07B;">		Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">beforeCreate</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">vuexInit</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 兼容1.x</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//使用自定义的_init方法替换Vue对象原型的_init方法，实现注入</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> _init</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}) {</span></span>
<span class="line"><span style="color:#E5C07B;">			options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">init</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">init</span><span style="color:#C678DD;"> ?</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">vuexInit</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> vuexInit</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			_init</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> vuexInit</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// store 注入</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#C678DD;">				typeof</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">store</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">store</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 子组件从其父组件引用$store属性</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="getters-实现" tabindex="-1">getters 实现 <a class="header-anchor" href="#getters-实现" aria-label="Permalink to &quot;getters 实现&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 实现getters原理</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> getters</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(getters);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// this.getters = getters; //不是直接挂载到 getters上 这样只会拿到整个 函数体</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(Object.keys(getters))  // [&quot;myAge&quot;,&quot;myName&quot;]</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">getterName</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(getterName)  // myAge</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将getterName 放到this.getters = {}中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(this.state);</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getterName</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 当你要获取getterName（myAge）会自动调用get方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 箭头函数中没有this</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> getters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">getterName</span><span style="color:#ABB2BF;">](</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>从上面源码，我们可以看出 Vuex 的 state 状态是响应式，是借助 vue 的 data 是响应式，将 state 存入 vue 实例组件的 data 中；Vuex 的 getters 则是借助 vue 的计算属性 computed 实现数据实时监听。</p><h3 id="mutation-是怎么实现的" tabindex="-1">mutation 是怎么实现的？ <a class="header-anchor" href="#mutation-是怎么实现的" aria-label="Permalink to &quot;mutation 是怎么实现的？&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(mutations);</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">mutationName</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log(mutationName);</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">mutationName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">mutationName</span><span style="color:#ABB2BF;">](</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> registerMutation</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">handler</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">local</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取 type(module.mutations的key) 对应的mutations，没有就创建一个空数组</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> entry</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [])</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// push处理过的mutation handler</span></span>
<span class="line"><span style="color:#E5C07B;">	entry</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> wrappedMutationHandler</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用用户定义的handler，并传入state和payload</span></span>
<span class="line"><span style="color:#E5C07B;">		handler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">local</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ul><li>registerMutation 是对 store 的 mutation 的初始化</li><li>接受 4 个参数，store 为当前 Store 实例，type 为 mutation 的 key，handler 为 mutation 执行的回调函数，path 为当前模块的路径</li></ul><blockquote><p>mutation 的作用就是同步修改当前模块的 state</p><ul><li>函数首先通过 type 拿到对应的 mutation 对象数组，</li><li>然后把一个 mutation 的包装函数 push 到这个数组中</li><li>这个函数接收一个参数 payload，这就是我们在定义 mutation 的时候接收的额外参数</li><li>这个函数执行的时候会调用 mutation 的回调函数</li><li>并通过 getNestedState(store.state,path)方法得到当前模块的 state，和 playload 一起作为回调函数的参数</li></ul></blockquote><h3 id="actions-实现" tabindex="-1">actions 实现 <a class="header-anchor" href="#actions-实现" aria-label="Permalink to &quot;actions 实现&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// actions的原理</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> actions</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">actionName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">actionName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		value</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="mutation-和-action-有什么区别" tabindex="-1">mutation 和 action 有什么区别？ <a class="header-anchor" href="#mutation-和-action-有什么区别" aria-label="Permalink to &quot;mutation 和 action 有什么区别？&quot;">​</a></h3><h4 id="_1-mutation" tabindex="-1">1 mutation <a class="header-anchor" href="#_1-mutation" aria-label="Permalink to &quot;1 mutation&quot;">​</a></h4><p>1、 mutation： 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation 2、 Vuex 中的 mutation 非常类似于： 每个 mutation 都有一个字符串的事件类型(type) 和一个回调函数（<a href="https://so.csdn.net/so/search?q=handler&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">handler</a>） 3、 这个回调函数就是我们实际进行状态更改的地方，并且它会接收 state 作为第一个参数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		increment</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 变更状态</span></span>
<span class="line"><span style="color:#E5C07B;">			state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>4、 不能直接调用一个 mutation handler 5、 这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数” 6、 要唤醒一个 mutation handler，需要以相应的 type 调用 store.commit 方法 <code>store.commit(&#39;increment&#39;)</code></p><h3 id="_2-actions" tabindex="-1">2 Actions <a class="header-anchor" href="#_2-actions" aria-label="Permalink to &quot;2 Actions&quot;">​</a></h3><p>1、 Action: 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态</li><li>Action 可以包含任意异步操作</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		increment</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		increment</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			content</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;increment&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>事实上在 vuex 里面 actions 只是一个架构性的概念，只是一个函数</li><li>vuex 真正限制你的只有 mutation 必须是同步的的这一点</li></ul><h3 id="commit-dispatch-是怎么实现的" tabindex="-1">commit dispatch 是怎么实现的？ <a class="header-anchor" href="#commit-dispatch-是怎么实现的" aria-label="Permalink to &quot;commit dispatch 是怎么实现的？&quot;">​</a></h3><blockquote><p>mutation 是通过 commit 来触发的</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_type</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">_paylod</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">_options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 解析参数</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		type</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		payload</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		options</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> unifyObjectStyle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_type</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">_payload</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">_options</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 根据 type 获取所有对应的处理过的mutation函数集合</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> mutation</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> entry</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">entry</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">NODE</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;production&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`[vuex] unknown mutation type: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">type</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 执行mutation函数</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">withCommit</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		entry</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> commitIterator</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">handler</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		})</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 执行所有的订阅者函数</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subscribers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sub</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> sub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E5C07B;">		process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#ABB2BF;"> ！</span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> ’</span><span style="color:#E06C75;">production</span><span style="color:#ABB2BF;">‘ </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;">options</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">silent</span></span>
<span class="line"><span style="color:#ABB2BF;">	){</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">warn</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			\`[vuex] mutation type: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">type</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">.Silent option has been removed.\`</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> \`Use the filter functionablity in the vue-devtools\`</span></span>
<span class="line"><span style="color:#ABB2BF;">		)</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type是actions的类型</span></span>
<span class="line"><span style="color:#61AFEF;">dispatch</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><ul><li>commit 支持 3 个参数，type 表示 mutation 的类型，payload 表示额外的参数</li><li>根据 type 查找对应的 mutation，找不到就输出一条错误信息，否则遍历这个 type 对应的 mutation 对象数组，执行 handler(payload)方法，这个方法就是之前定义的 wrappedMutationHandler(handler), 执行它就相当于执行了 registerMutation 注册的回调函数</li></ul><h2 id="如果让你从零开始写一个-vuex-说说你的思路" tabindex="-1">如果让你从零开始写一个 vuex，说说你的思路 <a class="header-anchor" href="#如果让你从零开始写一个-vuex-说说你的思路" aria-label="Permalink to &quot;如果让你从零开始写一个 vuex，说说你的思路&quot;">​</a></h2><h3 id="思路分析-2" tabindex="-1">思路分析 <a class="header-anchor" href="#思路分析-2" aria-label="Permalink to &quot;思路分析&quot;">​</a></h3><p>这个题目很有难度，首先思考<code>vuex</code>解决的问题：存储用户全局状态并提供管理状态 API。</p><ul><li><code>vuex</code>需求分析</li><li>如何实现这些需求</li></ul><h3 id="回答范例-8" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-8" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><ol><li>官方说<code>vuex</code>是一个状态管理模式和库，并确保这些状态以可预期的方式变更。可见要实现一个<code>vuex</code></li></ol><ul><li>要实现一个<code>Store</code>存储全局状态</li><li>要提供修改状态所需 API：<code>commit(type, payload), dispatch(type, payload)</code></li></ul><ol><li>实现<code>Store</code>时，可以定义<code>Store</code>类，构造函数接收选项<code>options</code>，设置属性<code>state</code>对外暴露状态，提供<code>commit</code>和<code>dispatch</code>修改属性<code>state</code>。这里需要设置<code>state</code>为响应式对象，同时将<code>Store</code>定义为一个<code>Vue</code>插件</li><li><code>commit(type, payload)</code>方法中可以获取用户传入<code>mutations</code>并执行它，这样可以按用户提供的方法修改状态。 <code>dispatch(type, payload)</code>类似，但需要注意它可能是异步的，需要返回一个<code>Promise</code>给用户以处理异步结果</li></ol><h3 id="实践" tabindex="-1">实践 <a class="header-anchor" href="#实践" aria-label="Permalink to &quot;实践&quot;">​</a></h3><p><code>Store</code>的实现：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	commit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="vuex-简易版" tabindex="-1">vuex 简易版 <a class="header-anchor" href="#vuex-简易版" aria-label="Permalink to &quot;vuex 简易版&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 1 实现插件，挂载$store</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 2 实现store</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// state响应式处理</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 外部访问： this.$store.state.***</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 第一种写法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// this.state = new Vue({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//   data: options.state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 第二种写法：防止外界直接接触内部vue实例，防止外部强行变更</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				$$state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handleGetters</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">commit</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">commit</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dispatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	set</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Please use replaceState to reset state&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	handleGetters</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">getters</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> getters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">](</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	commit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> entry</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">entry</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">type</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> is not defined\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		entry</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> entry</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">entry</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">type</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> is not defined\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		entry</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> install</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_Vue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">		beforeCreate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">install</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br></div></div><h5 id="验证方式" tabindex="-1">验证方式 <a class="header-anchor" href="#验证方式" aria-label="Permalink to &quot;验证方式&quot;">​</a></h5><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vuex</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./vuex&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// this.$store</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vuex</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		counter</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// state从哪里来的</span></span>
<span class="line"><span style="color:#61AFEF;">		add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">counter</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		doubleCounter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">counter</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		add</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">commit</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#61AFEF;">			setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	modules</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="vuex-原理解析并实现一个简单的-vuex" tabindex="-1">vuex 原理解析并实现一个简单的 vuex <a class="header-anchor" href="#vuex-原理解析并实现一个简单的-vuex" aria-label="Permalink to &quot;vuex 原理解析并实现一个简单的 vuex&quot;">​</a></h2><h3 id="vuex-的作用" tabindex="-1">vuex 的作用 <a class="header-anchor" href="#vuex-的作用" aria-label="Permalink to &quot;vuex 的作用&quot;">​</a></h3><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p></blockquote><p><strong>简单介绍</strong></p><ol><li>State 仓库，vuex 使用单一状态树，每一个应用最好仅包含一个 store 实例，不建议直接修改 state 的值，最好是通过 commit 方法调用 mutation 任务进行修改，方便后期数据的追踪；</li><li>Mutations，定义方法动态修改 state 中的数据，不建议包含逻辑业务处理，处理一些同步任务；</li><li>Actions，定义方法执行异步任务一些复杂的逻辑代码，view 层通过 store.dispath 分发 Action 任务；</li><li>Getter，类似 vue 实例中的计算属性特点，用来过滤、规范、改造数据；</li><li>Module，项目特别复杂的时候使用，每一个模块拥有自己的 state，mutation，Action，getter，代码逻辑更加清晰；库内的数据。</li></ol><h3 id="vuex-的用法" tabindex="-1">vuex 的用法 <a class="header-anchor" href="#vuex-的用法" aria-label="Permalink to &quot;vuex 的用法&quot;">​</a></h3><ol><li>先新建一个文件引入 Vuex，Vue， 然后使用 Vue.use(Vuex) 注册组件。</li><li>再暴露实例化的一个 Store 类。</li><li>在 main.js 中引入，在实例化 Vue 的时候作为参数传入。</li></ol><p>所以我们在模拟 vuex 功能写代码时需要暴露 install 函数 <strong>（Vue.use(Vuex)会自动调用 Vuex 的 install 方法安装插件）</strong> 和 Store 类。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vuex</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;../vuex&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vuex</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	namespaced</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">	modules</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="一点思考" tabindex="-1">一点思考 <a class="header-anchor" href="#一点思考" aria-label="Permalink to &quot;一点思考&quot;">​</a></h3><p>开始撸代码前先想一想最简单的 vuex 是怎么工作的呢？使用过 vuex 的同学知道，我们可以将状态及状态的操作方法分别配置在多个文件中，但最后在使用的的时候都可以通过 this.$store.state.xxx 访问状态、dispatch 触发 action 方法、 commit 触发 mutations 方法等等。而且其他文件中的配置与 Store 类的配置一致。<strong>由此可以联想到 vuex 简单使用是将多个文件中的配置都合并到了 Store 类上作为配置使用</strong>。</p><h3 id="开始实现" tabindex="-1">开始实现 <a class="header-anchor" href="#开始实现" aria-label="Permalink to &quot;开始实现&quot;">​</a></h3><h4 id="暴露-store-类和-install-方法" tabindex="-1">暴露 Store 类和 install 方法 <a class="header-anchor" href="#暴露-store-类和-install-方法" aria-label="Permalink to &quot;暴露 Store 类和 install 方法&quot;">​</a></h4><p>还记得前面说过什么吗？vuex 要暴露 Store 类和 install 方法。 index.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">install</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./store&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Store</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	install</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="foreach-工具函数" tabindex="-1">forEach 工具函数 <a class="header-anchor" href="#foreach-工具函数" aria-label="Permalink to &quot;forEach 工具函数&quot;">​</a></h4><p>可以看到在文件开头引入了 forEach，它是我们写的一个工具函数，<strong>作用是遍历一个对象中的所有的属性，并返回该函数的属性名和属性值</strong>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> forEach</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}, </span><span style="color:#E06C75;font-style:italic;">fu</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fu</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="核心部分" tabindex="-1">核心部分 <a class="header-anchor" href="#核心部分" aria-label="Permalink to &quot;核心部分&quot;">​</a></h4><p>下面是 vuex 的核心部分，定义了 Store 类和 install 方法。</p><h5 id="store-类" tabindex="-1">Store 类 <a class="header-anchor" href="#store-类" aria-label="Permalink to &quot;Store 类&quot;">​</a></h5><p>Store 类的构造函数中会分别调用工具函数 forEach 将传入的 getters、mutattions、actions 添加到对象上。同时定义 commit 函数，使实例可以调用 mutatiaons 中的方法，定义 dispatch 函数，使实例可以调用 actions 中的方法。</p><p><strong>重点</strong></p><ul><li><strong>Vuex 是通过 new 一个 vue 实例，并把 state 作为 vue 的 data 利用 vue 的响应式系统把 state 中的数据变为了 响应式数据。</strong></li><li><strong>getter 本质上是依赖了 vue 的 computed 实现了缓存机制。</strong></li></ul><p>store.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">forEach</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./util&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> applyMixin</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./mixin&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 保存getters</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> computed</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 遍历得到所有getters</span></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fu</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fuName</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 增加缓存机制</span></span>
<span class="line"><span style="color:#E06C75;">			computed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">fuName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#61AFEF;"> fu</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fuName</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">fuName</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 发布订阅者模式，将用户定义的mutation和actions先保存起来，当调用commit十九调用订阅的mutation，调用dipatch时就调用订阅action</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fu</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fuName</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">fuName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> fu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fu</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fuName</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">fuName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> fu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 让数据变为响应式</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//内部状态</span></span>
<span class="line"><span style="color:#E06C75;">				$$state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#E06C75;">			computed</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//计算属性会将自己的属性放到实例上</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 可以使用本方法调用订阅的actions方法</span></span>
<span class="line"><span style="color:#61AFEF;">	dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fuName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">fuName</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 可以使用本方法调用订阅的mutation方法</span></span>
<span class="line"><span style="color:#61AFEF;">	commit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fuName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">fuName</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 类的属性访问器，当访问这个实例的state属性时会执行此方法</span></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义的install方法</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> install</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_Vue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">	applyMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">install</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><h5 id="install-方法" tabindex="-1">install 方法 <a class="header-anchor" href="#install-方法" aria-label="Permalink to &quot;install 方法&quot;">​</a></h5><p>在上面的文件中还定义了 install 方法，该方法在执行 Vue.use(Vuex) 时会自动调用，install 方法中主要是调用 mixin 方法，在 beforeCreate 勾子中为每个组件都混入一个<code>$store</code> 属性，他们都指向同一个 <code>$store</code> 实例。这样就可以通过 <code>this.$store</code> 拿到同一个实例达到数据共享的目的。</p><p>mixin.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> applyMixin</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 每个组件都会混入beforeCreate函数定义一个$store属性，指向同一个Sotre</span></span>
<span class="line"><span style="color:#61AFEF;">		beforeCreate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果是根组件就为根组件添加$store属性</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果是子组件就将根组件的$store属性值赋值给当前组件的$store属性</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> applyMixin</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="总结-6" tabindex="-1">总结 <a class="header-anchor" href="#总结-6" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>vuex 原理还是很简单，很好理解的，要点在于对 Vue.mixin 的方法的应用，该方法可以让所有组件共享一个 $store 实例，实现数据共享。另一要点就是对 getters、mutattions、actions 的搜集，以及 state 的响应式和 getter 的缓存机制十分巧妙。最后的难点是 vuex 的模块与命名空间的实现，它的嵌套模块递归处理很复杂，当然本项目里边并未涉及，感兴趣的小伙伴可以自己去看一看。</p><h2 id="vuex-实现原理" tabindex="-1">Vuex 实现原理 <a class="header-anchor" href="#vuex-实现原理" aria-label="Permalink to &quot;Vuex 实现原理&quot;">​</a></h2><h3 id="准备工作-新建-vue-项目" tabindex="-1">准备工作：新建 Vue 项目 <a class="header-anchor" href="#准备工作-新建-vue-项目" aria-label="Permalink to &quot;准备工作：新建 Vue 项目&quot;">​</a></h3><p>首先把不需要的文件和代码全删了，经典化结构，如下：</p><p><img src="`+P+`" alt="image-20240507200846339"></p><h4 id="app-vue-代码" tabindex="-1">App.vue 代码： <a class="header-anchor" href="#app-vue-代码" aria-label="Permalink to &quot;App.vue 代码：&quot;">​</a></h4><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- vuex 把状态放到一个公共的地方，哪个组件使用，就直接可以从公共的地方获取状态 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="main-js-代码" tabindex="-1">main.js 代码： <a class="header-anchor" href="#main-js-代码" aria-label="Permalink to &quot;main.js 代码：&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./App.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> store</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./store&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> router</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue-router&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">productionTip</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;main&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	router</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//封装了 router-view router-link $router $route</span></span>
<span class="line"><span style="color:#E06C75;">	store</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//写到这里，说明全部的组件都可以使用store</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">h</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">$mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="store-js-代码" tabindex="-1">store.js 代码： <a class="header-anchor" href="#store-js-代码" aria-label="Permalink to &quot;store.js 代码：&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//把里面的全删了，自己写</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 引入自己的写的vuex,里面有一个对象{install}，当你use时，会自动调用这个方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//导入vuex {install Store}</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vuex</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./vuex&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vuex</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//需要创建一个仓库并导出</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//当new的时候,给Vuex.js中传入了一堆的东西</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Fan&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//getters中虽然是一个方法，但是用时，可以把他当作属性</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 说白了，就是vue中data中的computed</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 改变状态：异步请求数据  事件</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>vuex.js 文件中的代码先不写，下面开始写</p><h3 id="实现-state" tabindex="-1">实现 state <a class="header-anchor" href="#实现-state" aria-label="Permalink to &quot;实现 state&quot;">​</a></h3><p>上面准备工作做好，接下来就实现我们的 state</p><p>在 vuex.js 中写如下代码（具体说明和操作已在代码中注释）：</p><p>vuex/store.js</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个Vue,让全局都可以使用这个Vue</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// state实现</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 当new的时候,给Vuex.js中传入了一堆的东西，在这里接收需要用constructor</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(options);   // 打印出{state: {…}, getters: {…}, mutations: {…}, actions: {…}}，就可以拿到里面的数据了</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*-------------------------------state原理-------------------------------------------------------------*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 给每个组件的$store上挂一个state，让每个组件都可以用  this.$store.state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// //数据变化要更新视图 （vue的核心逻辑依赖收集）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//在state上面传入一个name:&#39;Fan&#39;打印一下</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(this.state);    //打印结果  {name: &quot;Fan&quot;}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*-------------------------------------------------------------------------------------------------*/</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// install本质上就是一个函数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> install</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_Vue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(&#39;......&#39;);  //测试能不能调到这个方法,经测试可以调到</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//把构造器赋给全局Vue</span></span>
<span class="line"><span style="color:#E06C75;">	Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 混入：把store挂载到每个组件上面，这样数据才能互通共享</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 以下可以抽离：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 需要将根组件中注入的store 分派给每一个组件 （子组件） Vue.mixin</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// import applyMixin from &quot;./mixin&quot;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// applyMixin(Vue);</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">		beforeCreate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 表示在组件创建之前自动调用，每个组件都有这个钩子</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(this.$options.name) //this表示每个组件,测试，可以打印出mian.js和App.vue中的name main和app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 保证每一个组件都能得到仓库</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 判断如果是main.js的话，就把$store挂到上面</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果不是根组件的话，也把$store挂到上面,因为是树状组件，所以用这种方式</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 在App.vue上的mounted({console.log(this.$store)})钩子中测试，可以得到store ---&gt; Store {}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导出</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Vue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	install</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Store</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p>这样的话，全部的组件都可以使用 this.$store.state 这个方法了</p><h4 id="mixin-抽离成模块" tabindex="-1">mixin 抽离成模块 <a class="header-anchor" href="#mixin-抽离成模块" aria-label="Permalink to &quot;mixin 抽离成模块&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> applyMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 父子组件的beforecreate执行顺序</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 内部会把生命周期函数 拍平成一个数组</span></span>
<span class="line"><span style="color:#E06C75;">		beforeCreate</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">vuexInit</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 组件渲染时从父=》子</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> vuexInit</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 给所有的组件增加$store 属性 指向我们创建的store实例</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 获取用户所有的选项</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 根实例（只有根实例才会有store属性）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 儿子 或者孙子....</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 后面的每一个都从其父组件拿到store</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="实现-getters" tabindex="-1">实现 getters <a class="header-anchor" href="#实现-getters" aria-label="Permalink to &quot;实现 getters&quot;">​</a></h3><p>首先在 store.js 中的 getters 中定义两个方法，用来测试：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// getters中虽然是一个方法，但是用时，可以把他当作属性</span></span>
<span class="line"><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">:{   </span><span style="color:#7F848E;font-style:italic;">// 说白了，就是vue中data中的computed</span></span>
<span class="line"><span style="color:#61AFEF;">    myName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&#39;Jun&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#61AFEF;">    myAge</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>然后在 vuex.js 文件中的 Store 类的 constructor 中来写我们的代码，如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//当new的时候,给Vuex.js中传入了一堆的东西，在这里接收需要用constructor</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(options);   //打印出{state: {…}, getters: {…}, mutations: {…}, actions: {…}}，就可以拿到里面的数据了</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*------------------------------------state原理--------------------------------------------------------*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//给每个组件的$store上挂一个state，让每个组件都可以用  this.$store.state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// this.state = options.state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*-------------------------------------------------------------------------------------------------*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* --------------------------------状态响应式原理---------------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 上面那种写法不完美，当改变数据的时候，不能动态的渲染，所以需要把data中的数据做成响应式的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//_s在下面的 get state方法中使用</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">s</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 只有data中的数据才是响应式</span></span>
<span class="line"><span style="color:#E06C75;">				state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//在state上面传入一个name:&#39;Fan&#39;打印一下</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(this.state);    //打印结果  {name: &quot;Fan&quot;}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ------------------------------------------------------------------------------------------------ */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*---------------------------------getters原理-----------------------------------------------------------*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//得到仓库中的getters,如果人家不写getters的话，就默认为空</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> getters</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(getters);   //打印出一个对象，对象中是一个方法  {myName: ƒ}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//给仓库上面挂载一个getters,这个getters和上面的那一个getters不一样,一个是得到，一个是挂载</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//不好理解,因为人家会给你传多个方法，所以使用这个api处理得到的getters,得到一个数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//把store.js中的getters中再写一个方法myAge，用来测试</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(Object.keys(getters));  //打印出  [&quot;myName&quot;, &quot;myAge&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//遍历这个数组，得到每一个方法名</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">getter</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(getter);    //打印出  myName   myAge</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getter</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//当你要获取getter的时候，会自动调用get这个方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//一定要用箭头函数，要不然this指向会出现问题</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> getters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">getter</span><span style="color:#ABB2BF;">](</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*-------------------------------------------------------------------------------------------------*/</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><p>然后在 App.vue 中测试：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- vuex 把状态放到一个公共的地方，哪个组件使用，就直接可以从公共的地方获取状态 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 打印出 Fan --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">myName</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 打印出 FanJun --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="实现-mutations" tabindex="-1">实现 mutations <a class="header-anchor" href="#实现-mutations" aria-label="Permalink to &quot;实现 mutations&quot;">​</a></h3><p>先用人家的试一下：</p><p>在 App.vue 中定义一个 add 方法,上面定义一个按钮用来触发这个方法，代码：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- vuex 把状态放到一个公共的地方，哪个组件使用，就直接可以从公共的地方获取状态 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 打印出 Fan --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">myName</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 打印出 FanJun --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">hr</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;Add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		add</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//commit一个mutations</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>在 store.js 中用人家的 vuex：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vuex</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vuex&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vuex</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Fan&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//getters中虽然是一个方法，但是用时，可以把他当作属性</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 说白了，就是vue中data中的computed</span></span>
<span class="line"><span style="color:#61AFEF;">		myName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;Jun&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		myAge</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 改变状态：异步请求数据  事件</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> payload</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>这次当点击 Add 按钮的时候，就能实现 加 10 操作</p><h4 id="然后自己写" tabindex="-1">然后自己写： <a class="header-anchor" href="#然后自己写" aria-label="Permalink to &quot;然后自己写：&quot;">​</a></h4><p>在 store.js 中写上 mutations，并且定义两个方法：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 改变状态：异步请求数据  事件</span></span>
<span class="line"><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#61AFEF;">	add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">		state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> payload</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	sub</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>然后在 vuex.js 中的类 Store 中实现：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//当new的时候,给Vuex.js中传入了一堆的东西，在这里接收需要用constructor</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(options);   //打印出{state: {…}, getters: {…}, mutations: {…}, actions: {…}}，就可以拿到里面的数据了</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*-------------------------------state原理-------------------------------------------------------------*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//给每个组件的$store上挂一个state，让每个组件都可以用  this.$store.state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// this.state = options.state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*----------------------------------------------------------------------------------------------------*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* --------------------------------状态响应式原理---------------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 上面那种写法不完美，当改变数据的时候，不能动态的渲染，所以需要把data中的数据做成响应式的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//_s在下面的 get state() 方法中使用</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">s</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 只有data中的数据才是响应式</span></span>
<span class="line"><span style="color:#E06C75;">				state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//在state上面传入一个name:&#39;Fan&#39;打印一下</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(this.state);    //打印结果  {name: &quot;Fan&quot;}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ----------------------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ----------------------------------getters原理------------------------------------------------------------- */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//得到仓库中的getters,如果人家不写getters的话，就默认为空</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> getters</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(getters);   //打印出一个对象，对象中是一个方法  {myName: ƒ}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//给仓库上面挂载一个getters,这个getters和上面的那一个getters不一样,一个是得到，一个是挂载</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//不好理解,因为人家会给你传多个方法，所以使用这个api处理得到的getters,得到一个数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//把store.js中的getters中再写一个方法myAge，用来测试</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(Object.keys(getters));  //打印出  [&quot;myName&quot;, &quot;myAge&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//遍历这个数组，得到每一个方法名</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">getter</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(getter);    //打印出  myName   myAge</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getter</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//当你要获取getter的时候，会自动调用get这个方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//一定要用箭头函数，要不然this指向会出现问题</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// console.log(this);</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> getters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">getter</span><span style="color:#ABB2BF;">](</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* -------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ---------------------------------------mutatios原理----------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//和getters思路差不多</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//得到mutations</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(mutations);     //{add: ƒ}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//挂载mutations</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//拿到对象中的一堆方法</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(mutation);  //add sub</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">mutation</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">mutation</span><span style="color:#ABB2BF;">](</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//打印看一下，正确</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(mutations);     //{add: ƒ, sub: ƒ}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//但是他比较恶心，需要实现commit,在下面实现</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* -------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//给store上挂一个commit,接收两个参数，一个是类型，一个是数据</span></span>
<span class="line"><span style="color:#61AFEF;">	commit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//{add: ƒ, sub: ƒ}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//把方法名和参数传给mutations</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br></div></div><p>在 App.vue 中测试：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- vuex 把状态放到一个公共的地方，哪个组件使用，就直接可以从公共的地方获取状态 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 打印出 Fan --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">myName</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 打印出 FanJun --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">hr</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;Add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(this.$store);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		add</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//commit一个mutations</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h5 id="因为代码比较冗余-所以我简化了代码-就是把公共的方法-object-keys-obj-foreach-key-callback-key-obj-key-抽离出来。" tabindex="-1">因为代码比较冗余，所以我简化了代码，就是把公共的方法 Object.keys(obj).forEach(key =&gt; { callback(key, obj[key]) })抽离出来。 <a class="header-anchor" href="#因为代码比较冗余-所以我简化了代码-就是把公共的方法-object-keys-obj-foreach-key-callback-key-obj-key-抽离出来。" aria-label="Permalink to &quot;因为代码比较冗余，所以我简化了代码，就是把公共的方法 Object.keys(obj).forEach(key =&gt; { callback(key, obj[key]) })抽离出来。&quot;">​</a></h5><p>可以下载源码看一下，这里就不多说了</p><h3 id="实现-actions" tabindex="-1">实现 actions <a class="header-anchor" href="#实现-actions" aria-label="Permalink to &quot;实现 actions&quot;">​</a></h3><p>同样的，在 vuex.js 中的类 Store 中实现，因为我简化了代码，所以整体复制下来看一下，</p><p>这里把 dispatch 和 commit 方法换成了箭头函数，防止 this 指向出现问题</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//定义一个Vue,让全局都可以使用这个Vue</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// forEach是用来循环一个对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> forEach</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 把数组中的每一个key得到  objc[key]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// key  value  ----&gt; callback</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//当new的时候,给Vuex.js中传入了一堆的东西，在这里接收需要用constructor</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(options);   //打印出{state: {…}, getters: {…}, mutations: {…}, actions: {…}}，就可以拿到里面的数据了</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*-------------------------------state原理-------------------------------------------------------------*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//给每个组件的$store上挂一个state，让每个组件都可以用  this.$store.state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// this.state = options.state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*----------------------------------------------------------------------------------------------------*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ---------------------------------------状态响应式原理--------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 上面那种写法不完美，当改变数据的时候，不能动态的渲染，所以需要把data中的数据做成响应式的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//_s在下面的 get state方法中使用</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">s</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 只有data中的数据才是响应式</span></span>
<span class="line"><span style="color:#E06C75;">				state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ----------------------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ----------------------------------------getters原理------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//在state上面传入一个name:&#39;Fan&#39;打印一下</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(this.state);    //打印结果  {name: &quot;Fan&quot;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//得到仓库中的getters,如果人家不写getters的话，就默认为空</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> getters</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(getters);   //打印出一个对象，对象中是一个方法  {myName: ƒ}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//给仓库上面挂载一个getters,这个getters和上面的那一个getters不一样,一个是得到，一个是挂载</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//不好理解,因为人家会给你传多个方法，所以使用这个api处理得到的getters,得到一个数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//把store.js中的getters中再写一个方法myAge，用来测试</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(Object.keys(getters));  //打印出  [&quot;myName&quot;, &quot;myAge&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">getterName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getterName</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* -------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ----------------------------------------mutatios原理---------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//和getters思路差不多</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//得到mutations</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(mutations);     //{add: ƒ}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//挂载mutations</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">mutationName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">mutationName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				value</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//打印看一下，正确</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(mutations);     //{add: ƒ, sub: ƒ}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//但是他需要实现commit,在下面实现</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* -------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ---------------------------------------------actions原理----------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//和上面两种大同小异，不多注释了</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> actions</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				value</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* -------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// type是actions的类型</span></span>
<span class="line"><span style="color:#61AFEF;">	dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//给store上挂一个commit,接收两个参数，一个是类型，一个是数据</span></span>
<span class="line"><span style="color:#61AFEF;">	commit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//{add: ƒ, sub: ƒ}</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//install本质上就是一个函数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> install</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_Vue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(&#39;......&#39;);  //测试能不能调到这个方法,经测试可以调到</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//把构造器赋给全局Vue</span></span>
<span class="line"><span style="color:#E06C75;">	Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//混入</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">		beforeCreate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//表示在组件创建之前自动调用，每个组件都有这个钩子</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(this.$options.name) //this表示每个组件,测试，可以打印出mian.js和App.vue中的name main和app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//保证每一个组件都能得到仓库</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//判断如果是main.js的话，就把$store挂到上面</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//如果不是根组件的话，也把$store挂到上面,因为是树状组件，所以用这种方式</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//在App.vue上的mounted()钩子中测试，可以得到store ---&gt; Store {}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//导出</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	install</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Store</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br></div></div><p>在 mutations 中添加一个异步方法：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">	add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> payload</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	sub</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	asyncSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> -=</span><span style="color:#E06C75;"> payload</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在 store.js 中写一个 actions</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">	asyncSub</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">commit</span><span style="color:#ABB2BF;">}, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;asyncSub&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>最后在 App.vue 中定义方法测试：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- vuex 把状态放到一个公共的地方，哪个组件使用，就直接可以从公共的地方获取状态 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 打印出 Fan --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">myName</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 打印出 FanJun --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">hr</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 同步加 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">add</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;Add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 异步减 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">sub</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;Async Sub&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(this.$store);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是异步的</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 666</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是同步的</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		add</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//commit一个mutations</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		sub</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;asyncSub&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h3 id="删去注释的-vuex-js-代码" tabindex="-1">删去注释的 vuex.js 代码 <a class="header-anchor" href="#删去注释的-vuex-js-代码" aria-label="Permalink to &quot;删去注释的 vuex.js 代码&quot;">​</a></h3><p>其实并没有多少代码</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> forEach</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">s</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> getters</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">getterName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getterName</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">mutationName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">mutationName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				value</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> actions</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">actionName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">actionName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				value</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#61AFEF;">	commit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> install</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_Vue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">		beforeCreate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">install</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Store</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h3 id="总述" tabindex="-1">总述 <a class="header-anchor" href="#总述" aria-label="Permalink to &quot;总述&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个Vue,让全局都可以使用这个Vue</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// forEach是用来循环一个对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> forEach</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 把数组中的每一个key得到  objc[key]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// key  value  ----&gt; callback</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 当new的时候,给Vuex.js中传入了一堆的东西，在这里接收需要用constructor</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(options);   // 打印出{state: {…}, getters: {…}, mutations: {…}, actions: {…}}，就可以拿到里面的数据了</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//给每个组件的$store上挂一个state，让每个组件都可以用  this.$store.state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// this.state = options.state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* --------------------------------------------状态响应式原理---------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 上面那种写法不完美，当改变数据的时候，不能动态的渲染，所以需要把data中的数据做成响应式的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//_s在下面的 get state方法中使用</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">s</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 只有data中的数据才是响应式</span></span>
<span class="line"><span style="color:#E06C75;">				state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ----------------------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ----------------------------------------getters原理------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//在state上面传入一个name:&#39;Fan&#39;打印一下</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(this.state);    //打印结果  {name: &quot;Fan&quot;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//得到仓库中的getters,如果人家不写getters的话，就默认为空</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> getters</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(getters);   //打印出一个对象，对象中是一个方法  {myName: ƒ}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//给仓库上面挂载一个getters,这个getters和上面的那一个getters不一样,一个是得到，一个是挂载</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//不好理解,因为人家会给你传多个方法，所以使用这个api处理得到的getters,得到一个数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//把store.js中的getters中再写一个方法myAge，用来测试</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(Object.keys(getters));  //打印出  [&quot;myName&quot;, &quot;myAge&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">getterName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getterName</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* -------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ------------------------------------------------mutatios原理-------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//和getters思路差不多</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//得到mutations</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(mutations);     //{add: ƒ}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//挂载mutations</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">mutationName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">mutationName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				value</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 打印看一下，正确</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(mutations);     //{add: ƒ, sub: ƒ}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 但是他需要实现commit,在下面实现</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* -------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* --------------------------------------------------actions原理------------------------------------------------ */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//和上面两种大同小异，不多注释了</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> actions</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				value</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* -------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// type是actions的类型</span></span>
<span class="line"><span style="color:#61AFEF;">	dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 给store上挂一个commit,接收两个参数，一个是类型，一个是数据</span></span>
<span class="line"><span style="color:#61AFEF;">	commit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//{add: ƒ, sub: ƒ}</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// install本质上就是一个函数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> install</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_Vue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(&#39;......&#39;);  //测试能不能调到这个方法,经测试可以调到</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//把构造器赋给全局Vue</span></span>
<span class="line"><span style="color:#E06C75;">	Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 混入</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">		beforeCreate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 表示在组件创建之前自动调用，每个组件都有这个钩子</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(this.$options.name) //this表示每个组件,测试，可以打印出mian.js和App.vue中的name main和app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			/* ------------------------------------------state原理--------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 保证每一个组件都能得到仓库</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 判断如果是main.js的话，就把$store挂到上面</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果不是根组件的话，也把$store挂到上面,因为是树状组件，所以用这种方式</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 在App.vue上的mounted()钩子中测试，可以得到store ---&gt; Store {}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ------------------------------------------------------------------------------------------------------------- */</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导出</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	install</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Store</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br></div></div><h2 id="vuex-原理以及简易实现" tabindex="-1">vuex 原理以及简易实现 <a class="header-anchor" href="#vuex-原理以及简易实现" aria-label="Permalink to &quot;vuex 原理以及简易实现&quot;">​</a></h2><h3 id="先来看下-vuex-的基本用法" tabindex="-1">先来看下 vuex 的基本用法 <a class="header-anchor" href="#先来看下-vuex-的基本用法" aria-label="Permalink to &quot;先来看下 vuex 的基本用法&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vuex</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vuex&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1.Vue.use(Vuex);  Vuex是一个对象 install方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.Vuex中有一个Store类</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.混入到组件中 增添store属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vuex</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 使用这个插件  内部会调用Vuex中的install方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// -&gt; data</span></span>
<span class="line"><span style="color:#E06C75;">		age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 计算属性</span></span>
<span class="line"><span style="color:#61AFEF;">		myAge</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// method=&gt; 同步的更改state  mutation的参数是状态</span></span>
<span class="line"><span style="color:#61AFEF;">		changeAge</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> payload</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 更新age属性</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 异步操作做完后将结果提交给mutations</span></span>
<span class="line"><span style="color:#61AFEF;">		changeAge</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">commit</span><span style="color:#ABB2BF;"> }, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;changeAge&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>通过用法可以知道：</p><ol><li>Vuex 是一个对象，它作为 vue 的插件，必然有 install 方法；</li><li>Vuex 中有一个 Store 类，在使用的时候有使用 new;</li><li>需要将 store 混入到组件中。</li></ol><p>于是可以梳理好入口文件</p><p>vuex/index.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">install</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./store&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这个文件是入口文件，核心就是导出所有写好的方法</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Store</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	install</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="store-文件" tabindex="-1">store 文件 <a class="header-anchor" href="#store-文件" aria-label="Permalink to &quot;store 文件&quot;">​</a></h3><p>vuex/store.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// _vue 是Vue的构造函数</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> install</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_vue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 需要保存Vue,用户传入的Vue构造函数</span></span>
<span class="line"><span style="color:#E06C75;">	Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接下来就是把 store 挂载到每个组件上面，这样数据才能互通共享，很显然，通过 Vue.mixin 在 Vue 生命周期 beforeCreate 可以为每个组件注入 store；</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> applyMixin</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./mixin&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// _vue 是Vue的构造函数</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> install</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_vue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 需要保存Vue,用户传入的Vue构造函数</span></span>
<span class="line"><span style="color:#E06C75;">	Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 需要将根组件中注入的store 分派给每一个组件 （子组件） Vue.mixin</span></span>
<span class="line"><span style="color:#61AFEF;">	applyMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>vuex/mixin.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> applyMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 父子组件的beforecreate执行顺序</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 内部会把生命周期函数 拍平成一个数组</span></span>
<span class="line"><span style="color:#E06C75;">		beforeCreate</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">vuexInit</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 组件渲染时从父=》子</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> vuexInit</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 给所有的组件增加$store 属性 指向我们创建的store实例</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 获取用户所有的选项</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 根实例（只有根实例才会有store属性）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 儿子 或者孙子....</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 后面的每一个都从其父组件拿到store</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>接下来就是处理 state,getters,mutations,actions</p><h3 id="state-实现" tabindex="-1">state 实现 <a class="header-anchor" href="#state-实现" aria-label="Permalink to &quot;state 实现&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//数据变化要更新视图 （vue的核心逻辑依赖收集）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 属性如果是通过$开头的 默认不会将这个属性挂载到vm上</span></span>
<span class="line"><span style="color:#E06C75;">				$$store</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 属性访问器   new Store().state  Object.defineProperty({get()})</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>首先来处理 <code>state,options</code> 是用户传入的，其中有 <code>state,getters,mutations,actions</code>，自然可以在 options.state 中取到，但是此时 state 还不是响应式，可以借助 new Vue 中 data 的数据是响应式处理这个问题，将 <code>state</code> 挂载到 <code>$state</code> 上，这个属性是不会被 vue 暴露出去（可能是内部做了处理）。当我们在组件中去获取值的时候，比如 <code>this.store.state.age</code> 时候 <code>this.store.state</code> 就走到到了访问器 <code>get state()</code> 就会将整个仓库的 state 返回出去，而且数据是响应式的。至于为什么在 <code>_vm.data</code> 上，需要去看下 vue 源码实现。</p><h3 id="getters-实现-1" tabindex="-1">getters 实现 <a class="header-anchor" href="#getters-实现-1" aria-label="Permalink to &quot;getters 实现&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.处理state</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//数据变化要更新视图 （vue的核心逻辑依赖收集）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 属性如果是通过$开头的 默认不会将这个属性挂载到vm上</span></span>
<span class="line"><span style="color:#E06C75;">				$$store</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.处理getters属性 具有缓存的 computed 带有缓存 （多次取值是如果值不变是不会重新取值）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">key</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">](</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 属性访问器   new Store().state  Object.defineProperty({get()})</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>通过循环用户传进来的 getters,再通过 Object.defineProperty 把每一个 getter 放入 store 中。不过目前每一次取值都会重新计算，没有缓存功能，不符合 vue 计算属性的用法以及定义。</p><p>先来改造下对象遍历这个方法，因为这个方法后面用的比较多。</p><p>vuex/util.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> forEachValue</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.处理state</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//数据变化要更新视图 （vue的核心逻辑依赖收集）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 属性如果是通过$开头的 默认不会将这个属性挂载到vm上</span></span>
<span class="line"><span style="color:#E06C75;">				$$store</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.处理getters属性 具有缓存的 computed 带有缓存 （多次取值是如果值不变是不会重新取值）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 属性访问器   new Store().state  Object.defineProperty({get()})</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>逻辑都是一样的，接着处理下缓存功能。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.处理state</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//数据变化要更新视图 （vue的核心逻辑依赖收集）</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> computed</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.处理getters属性 具有缓存的 computed 带有缓存 （多次取值是如果值不变是不会重新取值）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将用户的getters 定义在实例上， 计算属性是如何实现缓存</span></span>
<span class="line"><span style="color:#E06C75;">			computed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 当取值的时候执行计算属性的逻辑，此时就有缓存功能</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 属性如果是通过$开头的 默认不会将这个属性挂载到vm上</span></span>
<span class="line"><span style="color:#E06C75;">				$$store</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#E06C75;">			computed</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 属性访问器   new Store().state  Object.defineProperty({get()})</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>computed 具有缓存功能，可以在用户传入的 getters 的时候，将用户的 getters 定义在实例上，computed[key] = () =&gt; fn(this.state) ，在取值的时候 fn(this._vm[key])执行计算属性的逻辑。vuex 的作者真是脑洞大开，鬼才啊，这都能想到。</p><p>mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)</p><ul><li>对传入的属性进行遍历订阅</li><li>通过 commit 方法触发调用。</li></ul><h3 id="mutation-实现" tabindex="-1">mutation 实现 <a class="header-anchor" href="#mutation-实现" aria-label="Permalink to &quot;mutation 实现&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 3.实现mutations</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">commit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//保证当前this 当前store实例</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>commit 使用箭头函数是为了保证调用的都是当前实例，一是通过 this.commit(type,data)，二是在 action 中被解构使用 changeAge({commit},payload){}</p></blockquote><p>actions 和 dispath 也是如此。</p><p>完整的 Store 类</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.处理state</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//数据变化要更新视图 （vue的核心逻辑依赖收集）</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> computed</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.处理getters属性 具有缓存的 computed 带有缓存 （多次取值是如果值不变是不会重新取值）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将用户的getters 定义在实例上， 计算属性是如何实现缓存</span></span>
<span class="line"><span style="color:#E06C75;">			computed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 当取值的时候执行计算属性的逻辑，此时就有缓存功能</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 属性如果是通过$开头的 默认不会将这个属性挂载到vm上</span></span>
<span class="line"><span style="color:#E06C75;">				$$store</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#E06C75;">			computed</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 3.实现mutations</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 4.实现actions</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	commit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//保证当前this 当前store实例</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 属性访问器   new Store().state  Object.defineProperty({get()})</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><h3 id="完整的-store-js" tabindex="-1">完整的 store.js <a class="header-anchor" href="#完整的-store-js" aria-label="Permalink to &quot;完整的 store.js&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> applyMixin</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./mixin&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">forEachValue</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./util&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.处理state</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//数据变化要更新视图 （vue的核心逻辑依赖收集）</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> computed</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.处理getters属性 具有缓存的 computed 带有缓存 （多次取值是如果值不变是不会重新取值）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将用户的getters 定义在实例上， 计算属性是如何实现缓存</span></span>
<span class="line"><span style="color:#E06C75;">			computed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 当取值的时候执行计算属性的逻辑，此时就有缓存功能</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 属性如果是通过$开头的 默认不会将这个属性挂载到vm上</span></span>
<span class="line"><span style="color:#E06C75;">				$$store</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#E06C75;">			computed</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 3.实现mutations</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 4.实现actions</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">		forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	commit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//保证当前this 当前store实例</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 属性访问器   new Store().state  Object.defineProperty({get()})</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// _vue 是Vue的构造函数</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> install</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_vue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 需要保存Vue,用户传入的Vue构造函数</span></span>
<span class="line"><span style="color:#E06C75;">	Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 需要将根组件中注入的store 分派给每一个组件 （子组件） Vue.mixin</span></span>
<span class="line"><span style="color:#61AFEF;">	applyMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div><p>简易版的 vuex 到此完成。接下来就是要处理 module。</p><h2 id="完整版-vuex-实现" tabindex="-1">完整版 Vuex 实现 <a class="header-anchor" href="#完整版-vuex-实现" aria-label="Permalink to &quot;完整版 Vuex 实现&quot;">​</a></h2><p>我们实现了一个简易版的 Vuex，对 state,actions,mutations,getters 进行了功能的实现。但是没有对 modules 进行处理，其实 modules 才是 Vuex 中最核心并且是最难实现的。</p><blockquote><p>Vuex 允许我们将 store 分割成大大小小的对象，每个对象也都拥有自己的 state、getter、mutation、action，高可维护性这个对象我们把它叫做 module（模块），在模块中还可以继续嵌套子模块。</p></blockquote><ul><li><p>state: 所有模块中的 state 中数据最终都会嵌套在一棵树上。类似于如下</p></li><li><p><img src="`+w+'" alt="image-20240516024534902"></p></li><li><p>模块内部的 action、mutation 和 getter 默认可是注册在全局命名空间的，这样使得多个模块能够对同一 mutation 或 action 作出响应。因此在订阅 mutation 和 action 时必须存储在数组中，每次触发，数组中的方法都要执行。</p><p><img src="'+j+`" alt="image-20240516024554302"></p></li></ul><p>Vuex 中可以为每个模块添加 namespaced: true 来标记为当前模块划分一个命名空间，接下来看下具体怎么实现一个完整的 Vuex。</p><h3 id="具体实现" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现" aria-label="Permalink to &quot;具体实现&quot;">​</a></h3><p>总体思路可以分为以下：</p><ol><li>模块收集。就是把用户传给 store 的数据进行格式化，格式化成我们想要的结构（树）</li><li>安装模块。需要将子模块通过模块名定义在跟模块上</li><li>把状态 state 和 getters 定义到当前的 vm 上。</li></ol><h3 id="模块收集" tabindex="-1">模块收集 <a class="header-anchor" href="#模块收集" aria-label="Permalink to &quot;模块收集&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> ModuleCollection</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./module/module-collection&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 数据变化要更新视图 （vue的核心逻辑依赖收集）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.模块收集</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">modules</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ModuleCollection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>ModuleCollection 类的实现</p><p>这个类是收集模块，格式化数据用的，那我们先要知道需要什么样的格式。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">   _raw</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;根模块&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    _children</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">      a</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">          _raw</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;a模块&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          _children</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">              c</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#ABB2BF;">                  .....</span></span>
<span class="line"><span style="color:#ABB2BF;">              }</span></span>
<span class="line"><span style="color:#ABB2BF;">          },</span></span>
<span class="line"><span style="color:#E06C75;">          state</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;a的状态&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;">        b</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">          _raw</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;b模块&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          _children</span><span style="color:#ABB2BF;">:{},</span></span>
<span class="line"><span style="color:#E06C75;">         state</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;b的状态&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    state</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;根模块自己的状态&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>最终需要的是这样一个数结构。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ModuleCollection</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 注册模块 需要用到栈结构数据，[根，a],每次循环递归的时候将其入栈。这样每个模块可以清楚的知道自己的父级是谁</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">([], </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	register</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">rootModule</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 格式化后的结果</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> newModule</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			_raw</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">rootModule</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 用户定义的模块</span></span>
<span class="line"><span style="color:#E06C75;">			_children</span><span style="color:#ABB2BF;">: {}, </span><span style="color:#7F848E;font-style:italic;">// 模块的儿子</span></span>
<span class="line"><span style="color:#E06C75;">			state</span><span style="color:#ABB2BF;">: {}, </span><span style="color:#7F848E;font-style:italic;">// 当前模块的状态</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 说明是根模块</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newModule</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 用户在模块中传了modules属性</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">rootModule</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">modules</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 循环模块 module模块的定义 moduleName模块的名字</span></span>
<span class="line"><span style="color:#61AFEF;">			forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">rootModule</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">modules</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">moduleName</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">moduleName</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>第一次进来的时候 path 是空数组，root 就是用户传进去的模块对象；如果模块有 modules 属性，需要循环去注册这个模块。path.concat(moduleName) 就返回了[a,c]类似的格式。 接下来看下 path 不为空的时候</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 说明是根模块</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newModule</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// this.register(path.concat(moduleName), module); 递归注册前会把module 的名放在 path的位</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">]] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newModule</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>path[path.length -1] 可以取到最后一项，也就是模块的儿子模块。这里我们用的是 this.root._children[path[path.length -1]] = newModule。这样写会把有多层路径的模块最后一项也提到和它平级，因此需要确定这个模块的父级是谁，再把当前模块挂到父级就 okl 了</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 说明是根模块</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newModule</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// this.register(path.concat(moduleName), module); 递归注册前会把module 的名放在 path的位</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// path.splice(0, -1) 是最后一项，是需要被挂的模块</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> parent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">memo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">current</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> memo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">]] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newModule</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="模块的安装" tabindex="-1">模块的安装 <a class="header-anchor" href="#模块的安装" aria-label="Permalink to &quot;模块的安装&quot;">​</a></h3><p>将所有 module 收集后需要对收集到数据进行整理</p><ul><li>state 数据要合并。 <strong>通过 Vue.set(parent,path[path.length-1],rootModule.state)，既可以合并，又能使使 module 数据成为响应式数据;</strong></li><li>action 和 mutation 中方法订阅（数组）</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.模块收集</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">modules</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ModuleCollection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.安装模块 根模块的状态中 要将子模块通过模块名 定义在根模块上</span></span>
<span class="line"><span style="color:#61AFEF;">installModule</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, [], </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">modules</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>this 就是 store, 需要完成 installModule 方法。installModule 中传入的有当前模块，这个模块可能有自己的方法。为此先改造下代码，创建 Module 类。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">forEachValue</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;../util&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> namespaced</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#56B6C2;"> !!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">raw</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">namespaced</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newModule</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">raw</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newModule</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> newModule</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	getChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	addChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> module</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 给模块继续扩展方法</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Module</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>ModuleCollection 中相应的地方稍作修改。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Module</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./module&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ModuleCollection</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 注册模块 需要用到栈结构数据，[根，a],每次循环递归的时候将其入栈。这样每个模块可以清楚的知道自己的父级是谁</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">([], </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	register</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">rootModule</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 格式化后的结果</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> newModule</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Module</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rootModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 说明是根模块</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newModule</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// this.register(path.concat(moduleName), module); 递归注册前会把module 的名放在 path的位</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// path.splice(0, -1) 是最后一项，是需要被挂的模块</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> parent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">memo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">current</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> memo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			parent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">newModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 用户在模块中传了modules属性</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">rootModule</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">modules</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 循环模块 module模块的定义 moduleName模块的名字</span></span>
<span class="line"><span style="color:#61AFEF;">			forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">rootModule</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">modules</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">moduleName</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">moduleName</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> installModule</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">rootState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里我需要遍历当前模块上的 actions、mutation、getters 都把他定义在store的_actions, _mutations, _wrappedGetters 中</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>installModule 就需要循环对当前模块处理对应的 actions、mutation、getters。为此可以对 Module 类增加方法，来让其内部自己处理。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">forEachValue</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;../util&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newModule</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">raw</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newModule</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> newModule</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	getChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	addChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> module</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 给模块继续扩展方法</span></span>
<span class="line"><span style="color:#61AFEF;">	forEachMutation</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">raw</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">raw</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	forEachAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">raw</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">raw</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	forEachGetter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">raw</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">raw</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	forEachChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Module</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> installModule</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">rootState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里我需要遍历当前模块上的 actions、mutation、getters 都把他定义在store的_actions, _mutations, _wrappedGetters 中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 处理mutation</span></span>
<span class="line"><span style="color:#E5C07B;">	module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEachMutation</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">		store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			mutation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 处理action</span></span>
<span class="line"><span style="color:#E5C07B;">	module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEachAction</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">		store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			action</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 处理getter</span></span>
<span class="line"><span style="color:#E5C07B;">	module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEachGetter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">getter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wrappedGetters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> getter</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 处理children</span></span>
<span class="line"><span style="color:#E5C07B;">	module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEachChild</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">child</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 递归加载</span></span>
<span class="line"><span style="color:#61AFEF;">		installModule</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">rootState</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>此时，已经把每个模块的 actions、mutation、getters 都挂到了 store 上，接下来需要对 state 处理。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将所有的子模块的状态安装到父模块的状态上</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 需要注意的是vuex 可以动态的添加模块</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> parent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">memo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">current</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> memo</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#E06C75;">rootState</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果这个对象本身不是响应式的 那么Vue.set 就相当于  obj[属性 ]= 值</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">], </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>到此已经完成模块的安装，接下里是要把这些放到 Vue 实例上面</p><h3 id="模块与实例的关联" tabindex="-1">模块与实例的关联 <a class="header-anchor" href="#模块与实例的关联" aria-label="Permalink to &quot;模块与实例的关联&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 数据变化要更新视图 （vue的核心逻辑依赖收集）</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wrappedGetters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 1.模块收集</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">modules</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ModuleCollection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 2.安装模块 根模块的状态中 要将子模块通过模块名 定义在根模块上</span></span>
<span class="line"><span style="color:#61AFEF;">  installModule</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, [], </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">modules</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 3,将状态和getters 都定义在当前的vm上</span></span>
<span class="line"><span style="color:#61AFEF;">  resetStoreVM</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> resetStoreVM</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> computed</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}; </span><span style="color:#7F848E;font-style:italic;">// 定义计算属性</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}; </span><span style="color:#7F848E;font-style:italic;">// 定义store中的getters</span></span>
<span class="line"><span style="color:#61AFEF;">	forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wrappedGetters</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		computed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">			get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 去计算属性中取值</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			$$state</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		computed</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 计算属性有缓存效果</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>相对应的 Store 类做以下修改</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 数据变化要更新视图 （vue的核心逻辑依赖收集）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wrappedGetters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.模块收集</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">modules</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ModuleCollection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.安装模块 根模块的状态中 要将子模块通过模块名 定义在根模块上</span></span>
<span class="line"><span style="color:#61AFEF;">		installModule</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, [], </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">modules</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 3,将状态和getters 都定义在当前的vm上</span></span>
<span class="line"><span style="color:#61AFEF;">		resetStoreVM</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	commit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 保证当前this 当前store实例</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> mutation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> action</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 属性访问器   new Store().state  Object.defineProperty({get()})</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="命名空间-namespaced" tabindex="-1">命名空间 nameSpaced <a class="header-anchor" href="#命名空间-namespaced" aria-label="Permalink to &quot;命名空间 nameSpaced&quot;">​</a></h3><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。</p><p>[图片上传失败...(image-a03e51-1599730267452)]</p><p>平常写上面基本上都要加上 namespaced，防止命名冲突，方法重复多次执行。现在就算每个 modules 的方法命一样，也默认回加上这个方法别包围的所有父结点的 key，核心就是 <strong>path</strong> 变量，在安装模块的时候把 path 处理下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 我要给当前订阅的事件 增加一个命名空间</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> namespace</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">modules</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getNamespaced</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 返回前缀即可</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>store._modules</strong>就是模块收集好的模块，给它增加一个获取命名空间的方法。</p><p>给 ModuleCollection 类增加一个 getNamespaced 方法，其参数就是 path。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取命名空间, 返回一个字符串</span></span>
<span class="line"><span style="color:#61AFEF;">getNamespaced</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> root</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 从根模块找起来</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// [a,c]</span></span>
<span class="line"><span style="color:#E06C75;">    root</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 不停的去找当前的模块</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> str</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">namespaced</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> key</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;/&#39;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 参数就是一个字符串</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>当然 Module 类也需要增加一个属性访问器</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">get</span><span style="color:#61AFEF;"> namespaced</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#56B6C2;"> !!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">raw</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">namespaced</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>接下来就是在处理 mutation,action,getters 的时候 key 的值加上 namespace 就可以了。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 处理mutation</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEachMutation</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		mutation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理action</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEachAction</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		action</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理getter</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEachGetter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">getter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wrappedGetters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> getter</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>namespaces 核心就是对数据格式的处理，来进行发布与订阅。</p><h3 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h3><blockquote><p>Vuex 的 store 接受 <code>plugins</code> 选项，这个选项暴露出每次 mutation 的钩子。Vuex 插件就是一个函数，它接收 store 作为唯一参数</p></blockquote><p>使用的时候：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#E06C75;">	plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">myPlugin</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在插件中不允许直接修改状态——类似于组件，只能通过提交 mutation 来触发变化</p><p>先来看下一个 vuex 本地持久化的一个插件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> persists</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// store是当前默认传递的</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;VUEX:STATE&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;VUEX:STATE&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>插件返回一个函数，函数的参数就是 store。其中 replaceState, subscribe 是关键点，也是 vuex 其中的 2 个 api,接下来实现一下这 2 个方法。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//数据变化要更新视图 （vue的核心逻辑依赖收集）</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wrappedGetters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.模块收集</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">modules</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ModuleCollection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.安装模块 根模块的状态中 要将子模块通过模块名 定义在根模块上</span></span>
<span class="line"><span style="color:#61AFEF;">		installModule</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, [], </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">modules</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 3,将状态和getters 都定义在当前的vm上</span></span>
<span class="line"><span style="color:#61AFEF;">		resetStoreVM</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 插件内部会依次执行</span></span>
<span class="line"><span style="color:#E5C07B;">		options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">plugins</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">plugin</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> plugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	commit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//保证当前this 当前store实例</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> mutation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> action</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 属性访问器   new Store().state  Object.defineProperty({get()})</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>options.plugins.forEach(plugin=&gt;plugin(this))就是让所有插件依次执行,参数就是<strong>store</strong>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subscribes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subscribes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>subscribe 就介绍一个函数，放入到一个数组或者队列中去。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 处理mutation</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEachMutation</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		mutation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subscribes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">rootState</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>相应的在安装模块处理 mutation 的时候，需要让订阅的 store._subscribes 执行。fn 的参数就是 mutation 和根状态。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 替换掉最新的状态</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这是最简单的改变状态的方法，但此时虽然是 ok 的，但是 mutation 提交的还是旧值，mutation.call(store, module.state, payload)这个地方还是有点问题，module.state 拿到的不是最新的状态。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取最新的状态 可以保证视图更新</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">newState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">current</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> newState</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以通过这个方法能获取到最新的转态，相应的在处理 mutation,getters 的地方做相应调整。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 处理mutation</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEachMutation</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		mutation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subscribes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutation</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理getter</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEachGetter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">getter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wrappedGetters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">namespace</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> getter</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>之前的 mutation.state 全部替换成 getState 去获取最新的值。n(mutation, rootState) 也替换为 fn(mutation, store.state)，这样就可以了。当然源码中并没有 getState 去或获取最新状态的方法。</p><h3 id="vuex-中的辅助方法" tabindex="-1">Vuex 中的辅助方法 <a class="header-anchor" href="#vuex-中的辅助方法" aria-label="Permalink to &quot;Vuex 中的辅助方法&quot;">​</a></h3><blockquote><p>所谓辅助函数，就是辅助我们平时使用，说白了就是让我们偷懒。</p></blockquote><p>我们在页面组件中可能会这样使用</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		我的年龄是:{{ </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;changeAge&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;同步更新age&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;b/changeAge&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;异步更新age&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>this.$store.getters.age 这样用当然是可以，但是就是有点啰嗦，我们可以做以下精简</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#61AFEF;">    age</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>this.$store.getters.age 直接替换成 age，效果肯定是一样的。但是写了在 computed 中写了 age 方法，感觉还是啰嗦麻烦，那再来简化一下吧,先看下用法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#61AFEF;">mapState</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;age&#39;</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>mapState 实现</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> mapState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">stateArr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> stateArr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> stateName</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> stateArr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">		obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">stateName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">stateName</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>那如法炮制，mapGetters</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> mapGetters</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">gettersArr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> gettersArr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> gettName</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> gettersArr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">		obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">gettName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">gettName</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>mapMutations</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> mapMutations</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entries</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(([</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		res</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> res</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>mapActions</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> mapActions</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entries</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(([</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		res</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> res</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>其中这些方法都是在一个 helpers 文件中。在 vuex/index 文件中将其导入。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">install</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./store&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这个文件是入口文件，核心就是导出所有写好的方法</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Store</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	install</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#D19A66;"> *</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./helpers&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="createnamespacedhelpers" tabindex="-1">createNamespacedHelpers <a class="header-anchor" href="#createnamespacedhelpers" aria-label="Permalink to &quot;createNamespacedHelpers&quot;">​</a></h3><p>可以通过使用 <code>createNamespacedHelpers</code> 创建基于某个命名空间辅助函数。它返回一个对象，对象里有新的绑定在给定命名空间值上的组件绑定辅助函数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> createNamespacedHelpers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">namespace</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">	mapState</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">mapState</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">namespace</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">	mapGetters</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">mapGetters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">namespace</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">	mapMutations</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">mapMutations</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">namespace</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">	mapActions</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">mapActions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">namespace</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="总结-7" tabindex="-1">总结 <a class="header-anchor" href="#总结-7" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>vuex 的核心功能基本是完成，也能实现基本功能，不过看源码对很多细节做了处理，边界做了判断。而且其中用到 了很多设计模式以及很多技巧和算法。</p><p>通过自己实现一遍 vuex，可以加深对 vuex 的理解和使用。</p><h1 id="七、pinia" tabindex="-1">七、Pinia <a class="header-anchor" href="#七、pinia" aria-label="Permalink to &quot;七、Pinia&quot;">​</a></h1><p><strong>Pinia 官网</strong>：<a href="https://pinia.vuejs.org/zh/" target="_blank" rel="noreferrer">https://pinia.vuejs.org/zh/</a></p><p><strong>Pinia 的开源地址</strong>：<a href="https://github.com/vuejs/pinia" target="_blank" rel="noreferrer">https://github.com/vuejs/pinia</a></p><h2 id="使用-pinia" tabindex="-1">使用 Pinia <a class="header-anchor" href="#使用-pinia" aria-label="Permalink to &quot;使用 Pinia&quot;">​</a></h2><p><a href="https://github.com/vuejs/pinia" target="_blank" rel="noreferrer">Pinia</a> 是 <code>Vue</code> 官方团队成员专门开发的一个全新状态管理库，并且 <code>Vue</code> 的官方状态管理库已经更改为了 <code>Pinia</code>。在 <a href="https://github.com/vuejs/vuex" target="_blank" rel="noreferrer">Vuex</a> 官方仓库中也介绍说可以把 <code>Pinia</code> 当成是不同名称的 <code>Vuex 5</code>，这也意味不会再出 <code>5</code> 版本了。</p><blockquote><p>当然，<code>Pinia</code> 可不是 <code>Vue3</code> 专属，它同样也是适用于 <code>Vue2</code> 的。</p></blockquote><h3 id="优点-5" tabindex="-1">优点 <a class="header-anchor" href="#优点-5" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>更加轻量级，压缩后提交只有<code>1.6kb</code>。</li><li>完整的 <code>TS</code> 的支持，<code>Pinia</code> 源码完全由 <code>TS</code> 编码完成。</li><li>移除 <code>mutations</code>，只剩下 <code>state</code> 、 <code>actions</code> 、 <code>getters</code> 。</li><li>没有了像 <code>Vuex</code> 那样的模块镶嵌结构，它只有 <code>store</code> 概念，并支持多个 <code>store</code>，且都是互相独立隔离的。当然，你也可以手动从一个模块中导入另一个模块，来实现模块的镶嵌结构。</li><li>无需手动添加每个 <code>store</code>，它的模块默认情况下创建就自动注册。</li><li>支持服务端渲染（<code>SSR</code>）。</li><li>支持 <code>Vue DevTools</code>。</li><li>更友好的代码分割机制。</li></ul><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">npm</span><span style="color:#E06C75;"> install</span><span style="color:#E06C75;"> pinia</span><span style="color:#56B6C2;"> --</span><span style="color:#E06C75;">save</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// or</span></span>
<span class="line"><span style="color:#E06C75;">npm</span><span style="color:#E06C75;"> i</span><span style="color:#E06C75;"> pinia</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;">S</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h3><h4 id="初始化并挂载-pinia" tabindex="-1">初始化并挂载 Pinia <a class="header-anchor" href="#初始化并挂载-pinia" aria-label="Permalink to &quot;初始化并挂载 Pinia&quot;">​</a></h4><p>我们还是根据老传统，在<code>src</code> 文件夹下，新建 <code>store/index.js</code> 文件：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createPinia</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createPinia</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> pinia</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 <code>main.js</code> 文件中进行全局挂载：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createApp</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./App.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> pinia</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./store&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="创建-store" tabindex="-1">创建 store <a class="header-anchor" href="#创建-store" aria-label="Permalink to &quot;创建 store&quot;">​</a></h4><p>完成 <code>Pinia</code> 的初始化后，就可以来定义 <code>store</code> 进入具体使用了，而定义 <code>store</code> 一共有三种不同形式的写法，下面我们一一列举。</p><p>创建 <code>src/store/modules/user.js</code> 文件：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// options API模式</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> usePersonStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;person&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;人类&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		updateName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// getters基本与Vue的计算属性一致</span></span>
<span class="line"><span style="color:#61AFEF;">		getFullName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#98C379;"> &quot;Full&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对象形式</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useTeacherStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;teacher&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;老师&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		updateName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		getFullName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#98C379;"> &quot;Full&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// setup模式</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useStudentStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;student&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;学生&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> updateName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		name</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> getFullName</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#98C379;"> &quot;Full&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> name</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">updateName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getFullName</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><p>上面例子中，我们列举了同个 <code>DEMO</code> 不同的三种写法，它们效果都一样，第一和第二种类似，比较简单；第三种适合 <code>Vue3</code> 的 <code>script setup</code> 的形式。</p><p>需要我们注意的是其中的 <code>id</code> 是必填且需要唯一的。</p><h4 id="具体业务组件中使用-store" tabindex="-1">具体业务组件中使用 store <a class="header-anchor" href="#具体业务组件中使用-store" aria-label="Permalink to &quot;具体业务组件中使用 store&quot;">​</a></h4><p>在 <code>App.vue</code> 中使用：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;Pinia&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			state: {{ </span><span style="color:#E5C07B;">personStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }} ****** getter: {{ </span><span style="color:#E5C07B;">personStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getFullName</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			state: {{ </span><span style="color:#E5C07B;">studentStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }} ****** getter:</span></span>
<span class="line"><span style="color:#ABB2BF;">			{{ </span><span style="color:#E5C07B;">studentStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getFullName</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			state: {{ </span><span style="color:#E5C07B;">teacherStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }} ****** getter:</span></span>
<span class="line"><span style="color:#ABB2BF;">			{{ </span><span style="color:#E5C07B;">teacherStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getFullName</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">updateName</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	usePersonStore</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	useStudentStore</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	useTeacherStore</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@/store/modules/user.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> personStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> usePersonStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> studentStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useStudentStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> teacherStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useTeacherStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> updateName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			personStore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">updateName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;人类-updated&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			studentStore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">updateName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;学生-updated&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			teacherStore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">updateName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;老师-updated&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			personStore</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			studentStore</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			teacherStore</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			updateName</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>上面我们通过 <code>actions</code> 来修改 <code>state</code> ，当然你也可以直接就去 <code>state</code> ，但是更推荐使用前者。<code>actions</code> 支持同步与异步，也支持 <code>await</code> 形式。</p><h3 id="第三种修改-state-方法-patch" tabindex="-1">第三种修改 state 方法-$patch() <a class="header-anchor" href="#第三种修改-state-方法-patch" aria-label="Permalink to &quot;第三种修改 state 方法-$patch()&quot;">​</a></h3><p>在 <code>Pinia</code> 中，一共有三种修改 <code>state</code> 的方式：</p><ul><li>直接修改 <code>state</code> 。</li><li>通过 <code>actions</code> 修改。</li><li>通过 <code>$patch</code> 批量修改。</li></ul><p>新建 <code>src/store/modules/count.js</code> 文件：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useCountStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			count1</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			count2</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			count3</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在 <code>App.vue</code> 中使用：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;Pinia&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;count1: {{ </span><span style="color:#E5C07B;">countStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count1</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;count2: {{ </span><span style="color:#E5C07B;">countStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count2</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;count3: {{ </span><span style="color:#E5C07B;">countStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count3</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">updateName</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useCountStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@/store/modules/count.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> countStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useCountStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> updateName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 直接修改</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// countStore.count1++;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// countStore.count2++;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// countStore.count3++;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 通过$patch批量修改</span></span>
<span class="line"><span style="color:#E5C07B;">			countStore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$patch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count1</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count2</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count3</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// $patch的另外一种形式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// countStore.$patch({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//   count1: 2,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//   count2: 2,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//   count3: 2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// })</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">countStore</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">updateName</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>上面我们展示了直接修改与通过 <code>$patch()</code> 方法进行批量修改的两种形式，它们效果一样。</p><h4 id="那它们有些什么更具体的区别呢" tabindex="-1">那它们有些什么更具体的区别呢？ <a class="header-anchor" href="#那它们有些什么更具体的区别呢" aria-label="Permalink to &quot;那它们有些什么更具体的区别呢？&quot;">​</a></h4><p>通过 <code>$patch()</code> 修改 <code>state</code> 更具性能优势，也就是<code>$patch()</code> 方法是经过性能调优的</p><ol><li><strong>$patch() 修改状态：</strong><ul><li><code>$patch()</code> 是 Pinia 提供的一个方法，用于在 store 中直接修改状态。它是异步的，会触发状态的变化通知，并且支持批量修改。这意味着你可以在同一函数调用中一次性修改多个状态。</li><li>使用 <code>$patch()</code> 直接修改状态是最直接的方式，适用于简单的状态变更，或者不需要进行复杂逻辑处理的情况。</li></ul></li><li><strong>直接修改状态：</strong><ul><li>与 <code>$patch()</code> 不同，直接修改状态并不会触发状态变化通知。这意味着不会触发响应式更新，导致 UI 不会自动更新。</li><li>直接修改状态适用于不需要响应式更新的情况，或者在你确定需要手动控制何时更新 UI 时。</li></ul></li><li><strong>通过 actions 修改状态：</strong><ul><li>在 Pinia 中，actions 是用于封装业务逻辑并修改状态的地方。通过在 actions 中修改状态，你可以进行复杂的逻辑处理、异步操作，然后再修改状态。</li><li>使用 actions 修改状态可以使代码更加清晰、可维护，并且能够更好地跟踪状态的修改历史和流程。</li></ul></li></ol><p>总的来说，直接修改状态和使用 <code>$patch()</code> 都是同步的方式，而通过 actions 修改状态则可以进行异步操作。选择使用哪种方式取决于你的需求和代码结构，但通常推荐使用 actions 来修改状态，以保持代码的可维护性和可扩展性。</p><h3 id="pinia-解构方法-storetorefs" tabindex="-1">Pinia 解构方法-storeToRefs <a class="header-anchor" href="#pinia-解构方法-storetorefs" aria-label="Permalink to &quot;Pinia 解构方法-storeToRefs&quot;">​</a></h3><p>上面的例子中，我们都是通过 <code>.xxx</code> 来访问数据，但是当很多数据被使用时，为了更简洁的使用这些数据，我们都会采用解构的方式来优化。</p><p><code>ES6</code> 中普通的解构形式虽然能获取到值，但是却会失去响应式。</p><p><code>Pinia</code> 为我们提供了 <a href="https://pinia.vuejs.org/api/modules/pinia.html%23storetorefs" target="_blank" rel="noreferrer">storetorefs</a> API 方便一次性获取所有的数据，并且它们依旧是具备响应式的。</p><p>新建 <code>src/store/modules/info.js</code> 文件：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useInfoStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;info&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;橙某人&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在 <code>App.vue</code> 文件中使用：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;Pinia&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">update</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useInfoStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@/store/modules/info.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">storeToRefs</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> infoStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useInfoStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">age</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> storeToRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">infoStore</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 解构</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> update</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			infoStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;YDYDYDQ&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			infoStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">update</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="store-互相调用" tabindex="-1">store 互相调用 <a class="header-anchor" href="#store-互相调用" aria-label="Permalink to &quot;store 互相调用&quot;">​</a></h3><p>新建 <code>src/store/modules/other.js</code> 文件：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useOtherStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;other&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			hobby</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;吃饭&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;睡觉&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;打豆豆&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在 <code>src/store/modules/info.js</code> 文件中引入：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useOtherStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./other&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useInfoStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;info&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;橙某人&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		getHobby</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> useOtherStore</span><span style="color:#ABB2BF;">().</span><span style="color:#E06C75;">hobby</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 获取爱好列表</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="getter-setter-函数" tabindex="-1">Getter/Setter 函数 <a class="header-anchor" href="#getter-setter-函数" aria-label="Permalink to &quot;Getter/Setter 函数&quot;">​</a></h3><p>首先，pinia 支持“getter”和“setter”函数，可以让我们更加灵活地定义状态的访问和修改方式。具体的代码如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useCounterStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;counter&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">		_count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}),</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		count</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		doubleCount</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		increment</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在这个例子中，我们定义了一个名为“count”的 getter 函数和一个名为“doubleCount”的 getter 函数，它们分别返回状态“_count”的值和它的两倍。我们可以通过“counterStore.count”和“counterStore.doubleCount”来获取它们的返回值。</p><h3 id="actions-函数和异步支持" tabindex="-1">Actions 函数和异步支持 <a class="header-anchor" href="#actions-函数和异步支持" aria-label="Permalink to &quot;Actions 函数和异步支持&quot;">​</a></h3><p>另外，pinia 还支持“actions”函数，它们可以让我们更加细粒度地控制状态的修改和异步操作。具体的代码如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useCounterStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;counter&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">		_count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}),</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		count</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		doubleCount</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		increment</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#C678DD;">		async</span><span style="color:#61AFEF;"> incrementAsync</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			await</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在这个例子中，我们定义了一个名为“increment”的“actions”函数和一个名为“incrementAsync”的异步“actions”函数，它们分别用来同步和异步增加状态“_count”的值。</p><h3 id="subscribe-函数订阅状态变化" tabindex="-1">Subscribe 函数订阅状态变化 <a class="header-anchor" href="#subscribe-函数订阅状态变化" aria-label="Permalink to &quot;Subscribe 函数订阅状态变化&quot;">​</a></h3><p>另外，pinia 还支持“subscribe”函数，它可以让我们订阅状态的变化，并在状态变化时执行一些操作。具体的代码如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useCounterStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;counter&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">		_count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}),</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		count</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		doubleCount</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		increment</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//****** subscribe ********</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> counterStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useCounterStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">counterStore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(({ </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`count is now </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>在这个例子中，我们使用“subscribe”函数来订阅状态的变化，并在状态变化时打印一条日志。</p><h3 id="数据持久化" tabindex="-1">数据持久化 <a class="header-anchor" href="#数据持久化" aria-label="Permalink to &quot;数据持久化&quot;">​</a></h3><p>项目中的状态管理一般我们需要把它进行数据持久化，否则一刷新就会造成数据丢失。</p><h4 id="方式-1-pinia-配套有个插件-pinia-plugin-persist-可以用来实现数据持久化。" tabindex="-1">方式 1：<code>Pinia</code> 配套有个插件 <a href="https://seb-l.github.io/pinia-plugin-persist/" target="_blank" rel="noreferrer">pinia-plugin-persist</a> 可以用来实现数据持久化。 <a class="header-anchor" href="#方式-1-pinia-配套有个插件-pinia-plugin-persist-可以用来实现数据持久化。" aria-label="Permalink to &quot;方式 1：\`Pinia\` 配套有个插件 [pinia-plugin-persist](https://seb-l.github.io/pinia-plugin-persist/) 可以用来实现数据持久化。&quot;">​</a></h4><h5 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> pinia-plugin-persist</span><span style="color:#D19A66;"> -S</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h5><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createPinia</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> piniaPluginPersist</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;pinia-plugin-persist&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createPinia</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">piniaPluginPersist</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> pinia</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="在对应的-store-中开启缓存" tabindex="-1">在对应的 <code>store</code> 中开启缓存： <a class="header-anchor" href="#在对应的-store-中开启缓存" aria-label="Permalink to &quot;在对应的 \`store\` 中开启缓存：&quot;">​</a></h5><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// info.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useOtherStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./other&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useInfoStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;info&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;橙某人&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		getHobby</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> useOtherStore</span><span style="color:#ABB2BF;">().</span><span style="color:#E06C75;">hobby</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	persist</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		enabled</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 开启缓存</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="开启缓存后-默认数据是缓存在-sessionstorage-里面的。" tabindex="-1">开启缓存后，默认数据是缓存在 <code>sessionStorage</code> 里面的。 <a class="header-anchor" href="#开启缓存后-默认数据是缓存在-sessionstorage-里面的。" aria-label="Permalink to &quot;开启缓存后，默认数据是缓存在 \`sessionStorage\` 里面的。&quot;">​</a></h5><p><img src="`+S+`" alt="2250677070"></p><h4 id="方式-2-也可以指定成-localstorage-作为缓存" tabindex="-1">方式 2：也可以指定成 <code>localStorage</code> 作为缓存： <a class="header-anchor" href="#方式-2-也可以指定成-localstorage-作为缓存" aria-label="Permalink to &quot;方式 2：也可以指定成 \`localStorage\` 作为缓存：&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// info.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useOtherStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./other&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useInfoStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;info&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;jack&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		getHobby</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> useOtherStore</span><span style="color:#ABB2BF;">().</span><span style="color:#E06C75;">hobby</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	persist</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		enabled</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 开启缓存</span></span>
<span class="line"><span style="color:#E06C75;">		strategies</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#E06C75;">				key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;infoStore&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 修改缓存的key</span></span>
<span class="line"><span style="color:#E06C75;">				storage</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">localStorage</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 指定localStorage作为缓存</span></span>
<span class="line"><span style="color:#E06C75;">				paths</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 只缓存name</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		],</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h1 id="_7-1-pinia-面试题" tabindex="-1">7.1 Pinia 面试题 <a class="header-anchor" href="#_7-1-pinia-面试题" aria-label="Permalink to &quot;7.1 Pinia 面试题&quot;">​</a></h1><h2 id="什么是-pinia" tabindex="-1">什么是 Pinia？ <a class="header-anchor" href="#什么是-pinia" aria-label="Permalink to &quot;什么是 Pinia？&quot;">​</a></h2><ul><li>在<code>Vue3</code>中，可以使用传统的<code>Vuex</code>来实现状态管理，也可以使用最新的<code>pinia</code>来实现状态管理，我们来看看官网如何解释<code>pinia</code>的：<code>Pinia</code> 是 <code>Vue</code> 的存储库，它允许您跨组件/页面共享状态。</li><li>实际上，<code>pinia</code>就是<code>Vuex</code>的升级版，官网也说过，为了尊重原作者，所以取名<code>pinia</code>，而没有取名<code>Vuex</code>，所以大家可以直接将<code>pinia</code>比作为<code>Vue3</code>的<code>Vuex</code></li></ul><p><a href="https://github.com/vuejs/pinia" target="_blank" rel="noreferrer">Pinia</a> 是 <code>Vue</code> 官方团队成员专门开发的一个全新状态管理库，并且 <code>Vue</code> 的官方状态管理库已经更改为了 <code>Pinia</code>。</p><p>在 <a href="https://github.com/vuejs/vuex" target="_blank" rel="noreferrer">Vuex</a> 官方仓库中也介绍说可以把 <code>Pinia</code> 当成是不同名称的 <code>Vuex 5</code>，这也意味不会再出 <code>5</code> 版本了。</p><p>优点</p><ul><li>更加轻量级，压缩后提交只有<code>1.6kb</code>。</li><li>完整的 <code>TS</code> 的支持，<code>Pinia</code> 源码完全由 <code>TS</code> 编码完成。</li><li>移除 <code>mutations</code>，只剩下 <code>state</code> 、 <code>actions</code> 、 <code>getters</code> 。</li><li>没有了像 <code>Vuex</code> 那样的模块镶嵌结构，它只有 <code>store</code> 概念，并支持多个 <code>store</code>，且都是互相独立隔离的。当然，你也可以手动从一个模块中导入另一个模块，来实现模块的镶嵌结构。</li><li>无需手动添加每个 <code>store</code>，它的模块默认情况下创建就自动注册。</li><li>支持服务端渲染（<code>SSR</code>）。</li><li>支持 <code>Vue DevTools</code>。</li><li>更友好的代码分割机制。</li></ul><blockquote><p><code>Pinia</code> 配套有个插件 <a href="https://seb-l.github.io/pinia-plugin-persist/" target="_blank" rel="noreferrer">pinia-plugin-persist</a>进行数据持久化，否则一刷新就会造成数据丢失</p></blockquote><h2 id="为什么要使用-pinia" tabindex="-1">为什么要使用 pinia？ <a class="header-anchor" href="#为什么要使用-pinia" aria-label="Permalink to &quot;为什么要使用 pinia？&quot;">​</a></h2><ul><li><code>Vue2</code> 和 <code>Vue3</code> 都支持，这让我们同时使用 <code>Vue2</code> 和 <code>Vue3</code> 的小伙伴都能很快上手。</li><li><code>Pinia</code>中只有<code>state</code>、<code>getter</code>、<code>action</code>，抛弃了 <code>Vuex</code> 中的 <code>Mutation</code>，<code>Vuex</code> 中 <code>mutation</code> 一直都不太受小伙伴们的待见，<code>Pinia</code>直接抛弃它了，这无疑减少了我们工作量。</li><li><code>Pinia</code> 中 <code>action</code> 支持同步和异步，<code>Vuex</code> 不支持</li><li>良好的 <code>Typescript</code> 支持，毕竟我们<code>Vue3</code>都推荐使用<code>TS</code>来编写，这个时候使用 <code>Pinia</code> 就非常合适了</li><li>无需再创建各个模块嵌套了，<code>Vuex</code> 中如果数据过多，我们通常分模块来进行管理，稍显麻烦，而 <code>pinia</code> 中每个<code>store</code> 都是独立的，互相不影响。</li><li><strong>Pinia</strong> 体积非常小，只有 <code>1KB</code> 左右。</li><li><code>Pinia</code> 支持插件来扩展自身功能。</li><li><code>Pinia</code> 支持服务端渲染</li></ul><h2 id="pinia-和-vuex-的使用和区别" tabindex="-1">pinia 和 Vuex 的使用和区别 <a class="header-anchor" href="#pinia-和-vuex-的使用和区别" aria-label="Permalink to &quot;pinia 和 Vuex 的使用和区别&quot;">​</a></h2><p>Pinia 和 Vuex 都是<strong>Vue.js 状态管理库</strong>，但它们在<strong>实现方法</strong>和<strong>设计理念</strong>上有所不同。</p><p>Pinia 是一个新近发布的状态管理库，它旨在提供更简单、更优雅的方式来处理 Vue.js 应用程序的状态管理。</p><p>Pinia 的重点在于使用<strong>Vue 3 的 Composition API</strong>，以及提供更好的类型支持和更好的测试体验。</p><p>Pinia 的架构更加<strong>分散式</strong>，没有全局存储，而是针对每个组件实例创建自己的状态存储。</p><p>Vuex 是一个比较成熟、广为人知的状态管理库，它被广泛使用在 Vue.js 应用程序中。</p><p>Vuex 提供了一个<strong>中央存储管理应用程序状态的机制</strong>，并提供了一系列 API 来管理该状态。</p><p>它的架构是<strong>集中式</strong>的，所有的状态都存储在一个全局对象中，组件通过 Vuex 提供的 API 来访问状态。</p><p>因此，Pinia 和 Vuex 在实现方法和设计理念上有所不同，开发人员可以根据应用程序的需要来选择合适的状态管理库。</p><blockquote><p>Pinia 是 Vue 3 的状态管理库，使用 Composition API 构建，提供了更好的类型推断和响应式数据管理。</p><p>Vuex 是 Vue 2 的状态管理库，使用对象和选项 API 构建，提供了类似于 Flux 架构的状态管理模式。</p><p>Pinia 相较于 Vuex 更加轻量级，具有更好的性能和灵活性，并且可以与任何 Vue 3 应用程序一起使用。</p></blockquote><p><code>Vuex</code>是<code>Vue2</code>官方提供的一个状态管理工具；而<code>pinia</code>是<code>Vue3</code>官方推荐的一个状态管理工具。</p><ul><li>它们都是用于储存和读取<code>公共属性和方法</code>的一个工具；</li><li>它们中存取的数据都是<code>响应式的</code>，但是刷新页面会丢失数据，因此需要进行<code>持久化处理</code>；</li></ul><h3 id="_1-vuex" tabindex="-1">（1）Vuex <a class="header-anchor" href="#_1-vuex" aria-label="Permalink to &quot;（1）Vuex&quot;">​</a></h3><p><code>Vuex</code>一共有五个属性<code>state</code>、<code>getter</code>、<code>mutation</code>、<code>action</code>、<code>module</code>。</p><ul><li><code>state</code>：主要是用于管理 store 的一个<code>容器</code>，可以在这里面定义一些<code>公用属性</code>；</li><li><code>getter</code>：类似于 Vue 组件实例的<code>computed</code>，主要用于做一些计算，也可以用于<code>访问state中的属性</code>；</li><li><code>mutation</code>：主要用于对<code>state的内容</code>进行同步修改，是<code>修改state内容</code>唯一被官方推荐使用的手段，可以使用<code>commit(&#39;mutation&#39;)</code>来调用<code>mutation</code>；</li><li><code>action</code>：主要进行一些<code>异步操作</code>，然后通过<code>mutation</code>来该变<code>state的内容</code>，调用<code>action</code>的方法时使用<code>dispatch</code>；</li><li><code>module</code>：用于将 store 分模块，否则所有属性存在一个 store 中时会造成冗余，而且某些场景下，可能不同数据属于不同的业务，将其分为多模块的方式比较好。</li></ul><h3 id="_2-pinia" tabindex="-1">（2）pinia <a class="header-anchor" href="#_2-pinia" aria-label="Permalink to &quot;（2）pinia&quot;">​</a></h3><p><code>pinia</code>在<code>Vuex</code>的基础上去掉了<code>mutation</code>，将<code>action</code>作为<code>同步和异步</code>共用的操作方法，并且去掉了<code>module</code>属性，因为每定义一个 store 就相当于一个模块。因此它一共有<code>三个属性</code>：<code>state</code>、<code>getter</code>、<code>action</code>。</p><p><code>pinia</code>的各个属性和<code>Vuex</code>类似。</p><h3 id="_3-区别" tabindex="-1">（3）区别 <a class="header-anchor" href="#_3-区别" aria-label="Permalink to &quot;（3）区别&quot;">​</a></h3><ul><li>使用方式不同，<code>pinia</code>和<code>vuex</code>是两个不同的库，因此在使用方式上有些<code>细微差别</code>；</li><li><code>pinia</code>支持 compositionApi 的格式，更加贴合 Vue3；</li><li><code>pinia</code>的语法和使用方式更加简洁，调用<code>action</code>的方法时无需使用<code>dispatch</code>；</li></ul><h2 id="pinia-的好处" tabindex="-1">pinia 的好处 <a class="header-anchor" href="#pinia-的好处" aria-label="Permalink to &quot;pinia 的好处&quot;">​</a></h2><ul><li><p>pinia 和 vuex4 一样，也是 vue <strong>官方</strong> 状态管理工具(作者是 Vue 核心团队成员）</p></li><li><p>pinia 相比 vuex4，对于 vue3 的 <strong>兼容性</strong> 更好</p></li><li><p>pinia 相比 vuex4，具备完善的 <strong>类型推荐</strong> =&gt; 对 TS 支持很友好</p></li><li><p>pinia 同样支持 vue 开发者工具</p></li><li><p><strong>Pinia</strong> 的 API 设计非常接近 Vuex 5 的提案</p><p><strong>pinia 核心概念</strong></p><ul><li>state: 状态</li><li>actions: 修改状态（包括同步和异步，pinia 中没有 mutations）</li><li>getters: 计算属性</li></ul><p>vuex 只能有一个根级别的状态, pinia 直接就可以定义多个根级别状态</p></li></ul><h2 id="pinia-与-vuex-相比有什么优劣势" tabindex="-1">Pinia 与 Vuex 相比有什么优劣势？ <a class="header-anchor" href="#pinia-与-vuex-相比有什么优劣势" aria-label="Permalink to &quot;Pinia 与 Vuex 相比有什么优劣势？&quot;">​</a></h2><p>Pinia 相对于 Vuex 来说，主要的优势是它采用了更加简单、更加轻量级的 API 设计。在 Pinia 中，我们只需要定义一个 store，然后在组件中使用<code>$store</code>来访问它，而不需要像 Vuex 那样需要定义 mutations、actions 等一系列概念。此外，Pinia 通过 TypeScript 的类型系统来提供了更强大的类型检查和智能提示功能。</p><p><strong>Pinia 的核心原理是什么？</strong> Pinia 的核心原理是将应用的状态分解为多个独立的 store，并通过 provide/inject 机制来将它们注入到 Vue 组件中。每个 store 由一个名为<code>defineStore</code>的工厂函数创建，它接收一个名为<code>id</code>的参数，用于标识该 store，以及一个名为<code>state</code>的对象，用于定义该 store 的状态。</p><p><strong>如何在 Pinia 中定义一个 store？</strong> 在 Pinia 中，我们可以通过<code>defineStore</code>函数来定义一个 store。例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useCounterStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;counter&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">		count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}),</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在上面的例子中，我们定义了一个名为<code>useCounterStore</code>的 store，它的标识符是<code>counter</code>，并且它的状态包含一个名为<code>count</code>的属性，初始值为 0。</p><h2 id="如何在组件中使用-pinia" tabindex="-1">如何在组件中使用 Pinia？ <a class="header-anchor" href="#如何在组件中使用-pinia" aria-label="Permalink to &quot;如何在组件中使用 Pinia？&quot;">​</a></h2><p>在组件中，我们可以通过<code>useStore</code>函数来访问<strong>Pinia</strong>中的<strong>store</strong>，并通过<code>computed</code>属性来监听它们的变化。</p><p>例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// main.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createApp</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./App.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createPinia</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createPinia</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建 store</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// store/user.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useUsersStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;users&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}),</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在组件中使用：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- src/App.vue --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;姓名：{{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;年龄：{{ </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;性别：{{ </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useUsersStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@/store&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useUsersStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ref</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> string</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ref</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> number</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ref</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> string</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="如何在-pinia-中定义一个-store" tabindex="-1">如何在 Pinia 中定义一个 store？ <a class="header-anchor" href="#如何在-pinia-中定义一个-store" aria-label="Permalink to &quot;如何在 Pinia 中定义一个 store？&quot;">​</a></h2><p>使用 <strong>defineStore</strong> 函数来定义一个 <strong>store</strong>。</p><ul><li>该函数接收两个参数： <ul><li><strong>id</strong>：一个字符串，用于标识该 <strong>store</strong> 的唯一 ID。</li><li><strong>state</strong>：一个对象，用于定义该 <strong>store</strong> 的状态。</li></ul></li></ul><h2 id="pinia-与-vuex-的对比" tabindex="-1">pinia 与 vuex 的对比 <a class="header-anchor" href="#pinia-与-vuex-的对比" aria-label="Permalink to &quot;pinia 与 vuex 的对比&quot;">​</a></h2><ul><li>在规划 vuex 下一个迭代版本的时候，发现 pinia 已经实现了 Vuex5 的许多想法，因此 pinia 就作为了 Vuex 的代替方案</li><li>pinia 更轻便，使用起来更简单方便，可以像写 composable 函数一样来写 store</li><li>更好的 typeScript 支持</li><li>支持 vueDevtools，对状态的变化进行追踪</li><li>废弃了 mutations，对于模块的管理更加扁平化</li><li>支持在 vue2 和 vue3 中进行使用，并且支持 mapStates，mapGetters，mapActions 等方法</li></ul><h1 id="_7-2-pinia-原理解析" tabindex="-1">7.2 Pinia 原理解析 <a class="header-anchor" href="#_7-2-pinia-原理解析" aria-label="Permalink to &quot;7.2 Pinia 原理解析&quot;">​</a></h1><p>在<code>Pinia</code>中，状态存储是指一个包含状态和修改状态的方法的对象。使用<code>defineStore</code>函数创建状态存储，每个状态存储都有一个唯一的<code>id</code>属性用于区分不同的状态存储。在状态存储中，状态使用<code>state</code>属性定义，修改状态的方法使用<code>actions</code>属性定义。</p><p>在 Vue 3 应用程序中，可以使用<code>inject</code>和<code>provide</code>函数在组件中访问状态存储。使用<code>inject</code>函数将状态存储注入到组件中，并将其存储在一个变量中，然后就可以在组件中使用该变量来访问状态存储中的状态和修改状态的方法。</p><p>Pinia 的工作原理主要是利用了 Vue 3 提供的<code>reactive</code>函数和<code>watch</code>函数。当状态存储中的状态发生变化时，Pinia 会自动更新依赖于该状态的组件。在组件中，可以使用<code>computed</code>和<code>watch</code>函数来监听状态存储中的状态，当状态发生变化时，组件会自动更新。</p><p>Pinia 还提供了一些高级功能，如插件、中间件和钩子函数等。通过这些功能，开发者可以扩展 Pinia 的功能，并根据具体需求进行定制化。</p><p>总的来说，Pinia 是一个非常实用的状态管理库，可以帮助开发者更好地管理 Vue 3 应用程序的状态，并提高开发效率和代码可维护性。</p><p>以下是对 Pinia 工作原理的总结：</p><blockquote><ol><li>创建 Pinia 实例：</li></ol><p><code>createPinia()</code> 用于生成 Pinia 实例，这个实例你可以将其看作为一个全局的 store 容器，用来保存所有的 Vuex store。</p><ol start="2"><li>创建 Store：</li></ol><p>使用 <code>createStore</code> 可以创建一个新的 store，这个 store 可看做是一个独立的状态管理空间，其中包含了 state、getters 和 actions，被创建的 store 实例会被自动添加到 Pinia 实例中。</p><ol start="3"><li>使用 Store：</li></ol><p>我们通过在组件中调用用 <code>createStore</code> 创建的 store 函数，来获取对应的 Pinia store 的实例。然后，我们就可以访问其中的 state、getters，或者执行 actions 里定义的方法。</p><ol start="4"><li>监听 Store 变化：</li></ol><p>我们可以使用 Vue 的 <code>watch</code> 和 <code>watchEffect</code> 函数来监听 store 中 state 或 getters 的变化，以便在这些内容改变时执行相应的操作。</p><ol start="5"><li>整合到 Vue App 中：</li></ol><p>创建的 Pinia 实例需要使用 <code>app.use()</code> 安装到 Vue App 中，以便 Pinia 与 Vue App 一同工作，提供全局的状态管理能力。</p></blockquote><p>如果你已经熟悉 Vue 或 Vuex，那么你在学习和使用 Pinia 时应该会觉得很自然，因为其设计思想和使用方式与 Vue、Vuex 非常接近，但同时也提供了更加灵活和便利的特性。</p><h2 id="待定-1" tabindex="-1">待定 <a class="header-anchor" href="#待定-1" aria-label="Permalink to &quot;待定&quot;">​</a></h2><p><a href="https://juejin.cn/post/7124279061035089927" target="_blank" rel="noreferrer">分析 pinia 源码之前必须知道的 API</a></p><p><a href="https://juejin.cn/post/7117131804229763079" target="_blank" rel="noreferrer">Pinia 源码分析【1】- 源码分析环境搭建</a></p><p><a href="https://juejin.cn/post/7119788423501578277" target="_blank" rel="noreferrer">Pinia 源码分析【2】- createPinia</a></p><p><a href="https://juejin.cn/post/7121661056044236831" target="_blank" rel="noreferrer">pinia 源码分析【3】- defineStore</a></p><p><a href="https://juejin.cn/post/7123504805892325406" target="_blank" rel="noreferrer">pinia 源码分析【4】- Pinia Methods</a></p><p><a href="https://juejin.cn/post/7210175991837736997" target="_blank" rel="noreferrer">Pinia 原理解读 - 初始化流程与数据仓库的实现 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7225038708965818426" target="_blank" rel="noreferrer">🍍 深入解析 Pinia 源码：一份全面的指南 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7213548316981968954" target="_blank" rel="noreferrer">Pinia 原理解读 - 相关 methods 与 api 的解析 - 掘金 (juejin.cn)</a></p><h2 id="手写-pinia" tabindex="-1">手写 pinia <a class="header-anchor" href="#手写-pinia" aria-label="Permalink to &quot;手写 pinia&quot;">​</a></h2><p>简易版 Pinia 的实现中包括以下关键部分：</p><ol><li>创建一个 Pinia 对象，它包含一个响应式的 Map，用于存储所有的 store。</li><li>设定在 Vue 类型系统 的安装方法，它将 Pinia 实例提供给整个 Vue 应用。</li><li>设定一个 <strong><code>createStore</code></strong> 方法，用于创建或获取一个 store。store 是通过处理选项参数（如：id, state, getters, actions）生成的。</li><li>设定一个 <strong><code>useStore</code></strong> 方法，通过 store id 来获取 store。使用 <code>computed()</code> 函数确保返回的 store 是响应式的。</li></ol><h4 id="具体代码实现" tabindex="-1">具体代码实现： <a class="header-anchor" href="#具体代码实现" aria-label="Permalink to &quot;具体代码实现：&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 引入所需的 Vue Composition API 相关函数</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createStore</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> createVuexStore</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建 Pinia 对象</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createPinia</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 用 reactive 创建响应式存储对象</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> stores</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 安装 Pinia 到 Vue 应用</span></span>
<span class="line"><span style="color:#61AFEF;">		install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 在 Vue 应用中注册 Pinia 实例</span></span>
<span class="line"><span style="color:#E5C07B;">			app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;pinia&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 创建名为 &quot;createStore&quot; 的方法，用于根据选项创建或获取 store</span></span>
<span class="line"><span style="color:#61AFEF;">		createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果 stores 已经存在相应的 store，则直接返回这个 store</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stores</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> stores</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 使用 Vue createVuexStore 函数创建响应式 store</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createVuexStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				getters</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				actions</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将新创建的 store 添加到 stores 中</span></span>
<span class="line"><span style="color:#E5C07B;">			stores</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 返回创建的 store</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 使用 store 的名字获取 store</span></span>
<span class="line"><span style="color:#61AFEF;">		useStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 返回一个计算属性，其值为获取到的 store</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> stores</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建 Store</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 返回一个使用 store 的函数，需要在 setup() 中调用</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> useStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> inject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;pinia&quot;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用 pinia 的 createStore 方法创建或获取对应的 store</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createPinia</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h4 id="然后-是它的实际使用了" tabindex="-1">然后，是它的实际使用了： <a class="header-anchor" href="#然后-是它的实际使用了" aria-label="Permalink to &quot;然后，是它的实际使用了：&quot;">​</a></h4><p>1.首先，我们要在应用层面使用 <code>createPinia</code> 创建 Pinia 实例并安装到 Vue 应用中：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createApp</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./App.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createPinia</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建 Pinia 实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createPinia</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建 Vue 应用</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 Pinia</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 挂载到 DOM</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>2.然后，我们可以通过 <code>createStore</code>方法创建一个名为 <code>useCounterStore</code></p><p>的 store：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useCounterStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;counter&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">		count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}),</span></span>
<span class="line"><span style="color:#E06C75;">	getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		isZero</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		increment</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>3.在 Vue 组件中，可以使用 <code>useCounterStore</code>来获取和使用这个 store：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useCounterStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./store&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useCounterStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 使用状态</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 使用 getter 计算属性</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> isZero</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isZero</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">isZero</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 使用 actions</span></span>
<span class="line"><span style="color:#E5C07B;">    store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">actions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">increment</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>上文中已经描述了 get、set 和使用 store 中的 actions 的基本用法，下面我将说明如果你要监听 store 的变化应该如何操作。</p><p>Vue 的 Composition API 提供了 <code>watch</code> 和 <code>watchEffect</code> 函数，能让你监听 reactive object （响应式对象）或者 ref （引用对象）的值变化。当你需要监听 store 中的数据变化时，可以使用这两个函数。</p><p>以下示例展示了如何监听 state 和 getters 的变化：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">watchEffect</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useCounterStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./store&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useCounterStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 监听 state 变化</span></span>
<span class="line"><span style="color:#61AFEF;">		watch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">			() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			(</span><span style="color:#E06C75;font-style:italic;">newCount</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldCount</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Count changed from </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">oldCount</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> to </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">newCount</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 监听 getter 变化</span></span>
<span class="line"><span style="color:#61AFEF;">		watch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">			() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isZero</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`isZero changed to </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">newVal</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 使用 watchEffect 监听 state 变化，不需要提供一个函数作为源</span></span>
<span class="line"><span style="color:#61AFEF;">		watchEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Count is now </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在这个例子中，我们使用 <code>watch</code> 监听 count 和 isZero 的变化，当这两个值改变时，对应的回调函数就会被执行。同时我们也用 <code>watchEffect</code> 监听了 count，这样只要 count 变化，即使值还是原值，对应的回调函数也会执行。当你在组件 setup 函数中设置了监听，当组件卸载后，监听也会自动停止。</p><h2 id="最简版本的-pinia-实现" tabindex="-1">最简版本的 pinia 实现 <a class="header-anchor" href="#最简版本的-pinia-实现" aria-label="Permalink to &quot;最简版本的 pinia 实现&quot;">​</a></h2><p><img src="`+_+`" alt="image-20240516025127041"></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">piniaSymbol</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./rootStore&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createPinia</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		_s</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">(), </span><span style="color:#7F848E;font-style:italic;">// 用来存储所有的store</span></span>
<span class="line"><span style="color:#61AFEF;">		install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">piniaSymbol</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> pinia</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在这段代码中 createPinia 方法返回了一个 pinia 对象，因为 pinia 是一个 vue 插件，所有一定有一个 install 方法，在 install 里面将创建的 pinia 对象通过 provide 注入到每一个组件中，这样在组件中就可以使用 inject 来获取到这个 pinia，同时给 pinia 添加一个<code>_s</code>属性，这个<code>_s</code>是一个 Map 对象，用来保存后续使用 defineStore 创建出来的 store，piniaSymbol 是一个 Symbol 值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">actions</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将state挂载到store上</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> state</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> _state</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> _state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> _state</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将getters挂载到store上</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> getter</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> getters</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">getter</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">getter</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">methodName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E06C75;">			actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">methodName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将actions挂载到store上</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> methodName</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> actions</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">methodName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">methodName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> inject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">piniaSymbol</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">			pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> _store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> _store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>上面这段代码，实现了 defineStore 方法，这个方法返回了一个使用 reactive 包括的 store 对象，对没错，pinia 的 store 就是一个用 reactive 包裹的对象</p><p>为什么要用 reactive 进行包裹呢？</p><p>因为要让 store 具有响应性，核心的地方就在下面这段代码，defineStore 是在 vue 组件中使用的，那么我们就可以使用 inject 获取到前面在 createPinia 中注入的 pinia 对象，这样就能够实现不同组件状态共享了，因为所有组件共享的都是同一个 pinia，然后将我们创建的 store 对象添加到 pinia 的 <code>_s</code> 属性上，传入的 id 作为 <code>_s</code> 的 key 值，store 作为 <code>_s</code> 的 value 值，这里进行一下判断，如果<code>_s</code> 已经存在这个 store 了就不在继续添加，最后再从 <code>_s</code> 中读取出来这个 store 进行返回。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> inject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">piniaSymbol</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">		pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> _store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> _store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们创建的 store 是一个空对象，需要将传入的 state，getters，和 actions 进行处理合并到 store 上面，如下合并 state</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> state</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> _state</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> _state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> _state</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>需要注意，合并 getters 需要使用 computed 进行包裹，因为 getters 的内容是会根据 state 的值的变化进行变化的，所以 getter 的内容很明显是一个 computed，需要使用 bind 来改变 this 指向，让 getter 里面的 this 都指向当前 store，代码如下</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> getter</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> getters</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">getter</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">getter</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>接下来就是合并 actions，我们使用一个柯里化函数 wrapAction 进行包裹，抽离出来一个 wrapAction 的目的，是为了后续方便在这里进行拓展，这里使用 apply 来改变 this 指向，使得 action 方法里的 this 指向当前 store，代码如下</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">methodName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E06C75;">		actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">methodName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将actions挂载到store上</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">actions</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> methodName</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> actions</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">methodName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">methodName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>总结一下，pinia 能实现在不同的组件状态共享，是因为每个 store 都是一个单例模式 vueuse 的 createSharedComposable 也是一个单例模式，也能用来实现状态共享的问题</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createSharedComposable</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">composable</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			state</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> composable</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面这个最简版的 pinia 实现可以说就是 pinia 的实现精髓了</p><h2 id="搞定-pinia-的使用与原理" tabindex="-1">搞定 Pinia 的使用与原理 <a class="header-anchor" href="#搞定-pinia-的使用与原理" aria-label="Permalink to &quot;搞定 Pinia 的使用与原理&quot;">​</a></h2><h3 id="简介-2" tabindex="-1">简介 <a class="header-anchor" href="#简介-2" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>本质是一个插件，基于 reactive 实现响应式仓库（全局共享）（<a href="https://juejin.cn/post/7239617977363071035" target="_blank" rel="noreferrer">可以先看响应式原理</a>）</p><h3 id="pinia-vuex" tabindex="-1">Pinia &amp; Vuex <a class="header-anchor" href="#pinia-vuex" aria-label="Permalink to &quot;Pinia &amp; Vuex&quot;">​</a></h3><h4 id="vuex-1" tabindex="-1">vuex： <a class="header-anchor" href="#vuex-1" aria-label="Permalink to &quot;vuex：&quot;">​</a></h4><ul><li>ts 兼容性不好</li><li>命名空间的缺陷(只能有一个 store)</li><li>mutation 和 action 有区别</li></ul><h4 id="pinia-1" tabindex="-1">pinia： <a class="header-anchor" href="#pinia-1" aria-label="Permalink to &quot;pinia：&quot;">​</a></h4><ul><li>更简洁的 API</li><li>ts 兼容性更好</li><li>无命名空间的缺陷(可以创建多个 store)</li><li>删除了 mutation，统一在 action 中开发</li></ul><h3 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h3><h4 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// main.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createApp</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./App.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createPinia</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@/my-pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createPinia</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;createPinia&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createPinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 注册pinia</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="创建-store-1" tabindex="-1">创建 store <a class="header-anchor" href="#创建-store-1" aria-label="Permalink to &quot;创建 store&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// stores/count.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方式1</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">toRefs</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@/my-pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// export const useCountStore = defineStore(&quot;counter&quot;, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   state: () =&gt; ({ count: 1 }),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   getters: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     doubleCount: (store) =&gt; store.count * 2,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   actions: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     // 同步异步都在actions中完成</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     addCount() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//       this.count++;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方式2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> useCountStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> doubleCount</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#61AFEF;"> addCount</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">		...</span><span style="color:#61AFEF;">toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">		doubleCount</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		addCount</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h4 id="页面调用" tabindex="-1">页面调用 <a class="header-anchor" href="#页面调用" aria-label="Permalink to &quot;页面调用&quot;">​</a></h4><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useCountStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./stores/count&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useCountStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;原数:{{ </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> }} getters:{{ </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">doubleCount</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">addCount</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;增加&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="核心实现" tabindex="-1">核心实现 <a class="header-anchor" href="#核心实现" aria-label="Permalink to &quot;核心实现&quot;">​</a></h3><ul><li>通过在 app 中注入一个对象<code>pinia.state</code>，触达每一个子组件，在定义时给<code>state</code>追加<code>store</code>。</li><li>在获取时通过<code>inject</code>将<code>store</code>传入组件中。</li></ul><h4 id="createpinia-js-创建插件并注入" tabindex="-1">createPinia.js ： 创建插件并注入 <a class="header-anchor" href="#createpinia-js-创建插件并注入" aria-label="Permalink to &quot;createPinia.js ： 创建插件并注入&quot;">​</a></h4><p>1.管理 state 及其下的 store：</p><ul><li>基于<code>effectScope</code>生成<code>scope</code>，<code>scope</code>管理<code>state</code>，<code>state</code>内部存放所有的<code>store</code>，用于批量管理其中的响应式数据（<strong>控制响应式数据是否刷新视图</strong>）。</li><li>每个<code>store</code>内部也有一个<code>scope</code>，管理内部的属性是否刷新视图。</li></ul><p>2.注入<code>pinia</code>：通过<code>provide</code>将<code>pinia</code>注入到<code>app</code>上，各组件实例可以获取到该<code>pinia</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">markRaw</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">effectScope</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">symbolPinia</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./rootStore&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createPinia</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 *  用法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 *      const pinia = createPinia();app.use(pinia);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 *  所以createPinia返回一个pinia插件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 *  pinia需要有的能力</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 *      不被响应式[markRaw]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 *      能被挂载到全局上</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 创建一个独立的scope，将所有的store都丢进去，后期可以统一管理store</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> scope</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> effectScope</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> scope</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">({}));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 创建一个静态属性(markRaw)，无法被响应式[表层]</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> markRaw</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">		install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// app.use(pinia)时，会调用pinia的install方法并传入app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将pinia挂载到所有组件的属性上，组件可通过inject获取</span></span>
<span class="line"><span style="color:#E5C07B;">			app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">symbolPinia</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// vue2语法</span></span>
<span class="line"><span style="color:#E5C07B;">			app</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">globalProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> pinia</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> app</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		_a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//挂载app实例，后期可能用到</span></span>
<span class="line"><span style="color:#E06C75;">		_e</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//指向effectScope</span></span>
<span class="line"><span style="color:#E06C75;">		_s</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">		state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> pinia</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h4 id="definestore-js-创建-store" tabindex="-1">defineStore.js ： 创建 store <a class="header-anchor" href="#definestore-js-创建-store" aria-label="Permalink to &quot;defineStore.js ： 创建 store&quot;">​</a></h4><p><strong>每一个<code>store</code>都是一个响应式对象<code>reactive</code></strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	effectScope</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	getCurrentInstance</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	inject</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	reactive</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	toRefs</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">symbolPinia</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@/my-pinia/rootStore.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">idOrOptions</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">setup</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 整合参数 defineStore({id:&#39;xx&#39;}) defineStore(&#39;id&#39;,setup) defineStore(&#39;id&#39;,options)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> setup</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> idOrOptions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> isSetupStore</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> setup</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> useStore</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 保证useStore是在setup中执行的，只有在setup中才能通过组件实例注入父组件属性</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> currentInstant</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getCurrentInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 注入app中的pinia对象</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> currentInstant</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> inject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">symbolPinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 判断pinia中是否有该store</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 第一次创建store</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isSetupStore</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">				createSetupStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				createOptionStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 获取pinia.s中的store并返回</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> useStore</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h4 id="createsetupstore-根据传入的函数返回-store" tabindex="-1">createSetupStore ： 根据传入的函数返回 store <a class="header-anchor" href="#createsetupstore-根据传入的函数返回-store" aria-label="Permalink to &quot;createSetupStore ： 根据传入的函数返回 store&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 函数式store(传入一个setup函数并返回对象)</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createSetupStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">setup</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pinia</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ！！！这是最终挂载到state上的store，每个store都是一个响应式对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> scope</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * 在根scope上再运行一次run，则此run也会被scope收集控制</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * setupScope =&gt; setup()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> setupScope</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 创建一个scope，让store本身也有停止本身收集依赖的能力</span></span>
<span class="line"><span style="color:#E06C75;">		scope</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> effectScope</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 内部的setup也会被pinia控制</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> scope</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setup</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 包装action，将其this指向store</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 此处可以有额外逻辑，且返回值也可以经过处理</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> action</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> setupScope</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> prop</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> setupScope</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> prop</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			 * 切片编程：此处主要目的是修改其this指向为当前store</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			 *          也可以加若干逻辑在其中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			 */</span></span>
<span class="line"><span style="color:#E06C75;">			setupScope</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 覆盖store并挂载方法于store中。</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">setupScope</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 挂载到pinia上</span></span>
<span class="line"><span style="color:#E5C07B;">	pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h4 id="createoptionstore-建议写法-根据传入的配置返回-store" tabindex="-1">createOptionStore（建议写法） ：根据传入的配置返回 store <a class="header-anchor" href="#createoptionstore-建议写法-根据传入的配置返回-store" aria-label="Permalink to &quot;createOptionStore（建议写法） ：根据传入的配置返回 store&quot;">​</a></h4><p>将选项配置整合一下再调用<code>createSetupStore</code></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 普通的store(state、getters...)：根据id和options，创建并挂载store至pinia中</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createOptionStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pinia</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 取出当前store的配置</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 提供一个setup函数</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 将state挂载到pinia上的state中</span></span>
<span class="line"><span style="color:#E5C07B;">		pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// pinia.state =&gt; markRaw({state})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// state只被proxy，但是没有响应式，因此需要将其响应式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 将其state返回的值变为响应式的，便于computed收集依赖</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> localStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">			localStore</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			actions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将getters用computed缓存，并暴露到store上</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">computedGetters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//   getters: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//     doubleCount: (store) =&gt; store.count * 2,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//   },</span></span>
<span class="line"><span style="color:#E06C75;">				computedGetters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 如果此处pinia.state.value[id]不拿toRefs包裹</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 则返回的是一个具体值，computed无法收集到store中的数据变化</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> getters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}); </span><span style="color:#7F848E;font-style:italic;">// 改变其this，并把store传入，两种写法</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> computedGetters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}, {})</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;">	store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createSetupStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">setup</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h4 id="主文件-lib-index-js" tabindex="-1">主文件（lib/index.js） <a class="header-anchor" href="#主文件-lib-index-js" aria-label="Permalink to &quot;主文件（lib/index.js）&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// index.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createPinia</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./createPinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./defineStore&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// rootStore.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> symbolPinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="其余方法-补充" tabindex="-1">其余方法[补充] <a class="header-anchor" href="#其余方法-补充" aria-label="Permalink to &quot;其余方法[补充]&quot;">​</a></h3><ul><li><p><code>$patch</code>：批量更改 store 中的属性，本质上是合并对象（<strong>深拷贝</strong>）</p></li><li><p><code>$reset</code>：重置 store 中的 state 为初始值（<strong>保存刚开始的值，调用时覆盖即可</strong>）</p></li><li><p><code>$subscribe</code>：监听对应 store 中 state 所有的属性，当属性变化时触发回调<strong>watch(()=&gt;store)</strong></p></li><li><p><code>$onAction</code>：监听 store 中的 actions，当调用 actions 时触发回调（<strong>发布订阅，在 wrapAction 中发布</strong>）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 触发action的时候 可以触发一些额外的逻辑</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> afterCallbacklist</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> onErrorCallbackList</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> after</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			afterCallbacklist</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> onError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			onErrorCallbackList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 触发action</span></span>
<span class="line"><span style="color:#61AFEF;">		triggersubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">actionsubscribes</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">after</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onError</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			ret</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> action</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//直接出错</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			triggerSubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onErrorCallbackList</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">ret</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> ret</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">					triggerSubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">aftercallbacktist</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				})</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">					triggerSubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onErrorCallbackList</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			triggerSubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">aftercallbacklist</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ret</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 返回值也可以做处理</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div></li><li><p><code>$dispose</code>：<strong>删除 store(停止收集依赖，视图不根据数据更新了[effectScope.stop])</strong></p></li><li><p><code>mapHelpers（辅助函数，只能用于vue2）</code></p><ul><li><p><code>mapState</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// mapActions</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> mapState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">useStore</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">keysOrMapper</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">keysOrMapper</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> keysOrMapper</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">reduced</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">        reduced</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#61AFEF;"> usestore</span><span style="color:#ABB2BF;">()[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> reduced</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // {count:function(){ useStore()[&#39;count&#39;]}}}</span></span>
<span class="line"><span style="color:#ABB2BF;">    ,{}):</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">keysOrMapper</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">reduced</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">        reduced</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">            const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;">usestore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            const</span><span style="color:#E5C07B;"> storeKey</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> keysOrMapper</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">storeKey</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> reduced</span></span>
<span class="line"><span style="color:#ABB2BF;">	},{})</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>mapAction</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// mapActions</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> mapActions</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">useStore</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">keysOrMapper</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">keysOrMapper</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> keysOrMapper</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">reduced</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">        reduced</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#61AFEF;"> usestore</span><span style="color:#ABB2BF;">()[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">](...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> reduced</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // {count:function(){ useStore()[&#39;count&#39;]}}}</span></span>
<span class="line"><span style="color:#ABB2BF;">    ,{}):</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">keysOrMapper</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">reduced</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">        reduced</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">            const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;">usestore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            const</span><span style="color:#E5C07B;"> storeKey</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> keysOrMapper</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">storeKey</span><span style="color:#ABB2BF;">](...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> reduced</span></span>
<span class="line"><span style="color:#ABB2BF;">	},{})</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li></ul></li></ul><h2 id="pinia-源码实现解析" tabindex="-1">pinia 源码实现解析 <a class="header-anchor" href="#pinia-源码实现解析" aria-label="Permalink to &quot;pinia 源码实现解析&quot;">​</a></h2><h3 id="创建-pinia-实例" tabindex="-1">创建 pinia 实例 <a class="header-anchor" href="#创建-pinia-实例" aria-label="Permalink to &quot;创建 pinia 实例&quot;">​</a></h3><p>从基础介绍可以看到，通过 <code>createPinia</code> 方法创建的了一个 pinia 实例， <code>createPinia</code> 方法的源码主要分为两步</p><ol><li>定义用于存储全部 store 的 state 对象和插件列表</li><li>初始化 pinia 实例，注册至 devtool 之后返回 pinia 实例</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createPinia</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">Pinia</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> scope</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> effectScope</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 定义用于存储全部 store 的 state 对象</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> scope</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Record</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">StateTree</span><span style="color:#ABB2BF;">&gt;&gt;&gt;(() </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">		ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Record</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">StateTree</span><span style="color:#ABB2BF;">&gt;&gt;({})</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 定义插件离列表和待安装的插件</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> _p</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Pinia</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;_p&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> toBeInstalled</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PiniaPlugin</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 定义 pinia 实例</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> markRaw</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">		install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			/*...*/</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">plugin</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			/*...*/</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">		_p</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		_a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		_e</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		_s</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">StoreGeneric</span><span style="color:#ABB2BF;">&gt;(),</span></span>
<span class="line"><span style="color:#E06C75;">		state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 注册 devtool</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">USE_DEVTOOLS</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> Proxy</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">devtoolsPlugin</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> pinia</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>在 pinia 实例中，定义的两个方法，<code>pinia.install</code> 方法用于向 vue 中注册 pinia，在 <code>app.use</code> 执行过程中会直接调用 <code>install</code> 方法。<code>install</code> 方法执行过程分为</p><ol><li>设置当前激活的 pinia 实例</li><li>将 pinia 实例通过 <code>provide</code> 方法注册到全局，便于所有子组件调用</li><li>注册 devtool 和插件</li></ol><p><code>pinia.use</code> 方法用于向 pinia 中注册插件，将传入的 plugin 放入插件数组并返回当前 pinia 实例</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> markRaw</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		setActivePinia</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isVue2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> app</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 重要：将 pinia 实例注册到全局，便于所有子组件调用</span></span>
<span class="line"><span style="color:#E5C07B;">			app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">piniaSymbol</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			app</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">globalProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> pinia</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 注册 devtool</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">USE_DEVTOOLS</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">				registerPiniaDevtools</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 注册插件</span></span>
<span class="line"><span style="color:#E5C07B;">			toBeInstalled</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">plugin</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> _p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E06C75;">			toBeInstalled</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">plugin</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">isVue2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			toBeInstalled</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			_p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">	_p</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	_a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	_e</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	_s</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">StoreGeneric</span><span style="color:#ABB2BF;">&gt;(),</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>此外 pinia 实例还包含一些内部属性，比较重要的是的 <code>pinia.s</code> 属性和 <code>pinia.state</code> 属性，前者用于储存 id 和 store 实例的 map 映射，避免重复创建，后者用于存储全部 store 的 state</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> markRaw</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	_p</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// pinia 插件</span></span>
<span class="line"><span style="color:#E06C75;">	_a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// vue app实例</span></span>
<span class="line"><span style="color:#E06C75;">	_e</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// pinia 实例的 effect scope</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 核心：存储 id 和 store 实例的 map 映射，避免重复创建</span></span>
<span class="line"><span style="color:#E06C75;">	_s</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">StoreGeneric</span><span style="color:#ABB2BF;">&gt;(),</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 存储全部 store 的 state</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="定义-store" tabindex="-1">定义 store <a class="header-anchor" href="#定义-store" aria-label="Permalink to &quot;定义 store&quot;">​</a></h3><p>在全局创建并注册 pinia 实例后，接下来我们可以定义需要全局管理状态的 store。定义 store 需要通过 <code>defineStore</code> 方法，<code>defineStore</code> 方法首先根据传入参数，判断是 options 定义还是 setup 定义，然后定义内部函数 <code>useStore</code> 并返回</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	idOrOptions</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	setup</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	setupOptions</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">StoreDefinition</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 通过第二个参数是否是 function 类型，判断是否是 setup 形式的 store</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> isSetupStore</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> setup</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// idOrOptions 可以是丢像或者 string，通过类型确定 store id 和 options</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> isSetupStore</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> setupOptions</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> setup</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> idOrOptions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> useStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">pinia</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Pinia</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">hot</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">StoreGeneric</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">StoreGeneric</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//...</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 返回 store 的创建结果</span></span>
<span class="line"><span style="color:#E5C07B;">	useStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> useStore</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p><code>useStore</code> 方法执行过程主要分为三步</p><ol><li>获取 vue 实例，如果 vue 实例存在，通过 inject 方法将 pinia 注入到当前 vue 实例</li><li>设置当前激活的 pinia 实例</li><li>判断缓存中是否存在 store id，如果存在直接取出 store 实例并返回，不存在则根据 options 还是 setup 类型创建 store</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">pinia</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Pinia</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">hot</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">StoreGeneric</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">StoreGeneric</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取当前 vue 实例</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> currentInstance</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getCurrentInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果 vue 实例存在，通过 inject 方法将 pinia 注入到当前 vue 实例并使用</span></span>
<span class="line"><span style="color:#E06C75;">	pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> currentInstance</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> inject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">piniaSymbol</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置为当前激活的 pinia 实例</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">setActivePinia</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">	pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> activePinia</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果在缓存中没有定义该 store id，则创建</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// setup 和 options 两种 store 的定义</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isSetupStore</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			createSetupStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">setup</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			createOptionsStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 缓存中存在 store 实例，直接取出并返回</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">StoreGeneric</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> store</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="createoptionsstore" tabindex="-1">createOptionsStore <a class="header-anchor" href="#createoptionsstore" aria-label="Permalink to &quot;createOptionsStore&quot;">​</a></h4><p>在 option 类型的定义方法 <code>createOptionsStore</code> 中，定义了一个 <code>setup</code> 方法，并将相关参数传入了 <code>createSetupStore</code> 方法创建一个 store 并返回，所以创建 store 的核心方式还是通过 <code>createSetupStore</code> 方法</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createOptionsStore</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	options</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">DefineStoreOptions</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	pinia</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Pinia</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	hot</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">actions</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//...</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// store</span></span>
<span class="line"><span style="color:#E06C75;">	store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createSetupStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">setup</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hot</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> store</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>再详细看一下内部定义的 <code>setup</code> 函数，函数的主要功能就是将 state、getters、actions 合并到一个对象中返回，保持和 setup 定义的一致性，便于后续统一处理</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 创建 state 空对象</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* istanbul ignore if */</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isVue2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> {});</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取 state 属性</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> localState</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将 state、getters、actions 合并到一个对象中返回</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> assign</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">		localState</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		actions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {}).</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">computedGetters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			computedGetters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> markRaw</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">				computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">					setActivePinia</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">					const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isVue2</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> getters</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				})</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> computedGetters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, {} </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> Record</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ComputedRef</span><span style="color:#ABB2BF;">&gt;)</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h4 id="createsetupstore" tabindex="-1">createSetupStore <a class="header-anchor" href="#createsetupstore" aria-label="Permalink to &quot;createSetupStore&quot;">​</a></h4><p><code>createSetupStore</code> 方法很长，我们逐步拆解为每个步骤进行解读</p><p>1.在 setup 场景下，创建一个 state 空对象</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createSetupStore</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/*相关参数*/</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 1. 在 setup 场景下，创建一个 state 空对象</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> initialState</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$id</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> UnwrapRef</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isOptionsStore</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">initialState</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">__DEV__</span><span style="color:#56B6C2;"> ||</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">hot</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isVue2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">$id</span><span style="color:#ABB2BF;">, {});</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$id</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>2.创建 partialStore 属性，内部主要包括自定义的方法，在通过 reactive 将 partialStore 转换为响应式 store，并将 store 存储到 pinia.<code>_s</code> map 对象中</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createSetupStore</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/*相关参数*/</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 2. 创建 partialStore 属性，内部主要包括自定义的方法，在通过 reactive 将 partialStore 转换为响应式 store</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> partialStore</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		_p</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		$id</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		$onAction</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">addSubscription</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">actionSubscriptions</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">		$patch</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		$reset</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		$subscribe</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		$dispose</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> _StoreWithState</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">		partialStore</span></span>
<span class="line"><span style="color:#ABB2BF;">	) </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> unknown</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将 store 存储到 pinia.s map 对象中</span></span>
<span class="line"><span style="color:#E5C07B;">	pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>3.执行 <code>setup</code> 方法，获取 store 数据并且遍历处理。</p><p><code>setup</code> 返回值主要分为两类，ref / reactive 和 Function，在遍历过程中将 ref / reactive 和 Function 挂载到 store 实例上</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createSetupStore</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/*相关参数*/</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 执行 setup 方法，获取 store 数据</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> setupStore</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		scope</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> effectScope</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> scope</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setup</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 遍历 store 数据</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> setupStore</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> prop</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> setupStore</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 处理返回属性是 ref 或 reactive 的情况</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> ((</span><span style="color:#61AFEF;">isRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#61AFEF;">isComputed</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">||</span><span style="color:#61AFEF;"> isReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 非 optionsStore 的情况下</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isOptionsStore</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 合并 initialState</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">initialState</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> shouldHydrate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">						prop</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> initialState</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">					} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">						mergeReactiveObjects</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 将 prop 赋值给 pinia.state.value[$id][key]</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isVue2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">					set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$id</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">					pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$id</span><span style="color:#ABB2BF;">][</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> prop</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 处理返回函数，即 action</span></span>
<span class="line"><span style="color:#C678DD;">		else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> prop</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 函数进过包装处理</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> actionValue</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 挂载到 store 实例</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isVue2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">				set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">setupStore</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">actionValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				setupStore</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> actionValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			optionsForPlugin</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> prop</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>4.定义 <code>$state</code> 属性的 get 和 set 方法，可以直接通过 <code>$state</code> 方法</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createSetupStore</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/*相关参数*/</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;$state&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$id</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			$patch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">$state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>5.注册 devtool、安装自定义的 plugin，最后返回 store 实例</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createSetupStore</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/*相关参数*/</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 注册 devtool</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">USE_DEVTOOLS</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> nonEnumerable</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			writable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		(</span></span>
<span class="line"><span style="color:#ABB2BF;">			[</span><span style="color:#98C379;">&quot;_p&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;_hmrPayload&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;_getters&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;_customProperties&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#C678DD;"> const</span></span>
<span class="line"><span style="color:#ABB2BF;">		).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">				store</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				p</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">				assign</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">] }, </span><span style="color:#E06C75;">nonEnumerable</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 安装 plugin</span></span>
<span class="line"><span style="color:#E5C07B;">	pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">extender</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">USE_DEVTOOLS</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> extensions</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> scope</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">				extender</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">					store</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					app</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					pinia</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					options</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">optionsForPlugin</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				})</span></span>
<span class="line"><span style="color:#ABB2BF;">			)</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">extensions</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {}).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">				store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">customProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#61AFEF;">			assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">extensions</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			assign</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">				store</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">				scope</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">					extender</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">						store</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">						app</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">						pinia</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">						options</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">optionsForPlugin</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">					})</span></span>
<span class="line"><span style="color:#ABB2BF;">				)</span><span style="color:#56B6C2;">!</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>至此 <code>createSetupStore</code> 方法创建 store 实例的方法就结束了</p><h3 id="实现流程图" tabindex="-1">实现流程图 <a class="header-anchor" href="#实现流程图" aria-label="Permalink to &quot;实现流程图&quot;">​</a></h3><p><img src="`+M+`" alt="image-20240507205453413"></p><h2 id="pinia-源码实现分析" tabindex="-1">Pinia 源码实现分析 <a class="header-anchor" href="#pinia-源码实现分析" aria-label="Permalink to &quot;Pinia 源码实现分析&quot;">​</a></h2><h3 id="pinia-源码的-createpinia-方法分析" tabindex="-1">pinia 源码的 createPinia 方法分析 <a class="header-anchor" href="#pinia-源码的-createpinia-方法分析" aria-label="Permalink to &quot;pinia 源码的 createPinia 方法分析&quot;">​</a></h3><p>createPinia 实现的源码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">effectScope</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">piniaSymbol</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./rootStore&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createPinia</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> scope</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> effectScope</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> scope</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">({})); </span><span style="color:#7F848E;font-style:italic;">// 用来存储每个store的state</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> _p</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []; </span><span style="color:#7F848E;font-style:italic;">// 收集插件</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		_s</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">(), </span><span style="color:#7F848E;font-style:italic;">// 用map来收集所有的store</span></span>
<span class="line"><span style="color:#E06C75;">		_e</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">plugin</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 用来注册插件</span></span>
<span class="line"><span style="color:#E5C07B;">			_p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		_p</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">piniaSymbol</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 通过provide将pinia注入到vue组件中</span></span>
<span class="line"><span style="color:#E5C07B;">			app</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">globalProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> pinia</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> app</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 将vue根实例挂载到_a属性上</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		_a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> pinia</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>createPinia 的代码功能</p><table><thead><tr><th>对象</th><th>功能</th><th>作用</th></tr></thead><tbody><tr><td>install</td><td>注册函数</td><td>保存当前pinia，注入到vue，将pinia加入到vue全局变量</td></tr><tr><td>_s</td><td>保存所有的store</td><td>以store的id为key，store对象为value，储存每个store</td></tr><tr><td>_e</td><td>effectScope</td><td>用来存储所有的副作用函数，便于统一管理(例如销毁)</td></tr><tr><td>use</td><td>注册插件</td><td>调用use方法的时候会将插件定义的方法，push到 <code>_p</code> 中</td></tr><tr><td>_p</td><td>插件集合</td><td>用来保存所有的插件</td></tr><tr><td>_a</td><td>当前vue实例</td><td></td></tr><tr><td>state</td><td>保存所有store数据</td><td>以store的id为key，state为value，储存store的可访问变量 <code>pinia.state.valuel[id]= state ? state():{}</code></td></tr></tbody></table><h3 id="pinia-的-definestore-的实现" tabindex="-1">pinia 的 defineStore 的实现 <a class="header-anchor" href="#pinia-的-definestore-的实现" aria-label="Permalink to &quot;pinia 的 defineStore 的实现&quot;">​</a></h3><p>第一步，先分析入参和返回结果 defineStore 的入参有三种形式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {},</span></span>
<span class="line"><span style="color:#61AFEF;">	getter</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// options入参</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {},</span></span>
<span class="line"><span style="color:#61AFEF;">	getter</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {},</span></span>
<span class="line"><span style="color:#E06C75;">	actions</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}); </span><span style="color:#7F848E;font-style:italic;">// setup的形式入参</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>处理入参</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// id + options</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// options</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// id + setup方法</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">idOrOptions</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">setup</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> setup</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> idOrOptions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> isSetUpStore</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> setup</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>处理返回函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> defineStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">idOrOptions</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">setup</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> setup</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> idOrOptions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> idOrOptions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// setUp可能是一个函数</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> isSetUpStore</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> setup</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> useStore</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> instance</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getCurrentInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> instance</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> inject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">piniaSymbol</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 第一次useStore</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isSetUpStore</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">				createSetUpStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">setup</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				createOptionsStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> useStore</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>这里处理 options 的定义方式，和 setup 也就是 composables 定义的方式是不一样的，处理 options 使用 createOptionsStore</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createOptionsStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pinia</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">actions</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> scope</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({}); </span><span style="color:#7F848E;font-style:italic;">// store 就是一个响应式对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 对用户传递的state，actions，getters做处理</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> localState</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> {});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// getters</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">			localState</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 用户的状态</span></span>
<span class="line"><span style="color:#E06C75;">			actions</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 用户的动作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 使用computed对getters进行封装</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {}).</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">memo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				memo</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> getters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">localState</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> memo</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}, {})</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> setupStore</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		scope</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> effectScope</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> scope</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setup</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> action</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// action 执行后可能是promise</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> setupStore</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> prop</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> setupStore</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> prop</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			setupStore</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 函数劫持</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// pinia.e.stop() // 停止全部</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// scope.stop() // 停止自己</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">setupStore</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>处理 setupStore 使用 createSetUpStore</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createSetUpStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">setup</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pinia</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">isOption</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> scope</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({}); </span><span style="color:#7F848E;font-style:italic;">// store 就是一个响应式对象</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> initialState</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// setup默认是没有初始化状态的</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">initialState</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">isOption</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> setupStore</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		scope</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> effectScope</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> scope</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setup</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> action</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// action 执行后可能是promise</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> setupStore</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> prop</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> setupStore</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> prop</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			setupStore</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 函数劫持</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> ((</span><span style="color:#61AFEF;">isRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#61AFEF;">isComputed</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">||</span><span style="color:#61AFEF;"> isReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isOption</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;props&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">][</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> prop</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// pinia.e.stop() // 停止全部</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// scope.stop() // 停止自己</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">setupStore</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>将两个函数相同的部分抽离出来优化 createOptionsStore 方法，最终实现如下</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createOptionsStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pinia</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">actions</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 对用户传递的state，actions，getters做处理</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> localState</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> {});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// getters</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">			localState</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 用户的状态</span></span>
<span class="line"><span style="color:#E06C75;">			actions</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 用户的动作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 使用computed对getters进行封装</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">getters</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {}).</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">memo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				memo</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> getters</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">localState</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> memo</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}, {})</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> createSetUpStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">setup</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="pinia-的内置方法实现" tabindex="-1">pinia 的内置方法实现 <a class="header-anchor" href="#pinia-的内置方法实现" aria-label="Permalink to &quot;pinia 的内置方法实现&quot;">​</a></h3><h4 id="patch" tabindex="-1">$patch <a class="header-anchor" href="#patch" aria-label="Permalink to &quot;$patch&quot;">​</a></h4><blockquote><p>除了用 <code>store.count++</code> 直接改变 store，可以调用 <code>$patch</code> 方法。它允许你用一个 <code>state</code> 的补丁对象在同一时间更改多个属性</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> mergeRectiveObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> oldValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> newValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">			mergeRectiveObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 递归合并</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> $patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">partialStateOrMutatior</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> partialStateOrMutatior</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 用新的状态合并老的状态</span></span>
<span class="line"><span style="color:#61AFEF;">		mergeRectiveObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">partialStateOrMutatior</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		partialStateOrMutatior</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> partialStore</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	$patch</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">partialStore</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// store 就是一个响应式对象</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>$patch 的原理就是对象的深度合并</p><h4 id="reset" tabindex="-1">$reset <a class="header-anchor" href="#reset" aria-label="Permalink to &quot;$reset&quot;">​</a></h4><blockquote><p>$reset 用来重置 store 的状态</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$reset</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> initState</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$patch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">initState</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>$reset 这个方法只支持 options 的传参形式，不支持 composables 的传参形式，因为 composables 的传参，在 setup 函数执行的时候，state 的值可能会被修改，不好拿到初始值，在 composables 中有更好的方式处理，直接通过 actions 改变 state 的值就行了,官方的代码是这样子的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> $reset</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> isOptionsStore</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> $reset</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">this</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">_StoreWithState</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> options</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> DefineStoreOptions</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">G</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> newState</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // we use a patch to group all changes into one single subscription</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$patch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">$state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">          assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newState</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#7F848E;font-style:italic;"> /* istanbul ignore next */</span></span>
<span class="line"><span style="color:#E06C75;">    __DEV__</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">          \`🍍: Store &quot;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">$id</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot; is built using the setup syntax and does not implement $reset().\`</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#E06C75;"> noop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="subscribe" tabindex="-1">$subScribe <a class="header-anchor" href="#subscribe" aria-label="Permalink to &quot;$subScribe&quot;">​</a></h4><p>$subScribe 用于订阅状态的变化，当转态发生变化需要执行某些操作，可以使用此方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> partialStore</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	$patch</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	$subscribe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 每次状态变化都会执行订阅</span></span>
<span class="line"><span style="color:#E5C07B;">		scope</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">			watch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">				pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">				(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">					callback</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">storeId</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;"> }, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#E06C75;">				options</span></span>
<span class="line"><span style="color:#ABB2BF;">			)</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>$subScribe 的实现很简单，只是用 watch 去监听 store 上的 state 状态值的变化，然后执行回调函数。</p><h4 id="onaction" tabindex="-1">$onAction <a class="header-anchor" href="#onaction" aria-label="Permalink to &quot;$onAction&quot;">​</a></h4><blockquote><p>用于监听 action 的调用，store.$onAction({after，error}) =&gt; { })，在 action 执行完成之后调用 after 回调函数 要实现此功能很明显是使用的发布订阅者模式，因此需要实现一个发布订阅的工具函数</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> addSubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">subscriptions</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	subscriptions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#61AFEF;"> removeSubscription</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> removeSubscriptions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexof</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		idx</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> subscriptions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">idx</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> removeSubscription</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> triggerSubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">subscriptions</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	subscriptions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">cb</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> cb</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里的slice(), 没有传递参数，只返回一个原数组的浅拷贝，这是常见的用法，用来遍历数组的副本，而不修改原始数据</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> actionSubscriptions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> partialStore</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	$onAction</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">addSubscription</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">actionSubscriptions</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">partialStore</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在执行$onAction 的时候，先将方法订阅添加到 actionSubscriptions 这个对象里面，在执行 actions 动作的时候进行触发</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> wrapAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> afterCallbackList</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> onErrorCallbackList</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> after</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			afterCallbackList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> onError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			onErrorCallbackList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#61AFEF;">		triggerSubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">actionSubscriptions</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">after</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onError</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			ret</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> action</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			triggerSubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">afterCallbackList</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ret</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			triggerSubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onErrorCallbackList</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">ret</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> ret</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#61AFEF;"> triggerSubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">afterCallbackList</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				})</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">					triggerSubscription</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onErrorCallbackList</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// action 执行后可能是promise</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h4 id="dispose" tabindex="-1">$disPose <a class="header-anchor" href="#dispose" aria-label="Permalink to &quot;$disPose&quot;">​</a></h4><blockquote><p>此方法用来注销 store</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> partialStore</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	$dispose</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		scope</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">		actionSubscriptions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">		pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delete</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="state" tabindex="-1">$state <a class="header-anchor" href="#state" aria-label="Permalink to &quot;$state&quot;">​</a></h4><blockquote><p>$state 可以用来直接修改 store 的状态</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;$state&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> $patch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">$state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="storetorefs" tabindex="-1">storeToRefs <a class="header-anchor" href="#storetorefs" aria-label="Permalink to &quot;storeToRefs&quot;">​</a></h3><blockquote><p>使用 storeToRefs 可以让 store 里面的内容解构不丢失响应式</p></blockquote><p>回顾一下 toRef 与 toRefs 的实现</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> toRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> wrapper</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		get</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> wrapper</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		ret</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> toRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">toRaw</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">toRef</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isRef</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isReactive</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> storeToRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> toRaw</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> refs</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 排除对函数的操作</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#61AFEF;"> isReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">			refs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> toRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> refs</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>storeToRefs 的实现跟 toRefs 的实现一样，只是排除了对函数的处理</p><h3 id="pinia-插件的实现" tabindex="-1">pinia 插件的实现 <a class="header-anchor" href="#pinia-插件的实现" aria-label="Permalink to &quot;pinia 插件的实现&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">store</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hello</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// createPinia.js</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> _p</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">plugin</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		_p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	_p</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// store.js</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createSetUpStore</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({});</span></span>
<span class="line"><span style="color:#E5C07B;">	pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">plugin</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		plugin</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>从上面代码发现插件的实现非常简单</p><h3 id="vue2-中插件的实现原理" tabindex="-1">vue2 中插件的实现原理 <a class="header-anchor" href="#vue2-中插件的实现原理" aria-label="Permalink to &quot;vue2 中插件的实现原理&quot;">​</a></h3><p>pinia 在 vue2 中使用要借助 PiniaVuePlugin</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createPinia</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">PiniaVuePlugin</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;pinia&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">PiniaVuePlugin</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createPinia</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	pinia</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>实现源码如下</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> PiniaVuePlugin</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Plugin</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // Equivalent of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // app.config.globalProperties.$pinia = pinia</span></span>
<span class="line"><span style="color:#E5C07B;">  _Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">    beforeCreate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pinia</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> Pinia</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/main/src/apis/inject.ts#L31</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /* istanbul ignore else */</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">provided</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">          const</span><span style="color:#E5C07B;"> provideCache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#E5C07B;">          Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;_provided&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">            get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> provideCache</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">            set</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">provideCache</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">          })</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        ;(</span><span style="color:#E5C07B;">this</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">provided</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">piniaSymbol</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> pinia</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // propagate the pinia instance in an SSR friendly way</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // avoid adding it to nuxt twice</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /* istanbul ignore else */</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$pinia</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">          this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> pinia</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> any</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">IS_CLIENT</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // this allows calling useStore() outside of a component setup after</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // installing pinia&#39;s plugin</span></span>
<span class="line"><span style="color:#61AFEF;">          setActivePinia</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">USE_DEVTOOLS</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">          registerPiniaDevtools</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pinia</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pinia</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$pinia</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$pinia</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$pinia</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$pinia</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#61AFEF;">    destroyed</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">      delete</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pStores</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>实现原理，<strong>获取 Vue 实例，通过 mixin 实现数据共享</strong>，将 vuex 也是通过同样的原理进行实现的、 手写版本代码仓库：<a href="https://github.com/PoliWen/myPinia" target="_blank" rel="noreferrer">https://github.com/PoliWen/myPinia</a></p><h1 id="八、vue性能优化" tabindex="-1">八、Vue性能优化 <a class="header-anchor" href="#八、vue性能优化" aria-label="Permalink to &quot;八、Vue性能优化&quot;">​</a></h1><p>文档：<a href="https://cn.vuejs.org/guide/best-practices/performance" target="_blank" rel="noreferrer">性能优化 | Vue.js (vuejs.org)</a></p><ul><li>组件的懒加载和代码分割</li><li>性能调优技巧和最佳实践</li></ul><h2 id="vue-为什么采用异步渲染" tabindex="-1">vue 为什么采用异步渲染 <a class="header-anchor" href="#vue-为什么采用异步渲染" aria-label="Permalink to &quot;vue 为什么采用异步渲染&quot;">​</a></h2><p>参考答案：</p><p>因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染；</p><p>所以为了性能考虑，<code>Vue</code> 会在本轮数据更新后，再去异步更新视图。</p><p>异步渲染的原理：</p><ol><li>调用 <code>notify( )</code> 方法，通知 <code>watcher</code> 进行更新操作</li><li>依次调用 <code>watcher</code> 的 <code>update</code> 方法</li><li>对 <code>watcher</code> 进行去重操作（通过 id）放到队列里</li><li>执行完后异步清空这个队列，<code>nextTick</code>（flushSchedulerQueue）进行批量更新操作</li></ol><h2 id="vue-如何快速定位那个组件出现性能问题的" tabindex="-1">vue 如何快速定位那个组件出现性能问题的 <a class="header-anchor" href="#vue-如何快速定位那个组件出现性能问题的" aria-label="Permalink to &quot;vue 如何快速定位那个组件出现性能问题的&quot;">​</a></h2><p>参考答案：</p><p>用 timeline 工具。</p><p>通过 timeline 来查看每个函数的调用时常，定位出哪个函数的问题，从而能判断哪个组件出了问题。</p><h2 id="怎么快速定位哪个组件出现性能问题" tabindex="-1">怎么快速定位哪个组件出现性能问题 <a class="header-anchor" href="#怎么快速定位哪个组件出现性能问题" aria-label="Permalink to &quot;怎么快速定位哪个组件出现性能问题&quot;">​</a></h2><p>文章：<a href="https://blog.csdn.net/weixin_44786530/article/details/126965084" target="_blank" rel="noreferrer">如何使用 chrome Timeline 工具-CSDN 博客</a></p><p>用 chrome timeline 工具。 大意是通过 timeline 来查看每个函数的调用时常，定位出哪个函数的问题，从而能判断哪个组件出了问题</p><p><img src="`+R+`" alt="image-20240315215420106"></p><h2 id="vue-应用的性能优化" tabindex="-1">Vue 应用的性能优化 <a class="header-anchor" href="#vue-应用的性能优化" aria-label="Permalink to &quot;Vue 应用的性能优化&quot;">​</a></h2><p>如何诊断和优化 Vue 应用的性能？请列举几种常见的性能瓶颈和相应的优化手段，并说说如何利用 Vue DevTools 进行性能分析。</p><h4 id="解答-1" tabindex="-1">解答 <a class="header-anchor" href="#解答-1" aria-label="Permalink to &quot;解答&quot;">​</a></h4><p>诊断和优化 Vue 应用的性能通常涉及以下几个常见瓶颈及其应对策略：</p><p><strong>1.过度渲染</strong>：当不必要的组件或 DOM 节点频繁更新时，会导致性能下降。优化手段包括：</p><ul><li>使用<code>v-if</code>替代<code>v-show</code>避免不必要的渲染。</li><li>利用<code>&lt;Suspense&gt;</code>组件进行懒加载或异步组件加载，延迟非关键内容的渲染。</li><li>通过<code>computed</code>属性或<code>watch</code>函数避免在模板中进行复杂计算。</li><li>对于大型列表，使用<code>v-for</code>配合<code>key</code>属性，并考虑使用<code>vue-virtual-scroller</code>等虚拟滚动库。</li></ul><p><strong>2.庞大的组件树或深层嵌套</strong>：可能导致渲染性能下降和内存消耗增加。优化手段包括：</p><ul><li>通过组件拆分、组合和抽象，减少组件树深度。</li><li>使用<code>provide/inject</code>或 Vuex 进行跨层级状态传递，避免层层传递 props。</li><li>合理使用<code>slot</code>和<code> teleport</code>进行内容分发和定位。</li></ul><p><strong>3.资源加载与网络优化</strong>：</p><ul><li>使用 Webpack、Vite 等构建工具进行代码分割和懒加载。</li><li>压缩和优化图片、字体等静态资源，使用 CDN 加速内容分发。</li><li>预加载或预渲染关键路由或资源以提升首屏加载速度。</li></ul><p>使用 Vue DevTools 进行性能分析主要包括以下步骤：</p><ul><li>安装并启用 Vue DevTools 浏览器插件。</li><li>在需要分析的页面打开开发者工具，切换到 Vue 面板。</li><li>刷新页面或触发特定操作，DevTools 会记录组件渲染、状态变更等过程。</li><li>使用<strong>Performance</strong>或<strong>Timeline</strong> tab 分析组件渲染时间、重渲染原因（如哪些 mutation、action 导致状态变更）、DOM 更新细节等。</li><li>查看<strong>Components</strong> tab 了解组件层级、props 和状态，识别可能的冗余或过度渲染。</li><li>根据分析结果针对性地优化代码，然后重复上述步骤验证优化效果。</li></ul><h2 id="如何实现-vue-项目中的性能优化" tabindex="-1">如何实现 vue 项目中的性能优化？ <a class="header-anchor" href="#如何实现-vue-项目中的性能优化" aria-label="Permalink to &quot;如何实现 vue 项目中的性能优化？&quot;">​</a></h2><h3 id="编码阶段" tabindex="-1">编码阶段 <a class="header-anchor" href="#编码阶段" aria-label="Permalink to &quot;编码阶段&quot;">​</a></h3><ul><li>尽量减少 <code>data</code> 中的数据，<code>data</code> 中的数据都会增加 <code>getter</code> 和 <code>setter</code>，会收集对应的 <code>watcher</code></li><li><code>v-if</code> 和 <code>v-for</code> 不能同标签内使用：<code>v-for</code>遍历避免同时使用<code>v-if</code>。实际上在 Vue 3 中已经是一个错误用法了。</li><li>如果需要使用 <code>v-for</code> 给每项元素绑定事件时使用事件代理</li><li><code>SPA</code> 页面采用 <code>keep-alive</code> 缓存组件：避免重复创建组件实例，且能保留缓存组件状态。</li><li><code>v-once</code>。不再变化的数据使用<code>v-once</code>。</li><li><code>v-if</code>和<code>v-show</code>酌情使用：在更多的情况下，使用 <code>v-if</code> 替代 <code>v-show</code></li><li>合理使用 key 属性：<code>key</code> 保证唯一</li><li>采用函数式组件，没生命周期和响应式数据，开销低</li><li>使用路由懒加载、异步组件将包进行拆分，有效拆分应用大小，访问时才异步加载。</li><li>防抖、节流</li><li>第三方模块按需导入</li><li>长列表滚动到可视区域动态加载：长列表性能优化，可采用虚拟列表。</li><li>图片懒加载：</li><li>数据层级不应过深，合理设置响应式数据：数据重写递归</li><li>通过 <code>Object.freeze</code> 方法冻结属性：冻结的不会重写 get 和 set 方法</li><li>使用数据时，缓存值的结果，不频繁取值</li><li>控制颗粒度，Vue 采用组件级更新，将复杂页面组件化，拆分组件</li><li>事件销毁：自定义事件、DOM 事件及时销毁，组件销毁后把全局变量和定时器销毁。</li><li>第三方插件按需引入。</li><li>子组件分割。较重的状态组件适合拆分。</li><li>合理使用 <code>computed</code></li><li>v-for 时加 key，以及避免 v-for 和 v-if 同时使用</li><li>合理使用异步组件</li><li>data 层级不要太深</li><li>使用 vue-loader 在开发环境做模板编译(预编译)</li><li>服务端渲染。</li></ul><p>1、<code>v-if</code>和<code>v-show</code></p><ul><li>频繁切换时使用<code>v-show</code>，利用其缓存特性</li><li>首屏渲染时使用<code>v-if</code>，如果为<code>false</code>则不进行渲染</li></ul><p>2、<code>v-for</code>的<code>key</code></p><ul><li>列表变化时，循环时使用唯一不变的<code>key</code>，借助其本地复用策略</li><li>列表只进行一次渲染时，<code>key</code>可以采用循环的<code>index</code></li></ul><p>3、<code>watch</code>侦听器和 <code>compouter</code> 计算属性</p><ul><li>侦听器<code>watch</code>用于数据变化时引起其他行为</li><li>多使用<code>compouter</code>计算属性顾名思义就是新计算而来的属性，如果依赖的数据未发生变化，不会触发重新计算</li></ul><p>4、合理使用生命周期</p><ul><li>在<code>destroyed</code>阶段进行绑定事件或者定时器的销毁</li><li>使用动态组件的时候通过<code>keep-alive</code>包裹进行缓存处理，相关的操作可以在<code>actived</code>阶段激活</li></ul><p>5、数据响应式处理</p><ul><li>不需要响应式处理的数据可以通过<code>Object.freeze</code>处理，或者直接通过<code>this.xxx = xxx</code>的方式进行定义</li><li>需要响应式处理的属性可以通过<code>this.$set</code>的方式处理，而不是<code>JSON.parse(JSON.stringify(XXX))</code>的方式</li></ul><p>6、路由加载方式</p><ul><li>页面组件可以采用异步加载的方式</li></ul><p>7、插件引入</p><ul><li>第三方插件可以采用按需加载的方式，比如<code>element-ui</code>。</li></ul><p>8、减少代码量</p><ul><li>采用<code>mixin</code>的方式抽离公共方法</li><li>抽离公共组件</li><li>定义公共方法至公共<code>js</code>中</li><li>抽离公共<code>css</code></li></ul><h3 id="字体图标的使用" tabindex="-1">字体图标的使用 <a class="header-anchor" href="#字体图标的使用" aria-label="Permalink to &quot;字体图标的使用&quot;">​</a></h3><ul><li>有些图片图标尽可能使用字体图标</li></ul><h3 id="spa单页应用如何优化首屏加载速度较慢的问题" tabindex="-1">SPA单页应用如何优化首屏加载速度较慢的问题 <a class="header-anchor" href="#spa单页应用如何优化首屏加载速度较慢的问题" aria-label="Permalink to &quot;SPA单页应用如何优化首屏加载速度较慢的问题&quot;">​</a></h3><ol><li>使用路由懒加载、异步组件，实现组件拆分，减少入口文件体积</li><li>抽离公共代码，采用 splitChunks 进行代码分割</li><li>组件采用按需加载方式</li><li>静态资源缓存，采用 HTTP 缓存，使用 localStorage 实现缓存资源</li><li>图片资源压缩，小图片采用 base64 方式内嵌到代码里，减少 http 请求</li><li>打包时开启 gzip 压缩处理，compression-webpack-plugin 插件</li><li>静态资源采用 CDN 加速，终极手段</li><li>使用 SSR(Service Side Render:服务端渲染)对首屏做好服务端渲染。后台直接返回渲染好的 HTML</li></ol><h3 id="打包优化" tabindex="-1">打包优化 <a class="header-anchor" href="#打包优化" aria-label="Permalink to &quot;打包优化&quot;">​</a></h3><h4 id="编译方式" tabindex="-1">编译方式 <a class="header-anchor" href="#编译方式" aria-label="Permalink to &quot;编译方式&quot;">​</a></h4><ul><li>如果线上需要<code>template</code>的编译，可以采用完成版<code>vue.esm.js</code></li><li>如果线上无需<code>template</code>的编译，可采用运行时版本<code>vue.runtime.esm.js</code>，相比完整版体积要小大约<code>30%</code></li></ul><h4 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h4><ul><li>压缩代码</li><li><code>Tree Shaking/Scope Hoisting</code></li><li>使用 <code>cdn</code> 加载第三方模块</li><li>多线程打包 <code>happypack</code></li><li><code>splitChunks</code> 抽离公共文件</li><li><code>sourceMap</code> 优化</li></ul><h4 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;vite&quot;">​</a></h4><h3 id="用户体验" tabindex="-1">用户体验 <a class="header-anchor" href="#用户体验" aria-label="Permalink to &quot;用户体验&quot;">​</a></h3><ul><li>骨架屏</li><li><code>PWA</code></li><li>客户端缓存</li></ul><p>还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启 <code>gzip</code> 压缩等。</p><h3 id="渲染方式" tabindex="-1">渲染方式 <a class="header-anchor" href="#渲染方式" aria-label="Permalink to &quot;渲染方式&quot;">​</a></h3><ul><li>使用SSR服务端渲染：服务端渲染，如果是需要<code>SEO</code>的网站可以采用服务端渲染的方式</li><li>前端渲染，一些企业内部使用的后端管理系统可以采用前端渲染的方式</li></ul><h3 id="seo-优化" tabindex="-1">SEO 优化 <a class="header-anchor" href="#seo-优化" aria-label="Permalink to &quot;SEO 优化&quot;">​</a></h3><ul><li>预渲染</li><li>服务端渲染 <code>SSR</code></li><li>合理使用 <code>meta</code> 标签</li></ul><h2 id="了解哪些-vue-性能优化方法" tabindex="-1">了解哪些 Vue 性能优化方法？ <a class="header-anchor" href="#了解哪些-vue-性能优化方法" aria-label="Permalink to &quot;了解哪些 Vue 性能优化方法？&quot;">​</a></h2><p>答题思路：根据题目描述，这里主要探讨 Vue 代码层面的优化</p><h3 id="_1-路由懒加载" tabindex="-1">1.路由懒加载 <a class="header-anchor" href="#_1-路由懒加载" aria-label="Permalink to &quot;1.路由懒加载&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	routes</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/foo&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./Foo.vue&quot;</span><span style="color:#ABB2BF;">) }],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-keep-alive-缓存页面" tabindex="-1">2.keep-alive 缓存页面 <a class="header-anchor" href="#_2-keep-alive-缓存页面" aria-label="Permalink to &quot;2.keep-alive 缓存页面&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_3-使用-v-show-复用-dom" tabindex="-1">3.使用 v-show 复用 DOM <a class="header-anchor" href="#_3-使用-v-show-复用-dom" aria-label="Permalink to &quot;3.使用 v-show 复用 DOM&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;cell&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!--这种情况用v-show复用DOM，比v-if效果好--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-show</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;on&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">Heavy</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">n</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">section</span><span style="color:#D19A66;"> v-show</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;off&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">Heavy</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">n</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">section</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_4-v-for-遍历避免同时使用-v-if" tabindex="-1">4.v-for 遍历避免同时使用 v-if <a class="header-anchor" href="#_4-v-for-遍历避免同时使用-v-if" aria-label="Permalink to &quot;4.v-for 遍历避免同时使用 v-if&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">li</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">user</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> activeUsers</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			{{ </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		activeUsers</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">users</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">user</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> user</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isActive</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_5-长列表性能优化" tabindex="-1">5.长列表性能优化 <a class="header-anchor" href="#_5-长列表性能优化" aria-label="Permalink to &quot;5.长列表性能优化&quot;">​</a></h3><p>1.如果列表是纯粹的数据展示，不会有任何改变，就不需要做响应化</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">export default { data: () =&gt; ({ users: [] }), async created() { const users =</span></span>
<span class="line"><span style="color:#ABB2BF;">await axios.get(&quot;/api/users&quot;); this.users = Object.freeze(users); } };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>2.如果是大数据长列表，可采用虚拟滚动，只渲染少部分区域的内容</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">recycle-scroller</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;items&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">items</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">item-size</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;">24</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;template v-slot=&quot;{ item }&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;FetchItemView</span></span>
<span class="line"><span style="color:#ABB2BF;">        :item=&quot;item&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        @vote=&quot;voteItem(item)&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/template&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">recycle-scroller</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>参考：<a href="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noreferrer">vue-virtual-scroller</a>、<a href="https://github.com/tangbc/vue-virtual-scroll-list" target="_blank" rel="noreferrer">vue-virtual-scroll-list</a></p></blockquote><h3 id="_6-事件的销毁" tabindex="-1">6.事件的销毁 <a class="header-anchor" href="#_6-事件的销毁" aria-label="Permalink to &quot;6.事件的销毁&quot;">​</a></h3><p>Vue 组件销毁时，会自动解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">created() { this.timer = setInterval(this.refresh, 2000) }, beforeDestroy() {</span></span>
<span class="line"><span style="color:#ABB2BF;">clearInterval(this.timer) }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_7-图片懒加载" tabindex="-1">7.图片懒加载 <a class="header-anchor" href="#_7-图片懒加载" aria-label="Permalink to &quot;7.图片懒加载&quot;">​</a></h3><p>对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;"> v-lazy</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">/static/</span><span style="color:#C678DD;">img</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">1.</span><span style="color:#E06C75;">png</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>参考项目：<a href="https://github.com/hilongjw/vue-lazyload" target="_blank" rel="noreferrer">vue-lazyload</a></p></blockquote><h3 id="_8-第三方插件组件按需引入" tabindex="-1">8.第三方插件组件按需引入 <a class="header-anchor" href="#_8-第三方插件组件按需引入" aria-label="Permalink to &quot;8.第三方插件组件按需引入&quot;">​</a></h3><p>像 element-ui 这样的第三方组件库可以按需引入避免体积太大。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Button</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Select</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;element-ui&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Button</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Select</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_9-无状态的组件标记为函数式组件" tabindex="-1">9.无状态的组件标记为函数式组件 <a class="header-anchor" href="#_9-无状态的组件标记为函数式组件" aria-label="Permalink to &quot;9.无状态的组件标记为函数式组件&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> functional</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;cell&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#C678DD;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;on&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">section</span><span style="color:#C678DD;"> v-else</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;off&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">section</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_10-子组件分割" tabindex="-1">10.子组件分割 <a class="header-anchor" href="#_10-子组件分割" aria-label="Permalink to &quot;10.子组件分割&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">ChildComp</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		ChildComp</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">				heavy</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					/* 耗时任务 */</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#61AFEF;">			render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">h</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">heavy</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="_11-变量本地化" tabindex="-1">11.变量本地化 <a class="header-anchor" href="#_11-变量本地化" aria-label="Permalink to &quot;11.变量本地化&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">style</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">opacity</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">start</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 300</span><span style="color:#ABB2BF;"> }</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">heavy</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@/utils&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;start&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		base</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> 42</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		result</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> base</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 不要频繁引用this.base</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				result</span><span style="color:#56B6C2;"> +=</span><span style="color:#61AFEF;"> heavy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_12-ssr" tabindex="-1">12.SSR <a class="header-anchor" href="#_12-ssr" aria-label="Permalink to &quot;12.SSR&quot;">​</a></h3><p>略</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="vue-首屏加载优化" tabindex="-1">vue 首屏加载优化 <a class="header-anchor" href="#vue-首屏加载优化" aria-label="Permalink to &quot;vue 首屏加载优化&quot;">​</a></h2><p>把不常改变的库放到 <code>index.html</code> 中，通过 cdn 引入，然后找到 <code>build/webpack.base.conf.js</code> 文件，在 <code>module.exports = { }</code> 中添加以下代码</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">externals: {</span></span>
<span class="line"><span style="color:#FFFFFF;">    &#39;vue&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#FFFFFF;">&#39;Vue&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;">    &#39;vue-router&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#FFFFFF;">&#39;VueRouter&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;">    &#39;element-ui&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#FFFFFF;">&#39;ELEMENT&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>这样 webpack 就不会把 <code>vue.js</code>，<code>vue-router</code>，<code>element-ui</code> 库打包了。</li><li>vue 路由的懒加载：import 或者 require 懒加载。</li><li>不生成 map 文件：找到 <code>config/index.js</code>，修改为 <code>productionSourceMap: false</code></li><li>vue 组件尽量不要全局引入</li><li>使用更轻量级的工具库</li></ul><h2 id="vue-初始化页面闪动问题" tabindex="-1">vue 初始化页面闪动问题 <a class="header-anchor" href="#vue-初始化页面闪动问题" aria-label="Permalink to &quot;vue 初始化页面闪动问题&quot;">​</a></h2>`,3283),K=p(`<p>首先：在 css 里加上以下代码：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">[</span><span style="color:#D19A66;">v-cloak</span><span style="color:#C678DD;">]</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	display: </span><span style="color:#D19A66;">none</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如 果 没 有 彻 底 解 决 问 题 ， 则 在 根 元 素 加 上 <code>style=&quot;display: none;&quot;</code> ，<code>:style=&quot;{ display: &#39;block&#39; }&quot;</code></p><h1 id="九、vue-项目实践" tabindex="-1">九、Vue 项目实践 <a class="header-anchor" href="#九、vue-项目实践" aria-label="Permalink to &quot;九、Vue 项目实践&quot;">​</a></h1><h2 id="实际工作中-你总结的-vue-最佳实践有哪些" tabindex="-1">实际工作中，你总结的 vue 最佳实践有哪些？ <a class="header-anchor" href="#实际工作中-你总结的-vue-最佳实践有哪些" aria-label="Permalink to &quot;实际工作中，你总结的 vue 最佳实践有哪些？&quot;">​</a></h2><h3 id="vue官网文档思路" tabindex="-1">Vue官网文档思路 <a class="header-anchor" href="#vue官网文档思路" aria-label="Permalink to &quot;Vue官网文档思路&quot;">​</a></h3><p>风格指南：<a href="https://cn.vuejs.org/style-guide/" target="_blank" rel="noreferrer">Style Guide | Vue.js (vuejs.org)</a></p><p>性能：<a href="https://cn.vuejs.org/guide/best-practices/performance" target="_blank" rel="noreferrer">性能优化 | Vue.js (vuejs.org)</a></p><p>安全：<a href="https://cn.vuejs.org/guide/best-practices/security.html" target="_blank" rel="noreferrer">安全 | Vue.js (vuejs.org)</a></p><p>访问性：<a href="https://cn.vuejs.org/guide/best-practices/accessibility.html" target="_blank" rel="noreferrer">无障碍访问 | Vue.js (vuejs.org)</a></p><p>发布：<a href="https://cn.vuejs.org/guide/best-practices/production-deployment" target="_blank" rel="noreferrer">生产部署 | Vue.js (vuejs.org)</a></p><h3 id="回答范例-9" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-9" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><p>我从编码风格、性能、安全等方面说几条：</p><h4 id="_1-编码风格方面" tabindex="-1">1.编码风格方面： <a class="header-anchor" href="#_1-编码风格方面" aria-label="Permalink to &quot;1.编码风格方面：&quot;">​</a></h4><ul><li>命名组件时使用“多词”风格避免和 HTML 元素冲突</li><li>使用“细节化”方式定义属性而不是只有一个属性名</li><li>属性名声明时使用“驼峰命名”，模板或 jsx 中使用“肉串命名”</li><li>使用 v-for 时务必加上 key，且不要跟 v-if 写在一起</li></ul><h4 id="_2-性能方面" tabindex="-1">2.性能方面： <a class="header-anchor" href="#_2-性能方面" aria-label="Permalink to &quot;2.性能方面：&quot;">​</a></h4><ul><li>路由懒加载减少应用尺寸</li><li>利用 SSR 减少首屏加载时间</li><li>利用 v-once 渲染那些不需要更新的内容</li><li>一些长列表可以利用虚拟滚动技术避免内存过度占用</li><li>对于深层嵌套对象的大数组可以使用 shallowRef 或 shallowReactive 降低开销</li><li>避免不必要的组件抽象</li></ul><hr><h4 id="_3-安全" tabindex="-1">3.安全： <a class="header-anchor" href="#_3-安全" aria-label="Permalink to &quot;3.安全：&quot;">​</a></h4><ul><li>不使用不可信模板，例如使用用户输入拼接模板：<code>template: &lt;div&gt; + userProvidedString + &lt;/div&gt;</code></li><li>小心使用 <code>v-html</code>，<code>:url</code>，<code>:style</code> 等，避免 <code>html</code>、<code>url</code>、样式等注入</li></ul><h4 id="_4-等等" tabindex="-1">4.等等...... <a class="header-anchor" href="#_4-等等" aria-label="Permalink to &quot;4.等等......&quot;">​</a></h4><h2 id="从-0-到-1-自己构架一个-vue-项目-说说有哪些步骤、哪些重要插件、目录结构你会怎么组织" tabindex="-1">从 0 到 1 自己构架一个 vue 项目，说说有哪些步骤、哪些重要插件、目录结构你会怎么组织 <a class="header-anchor" href="#从-0-到-1-自己构架一个-vue-项目-说说有哪些步骤、哪些重要插件、目录结构你会怎么组织" aria-label="Permalink to &quot;从 0 到 1 自己构架一个 vue 项目，说说有哪些步骤、哪些重要插件、目录结构你会怎么组织&quot;">​</a></h2><p>综合实践类题目，考查实战能力。没有什么绝对的正确答案，把平时工作的重点有条理的描述一下即可。</p><h3 id="思路-3" tabindex="-1">思路 <a class="header-anchor" href="#思路-3" aria-label="Permalink to &quot;思路&quot;">​</a></h3><ol><li>构建项目，创建项目基本结构</li><li>引入必要的插件：</li><li>代码规范：prettier，eslint</li><li>提交规范：husky，lint-staged</li><li>其他常用：svg-loader，vueuse，nprogress</li><li>常见目录结构</li></ol><hr><h3 id="回答范例-10" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-10" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><ol><li>从 0 创建一个项目我大致会做以下事情：项目构建、引入必要插件、代码规范、提交规范、常用库和组件</li><li>目前 vue3 项目我会用 vite 或者 create-vue 创建项目</li><li>接下来引入必要插件：路由插件 vue-router、状态管理 vuex/pinia、ui 库我比较喜欢 element-plus 和 antd-vue、http 工具我会选 axios</li><li>其他比较常用的库有 vueuse，nprogress，图标可以使用 vite-svg-loader</li><li>下面是代码规范：结合 prettier 和 eslint 即可</li><li>最后是提交规范，可以使用 husky，lint-staged，commitlint</li></ol><hr><p>目录结构我有如下习惯：</p><ul><li><code>.vscode</code>：用来放项目中的 vscode 配置</li><li><code>plugins</code>：用来放 vite 插件的 plugin 配置</li><li><code>public</code>：用来放一些诸如 页头 icon 之类的公共文件，会被打包到 dist 根目录下</li><li><code>src</code>：用来放项目代码文件</li><li><code>api</code>：用来放 http 的一些接口配置</li><li><code>assets</code>：用来放一些 CSS 之类的静态资源</li><li><code>components</code>：用来放项目通用组件</li><li><code>layout</code>：用来放项目的布局</li><li><code>router</code>：用来放项目的路由配置</li><li><code>store</code>：用来放状态管理 Pinia 的配置</li><li><code>utils</code>：用来放项目中的工具方法类</li><li><code>views</code>：用来放项目的页面文件</li></ul><h2 id="请说出-vue-cli-项目中-src-目录每个文件夹和文件的用法" tabindex="-1">请说出 vue.cli 项目中 src 目录每个文件夹和文件的用法？ <a class="header-anchor" href="#请说出-vue-cli-项目中-src-目录每个文件夹和文件的用法" aria-label="Permalink to &quot;请说出 vue.cli 项目中 src 目录每个文件夹和文件的用法？&quot;">​</a></h2><p>答：</p><p>assets 文件夹是放静态资源；</p><p>components 是放组件；</p><p>router 是定义路由相关的配置；</p><p>view 视图；</p><p>app.vue 是一个应用主组件；</p><p>main.js 是入口文件；</p><h2 id="vue-cli-工程相关" tabindex="-1">vue-cli 工程相关 <a class="header-anchor" href="#vue-cli-工程相关" aria-label="Permalink to &quot;vue-cli 工程相关&quot;">​</a></h2><ul><li>构建 <code>vue-cli</code> 工程都用到了哪些技术？他们的作用分别是什么？</li><li><code>vue-cli</code> 工程常用的 <code>npm</code> 命令有哪些？</li></ul><p>参考答案：</p><h3 id="构建-vue-cli-工程都用到了哪些技术-他们的作用分别是什么" tabindex="-1">构建 vue-cli 工程都用到了哪些技术？他们的作用分别是什么？ <a class="header-anchor" href="#构建-vue-cli-工程都用到了哪些技术-他们的作用分别是什么" aria-label="Permalink to &quot;构建 vue-cli 工程都用到了哪些技术？他们的作用分别是什么？&quot;">​</a></h3><ul><li>vue.js：vue-cli 工程的核心，主要特点是双向数据绑定和组件系统。</li><li>vue-router：vue 官方推荐使用的路由框架。</li><li>vuex：专为 Vue.js 应用项目开发的状态管理器，主要用于维护 vue 组件间共用的一些 变量 和 方法。</li><li>axios（或者 fetch、ajax）：用于发起 GET 、或 POST 等 http 请求，基于 Promise 设计。</li><li>vux 等：一个专为 vue 设计的移动端 UI 组件库。</li><li>webpack：模块加载和 vue-cli 工程打包器。</li><li>eslint：代码规范工具</li></ul><h3 id="vue-cli-工程常用的-npm-命令有哪些" tabindex="-1">vue-cli 工程常用的 npm 命令有哪些？ <a class="header-anchor" href="#vue-cli-工程常用的-npm-命令有哪些" aria-label="Permalink to &quot;vue-cli 工程常用的 npm 命令有哪些？&quot;">​</a></h3><ul><li>下载 node_modules 资源包的命令：<code>npm install</code></li><li>启动 vue-cli 开发环境的 npm 命令：<code>npm run dev</code></li><li>vue-cli 生成 生产环境部署资源 的 npm 命令：<code>npm run build</code></li><li>用于查看 vue-cli 生产环境部署资源文件大小的 npm 命令：<code>npm run build --report</code></li></ul><h2 id="在-vue-cli-中的安装-scss-使用步骤是-有哪几大特性" tabindex="-1">在 vue-cli 中的安装 scss 使用步骤是？有哪几大特性？ <a class="header-anchor" href="#在-vue-cli-中的安装-scss-使用步骤是-有哪几大特性" aria-label="Permalink to &quot;在 vue-cli 中的安装 scss 使用步骤是？有哪几大特性？&quot;">​</a></h2><h3 id="css-的预编译" tabindex="-1">css 的预编译 <a class="header-anchor" href="#css-的预编译" aria-label="Permalink to &quot;css 的预编译&quot;">​</a></h3><h4 id="使用步骤" tabindex="-1">使用步骤 <a class="header-anchor" href="#使用步骤" aria-label="Permalink to &quot;使用步骤&quot;">​</a></h4><ul><li>第一步：用 npm 下三个 loader（sass-loader、css-loader、node-sass）</li><li>第二步：在 build 目录找到 webpack.base.config.js，在那个 extends 属性中加一个拓展.scss</li><li>第三步：还是在同一个文件，配置一个 module 属性</li><li>第四步：然后在组件的 style 标签加上 lang 属性 ，例如：lang=”scss”</li></ul><h4 id="有哪几大特性" tabindex="-1">有哪几大特性 <a class="header-anchor" href="#有哪几大特性" aria-label="Permalink to &quot;有哪几大特性&quot;">​</a></h4><ul><li>1、可以用变量，例如（$变量名称=值）；</li><li>2、可以用混合器，例如（）</li><li>3、可以嵌套</li></ul><h2 id="vue2-项目结构介绍" tabindex="-1">Vue2 项目结构介绍 <a class="header-anchor" href="#vue2-项目结构介绍" aria-label="Permalink to &quot;Vue2 项目结构介绍&quot;">​</a></h2><ul><li>build 文件夹：用于存放 webpack 相关配置和脚本。</li><li>config 文件夹：主要存放配置文件，比如配置开发环境的端口号、开启热加载或开启 gzip 压缩等。</li><li>dist 文件夹：默认命令打包生成的静态资源文件。</li><li>node_modules：存放 npm 命令下载的开发环境和生产环境的依赖包。</li><li>src：存放项目源码及需要引用的资源文件。</li><li>src 下 assets：存放项目中需要用到的资源文件，css、js、images 等。</li><li>src 下 componets：存放 vue 开发中一些公共组件。</li><li>src 下 emit：自己配置的 vue 集中式事件管理机制。</li><li>src 下 router：vue-router vue 路由的配置文件。</li><li>src 下 service：自己配置的 vue 请求后台接口方法。</li><li>src 下 page：存在 vue 页面组件的文件夹。</li><li>src 下 util：存放 vue 开发过程中一些公共的 js 方法。</li><li>src 下 vuex：存放 vuex 为 vue 专门开发的状态管理器。</li><li>src 下 app.vue：整个工程的 vue 根组件。</li><li>src 下 main.js：工程的入口文件。</li><li>static：存入一些静态资源资源目录，我们可以把一些图片，字体，json 数据放在这里。</li><li>index.html：设置项目的一些 meta 头信息和提供 html 元素节点，用于挂载 vue。</li><li>package.json：对项目的描述以及对项目部署和启动、打包的 npm 命令管理。</li><li>.eslintrc.js：Eslint 代码检查配置文件</li><li>.babelrc：ES6 配置</li><li>.gitignore：忽略提交到远程仓库的配置</li></ul><h2 id="axios-是什么-怎样使用它-怎么解决跨域的问题" tabindex="-1">axios 是什么？怎样使用它？怎么解决跨域的问题？ <a class="header-anchor" href="#axios-是什么-怎样使用它-怎么解决跨域的问题" aria-label="Permalink to &quot;axios 是什么？怎样使用它？怎么解决跨域的问题？&quot;">​</a></h2><p>axios 的是一种异步请求，用法和 ajax 类似，安装 即可使用。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> axios</span><span style="color:#D19A66;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>请求中包括 get、post、put、patch、delete 等五种请求方式，解决跨域可以在请求头中添加 Access-Control-Allow-Origin，也可以在 index.js 文件中更改 proxyTable 配置等解决跨域问题。</p><p>然后发送的是跨域，需在配置文件中 config/index.js 进行设置。</p><h2 id="vue-项目中你是如何解决跨域的呢" tabindex="-1">Vue 项目中你是如何解决跨域的呢 <a class="header-anchor" href="#vue-项目中你是如何解决跨域的呢" aria-label="Permalink to &quot;Vue 项目中你是如何解决跨域的呢&quot;">​</a></h2><h4 id="跨域是什么" tabindex="-1">跨域是什么 <a class="header-anchor" href="#跨域是什么" aria-label="Permalink to &quot;跨域是什么&quot;">​</a></h4><p>跨域本质是浏览器基于<strong>同源策略</strong>的一种安全手段</p><p>同源策略（Sameoriginpolicy），是一种约定，它是浏览器最核心也最基本的安全功能</p><p>所谓同源（即指在同一个域）具有以下三个相同点</p><ul><li>协议相同（protocol）</li><li>主机相同（host）</li><li>端口相同（port）</li></ul><p>反之非同源请求，也就是协议、端口、主机其中一项不相同的时候，这时候就会产生跨域</p><blockquote><p>一定要注意跨域是浏览器的限制，你用抓包工具抓取接口数据，是可以看到接口已经把数据返回回来了，只是浏览器的限制，你获取不到数据。用 postman 请求接口能够请求到数据。这些再次印证了跨域是浏览器的限制。</p></blockquote><h2 id="描述使用-axios-实现登录功能的流程" tabindex="-1">描述使用 axios 实现登录功能的流程？ <a class="header-anchor" href="#描述使用-axios-实现登录功能的流程" aria-label="Permalink to &quot;描述使用 axios 实现登录功能的流程？&quot;">​</a></h2><p>后台如果是 Tp5 则定义一个资源路由。js 中使用 import 进来，然后.get 或.post。返回在.then 函数中如果成功，失败则是在.catch 函数中</p><h2 id="有封装过-axios-吗-主要封装哪方面" tabindex="-1">有封装过 axios 吗？主要封装哪方面？ <a class="header-anchor" href="#有封装过-axios-吗-主要封装哪方面" aria-label="Permalink to &quot;有封装过 axios 吗？主要封装哪方面？&quot;">​</a></h2><ol><li>设置请求超时时间</li><li>根据项目环境，设置请求路径（测试环境、生产环境）</li><li>设置请求拦截，添加 token 等</li><li>设置响应拦截，对响应的状态码进行判断，对数据进行格式化</li><li>添加请求队列，实现 loading 效果</li><li>登录超时，token 失效，跳转登录页</li><li>维护取消请求 token，在页面切换时通过导航守卫可以取消上个页面中正在发送的请求</li></ol><h2 id="在-vue-项目中如何引入第三方库-比如-jquery-有哪些方法可以做到" tabindex="-1">在 vue 项目中如何引入第三方库（比如 jQuery）？有哪些方法可以做到？ <a class="header-anchor" href="#在-vue-项目中如何引入第三方库-比如-jquery-有哪些方法可以做到" aria-label="Permalink to &quot;在 vue 项目中如何引入第三方库（比如 jQuery）？有哪些方法可以做到？&quot;">​</a></h2><p>参考回答：</p><h4 id="_1、绝对路径直接引入" tabindex="-1">1、绝对路径直接引入 <a class="header-anchor" href="#_1、绝对路径直接引入" aria-label="Permalink to &quot;1、绝对路径直接引入&quot;">​</a></h4><p>在 index.html 中用 script 引入</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./static/jquery-1.12.4.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后在 webpack 中配置 external</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">externals</span><span style="color:#ABB2BF;">: { </span><span style="color:#98C379;">&#39;jquery&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;jQuery&#39;</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在组件中使用时 import</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> $</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;jquery&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-、在-webpack-中配置-alias" tabindex="-1">2 、在 webpack 中配置 alias <a class="header-anchor" href="#_2-、在-webpack-中配置-alias" aria-label="Permalink to &quot;2 、在 webpack 中配置 alias&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">extensions</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;.js&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;.vue&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;.json&#39;</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">alias</span><span style="color:#ABB2BF;">: { </span><span style="color:#98C379;">&#39;@&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;src&#39;</span><span style="color:#ABB2BF;">), </span><span style="color:#98C379;">&#39;jquery&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;static/jquery-1.12.4.js&#39;</span><span style="color:#ABB2BF;">) } }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后在组件中 import</p><h4 id="_3、在-webpack-中配置-plugins" tabindex="-1">3、在 webpack 中配置 plugins <a class="header-anchor" href="#_3、在-webpack-中配置-plugins" aria-label="Permalink to &quot;3、在 webpack 中配置 plugins&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> webpack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ProvidePlugin</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;jquery&quot;</span><span style="color:#ABB2BF;"> })];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>全局使用，但在使用 eslint 情况下会报错，需要在使用了 $ 的代码前添加 <code>/_ eslint-disable_/</code> 来去掉 ESLint 的检查。</p><h2 id="要做权限管理怎么做-如何控制到按钮级别" tabindex="-1">要做权限管理怎么做？如何控制到按钮级别？ <a class="header-anchor" href="#要做权限管理怎么做-如何控制到按钮级别" aria-label="Permalink to &quot;要做权限管理怎么做？如何控制到按钮级别？&quot;">​</a></h2><blockquote><p>综合实践题目，实际开发中经常需要面临权限管理的需求，考查实际应用能力。</p><p>权限管理一般需求是两个：页面权限和按钮权限，从这两个方面论述即可。</p></blockquote><h3 id="_1-登录鉴权" tabindex="-1">（1）登录鉴权 <a class="header-anchor" href="#_1-登录鉴权" aria-label="Permalink to &quot;（1）登录鉴权&quot;">​</a></h3><p>用户登录后返回 token，前端将 token 保存到本地，作为用户登录的凭证，每次发送请求的时候都要携带 token。</p><p>后端对 token 进行验证。当页面刷新时我们可以使用 token 来获得用户权限</p><h3 id="_2-访问权限" tabindex="-1">（2）访问权限 <a class="header-anchor" href="#_2-访问权限" aria-label="Permalink to &quot;（2）访问权限&quot;">​</a></h3><p>根据用户是否登录来判断能不能访问某个页面，通过路由守卫来实现判断用户是否有此权限</p><h3 id="_3-页面权限" tabindex="-1">（3）页面权限 <a class="header-anchor" href="#_3-页面权限" aria-label="Permalink to &quot;（3）页面权限&quot;">​</a></h3><p>前端配置的路由分为两部分“通用路由配置”和“需要权限的路由配置”。在权限路由中增加访问权限 meta（备注）。</p><p>用户登录后可得到对应的权限列表。通过权限列表筛查出对应符合的路由信息，最后通过 addRoutes 方法，动态添加路由</p><p>具体实现的时候分后端和前端两种方案：</p><p>前端方案会<strong>把所有路由信息在前端配置</strong>，通过路由守卫要求用户登录，用户<strong>登录后根据角色过滤出路由表</strong>。</p><p>比如我会配置一个<code>asyncRoutes</code>数组，需要认证的页面在其路由的<code>meta</code>中添加一个<code>roles</code>字段，等获取用户角色之后取两者的交集，若结果不为空则说明可以访问。此过滤过程结束，剩下的路由就是该用户能访问的页面，<strong>最后通过<code>router.addRoutes(accessRoutes)</code>方式动态添加路由</strong>即可。</p><p>后端方案会<strong>把所有页面路由信息存在数据库</strong>中，用户登录的时候根据其角色<strong>查询得到其能访问的所有页面路由信息</strong>返回给前端，前端<strong>再通过<code>addRoutes</code>动态添加路由</strong>信息</p><p><strong>服务端返回的路由信息如何添加到路由器中？</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 前端组件名和组件映射表</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> map</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //xx: require(&#39;@/views/xx.vue&#39;).default // 同步的方式</span></span>
<span class="line"><span style="color:#61AFEF;">  xx</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;@/views/xx.vue&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 异步的方式</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 服务端返回的asyncRoutes</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> asyncRoutes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/xx&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;xx&#39;</span><span style="color:#ABB2BF;">,... }</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 遍历asyncRoutes，将component替换为map[component]</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> mapComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">asyncRoutes</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  asyncRoutes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">component</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> map</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">child</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> mapComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">mapComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">asyncRoutes</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_4-按钮权限" tabindex="-1">（4）按钮权限 <a class="header-anchor" href="#_4-按钮权限" aria-label="Permalink to &quot;（4）按钮权限&quot;">​</a></h3><p>按钮权限一般采用自定义指令来实现。</p><p>当用户登录时，后端会返回用户的权限。在按钮上使用此指令，指令内部会盘点是否有此按钮权限，如果没有则会移除按钮</p><p>按钮权限的控制通常会实现一个指令，例如 v-permission，将按钮要求角色通过值传给 v-permission 指令，在指令的 moutned 钩子中可以判断当前用户角色和按钮是否存在交集，有则保留按钮，无则移除按钮。</p><p>纯前端方案的优点是实现简单，不需要额外权限管理页面，但是维护起来问题比较大，有新的页面和角色需求就要修改前端代码重新打包部署；</p><p>服务端方案就不存在这个问题，通过专门的角色和权限管理页面，配置页面和按钮权限信息到数据库，应用每次登陆时获取的都是最新的路由信息，可谓一劳永逸！</p><hr><h3 id="源码相关" tabindex="-1">源码相关 <a class="header-anchor" href="#源码相关" aria-label="Permalink to &quot;源码相关&quot;">​</a></h3><p>路由守卫</p><p><a href="https://github1s.com/PanJiaChen/vue-element-admin/blob/HEAD/src/permission.js" target="_blank" rel="noreferrer">https://github1s.com/PanJiaChen/vue-element-admin/blob/HEAD/src/permission.js</a></p><p>路由生成</p><p><a href="https://github1s.com/PanJiaChen/vue-element-admin/blob/HEAD/src/store/modules/permission.js" target="_blank" rel="noreferrer">https://github1s.com/PanJiaChen/vue-element-admin/blob/HEAD/src/store/modules/permission.js</a></p><p>动态追加路由</p><p><a href="https://github1s.com/PanJiaChen/vue-element-admin/blob/HEAD/src/permission.js" target="_blank" rel="noreferrer">https://github1s.com/PanJiaChen/vue-element-admin/blob/HEAD/src/permission.js</a></p><hr><h3 id="可能的追问-3" tabindex="-1">可能的追问 <a class="header-anchor" href="#可能的追问-3" aria-label="Permalink to &quot;可能的追问&quot;">​</a></h3><p>类似<code>Tabs</code>这类组件能不能使用<code>v-permission</code>指令实现按钮权限控制？</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">el-tabs</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;el-tab-pane label=&quot;用户管理&quot; name=&quot;first&quot;&gt;用户管理&lt;/el-tab-pane&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;el-tab-pane label=&quot;⻆⾊管理&quot; name=&quot;third&quot;&gt;⻆⾊管理&lt;/el-tab-pane&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">el-tabs</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><p>服务端返回的路由信息如何添加到路由器中？</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 前端组件名和组件映射表</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> map</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //xx: require(&#39;@/views/xx.vue&#39;).default // 同步的方式</span></span>
<span class="line"><span style="color:#61AFEF;">  xx</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;@/views/xx.vue&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 异步的方式</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 服务端返回的asyncRoutes</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> asyncRoutes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/xx&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;xx&#39;</span><span style="color:#ABB2BF;">,... }</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 遍历asyncRoutes，将component替换为map[component]</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> mapComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">asyncRoutes</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  asyncRoutes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">component</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> map</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">child</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> mapComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">mapComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">asyncRoutes</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="assets-和-static-的区别" tabindex="-1">assets 和 static 的区别 <a class="header-anchor" href="#assets-和-static-的区别" aria-label="Permalink to &quot;assets 和 static 的区别&quot;">​</a></h2><p><strong>相同点</strong>： assets 和 static 两个都是存放静态资源文件。项目中所需要的资源文件图片，字体图标，样式文件等都可以放在这两个文件下，这是相同点</p><p><strong>不相同点</strong>：assets 中存放的静态资源文件在项目打包时，也就是运行 npm run build 时会将 assets 中放置的静态资源文件进行打包上传，所谓打包简单点可以理解为压缩体积，代码格式化。而压缩后的静态资源文件最终也都会放置在 static 文件中跟着 index.html 一同上传至服务器。static 中放置的静态资源文件就不会要走打包压缩格式化等流程，而是直接进入打包好的目录，直接上传至服务器。</p><p>因为避免了压缩直接进行上传，在打包时会提高一定的效率，但是 static 中的资源文件由于没有进行压缩等操作，所以文件的体积也就相对于 assets 中打包后的文件提交较大点。在服务器中就会占据更大的空间。</p><p><strong>建议</strong>： 将项目中 template 需要的样式文件 js 文件等都可以放置在 assets 中，走打包这一流程。减少体积。</p><p>而项目中引入的第三方的资源文件如 iconfoont.css 等文件可以放置在 static 中，因为这些引入的第三方文件已经经过处理，不再需要处理，直接上传。</p><h2 id="vue-中如何编写可复用的组件" tabindex="-1">Vue 中如何编写可复用的组件？ <a class="header-anchor" href="#vue-中如何编写可复用的组件" aria-label="Permalink to &quot;Vue 中如何编写可复用的组件？&quot;">​</a></h2><p>组件，是一个具有一定功能，且不同组件间功能相对独立的模块。高内聚、低耦合。</p><p>开发可复用性的组件应遵循以下原则：</p><ul><li>1）规范化命名：组件的命名应该跟业务无关，而是依据组件的功能命名。</li><li>2）数据扁平化：定义组件接口时，尽量不要将整个对象作为一个 prop 传进来。每个 prop 应该是一个简单类型的数据。这样做有下列几点好处： <ul><li>(1) 组件接口清晰。</li><li>(2) props 校验方便。</li><li>(3) 当服务端返回的对象中的 key 名称与组件接口不一样时，不需要重新构造一个对象。扁平化的 props 能让我们更直观地理解组件的接口。</li></ul></li><li>3）可复用组件只实现 UI 相关的功能，即展示、交互、动画，如何获取数据跟它无关，因此不要在组件内部去获取数据。</li><li>4）可复用组件应尽量减少对外部条件的依赖，所有与 vuex 相关的操作都不应在可复用组件中出现。</li><li>5）组件在功能独立的前提下应该尽量简单，越简单的组件可复用性越强。</li><li>6）组件应具有一定的容错性。</li><li>7）组件应当避免对其父组件的依赖，不要通过 this.parent 来操作父组件的示例。父组件也不要通过 this.children 来引用子组件的示例，而是通过子组件的接口与之交互。</li><li>8）可复用组件除了定义一个清晰的公开接口外，还需要有命名空间。命名空间可以避免与浏览器保留标签和其他组件的冲突。特别是当项目引用外部 UI 组件或组件迁移到其他项目时，命名空间可以避免很多命名冲突的问题。</li></ul><h2 id="解决非工程化项目初始化页面闪动问题" tabindex="-1">解决非工程化项目初始化页面闪动问题 <a class="header-anchor" href="#解决非工程化项目初始化页面闪动问题" aria-label="Permalink to &quot;解决非工程化项目初始化页面闪动问题&quot;">​</a></h2><p>vue 页面在加载的时候闪烁花括号 <code>{}</code>，<code>v-cloak</code> 指令和 css 规则如 <code>[v-cloak]{display: none}</code>一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">/*css样式*/ [v-cloak] { display: none; }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!--html代码--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#D19A66;"> v-cloak</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;ul&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    	&lt;li v-for=&quot;item in tabs&quot;&gt;{{item.text}}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="vue-弹窗后如何禁止滚动条滚动" tabindex="-1">Vue 弹窗后如何禁止滚动条滚动？ <a class="header-anchor" href="#vue-弹窗后如何禁止滚动条滚动" aria-label="Permalink to &quot;Vue 弹窗后如何禁止滚动条滚动？&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/***滑动限制***/</span></span>
<span class="line"><span style="color:#61AFEF;">stop</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> mo</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">){</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;">();};</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">overflow</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;hidden&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;touchmove&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">mo</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//禁止页面滑动</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/***取消滑动限制***/</span></span>
<span class="line"><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> mo</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">){</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;">();};</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">overflow</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//出现滚动条</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;touchmove&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">mo</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> toggleBody</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">isPin</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isPin</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">height</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;100vh&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;overflow-y&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;hidden&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">height</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;unset&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;overflow-y&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;auto&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">toggleBody</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 在跳出弹窗的时候</span></span>
<span class="line"><span style="color:#61AFEF;">toggleBody</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 弹窗消失的时候</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="超长的页面怎么办呢" tabindex="-1">超长的页面怎么办呢 <a class="header-anchor" href="#超长的页面怎么办呢" aria-label="Permalink to &quot;超长的页面怎么办呢&quot;">​</a></h3><p>上面直接限制 body 固然有效，但如果一个页面很长很长，超出了 100vh，而我正好滚到中间时弹出弹窗。</p><p>此时若直接限制 body 的 <code>overflow: hidden</code> 则会让页面一下弹到顶部，显然不是好的做法。那么，又该怎么做呢？</p><p>对移动端，可以引入 <code>touch-action</code>，限制为 <code>none</code>，在弹窗消失时再变回 <code>auto</code>。但 ios 的 <code>safari</code> 上不支持该属性（可以去 caniuse 上查查）。如果我们的 app 在 ios 上用的是 safari 内核，就起不到效果了。</p><p>这时候，就需要结合 <code>event.preventDefault</code> 属性来用了。</p><p>注意在绑定 <code>addEventListener</code> 的时候，需要多传一个 <code>options</code>，强调这个事件不是 passive 的，否则谷歌等新版浏览器会报错。同时最好也指定 <code>capture: true</code>，这样可以早点禁止该事件。</p><p>报错是：<code>Unable to preventDefault inside passive event listener due to target being treated as passive.</code></p><p>这是因为谷歌从 chrome51 之后引入的新优化。事实上，谷歌建议一般情况下，将 passive 标志添加到每个没有调用 <code>preventDefault()</code> 的 <code>wheel</code>、<code>mousewheel</code>、<code>touchstart</code> 和 <code>touchmove</code> 事件侦听器。但是，对于这种禁止了默认事件的 <code>eventListener</code>，在这种情况下，反而是要强调它不是消极监听的。因为滚动都不能滚了，无所谓什么优化了。</p><p>代码如下（vue 版本的）：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">	show</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toggleContainerTouchAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;touchmove&#39;</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#E5C07B;">               this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stopTouch</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#ABB2BF;">            	{ </span><span style="color:#E06C75;">passive</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">capture</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">            )</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;touchmove&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">                  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stopTouch</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">capture</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">            )</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">},     </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">	toggleContainerTouchAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> container</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;.container&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">) { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#E5C07B;">        container</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;touch-action&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> v</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &#39;none&#39;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &#39;auto&#39;</span><span style="color:#ABB2BF;"> }, </span></span>
<span class="line"><span style="color:#61AFEF;">        stopTouch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="说一下-vue-第三方-ui-样式库如何实现样式穿透的-ui-库和-less-sass-穿透问题-deep" tabindex="-1">说一下 vue 第三方 ui 样式库如何实现样式穿透的（ui 库和 less/sass 穿透问题） &gt;&gt;&gt; /deep/ <a class="header-anchor" href="#说一下-vue-第三方-ui-样式库如何实现样式穿透的-ui-库和-less-sass-穿透问题-deep" aria-label="Permalink to &quot;说一下 vue 第三方 ui 样式库如何实现样式穿透的（ui 库和 less/sass 穿透问题） &gt;&gt;&gt; /deep/&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">外层类名</span><span style="color:#ABB2BF;"> &gt;&gt;&gt; </span><span style="color:#98C379;">第三方组件</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	样式</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">wrapper</span><span style="color:#ABB2BF;"> &gt;&gt;&gt; </span><span style="color:#98C379;">.swiper-pagination-bullet-active</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	background:#fff</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">sass和less的样式穿透</span><span style="color:#98C379;"> 使用/deep</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">外层/deep/第三方组件</span><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#61AFEF;">	样式</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">.wrapper</span><span style="color:#98C379;"> /deep/.swiper-pagination-bullet-active{</span></span>
<span class="line"><span style="color:#61AFEF;">	background:</span><span style="color:#7F848E;font-style:italic;"> #fff;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="vue-脚手架是你们公司搭建的-还是用的-vue-的脚本架-webpack-了解多少" tabindex="-1">vue 脚手架是你们公司搭建的，还是用的 vue 的脚本架？webpack 了解多少？ <a class="header-anchor" href="#vue-脚手架是你们公司搭建的-还是用的-vue-的脚本架-webpack-了解多少" aria-label="Permalink to &quot;vue 脚手架是你们公司搭建的，还是用的 vue 的脚本架？webpack 了解多少？&quot;">​</a></h2><p>答：</p><p>我们公司用的 vue 官方的脚手架（vue-cli）</p><p>webpack 是一个前端模块化打包构建工具，vue 脚手架本身就用的 webpack 来构建的，webpack 本身需要的入口文件通过 entry 来指定，出口通过 output 来指定，默认只支持 js 文件，其他文件类型需要通过对应的 loader 来转换，例如：less 需要 less、less-loader、sass 需要 sass-loader,css 需要 style-loader、css-loader 来实现。</p><p>当然本身还有一些内置的插件来对文件进行压缩合并等操作</p><h2 id="说一下-vue-开发环境和线上环境如何切换" tabindex="-1">说一下 vue 开发环境和线上环境如何切换 <a class="header-anchor" href="#说一下-vue-开发环境和线上环境如何切换" aria-label="Permalink to &quot;说一下 vue 开发环境和线上环境如何切换&quot;">​</a></h2><p>答：</p><p>Vue2主要通过检测 <code>process.env.NODE_ENV===&quot;production&quot;</code>和 <code>process.env.NODE_ENV===&quot;development&quot;</code>环境，来设置线上和线下环境地址，从而实现线上和线下环境地址的切换</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;">===</span><span style="color:#98C379;">&quot;production&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;">===</span><span style="color:#98C379;">&quot;development&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Vue3通过</p><h2 id="说一下你们项目中-vue2-如何跨域的" tabindex="-1">说一下你们项目中 Vue2 如何跨域的 <a class="header-anchor" href="#说一下你们项目中-vue2-如何跨域的" aria-label="Permalink to &quot;说一下你们项目中 Vue2 如何跨域的&quot;">​</a></h2><p>答：跨域前端和后端都可以实现，如果只针对 vue，vue 本身可以通过代理的方式可以实现，具体实现：</p><p>在 config 中的 index.js 中配置 proxy 来实现：</p><p><img src="`+$+'" alt="img"></p><h2 id="vue-中的-http-请求是如何管理的" tabindex="-1">Vue 中的 http 请求是如何管理的 <a class="header-anchor" href="#vue-中的-http-请求是如何管理的" aria-label="Permalink to &quot;Vue 中的 http 请求是如何管理的&quot;">​</a></h2><p>答：vue 中的 http 请求如果散落在 vue 各种组件中，不便于后期维护与管理，所以项目中通常将业务需求统一存放在一个目录下管理，例如 src 下的 API 文件夹，这里面放入组件中用到的所有封装好的 http 请求并导出，再其他用到的组件中导入调用。</p><p>如下面封装的 HTTP 请求 <img src="'+O+'" alt="img">说一下你对 axios 拦截器的理解：</p><p>答：axios 拦截器可以让我们在项目中对后端 http 请求和响应自动拦截处理，减少请求和响应的代码量，提升开发效率同时也方便项目后期维护</p><p>例如： <img src="'+I+'" alt="img"><img src="'+H+'" alt="img"> 或者对公共的数据做操作</p><p><img src="'+L+`" alt="img"></p><h2 id="从0到1构建一个vue项目你需要做哪些内容" tabindex="-1">从<code>0</code>到<code>1</code>构建一个<code>Vue</code>项目你需要做哪些内容 <a class="header-anchor" href="#从0到1构建一个vue项目你需要做哪些内容" aria-label="Permalink to &quot;从\`0\`到\`1\`构建一个\`Vue\`项目你需要做哪些内容&quot;">​</a></h2><ul><li>脚手架：选用合适的初始化脚手架(<code>vue-cli2.0</code>或者<code>vue-cli3.0</code>)</li><li>请求：数据<code>axios</code>请求的配置</li><li>登录：登录注册系统</li><li>路由：路由管理页面</li><li>数据：<code>vuex</code>全局数据管理</li><li>权限：权限管理系统</li><li>埋点：埋点系统</li><li>插件：第三方插件的选取以及引入方式</li><li>错误：错误页面</li><li>入口：前端资源直接当静态资源，或者服务端模板拉取</li><li><code>SEO</code>：如果考虑<code>SEO</code>建议采用<code>SSR</code>方案</li><li>组件：基础组件/业务组件</li><li>样式：样式预处理起，公共样式抽取</li><li>方法：公共方法抽离</li></ul><h2 id="移动端如何实现一个比较友好的-header-组件" tabindex="-1">移动端如何实现一个比较友好的 header 组件 <a class="header-anchor" href="#移动端如何实现一个比较友好的-header-组件" aria-label="Permalink to &quot;移动端如何实现一个比较友好的 header 组件&quot;">​</a></h2><p>参考答案：</p><p><code>Header</code> 一般分为左、中、右三个部分，分为三个区域来设计，中间为主标题，每个页面的标题肯定不同，所以可以通过 <code>vue props</code> 的方式做成可配置对外进行暴露，左侧大部分页面可能都是回退按钮，但是样式和内容不尽相同，右侧一般都是具有功能性的操作按钮，所以左右两侧可以通过 <code>vue slot</code> 插槽的方式对外暴露以实现多样化，同时也可以提供 <code>default slot</code> 默认插槽来统一页面风格。</p><h2 id="vue-项目中如何解决跨域问题" tabindex="-1">Vue 项目中如何解决跨域问题 <a class="header-anchor" href="#vue-项目中如何解决跨域问题" aria-label="Permalink to &quot;Vue 项目中如何解决跨域问题&quot;">​</a></h2><p>跨域是浏览器同源策略导致的，协议、主机名、端口不同都会导致跨域问题。</p><p>服务端和服务端之间进行通信是没有跨域问题的。</p><p>一般常用的解决方式有以下几种：</p><ol><li>CORS(Cross-Origin Resource Sharing，跨域资源共享)。由服务端设置，允许指定的客户端访问服务器</li><li>构建工具中设置反向代理，使用 Nginx 做反向代理</li><li>使用 Websocket 进行通信</li><li>搭建 BFF(Backend For Frontend)层解决跨域问题</li></ol><h2 id="本地项目开发完-部署到服务器上报-404-是什么原因" tabindex="-1">本地项目开发完，部署到服务器上报 404 是什么原因 <a class="header-anchor" href="#本地项目开发完-部署到服务器上报-404-是什么原因" aria-label="Permalink to &quot;本地项目开发完，部署到服务器上报 404 是什么原因&quot;">​</a></h2><p><code>hash</code> 路由模式刷新不会有这个问题</p><p><code>history</code> 路由模式刷新时候会向服务端发起请求，服务端无法响应对于的资源，所以会出现 404。这个时候就需要后端最一些配置，增加一个覆盖所有情况的候选资源：如果 url 匹配不到任何静态资源，那就返回同一个 index.html 页面。这就是 app 依赖的页面</p><h2 id="vue-项目中的错误如何处理" tabindex="-1">Vue 项目中的错误如何处理 <a class="header-anchor" href="#vue-项目中的错误如何处理" aria-label="Permalink to &quot;Vue 项目中的错误如何处理&quot;">​</a></h2><h3 id="_1-errorcapture-钩子" tabindex="-1">（1）errorCapture 钩子 <a class="header-anchor" href="#_1-errorcapture-钩子" aria-label="Permalink to &quot;（1）errorCapture 钩子&quot;">​</a></h3><p>可以捕获来自后代组件的错误。如果全局的 config.errorHandler 被定义，所有的错误仍会发送它。因此这些错误仍然会向单一的分析服务的地方进行汇报</p><p>组件错误会沿着组件层级一层一层的往上抛，如果 errorCapture 返回了 false，则阻断传播。</p><h3 id="_2-全局设置错误处理" tabindex="-1">（2）全局设置错误处理 <a class="header-anchor" href="#_2-全局设置错误处理" aria-label="Permalink to &quot;（2）全局设置错误处理&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">errorHandler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">info</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-接口异常处理" tabindex="-1">（3）接口异常处理 <a class="header-anchor" href="#_3-接口异常处理" aria-label="Permalink to &quot;（3）接口异常处理&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">inteceptors</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{ ... },(</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">respponse</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 400</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#61AFEF;">        handleError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">// 统一处理错误信息</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h1 id="十、vue-3-新特性面试题" tabindex="-1">十、Vue 3 新特性面试题 <a class="header-anchor" href="#十、vue-3-新特性面试题" aria-label="Permalink to &quot;十、Vue 3 新特性面试题&quot;">​</a></h1><p>Vue3文档：<a href="https://cn.vuejs.org/guide/introduction.html" target="_blank" rel="noreferrer">简介 | Vue.js (vuejs.org)</a></p><p>Vue3开源地址：<a href="https://github.com/vuejs/core" target="_blank" rel="noreferrer">https://github.com/vuejs/core</a></p><h2 id="vue-macros-探索更多的宏和语法糖到-vue-中" tabindex="-1">Vue Macros：探索更多的宏和语法糖到 Vue 中 <a class="header-anchor" href="#vue-macros-探索更多的宏和语法糖到-vue-中" aria-label="Permalink to &quot;Vue Macros：探索更多的宏和语法糖到 Vue 中&quot;">​</a></h2><p>Vue3新功能灰度：<a href="https://vue-macros.dev/zh-CN/" target="_blank" rel="noreferrer">Vue Macros (vue-macros.dev)</a></p><p>GitHub：<a href="https://github.com/vue-macros/vue-macros" target="_blank" rel="noreferrer">https://github.com/vue-macros/vue-macros</a></p><p>教程：<a href="https://mp.weixin.qq.com/s/GmJEFm-mtcLTbsyGyk6_5w" target="_blank" rel="noreferrer">你不知道的 Vue 最新功能：Vue Macros (qq.com)</a></p><p>体验超现代 Vue</p><p>探索更多的宏和语法糖到 Vue 中。</p><h2 id="说一说-vue3-x-对比-vue2-x-变化" tabindex="-1">说一说 Vue3.x 对比 Vue2.x 变化 <a class="header-anchor" href="#说一说-vue3-x-对比-vue2-x-变化" aria-label="Permalink to &quot;说一说 Vue3.x 对比 Vue2.x 变化&quot;">​</a></h2><p><strong>参考文档</strong>：<a href="https://v3-migration.vuejs.org/zh/" target="_blank" rel="noreferrer">Vue 3 迁移指南 (vuejs.org)</a></p><ol><li><p><strong>源码组织方式变化</strong>：使用 TypeScript 重写</p><ul><li><code>Vue3</code>对<code>TypeScript</code>的支持更加友好，提供了更强大的类型推断和检查。</li></ul></li><li><p><strong>代码书写方面</strong>：Composition API 和setup语法糖：Vue3基于函数的 API，更加灵活组织组件代码逻辑，提高代码可维护性（vue2 用的是 <code>options api</code>）</p><ul><li>Vue3提供了 setup 的方式，配合组合式 API，可以建立组合逻辑、创建响应式数据、创建通用函数、注册生命周期钩子等。</li><li>Vue2.x 中 的 组 件 是 通 过 声 明 的 方 式 传 入 一 系 列 option， 和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。</li><li>Vue3 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易</li><li>Vue2 是选项 API（Options API），一个逻辑会散乱在文件不同位置（data、props、computed、watch、生命周期钩子等），导致代码的可读性变差。当需要修改某个逻辑时，需要上下来回跳转文件位置。</li><li>Vue3 组合式 API（Composition API）则很好地解决了这个问题，可将同一逻辑的内容写到一起，增强了代码的可读性、内聚性，其还提供了较为完美的逻辑复用性方案。</li></ul></li><li><p><strong>响应式系统监测机制</strong>：Vue3 中响应式数据原理基于 Proxy 来实现的，利用代理来拦截对象的基本操作，配合 Refelect.方法来完成响应式的操作，可监听动态新增删除属性，以及数组变化。比 <code>Vue2</code> 的 <code>Object.defineProperty()</code> 的 getter 和 setter响应式有着更好的性能和更准确的数据变化追踪能力。</p><ul><li>检测属性的添加和删除；</li><li>检测数组索引和长度的变更；</li><li>支持 Map、Set、WeakMap 和 WeakSet。</li><li>组件实例初始化的速度提高 100％</li><li>使用 Proxy 节省以前一半的内存开销，加快速度，但是存在低浏览器版本的不兼容。</li><li>为了继续支持 IE11，Vue 3 将发布一个支持旧观察者机制和新 Proxy 版本的构建。</li></ul></li><li><p>更容易扩展</p><ul><li>独立的响应化模块</li><li>自定义渲染器</li></ul></li><li><p><strong>SFC CSS 变量</strong>：SFC 内样式可以绑定动态数据</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> theme</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#D19A66;"> scoped</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	color: </span><span style="color:#61AFEF;">v-bind</span><span style="color:#ABB2BF;">(&quot;</span><span style="color:#E5C07B;">theme</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p><strong>生命周期的变化</strong>：使用 setup 代替了之前的 beforeCreate 和 created</p></li><li><p><strong>Props 的使用变化</strong>：vue2 通过 this 获取 props 里面的内容，vue3 直接通过 props</p></li><li><p><strong>父子组件传值的Emits 选项</strong>：vue3 在向父组件传回数据时，如使用的自定义名称，如 backData，则需要在 emits 中定义一下</p><ul><li><code>父子传参不同</code>，子组件通过<code>defineProps()</code>进行接收，并且接收这个函数的返回值进行数据操作。</li></ul></li><li><p><strong>Vuex 状态管理</strong>：创建Vuex状态管理实例的方式改变，Vue2 为 <code>new Store</code> , Vue3 为 <code>createStore</code></p></li><li><p><strong>Route 获取页面实例与路由信息</strong>：vue2 通过 this 获取 router 实例，vue3 通过使用 getCurrentInstance/ userRoute 和 userRouter 方法获取当前组件实例</p></li><li><p><strong>虚拟 DOM 重写</strong>：</p><ul><li><p>期待更多的编译时提示来减少运行时开销，使用更有效的代码来创建虚拟节点。</p></li><li><p>组件快速路径+单个调用+子节点类型检测</p><ul><li><p>跳过不必要的条件分支</p></li><li><p>JS 引擎更容易优化</p></li></ul></li></ul></li><li><p><strong>编译优化</strong>：vue2 通过标记静态根节点优化 diff，Vue3 标记和提升所有静态根节点，diff 的时候只需要对比动态节点内容：静态提升、patchFlags、block 等</p></li><li><p><strong>打包体积优化</strong>：移除了一些不常用的 api（inline-template、filter），打包体积更小</p></li><li><p>删除<code>filters</code>和<code>mixin</code>，用<code>methods</code>和<code>hooks</code>(Composition API+setup语法糖)替代；</p></li><li><p>移除了<code>$children、$listeners</code>等属性；</p></li><li><p><code>v-model</code>可以传参；</p></li></ol><ul><li><strong>性能改进</strong>：Vue 3在性能方面有显著提升。通过使用Proxy代理对象而不是Object.defineProperty来实现响应式，提高了响应式系统的效率。此外，编译器也进行了优化，生成更高效的渲染函数。</li><li><strong>组合式API</strong>：Vue 3引入了组合式API，它提供了一种新的组织组件逻辑的方式。与Vue 2的选项式API相比，组合式API更灵活、可重用，并且更易于测试和理解。</li><li><strong>更好的TypeScript支持</strong>：Vue 3对TypeScript的支持更加完善，包括对类型推导的改进、组合式API的类型推断以及更准确的类型定义。</li><li><strong>更小的包大小</strong>：Vue 3的核心包体积比Vue 2小很多，并且可以根据需要按需引入模块，减少了打包大小。</li><li><strong>更快的渲染</strong>：Vue 3使用了虚拟DOM的优化算法，减少了不必要的DOM操作，从而提升了渲染性能。</li><li><strong>Teleport组件</strong>：Vue 3引入了Teleport组件，它提供了一种方便的方式将组件的内容渲染到DOM树的其他位置，有助于处理模态框、弹出菜单等场景。</li><li><strong>Composition API全局可用</strong>：Vue 3中的组合式API可以在所有组件中使用，而不仅仅局限于单文件组件。</li><li><strong>更灵活的自定义渲染</strong>：Vue 3引入了渲染函数API，使开发人员可以更灵活地控制组件的渲染过程，包括动态组件、异步渲染等。</li><li><strong>更好的Tree Shaking支持</strong>：Vue 3的代码结构更加模块化，使得Tree Shaking（摇树优化）更加高效，可以更好地消除无用代码，减少打包体积。</li><li><strong>改进的插件系统</strong>：Vue 3对插件系统进行了改进，使得开发人员可以更容易地创建和使用插件，并提供了更丰富的生命周期钩子。</li><li><strong>更多的优化和改进</strong>：Vue 3还带来了许多其他优化和改进，包括更好的错误处理、更好的TypeScript类型推导、改进的事件处理、更高效的内部机制等。</li><li><strong>更好的响应式系统</strong>：Vue 3采用了基于Proxy的响应式系统，相较于Vue 2的基于Object.defineProperty的实现，在性能和功能上都有所改进。Proxy可以捕获更多类型的操作，并且能够直接监听嵌套属性的变化。</li><li><strong>Fragments片段</strong>：Vue 3引入了Fragments片段，它允许在模板中返回多个根级元素，而不需要使用额外的容器元素。</li><li><strong>静态节点提升</strong>：Vue 3通过静态节点提升（Static Node Hoisting）优化渲染性能。在编译阶段，Vue 3会对模板进行分析，将静态节点提升为常量，减少了运行时的开销。</li><li><strong>更强大的异步组件</strong>：Vue 3提供了更强大的异步组件加载功能。可以使用<code>&lt;Suspense&gt;</code>组件和<code>&lt;teleport&gt;</code>来实现组件的延迟加载和异步渲染。</li><li><strong>更好的TypeScript类型推导</strong>：Vue 3改进了对TypeScript的支持，提供了更准确的类型推导和类型定义，使得在使用TypeScript开发Vue应用时更加流畅。</li></ul><h3 id="在-api-特性方面" tabindex="-1">在 API 特性方面： <a class="header-anchor" href="#在-api-特性方面" aria-label="Permalink to &quot;在 API 特性方面：&quot;">​</a></h3><ul><li><code>Composition API</code>：可以更好的逻辑复用和代码组织，同一功能的代码不至于像以前一样太分散，虽然 <code>Vue2</code> 中可以用 <code>minxin</code> 来实现复用代码，但也存在问题，比如：方法或属性名会冲突、代码来源也不清楚等</li><li><code>SFC Composition API</code>语法糖：</li><li><code>Teleport</code>传送门：可以让子组件能够在视觉上跳出父组件(如父组件<code>overflow:hidden</code>)</li><li><code>Fragments</code>：支持多个根节点，<code>Vue2</code> 中，编写每个组件都需要一个父级标签进行包裹，而<code>Vue3</code> 不需要，内部会默认添加 <code>Fragments</code>；</li><li><code>SFC CSS</code>变量：支持在 <code>&lt;style&gt;&lt;/style&gt;</code> 里使用 <code>v-bind</code>，给 <code>CSS</code> 绑定 <code>JS</code> 变量(<code>color: v-bind(str)</code>)，且支持 <code>JS</code> 表达式 (需要用引号包裹起来)；</li><li><code>Suspense</code>：可以在组件渲染之前的等待时间显示指定内容，比如<code>loading</code>；</li><li><code>v-memo</code>：新增指令可以缓存 <code>html</code> 模板，比如 <code>v-for</code> 列表不会变化的就缓存，简单说就是用内存换时间</li></ul><h3 id="在-框架-设计层面" tabindex="-1">在 框架 设计层面： <a class="header-anchor" href="#在-框架-设计层面" aria-label="Permalink to &quot;在 框架 设计层面：&quot;">​</a></h3><ul><li><p><code>代码打包体积更小</code>：许多<code>Vue</code>的<code>API</code>可以被<code>Tree-Shaking</code>，因为使用了<code>es6module</code>，<code>tree-shaking</code> 依赖于 <code>es6</code>模块的静态结构特性；</p></li><li><p><code>响应式 的优化</code>：用 <code>Proxy</code> 代替 <code>Object.defineProperty</code>，可以监听到数组下标变化，及对象新增属性，因为监听的不是对象属性，而是对象本身，还可拦截 <code>apply</code>、<code>has</code> 等方法；</p></li><li><p>虚拟 DOM 的优化：保存静态节点直接复用(静态提升)、以及添加更新类型标记（patchflag）（动态绑定的元素）</p><ul><li><code>静态提升</code>：静态提升就是不参与更新的静态节点，只会创建一次，在之后每次渲染的时候会不停的被复用；</li><li><code>更新类型标记</code>：在对比<code>VNode</code>的时候，只对比带有<code>更新类型标记</code>的节点，大大减少了对比<code>Vnode</code>时需要遍历的节点数量；还可以通过 <code>flag</code> 的信息得知当前节点需要对比的内容类型；</li><li><code>优化的效果</code>：<code>Vue3</code>的渲染效率不再和模板大小成正比，而是与模板中的动态节点数量成正比；</li></ul></li><li><p><code>Diff</code>算法 的优化：<code>Diff算法</code> 使用 <code>最长递增子序列</code> 优化了对比流程，使得 <code>虚拟DOM</code> 生成速度提升 <code>200%</code></p></li></ul><h3 id="虚拟dom优化" tabindex="-1">虚拟DOM优化 <a class="header-anchor" href="#虚拟dom优化" aria-label="Permalink to &quot;虚拟DOM优化&quot;">​</a></h3><p>Vue3 相比于 Vue2，虚拟 DOM 上增加 patchFlag 字段。我们借助 Vue3 Template Explorer 来看。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;h1&gt;vue3虚拟DOM讲解&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;p&gt;今天天气真不错&lt;/p&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;div&gt;{{ name }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>渲染函数如下所示。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createElementVNode</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _createElementVNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">toDisplayString</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _toDisplayString</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">openBlock</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _openBlock</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createElementBlock</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _createElementBlock</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pushScopeId</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _pushScopeId</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">popScopeId</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _popScopeId</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#E06C75;"> vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> _withScopeId</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> n</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">_pushScopeId</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">scope</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">),</span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;">n</span><span style="color:#ABB2BF;">(),</span><span style="color:#61AFEF;">_popScopeId</span><span style="color:#ABB2BF;">(),</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> _hoisted_1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> _hoisted_2</span><span style="color:#56B6C2;"> =</span><span style="color:#7F848E;font-style:italic;"> /*#__PURE__*/</span><span style="color:#61AFEF;"> _withScopeId</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#7F848E;font-style:italic;"> /*#__PURE__*/</span><span style="color:#61AFEF;">_createElementVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vue3虚拟DOM讲解</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;"> /* HOISTED */</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> _hoisted_3</span><span style="color:#56B6C2;"> =</span><span style="color:#7F848E;font-style:italic;"> /*#__PURE__*/</span><span style="color:#61AFEF;"> _withScopeId</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#7F848E;font-style:italic;"> /*#__PURE__*/</span><span style="color:#61AFEF;">_createElementVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">今天天气真不错</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;"> /* HOISTED */</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">_ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">_cache</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">$props</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">$setup</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">$data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">$options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">_openBlock</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">_createElementBlock</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">_hoisted_1</span><span style="color:#ABB2BF;">, [</span></span>
<span class="line"><span style="color:#E06C75;">    _hoisted_2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    _hoisted_3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">    _createElementVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">_toDisplayString</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;"> /* TEXT */</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]))</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>注意第 3 个_createElementVNode 的第 4 个参数即 patchFlag 字段类型。</p><p>字段类型情况：1 代表节点为动态文本节点，那在 diff 过程中，只需比对文本对容，无需关注 class、style 等。除此之外，发现所有的静态节点（HOISTED 为 -1），都保存为一个变量进行静态提升，可在重新渲染时直接引用，无需重新创建。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// patchFlags 字段类型列举</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> PatchFlags</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  TEXT</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 动态文本内容</span></span>
<span class="line"><span style="color:#E06C75;">  CLASS</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 动态类名</span></span>
<span class="line"><span style="color:#E06C75;">  STYLE</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 动态样式</span></span>
<span class="line"><span style="color:#E06C75;">  PROPS</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 动态属性，不包含类名和样式</span></span>
<span class="line"><span style="color:#E06C75;">  FULL_PROPS</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 具有动态 key 属性，当 key 改变，需要进行完整的 diff 比较</span></span>
<span class="line"><span style="color:#E06C75;">  HYDRATE_EVENTS</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 带有监听事件的节点</span></span>
<span class="line"><span style="color:#E06C75;">  STABLE_FRAGMENT</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 不会改变子节点顺序的 fragment</span></span>
<span class="line"><span style="color:#E06C75;">  KEYED_FRAGMENT</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 7</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 带有 key 属性的 fragment 或部分子节点</span></span>
<span class="line"><span style="color:#E06C75;">  UNKEYED_FRAGMENT</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 子节点没有 key 的fragment</span></span>
<span class="line"><span style="color:#E06C75;">  NEED_PATCH</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 9</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 只会进行非 props 的比较</span></span>
<span class="line"><span style="color:#E06C75;">  DYNAMIC_SLOTS</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 动态的插槽</span></span>
<span class="line"><span style="color:#E06C75;">  HOISTED</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 静态节点，diff阶段忽略其子节点</span></span>
<span class="line"><span style="color:#E06C75;">  BAIL</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">2</span><span style="color:#7F848E;font-style:italic;">   // 代表 diff 应该结束</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="在-兼容性-方面" tabindex="-1">在 兼容性 方面： <a class="header-anchor" href="#在-兼容性-方面" aria-label="Permalink to &quot;在 兼容性 方面：&quot;">​</a></h3><ul><li><code>Vue3</code> 不兼容 <code>IE11</code>，因为<code>IE11</code>不兼容<code>Proxy</code></li></ul><h3 id="其余-特点" tabindex="-1">其余 特点 <a class="header-anchor" href="#其余-特点" aria-label="Permalink to &quot;其余 特点&quot;">​</a></h3><ul><li><code>v-if</code>的优先级高于<code>v-for</code>，不会再出现<code>vue2</code>的<code>v-for</code>，<code>v-if</code>混用问题；</li><li><code>vue3</code>中<code>v-model</code>可以以<code>v-model:xxx</code>的形式使用多次，而<code>vue2</code>中只能使用一次；多次绑定需要使用<code>sync</code></li><li><code>Vue3</code> 用 <code>TS</code> 编写，使得对外暴露的 <code>api</code> 更容易结合 <code>TypeScript</code>。</li></ul><h3 id="性能提升" tabindex="-1">性能提升 <a class="header-anchor" href="#性能提升" aria-label="Permalink to &quot;性能提升&quot;">​</a></h3><ul><li>响应式性能提升，由原来的 <code>Object.defineProperty</code> 改为基于<code>ES6</code>的 <code>Proxy</code> ，使其速度更快</li><li>重写了 <code>Vdom</code> (diff 算法优化，增加静态标志)</li><li>进行模板编译优化（静态提升，不参与更新的元素只被创建一次）</li><li>更加高效的组件初始化</li><li>Vue 3 使用了一种新的 Virtual DOM 实现，提高了渲染性能。另外，Vue 3 引入了编译器优化，减少了运行时开销。</li><li><strong>体积减小</strong>：Vue 3 的核心库体积比 Vue 2 更小，有利于降低首屏加载时间。</li></ul><h3 id="更好的支持-typescript" tabindex="-1">更好的支持 <code>typeScript</code> <a class="header-anchor" href="#更好的支持-typescript" aria-label="Permalink to &quot;更好的支持 \`typeScript\`&quot;">​</a></h3><ul><li><code>Vue.js 2.x</code> 选用 <code>Flow</code> 做类型检查，来避免一些因类型问题导致的错误，但是 Flow 对于一些复杂场景类型的检查，支持得并不好。</li><li><code>Vue.js 3.0</code> 抛弃了 <code>Flow</code> ，使用 <code>TypeScript</code> 重构了整个项目</li><li><code>TypeScript</code> 提供了更好的类型检查，能支持复杂的<code>类型推断</code></li><li>改进的 TypeScript 支持，编辑器能提供强有力的类型检查和错误及警告</li></ul><h3 id="新增-composition-api" tabindex="-1">新增 <code>Composition API</code> <a class="header-anchor" href="#新增-composition-api" aria-label="Permalink to &quot;新增 \`Composition API\`&quot;">​</a></h3><p><code>Composition API</code> 是 <code>vue3</code> 新增的功能，比 <code>mixin</code> 更强大。它可以把各个功能模块<code>独立</code>开来，提高代码逻辑的可复用性，同时代码压缩性更强。</p><p>在 <code>Vue3</code> 中，定义 <code>methods</code>、<code>watch</code>、<code>computed</code>、<code>data</code>数据等都放在了 <code>setup()</code> 函数中。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>setup()\`函数会在\`created()\`生命周期之前执行。执行顺序为：\`beforeCreate &gt; setup &gt; created</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="options-api-与-composition-api" tabindex="-1">Options API 与 Composition API <a class="header-anchor" href="#options-api-与-composition-api" aria-label="Permalink to &quot;Options API 与 Composition API&quot;">​</a></h3><p>Vue3 组件可以用两种不同的 API 风格编写：Options API 和 Composition API。</p><h4 id="_1-options-api" tabindex="-1">1. Options API <a class="header-anchor" href="#_1-options-api" aria-label="Permalink to &quot;1. Options API&quot;">​</a></h4><p>使用 Options API，我们使用选项对象定义组件的逻辑，例如 data、methods 和 mounted。由选项定义的属性在 this 内部函数中公开，指向组件实例，如下所示。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">increment</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;count is: {{ </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		increment</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`The initial count is </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">.\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="_2-composition-api" tabindex="-1">2. Composition API <a class="header-anchor" href="#_2-composition-api" aria-label="Permalink to &quot;2. Composition API&quot;">​</a></h4><p>使用 Composition API，我们使用导入的 API 函数定义组件的逻辑。在 SFC 中，Composition API 通常使用</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">increment</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;Count is: {{ </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onMounted</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> increment</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">onMounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`The initial count is </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">.\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="tree-shaking-通过摇树优化核心库体积" tabindex="-1">Tree-shaking：通过摇树优化核心库体积 <a class="header-anchor" href="#tree-shaking-通过摇树优化核心库体积" aria-label="Permalink to &quot;Tree-shaking：通过摇树优化核心库体积&quot;">​</a></h3><p>摇树优化后会将不需要的模块修剪掉，真正需要的模块打到包内。优化后的项目体积只有原来的一半，加载速度更快。</p><p>基于 tree shaking 优化，提供了更多的内置功能。</p><ul><li><code>Vue3</code>支持更好的<code>Tree Shanking</code>，可以更加精确的按需要引入模块</li><li>基于 tree shaking 优化，提供了更多的内置功能。</li><li>Vue3 支持 Tree-shaking，可以更好地优化打包体积</li></ul><h3 id="静态树提升-static-tree-hoisting" tabindex="-1">静态树提升(Static Tree Hoisting) <a class="header-anchor" href="#静态树提升-static-tree-hoisting" aria-label="Permalink to &quot;静态树提升(Static Tree Hoisting)&quot;">​</a></h3><p>使用静态树提升，这意味着 Vue 3 的编译器将能够检测到什么是静态的，然后将其提升，从而降低了渲染成本。</p><ul><li>跳过修补整棵树，从而降低渲染成本</li><li>即使多次出现也能正常工作</li></ul><h3 id="静态属性提升" tabindex="-1">静态属性提升 <a class="header-anchor" href="#静态属性提升" aria-label="Permalink to &quot;静态属性提升&quot;">​</a></h3><p>使用静态属性提升，Vue 3 打补丁时将跳过这些属性不会改变的节点。</p><h3 id="自定义渲染器-custom-renderer-api" tabindex="-1">自定义渲染器(Custom Renderer API) <a class="header-anchor" href="#自定义渲染器-custom-renderer-api" aria-label="Permalink to &quot;自定义渲染器(Custom Renderer API)&quot;">​</a></h3><p>实现 DOM 的方式进行 WebGL 编程。</p><p>支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。</p><p>Vue 3 提供了一套自定义渲染器 API，使得开发者能够更容易地创建自定义渲染器或跨平台应用。</p><h3 id="生命周期钩子改变" tabindex="-1">生命周期钩子改变 <a class="header-anchor" href="#生命周期钩子改变" aria-label="Permalink to &quot;生命周期钩子改变&quot;">​</a></h3><p>文档：<a href="https://cn.vuejs.org/api/composition-api-lifecycle.html" target="_blank" rel="noreferrer">组合式 API：生命周期钩子 | Vue.js (vuejs.org)</a></p><p>对于生命周期来说，整体上变化不大，只是大部分生命周期钩子名称上 + “on”，功能上是类似的。</p><ul><li>setup()：开始创建组件之前，在 beforeCreate 和 created 之前执行。创建的是 data 和 method</li><li>onBeforeMount()：组件挂载到节点上之前执行的函数。</li><li>onMounted()：组件挂载完成后执行的函数。</li><li>onBeforeUpdate()：组件更新之前执行的函数。</li><li>onUpdated()：组件更新完成之后执行的函数。</li><li>onBeforeUnmount()：组件卸载之前执行的函数。</li><li>onUnmounted()：组件卸载完成后执行的函数</li></ul><p>若组件被<code>&lt;keep-alive&gt;</code>包含，则多出下面两个钩子函</p><ul><li>onActivated()：被包含在中的组件，会多出两个生命周期钩子函数。被激活时执行 。</li><li>onDeactivated()：比如从 A 组件，切换到 B 组件，A 组件消失时执行。</li></ul><p>SSR服务器渲染钩子</p><ul><li><code>onServerPrefetch()</code>：注册一个异步函数，在组件实例在服务器上被渲染之前调用。</li></ul><p>常用生命周期对比如下表所示。</p><table><thead><tr><th>vue2</th><th>vue3</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup()</td></tr><tr><td>created</td><td>setup()</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeDestroy</td><td>onBeforeUnmount</td></tr><tr><td>destroyed</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr></tbody></table><blockquote><p>Tips： setup 是围绕 beforeCreate 和 created 生命周期钩子运行的，所以不需要显式地去定义。</p></blockquote><p>此外，Vue3 中引入了新的生命周期钩子：</p><ol><li>onRenderTracked：当一个响应式对象被追踪时触发</li><li>onRenderTriggered：当一个组件重新渲染时触发</li></ol><p>选项式 API 和 组合式 API 生命周期钩子对比：</p><table><thead><tr><th>选项式 API</th><th>Hook inside <code>setup</code></th></tr></thead><tbody><tr><td>beforeCreate</td><td>Not needed</td></tr><tr><td>created</td><td>Not needed</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr><tr><td>renderTracked</td><td>onRenderTracked</td></tr><tr><td>renderTriggered</td><td>onRenderTriggered</td></tr><tr><td>activated</td><td>onActivated</td></tr><tr><td>deactivated</td><td>onDeactivated</td></tr></tbody></table><p>不过有一点需要注意，Vue3 在组合式 API（Composition API，下面展开）中使用生命周期钩子时需要先引入，而 Vue2 在选项 API（Options API）中可以直接调用生命周期钩子，如下所示：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// vue3</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">onMounted</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vue&#39;</span><span style="color:#ABB2BF;">;   </span><span style="color:#7F848E;font-style:italic;">// 使用前需引入生命周期钩子</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">onMounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可将不同的逻辑拆开成多个onMounted，依然按顺序执行，不会被覆盖</span></span>
<span class="line"><span style="color:#61AFEF;">onMounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">// vue2</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {           </span></span>
<span class="line"><span style="color:#61AFEF;">    mounted</span><span style="color:#ABB2BF;">() {   </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 直接调用生命周期钩子</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  	},</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="新增组件" tabindex="-1">新增组件 <a class="header-anchor" href="#新增组件" aria-label="Permalink to &quot;新增组件&quot;">​</a></h3><h4 id="fragment-片段组件" tabindex="-1"><code>Fragment</code> 片段组件： <a class="header-anchor" href="#fragment-片段组件" aria-label="Permalink to &quot;\`Fragment\` 片段组件：&quot;">​</a></h4><p>不再限制 <code>template</code> 只有一个根节点，<strong>Vue3 的 template 模板支持多个根标签</strong>。允许 Vue 组件返回多个根元素，而不必包裹在一个无意义的父元素中，这有助于保持 HTML 结构的语义正确性，减少不必要的 DOM 节点。</p><p>熟悉 Vue2 的应该清楚，在模板中如果使用多个根节点时会报错，如下所示</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// vue2中在template里存在多个根节点会报错</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">header</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">header</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">footer</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">footer</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">// 只能存在一个根节点，需要用一个&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;来包裹着</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;template&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;header&gt;&lt;/header&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;main&gt;&lt;/main&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;footer&gt;&lt;/footer&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>但是，Vue3 支持多个根节点，也就是 fragment。即以下多根节点的写法是被允许的。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">header</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">header</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">footer</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">footer</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="teleport-传送门" tabindex="-1"><code>Teleport</code> 传送门 <a class="header-anchor" href="#teleport-传送门" aria-label="Permalink to &quot;\`Teleport\` 传送门&quot;">​</a></h4><p>允许将组件渲染到 DOM 树的任意位置(可以将子组件渲染到任意位置)，特别适用于创建模态框、提示信息、下拉菜单等需要脱离当前组件上下文显示的内容。这有助于避免 z-index 问题、样式穿透问题，以及保持 DOM 结构的清晰。组件的布局更加灵活。</p><p>Vue3 提供 Teleport 组件可将部分 DOM 移动到 Vue app 之外的位置。比如项目中常见的 Dialog 弹窗。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">dialogVisible</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;显示弹窗&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">teleport</span><span style="color:#D19A66;"> to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;body&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;div class=&quot;dialog&quot; v-if=&quot;dialogVisible&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    我是弹窗，我直接移动到了body标签下  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">teleport</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="suspense-异步组件" tabindex="-1"><code>Suspense</code> 异步组件 <a class="header-anchor" href="#suspense-异步组件" aria-label="Permalink to &quot;\`Suspense\` 异步组件&quot;">​</a></h4><p>该组件的作用是<code>等待</code>，等待异步组件时渲染一些额外的内容，让应用有更好的用户体验。可以在异步组件加载时显示 loading 状态，提升用户体验。</p><p>Vue3 提供 Suspense 组件，允许程序在等待异步组件加载完成前渲染兜底的内容，如 loading ，使用户的体验更平滑。</p><p>使用它，需在模板中声明，并包括两个命名插槽：default 和 fallback。Suspense 确保加载完异步内容时显示默认插槽，并将 fallback 插槽用作加载状态。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">tempalte</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;suspense&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;template #default&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;List /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/template&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;template #fallback&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        Loading...</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/template&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/suspense&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/template&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在 List 组件（有可能是异步组件，也有可能是组件内部处理逻辑或查找操作过多导致加载过慢等）未加载完成前，显示 Loading...（即 fallback 插槽内容），加载完成时显示自身（即 default 插槽内容）。</p><h3 id="新api" tabindex="-1">新API <a class="header-anchor" href="#新api" aria-label="Permalink to &quot;新API&quot;">​</a></h3><ul><li><code>Vue3</code>全局 API 名称发生了变化，同时新增了<code>watchEffect</code>、<code>Hooks</code>等功能</li></ul><h3 id="diff-算法方面" tabindex="-1">diff 算法方面 <a class="header-anchor" href="#diff-算法方面" aria-label="Permalink to &quot;diff 算法方面&quot;">​</a></h3><ul><li>在 vue2 中使用的是双端 diff 算法：是一种同时比较新旧两组节点的两个端点的算法（比头、比尾、头尾比、尾头比）。一般情况下，先找出变更后的头部，再对剩下的进行双端 diff。</li><li>在 vue3 中使用的是快速 diff 算法：它借鉴了文本 diff 算法的预处理思路，先处理新旧两组节点中相同的前置节点和后置节点。当前置节点和后置节点全部处理完毕后，如果无法通过简单的挂载新节点或者卸载已经不存在的节点来更新，则需要根据节点间的索引关系，构造出一个最长递增子序列。最长递增子序列所指向的节点即为不需要移动的节点。</li></ul><h3 id="diff-算法优化" tabindex="-1">Diff 算法优化 <a class="header-anchor" href="#diff-算法优化" aria-label="Permalink to &quot;Diff 算法优化&quot;">​</a></h3><p>搬运 Vue3 patchChildren 源码。结合上文与源码，patchFlag 帮助 diff 时区分静态节点，以及不同类型的动态节点。一定程度地减少节点本身及其属性的比对。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> patchChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">n1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">n2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">parentAnchor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">parentComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">parentSuspense</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">isSVG</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">optimized</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 获取新老孩子节点</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> c1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> n1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> n1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> c2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> n2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> prevShapeFlag</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> n1</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> n1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">shapeFlag</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">patchFlag</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">shapeFlag</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> n2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 处理 patchFlag 大于 0</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">patchFlag</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">patchFlag</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> PatchFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">KEYED_FRAGMENT</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 存在 key</span></span>
<span class="line"><span style="color:#61AFEF;">      patchKeyedChildren</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">      return</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#E06C75;">els</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">patchFlag</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> PatchFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">UNKEYED_FRAGMENT</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 不存在 key</span></span>
<span class="line"><span style="color:#61AFEF;">      patchUnkeyedChildren</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">      return</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 匹配是文本节点（静态）：移除老节点，设置文本节点</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">shapeFlag</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">TEXT_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">prevShapeFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ARRAY_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      unmountChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c1</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">[], </span><span style="color:#E06C75;">parentComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentSuspense</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">c2</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> c1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      hostSetElementText</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c2</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 匹配新老 Vnode 是数组，则全量比较；否则移除当前所有的节点</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">prevShapeFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ARRAY_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">shapeFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ARRAY_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        patchKeyedChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">anchor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentSuspense</span><span style="color:#ABB2BF;">,...)</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        unmountChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c1</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">[], </span><span style="color:#E06C75;">parentComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentSuspense</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prevShapeFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">TEXT_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        hostSetElementText</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">shapeFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ARRAY_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        mountChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNodeArrayChildren</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">anchor</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">parentComponent</span><span style="color:#ABB2BF;">,...)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>patchUnkeyedChildren 源码如下所示。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> patchUnkeyedChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">c1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">c2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">parentAnchor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">parentComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">parentSuspense</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">isSVG</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">optimized</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">  c1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c1</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> EMPTY_ARR</span></span>
<span class="line"><span style="color:#E06C75;">  c2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c2</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> EMPTY_ARR</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> oldLength</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> c1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> newLength</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> c2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> commonLength</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldLength</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newLength</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> i</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> commonLength</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果新 Vnode 已经挂载，则直接 clone 一份，否则新建一个节点</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> nextChild</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> optimized</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> cloneIfMounted</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> Vnode</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">:</span><span style="color:#61AFEF;"> normalizeVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#61AFEF;">    patch</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldLength</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> newLength</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 移除多余的节点</span></span>
<span class="line"><span style="color:#61AFEF;">    unmountedChildren</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#E06C75;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 创建新的节点</span></span>
<span class="line"><span style="color:#61AFEF;">    mountChildren</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="打包优化-1" tabindex="-1">打包优化 <a class="header-anchor" href="#打包优化-1" aria-label="Permalink to &quot;打包优化&quot;">​</a></h3><p>Tree-shaking：模块打包 webpack、rollup 等中的概念。移除 JavaScript 上下文中未引用的代码。主要依赖于 import 和 export 语句，用来检测代码模块是否被导出、导入，且被 JavaScript 文件使用。</p><p>以 nextTick 为例子，在 Vue2 中，全局 API 暴露在 Vue 实例上，即使未使用，也无法通过 tree-shaking 进行消除。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextTick</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 一些和DOM有关的东西</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Vue3 中针对全局和内部的 API 进行了重构，并考虑到 tree-shaking 的支持。因此，全局 API 现在只能作为 ES 模块构建的命名导出进行访问。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">nextTick</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 显式导入</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">nextTick</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 一些和DOM有关的东西</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过这一更改，只要模块绑定器支持 tree-shaking，则 Vue 应用程序中未使用的 api 将从最终的捆绑包中消除，获得最佳文件大小。</p><p>受此更改影响的全局 API 如下所示。</p><ul><li>Vue.nextTick</li><li>Vue.observable （用 Vue.reactive 替换）</li><li>Vue.version</li><li>Vue.compile （仅全构建）</li><li>Vue.set （仅兼容构建）</li><li>Vue.delete （仅兼容构建）</li></ul><p>内部 API 也有诸如 transition、v-model 等标签或者指令被命名导出。只有在程序真正使用才会被捆绑打包。Vue3 将所有运行功能打包也只有约 22.5kb，比 Vue2 轻量很多。</p><h3 id="编译上的优化" tabindex="-1">编译上的优化 <a class="header-anchor" href="#编译上的优化" aria-label="Permalink to &quot;编译上的优化&quot;">​</a></h3><ul><li>vue3 新增了 PatchFlags 来标记节点类型（动态节点收集与补丁标志），会在一个 Block 维度下的 vnode 下收集到对应的 dynamicChildren（动态节点），在执行更新时，忽略 vnode 的 children，去直接找到动态节点数组进行更新，这是一种高效率的靶向更新。</li><li>静态属性提升：vue3 提供了静态提升方式来优化重复渲染静态节点的问题，结合静态提升，还对静态节点进行预字符串化，减少了虚拟节点的性能开销，降低了内存占用。</li><li>vue3 会将内联事件进行缓存，每次渲染函数重新执行时会优先取缓存里的事件</li></ul><h3 id="更好的错误处理" tabindex="-1">更好的错误处理 <a class="header-anchor" href="#更好的错误处理" aria-label="Permalink to &quot;更好的错误处理&quot;">​</a></h3><p>Vue3 对错误处理进行了优化，提供了更好的错误提示和调试信息。</p><h3 id="更好的组件性能" tabindex="-1">更好的组件性能 <a class="header-anchor" href="#更好的组件性能" aria-label="Permalink to &quot;更好的组件性能&quot;">​</a></h3><p>Vue3 对组件的更新和渲染进行了优化，提升了组件的性能。</p><h3 id="优化-slots作用域插槽-生成" tabindex="-1">优化 slots作用域插槽 生成 <a class="header-anchor" href="#优化-slots作用域插槽-生成" aria-label="Permalink to &quot;优化 slots作用域插槽 生成&quot;">​</a></h3><p>Vue2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 Vue3 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。</p><p>vue3 中可以单独重新渲染父级和子级</p><ul><li>确保实例正确的跟踪依赖关系</li><li>避免不必要的父子组件重新渲染</li></ul><h3 id="其它方面的更改" tabindex="-1">其它方面的更改 <a class="header-anchor" href="#其它方面的更改" aria-label="Permalink to &quot;其它方面的更改&quot;">​</a></h3><p>支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。</p><p>支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。</p><p>更好的调试支持</p><h3 id="跨平台" tabindex="-1">跨平台 <a class="header-anchor" href="#跨平台" aria-label="Permalink to &quot;跨平台&quot;">​</a></h3><p>编译器核心和运行时核心与平台无关，使得 Vue 更容易与任何平台（Web、Android、iOS）一起使用</p><h3 id="v-if-和-v-for-的优先级的改变" tabindex="-1">v-if 和 v-for 的优先级的改变 <a class="header-anchor" href="#v-if-和-v-for-的优先级的改变" aria-label="Permalink to &quot;v-if 和 v-for 的优先级的改变&quot;">​</a></h3><p>在 vue2 中，<code>v-for</code> 的优先级比<code>v-if</code>更高；而在 vue3 中，<code>v-if</code>具有比<code>v-for</code>更高的优先级。</p><h3 id="ssr-渲染性能提升" tabindex="-1">ssr 渲染性能提升 <a class="header-anchor" href="#ssr-渲染性能提升" aria-label="Permalink to &quot;ssr 渲染性能提升&quot;">​</a></h3><h3 id="事件缓存" tabindex="-1">事件缓存 <a class="header-anchor" href="#事件缓存" aria-label="Permalink to &quot;事件缓存&quot;">​</a></h3><p>Vue3 的<code>cacheHandler</code>可在第一次渲染后缓存我们的事件。相比于 Vue2 无需每次渲染都传递一个新函数。加一个 click 事件。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;h1&gt;vue3事件缓存讲解&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;p&gt;今天天气真不错&lt;/p&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;div&gt;{{name}}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">span</span><span style="color:#D19A66;"> onCLick</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">()</span><span style="color:#FFFFFF;"> =</span><span style="color:#ABB2BF;">&gt; {}&gt;&lt;span&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/div&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>渲染函数如下所示。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createElementVNode</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _createElementVNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">toDisplayString</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _toDisplayString</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">openBlock</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _openBlock</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createElementBlock</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _createElementBlock</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pushScopeId</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _pushScopeId</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">popScopeId</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> _popScopeId</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#E06C75;"> vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> _withScopeId</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> n</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">_pushScopeId</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">scope</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">),</span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;">n</span><span style="color:#ABB2BF;">(),</span><span style="color:#61AFEF;">_popScopeId</span><span style="color:#ABB2BF;">(),</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> _hoisted_1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> _hoisted_2</span><span style="color:#56B6C2;"> =</span><span style="color:#7F848E;font-style:italic;"> /*#__PURE__*/</span><span style="color:#61AFEF;"> _withScopeId</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#7F848E;font-style:italic;"> /*#__PURE__*/</span><span style="color:#61AFEF;">_createElementVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vue3事件缓存讲解</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;"> /* HOISTED */</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> _hoisted_3</span><span style="color:#56B6C2;"> =</span><span style="color:#7F848E;font-style:italic;"> /*#__PURE__*/</span><span style="color:#61AFEF;"> _withScopeId</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#7F848E;font-style:italic;"> /*#__PURE__*/</span><span style="color:#61AFEF;">_createElementVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">今天天气真不错</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;"> /* HOISTED */</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> _hoisted_4</span><span style="color:#56B6C2;"> =</span><span style="color:#7F848E;font-style:italic;"> /*#__PURE__*/</span><span style="color:#61AFEF;"> _withScopeId</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#7F848E;font-style:italic;"> /*#__PURE__*/</span><span style="color:#61AFEF;">_createElementVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">, { </span><span style="color:#61AFEF;">onCLick</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {} }, [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /*#__PURE__*/</span><span style="color:#61AFEF;">_createElementVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">], </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;"> /* HOISTED */</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">_ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">_cache</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">$props</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">$setup</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">$data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">$options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">_openBlock</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">_createElementBlock</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">_hoisted_1</span><span style="color:#ABB2BF;">, [</span></span>
<span class="line"><span style="color:#E06C75;">    _hoisted_2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    _hoisted_3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">    _createElementVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">_toDisplayString</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">_ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;"> /* TEXT */</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">    _hoisted_4</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]))</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>观察以上渲染函数，你会发现 click 事件节点为静态节点（HOISTED 为 -1），即不需要每次重新渲染。</p><h3 id="typescript-支持" tabindex="-1">TypeScript 支持 <a class="header-anchor" href="#typescript-支持" aria-label="Permalink to &quot;TypeScript 支持&quot;">​</a></h3><p>Vue3 由 TypeScript 重写，相对于 Vue2 有更好的 TypeScript 支持。</p><ul><li>Vue2 Options API 中 option 是个简单对象，而 TypeScript 是一种类型系统，面向对象的语法，不是特别匹配。</li><li>Vue2 需要 vue-class-component 强化 vue 原生组件，也需要 vue-property-decorator 增加更多结合 Vue 特性的装饰器，写法比较繁琐。</li></ul><h3 id="原理源码参考" tabindex="-1">原理源码参考 <a class="header-anchor" href="#原理源码参考" aria-label="Permalink to &quot;原理源码参考&quot;">​</a></h3><p>体验编译器优化：<a href="https://sfc.vuejs.org/" target="_blank" rel="noreferrer">https://sfc.vuejs.org/</a></p><p>reactive 实现：<a href="https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/reactive.ts%23L90-L91" target="_blank" rel="noreferrer">https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/reactive.ts%23L90-L91</a></p><h3 id="高可维护性源代码" tabindex="-1">高可维护性源代码 <a class="header-anchor" href="#高可维护性源代码" aria-label="Permalink to &quot;高可维护性源代码&quot;">​</a></h3><p>Vue 3 将带来更可维护的源代码。它不仅会使用 TypeScript，而且许多包被解耦，更加模块化。</p><h3 id="总结-8" tabindex="-1">总结： <a class="header-anchor" href="#总结-8" aria-label="Permalink to &quot;总结：&quot;">​</a></h3><p><strong>vue3 性能更高，体积更小，更利于复用，代码维护更方便</strong></p><h2 id="vue2-和-vue3-的生命周期对比" tabindex="-1">Vue2 和 Vue3 的生命周期对比 <a class="header-anchor" href="#vue2-和-vue3-的生命周期对比" aria-label="Permalink to &quot;Vue2 和 Vue3 的生命周期对比&quot;">​</a></h2><h3 id="关于-vue-3-中的生命周期建议阅读官方文档" tabindex="-1">关于 Vue 3 中的生命周期建议阅读官方文档 <a class="header-anchor" href="#关于-vue-3-中的生命周期建议阅读官方文档" aria-label="Permalink to &quot;关于 Vue 3 中的生命周期建议阅读官方文档&quot;">​</a></h3><p><a href="https://cn.vuejs.org/api/composition-api-lifecycle.html" target="_blank" rel="noreferrer">组合式 API：生命周期钩子--官方文档</a></p><p><a href="https://cn.vuejs.org/api/options-lifecycle.html" target="_blank" rel="noreferrer">选项式 API：生命周期选项--官方文档</a></p><p>Vue 的生命周期可以分为 8 个阶段：创建前后、挂载前后、更新前后、销毁前后，以及一些特殊场景的生命周期。</p><ul><li>基本上就是在 <code>Vue2</code> 生命周期钩子函数名基础上加了 <code>on</code>；</li><li><code>beforeDestory</code> 和 <code>destoryed</code> 更名为 <code>onBeforeUnmount</code> 和 <code>onUnmounted</code>；</li><li>然后用 <code>setup</code> 代替了两个钩子函数 <code>beforeCreate</code> 和 <code>created</code>；</li><li>新增了两个开发环境用于调试的<code>钩子</code>，在组件更新时 <code>onRenderTracked</code> 会跟踪组件里所有变量和方法的变化、每次触发渲染时 <code>onRenderTriggered</code> 会返回发生变化的新旧值，可以让我们进行有针对性调试；</li><li>新增服务端渲染的场景的API：<code>onServerPrefetch</code></li></ul><table><thead><tr><th>Vue 2 中的生命周期钩子</th><th>Vue 3 选项式 API 的生命周期选项</th><th>Vue 3 组合 API 中生命周期钩子</th><th>描述</th></tr></thead><tbody><tr><td><code>beforeCreate</code></td><td><code>beforeCreate</code></td><td><code>setup()</code></td><td>创建前，此时<code>data</code>和 <code>methods</code>的数据都还没有初始化</td></tr><tr><td><code>created</code></td><td><code>created</code></td><td><code>setup()</code></td><td>创建后，<code>data</code>中有值，尚未挂载，可以进行一些<code>Ajax</code>请求</td></tr><tr><td><code>beforeMount</code></td><td><code>beforeMount</code></td><td><code>onBeforeMount</code></td><td>挂载前，会找到虚拟<code>DOM</code>，编译成<code>Render</code></td></tr><tr><td><code>mounted</code></td><td><code>mounted</code></td><td><code>onMounted</code></td><td>挂载后，<code>DOM</code>已创建，可用于获取访问数据和<code>DOM</code>元素</td></tr><tr><td><code>beforeUpdate</code></td><td><code>beforeUpdate</code></td><td><code>onBeforeUpdate</code></td><td>更新前，可用于获取更新前各种状态</td></tr><tr><td><code>updated</code></td><td><code>updated</code></td><td><code>onUpdated</code></td><td>更新后，所有状态已是最新</td></tr><tr><td><code>beforeDestroy</code></td><td><code>beforeUnmount</code></td><td><code>onBeforeUnmount</code></td><td>销毁前，可用于一些定时器或订阅的取消</td></tr><tr><td><code>destroyed</code></td><td><code>unmounted</code></td><td><code>onUnmounted</code></td><td>销毁后，可用于一些定时器或订阅的取消</td></tr><tr><td><code>activated</code></td><td><code>activated</code></td><td><code>onActivated</code></td><td><code>keep-alive</code>缓存的组件激活时</td></tr><tr><td><code>deactivated</code></td><td><code>deactivated</code></td><td><code>onDeactivated</code></td><td><code>keep-alive</code>缓存的组件停用时</td></tr><tr><td><code>errorCaptured</code></td><td><code>errorCaptured</code></td><td><code>onErrorCaptured</code></td><td>捕获一个来自子孙组件的错误时调用</td></tr><tr><td>—</td><td><code>renderTracked</code></td><td><code>onRenderTracked</code></td><td>调试钩子，响应式依赖被收集时调用</td></tr><tr><td>—</td><td><code>renderTriggered</code></td><td><code>onRenderTriggered</code></td><td>调试钩子，响应式依赖被触发时调用</td></tr><tr><td>—</td><td><code>serverPrefetch</code></td><td><code>onServerPrefetch</code></td><td>组件实例在服务器上被渲染前调用</td></tr></tbody></table><h3 id="图片例对比" tabindex="-1">图片例对比 <a class="header-anchor" href="#图片例对比" aria-label="Permalink to &quot;图片例对比&quot;">​</a></h3><p><img src="`+T+'" alt="image-20240326155838420"></p><h3 id="父子组件的生命周期" tabindex="-1">父子组件的生命周期： <a class="header-anchor" href="#父子组件的生命周期" aria-label="Permalink to &quot;父子组件的生命周期：&quot;">​</a></h3><ul><li><code>加载渲染阶段</code>：父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</li><li><code>更新阶段</code>：父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</li><li><code>销毁阶段</code>：父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</li></ul><h2 id="vue-3中的组合式api是什么-与选项式api有什么区别" tabindex="-1">Vue 3中的组合式API是什么，与选项式API有什么区别？ <a class="header-anchor" href="#vue-3中的组合式api是什么-与选项式api有什么区别" aria-label="Permalink to &quot;Vue 3中的组合式API是什么，与选项式API有什么区别？&quot;">​</a></h2><p>Vue 3中引入了组合式API（Composition API），它是一种新的组织组件逻辑的方式，与Vue 2中的选项式API有一些区别。</p><p><strong>选项式API</strong>是Vue 2中常用的API风格，通过在组件的选项中定义数据、计算属性、方法和生命周期钩子来组织组件的逻辑。这种方式在小型组件中运作良好，但在大型组件或复杂业务逻辑的情况下，组件选项会变得冗长且难以维护。</p><p><strong>组合式API</strong>是Vue 3中新增的一种API风格，它允许将组件的逻辑按照功能划分为多个可复用的逻辑块，称为&quot;composition&quot;。每个逻辑块都可以包含自己的状态、计算属性、方法和生命周期钩子，可以独立编写、测试和重用。这种方式使得组件的逻辑更加模块化，便于组织和维护。</p><p>与选项式API相比，组合式API具有以下一些区别：</p><ul><li><strong>组合式API更灵活</strong>：通过组合式API，开发人员可以更自由地组织和复用组件的逻辑，不再局限于选项的声明顺序。</li><li><strong>更好的逻辑复用</strong>：组合式API使得逻辑块可以独立编写和测试，可以更方便地在不同组件之间进行复用，提高了代码的可维护性和可重用性。</li><li><strong>更好的代码组织</strong>：组合式API允许开发人员根据功能将代码逻辑分离到多个逻辑块中，使代码结构更清晰、易于理解和维护。</li><li><strong>更好的类型推导</strong>：组合式API提供了更好的TypeScript类型推导支持，能够更准确地推导出逻辑块中的类型。</li><li><strong>更好的代码可读性</strong>：组合式API使得组件的逻辑更加直观和可读。逻辑块可以根据功能进行命名，让其他开发人员更容易理解组件的结构和功能。</li><li><strong>更好的响应式处理</strong>：在组合式API中，可以使用ref和reactive等函数来创建响应式数据。相比于Vue 2中的数据对象和data选项，组合式API提供了更明确的响应式处理方式。</li><li><strong>更好的副作用处理</strong>：组合式API中，可以使用onMounted、onUpdated和onUnmounted等函数来处理组件的副作用逻辑，使副作用代码更集中、可控。</li><li><strong>更好的测试性</strong>：组合式API使得组件的逻辑块可以独立测试。可以通过单元测试方式，针对每个逻辑块进行测试，更容易定位和修复问题。</li><li><strong>更好的代码编辑器支持</strong>：由于组合式API使用了函数调用的方式，编辑器更容易提供代码补全、错误提示等功能，提升开发效率和体验。</li><li><strong>兼容选项式API</strong>：组合式API并不完全取代选项式API，Vue 3仍然支持选项式API，这意味着可以在Vue 3项目中同时使用选项式API和组合式API，使得项目的迁移过程更加平滑。</li><li><strong>更好的生命周期钩子管理</strong>：组合式API使用onXxx函数来管理生命周期钩子，使得组件的生命周期逻辑更加清晰和直观。可以将相关的生命周期逻辑放在同一个逻辑块中，方便统一管理。</li></ul><p>这些是Vue 3组合式API的一些区别和特点，它们使得Vue 3中的组件开发更加灵活、可维护和可测试。开发人员可以根据项目的需求和复杂度选择合适的API风格，或者在项目中结合使用两种API风格</p><h3 id="_1-options-api-1" tabindex="-1">1.Options Api <a class="header-anchor" href="#_1-options-api-1" aria-label="Permalink to &quot;1.Options Api&quot;">​</a></h3><p><code>Options API</code>，即大家常说的选项 API，即以<code>.vue</code>为后缀的文件，通过定义<code>methods</code>，<code>computed</code>，<code>watch</code>，<code>data</code>等属性与方法，共同处理页面逻辑</p><p>如下图：</p><p><img src="'+U+'" alt="image-20240326181048612"></p><p>可以看到<code>Options</code>代码编写方式，如果是组件状态，则写在<code>data</code>属性上，如果是方法，则写在<code>methods</code>属性上...</p><p>用组件的选项 (<code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>) 组织逻辑在大多数情况下都有效</p><p>然而，当组件变得复杂，导致对应属性的列表也会增长，这可能会导致组件难以阅读和理解</p><h3 id="_2-composition-api-1" tabindex="-1">2.Composition Api <a class="header-anchor" href="#_2-composition-api-1" aria-label="Permalink to &quot;2.Composition Api&quot;">​</a></h3><p>在 Vue3 Composition API 中，组件根据逻辑功能来组织的，一个功能所定义的所有 API 会放在一起（更加的高内聚，低耦合）</p><p>即使项目很大，功能很多，我们都能快速的定位到这个功能所用到的所有 API</p><p><img src="'+N+'" alt="image-20240326181133824"></p><h3 id="_3-对比" tabindex="-1">3.对比 <a class="header-anchor" href="#_3-对比" aria-label="Permalink to &quot;3.对比&quot;">​</a></h3><p>下面对<code>Composition Api</code>与<code>Options Api</code>进行两大方面的比较</p><ul><li>逻辑组织</li><li>逻辑复用</li></ul><h4 id="逻辑组织" tabindex="-1">逻辑组织 <a class="header-anchor" href="#逻辑组织" aria-label="Permalink to &quot;逻辑组织&quot;">​</a></h4><h5 id="options-api" tabindex="-1">Options API <a class="header-anchor" href="#options-api" aria-label="Permalink to &quot;Options API&quot;">​</a></h5><p>假设一个组件是一个大型组件，其内部有很多处理逻辑关注点（对应下图不用颜色）</p><p><img src="'+W+`" alt="image-20240326181302686"></p><p>可以看到，这种碎片化使得理解和维护复杂组件变得困难</p><p>选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块</p><h5 id="compostion-api" tabindex="-1">Compostion API <a class="header-anchor" href="#compostion-api" aria-label="Permalink to &quot;Compostion API&quot;">​</a></h5><p>而<code>Compositon API</code>正是解决上述问题，将某个逻辑关注点相关的代码全都放在一个函数里，这样当需要修改一个功能时，就不再需要在文件中跳来跳去</p><p>下面举个简单例子，将处理<code>count</code>属性相关的代码放在同一个函数了</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useCount</span><span style="color:#ABB2BF;">() { </span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> double</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#E5C07B;"> count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; }); </span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#61AFEF;"> handleConut</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}; </span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">double</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">handleConut</span><span style="color:#ABB2BF;">, }; </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>组件上中使用<code>count</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> defineComponent</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">double</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">handleConut</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useCount</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			count</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			double</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			handleConut</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>再来一张图进行对比，可以很直观地感受到 <code>Composition API</code>在逻辑组织方面的优势，以后修改一个属性功能的时候，只需要跳到控制该属性的方法中即可</p><p><img src="`+G+`" alt="image-20240326181346423"></p><h4 id="逻辑复用" tabindex="-1">逻辑复用 <a class="header-anchor" href="#逻辑复用" aria-label="Permalink to &quot;逻辑复用&quot;">​</a></h4><p>在<code>Vue2</code>中，我们是用过<code>mixin</code>去复用相同的逻辑</p><p>下面举个例子，我们会另起一个<code>mixin.js</code>文件</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> MoveMixin</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		handleKeyup</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 上下左右 x y</span></span>
<span class="line"><span style="color:#C678DD;">			switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				case</span><span style="color:#98C379;"> &quot;ArrowUp&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				case</span><span style="color:#98C379;"> &quot;ArrowDown&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				case</span><span style="color:#98C379;"> &quot;ArrowLeft&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				case</span><span style="color:#98C379;"> &quot;ArrowRight&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;keyup&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handleKeyup</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	unmounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;keyup&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handleKeyup</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>然后在组件中使用</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;Mouse position: x {{ </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> }} / y {{ </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> mousePositionMixin</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./mouse&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	mixins</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">mousePositionMixin</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>使用单个<code>mixin</code>似乎问题不大，但是当我们一个组件混入大量不同的 <code>mixins</code> 的时候</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">mixins</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">mousePositionMixin</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fooMixin</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">barMixin</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">otherMixin</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>会存在两个非常明显的问题：</p><ul><li>命名冲突</li><li>数据来源不清晰</li></ul><p>现在通过<code>Compositon API</code>这种方式改写上面的代码</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">onMounted</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onUnmounted</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> useMove</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> position</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#61AFEF;"> handleKeyup</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 上下左右 x y</span></span>
<span class="line"><span style="color:#C678DD;">		switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;ArrowUp&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// y.value--;</span></span>
<span class="line"><span style="color:#E5C07B;">				position</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;ArrowDown&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// y.value++;</span></span>
<span class="line"><span style="color:#E5C07B;">				position</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;ArrowLeft&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// x.value--;</span></span>
<span class="line"><span style="color:#E5C07B;">				position</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;ArrowRight&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// x.value++;</span></span>
<span class="line"><span style="color:#E5C07B;">				position</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	onMounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;keyup&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">handleKeyup</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	onUnmounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;keyup&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">handleKeyup</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">position</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>在组件中使用</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;Mouse position: x {{ </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> }} / y {{ </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useMove</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./useMove&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">toRefs</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">position</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useMove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">y</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">position</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			x</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			y</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>可以看到，整个数据来源清晰了，即使去编写更多的 hook 函数，也不会出现命名冲突的问题</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ul><li>在逻辑组织和逻辑复用方面，<code>Composition API</code>是优于<code>Options API</code></li><li>因为<code>Composition API</code>几乎是函数，会有更好的类型推断。</li><li><code>Composition API</code>对 <code>tree-shaking</code> 友好，代码也更容易压缩</li><li><code>Composition API</code>中见不到<code>this</code>的使用，减少了<code>this</code>指向不明的情况</li><li>如果是小型组件，可以继续使用<code>Options API</code>，也是十分友好的</li></ul><h2 id="什么是-composition-api-它解决了什么问题" tabindex="-1">什么是 Composition API？它解决了什么问题？ <a class="header-anchor" href="#什么是-composition-api-它解决了什么问题" aria-label="Permalink to &quot;什么是 Composition API？它解决了什么问题？&quot;">​</a></h2><p>Composition API 是 Vue 3 中引入的一种新的 API，它提供了一种新的方式来组织和重用组件的逻辑。</p><h3 id="options-api-的问题" tabindex="-1">Options API 的问题 <a class="header-anchor" href="#options-api-的问题" aria-label="Permalink to &quot;Options API 的问题&quot;">​</a></h3><p>(1) 优点：<strong><code>易于学习和使用</code></strong>，每个代码有着明确的位置 (例如：数据放 data 中, 方法放 methods 中)</p><p>(2) 缺点：相似的逻辑，不容易复用，在大项目中尤为明显</p><p>(3) 虽然 optionsAPI 可以通过 mixins 提取相同的逻辑，但是也并不是特别好维护</p><ul><li><strong>难以维护</strong>：<code>Vue2</code> 中只能固定用 <code>data</code>、<code>computed</code>、<code>methods</code> 等选项来组织代码，在组件越来越复杂的时候，一个功能相关的<code>属性</code>和<code>方法</code>就会在文件上中下到处都有，很分散，变越来越难维护</li><li><strong>不清晰的数据来源、命名冲突</strong>： <code>Vue2</code> 中虽然可以用 <code>minxins</code> 来做逻辑的提取复用，但是 <code>minxins</code>里的属性和方法名会和组件内部的命名冲突，还有当引入多个 <code>minxins</code> 的时候，我们使用的属性或方法是来于哪个 <code>minxins</code> 也不清楚</li></ul><h3 id="composition-api-作用和对比-options-api-的优势" tabindex="-1">Composition API 作用和对比 Options API 的优势 <a class="header-anchor" href="#composition-api-作用和对比-options-api-的优势" aria-label="Permalink to &quot;Composition API 作用和对比 Options API 的优势&quot;">​</a></h3><ul><li><strong>更灵活的代码组织</strong>：<code>Composition API</code> 是基于逻辑相关性组织代码的，将零散分布的逻辑组合在一起进行维护，也可以将单独的功能逻辑拆分成单独的文件；提高可读性和可维护性。</li><li><strong>更好的逻辑复用</strong>：解决了过去 <code>Options API</code> 中 <code>mixins</code> 的各种缺点；</li><li><strong>同时兼容<code>Options API</code></strong>；</li><li><strong>更好的类型推导</strong>：<code>组合式 API</code>主要利用基本的变量和函数，它们本身就是类型友好的。用<code>组合式 API</code>重写的代码可以享受到完整的类型推导</li></ul><h3 id="composition-api-命名冲突" tabindex="-1">Composition API 命名冲突 <a class="header-anchor" href="#composition-api-命名冲突" aria-label="Permalink to &quot;Composition API 命名冲突&quot;">​</a></h3><p>在使用组合式<code>API</code>时，可以通过在解构变量时对变量进行<code>重命名</code>来避免相同的键名</p><h3 id="composition-api-主要解决了以下问题" tabindex="-1">Composition API 主要解决了以下问题 <a class="header-anchor" href="#composition-api-主要解决了以下问题" aria-label="Permalink to &quot;Composition API 主要解决了以下问题&quot;">​</a></h3><ol><li>在大型复杂组件中，使用 Options API（Vue 2 中的 API）可能导致逻辑分散在不同的生命周期钩子和属性中，难以维护和阅读。</li><li>逻辑重用方面，Options API 依赖 Mixins，但 Mixins 存在命名冲突、来源不明等问题。</li></ol><p>通过引入 <code>ref</code>、<code>reactive</code> 和 <code>computed</code> 等函数，Composition API 允许开发者将相关逻辑组合在一起，提高代码的可维护性和可读性。同时，它也使得逻辑重用更加容易，不再依赖 Mixins。</p><h2 id="sfc-composition-api-script-setup-语法糖" tabindex="-1">SFC Composition API (script setup)语法糖 <a class="header-anchor" href="#sfc-composition-api-script-setup-语法糖" aria-label="Permalink to &quot;SFC Composition API (script setup)语法糖&quot;">​</a></h2><p>是在<code>单文件组件</code>中使用<code>组合式 API </code>的编译时语法糖。</p><ul><li>有了它，我们可以编写更简洁的代码；</li><li>在添加了<code>setup</code>的<code>script</code>标签中，定义的变量、函数，均会自动暴露给模板（<code>template</code>）使用，不需要通过<code>return</code>返回</li><li>引入的组件可以自动注册，不需要通过<code>components </code>进行注册</li></ul><h3 id="setup-生命周期" tabindex="-1">setup 生命周期 <a class="header-anchor" href="#setup-生命周期" aria-label="Permalink to &quot;setup 生命周期&quot;">​</a></h3><ul><li><code>setup</code>是<code>vue3.x</code>新增的，它是组件内使用<code>Composition API</code>的入口，在组件创建挂载之前就执行；</li><li>由于在执行<code>setup</code>时尚未创建组件实例，所以在<code>setup</code>选型中没有<code>this</code>，要获取组件实例要用<code>getCurrentInstance()</code></li><li><code>setup</code>中接受的<code>props</code>是响应式的， 当传入新的<code>props</code>时，会及时被更新。</li></ul><p>OptionsAPI：</p><ul><li>选项式 API，通过定义<code>data、computed、watch、method</code>等属性与方法，共同处理页面逻辑；</li><li>缺点： <ul><li>当组件变得复杂的时候，导致对应属性的列表也会增长，可能会导致组件难以阅读和后期维护成本变高；</li></ul></li></ul><p>CompositionAPI：</p><ul><li>组合式 API，组件根据逻辑功能来组织，一个功能所定义的所有 API 会放在一起（高内聚，低耦合）；</li><li>优点： <ul><li>内部的功能容易碎片化，像某一个功能相关的数据放在一块，容易阅读和维护（不用翻来翻去找）；</li><li>将某个逻辑关注点相关的代码全都放在一个函数里，这样，当需要修改一个功能时，就不再需要在文件中跳来跳去；</li><li>逻辑复用： <ul><li>在 Vue2 中，当混入多个<code>mixin</code>会存在两个非常明显的问题：命名冲突，数据来源不清晰；</li><li>而组合式 API 可以通过编写多个函数就很好的解决了；</li></ul></li></ul></li></ul><p>总结：</p><ul><li>在逻辑组织和逻辑复用这方面，组合式 API 是优于选项式 API 的；</li><li>组合式 API 中见不到 this 的使用，减少了 this 指向不明的情况；</li><li>组合式 API 几乎都是函数，会有更好的类型推断；</li></ul><p>1、<strong><code>Options Api</code></strong>：选项 API，即以 vue 为后缀的文件，通过定义<code>methods</code>，<code>computed</code>，<code>watch</code>，<code>data</code>等属性与方法，共同处理页面逻辑。 用组件的选项 (<code>data、computed、methods、watch</code>) 组织逻辑在大多数情况下都有效。然而，当组件变得复杂，导致对应属性的列表也会增长，这可能会导致组件难以阅读和理解。</p><p>2、<strong><code>Composition API</code></strong> 中，组件根据逻辑功能来组织的，一个功能所定义的所有 <code>API</code> 会放在一起（ 更加的 <strong><code>高内聚，低耦合</code></strong> ）。</p><p>3、<code>Composition Api</code> 相对<code>Options Api</code>的两大优点：</p><ul><li>逻辑组织 <ul><li><code>Options Api</code>在处理一个大型的组件时，内部的逻辑点容易碎片化，可能同时存在于<code>method,computed,watch</code>等 API 中，我们必须不断地“跳转”相关代码的选项块，这种碎片化使得理解和维护复杂组件变得困难。</li><li><code>Composition Api</code>将某个逻辑关注点相关的代码全都放在一个函数里，这样，当需要修改一个功能时，就不再需要在文件中跳来跳去。</li></ul></li><li>逻辑复用 <ul><li>在<code>vue2.0</code>中，当混入多个<code>mixin</code>会存在两个非常明显的问题：命名冲突、数据来源不清晰</li><li>而<code>Composition Api</code>可以通过编写多个<code>hooks函数</code>就很好的解决了</li></ul></li></ul><p><strong><code>总结</code></strong></p><ul><li>在逻辑组织和逻辑复用方面，<code>Composition API</code>是优于<code>Options API</code></li><li>因为<code>Composition API</code>几乎是<code>函数</code>，会有更好的<code>类型推断</code>。</li><li><code>Composition API</code> 对 <code>tree-shaking</code> 友好，<code>代码也更容易压缩</code></li><li><code>Composition API</code>中见不到<code>this</code>的使用，减少了<code>this</code>指向不明的情况</li><li>如果是小型组件，可以继续使用<code>Options API</code>，也是十分友好的</li></ul><h2 id="vue3-中-compositionapi-的优势是什么" tabindex="-1">Vue3 中 CompositionAPI 的优势是什么 <a class="header-anchor" href="#vue3-中-compositionapi-的优势是什么" aria-label="Permalink to &quot;Vue3 中 CompositionAPI 的优势是什么&quot;">​</a></h2><ul><li>Vue2 中采用的是选项式 API(options api)，用户提供 data、methods、props、computed 等。编写业务代码，复杂逻辑时会存在反复横跳的问题，来回上下找相关代码。组合式 API 可以将相关代码放到一起，方便维护。</li><li>Vue2 中所有的属性都是 this 访问的，this 存在指向明确的问题</li><li>Vue2 采用 mixins 实现组件之间的逻辑共享，但是会有数据来源不明确、命名冲突等问题。Vue3 采用 CompositionAPI，提供公共逻辑也比较方便</li><li>简单的组件可以采用 option API，复杂的组件组合式 api 优势更明显。</li></ul><h2 id="都说-composition-api-和-react-hook-很像-请问他们的区别是什么" tabindex="-1">都说 Composition API 和 React Hook 很像，请问他们的区别是什么 <a class="header-anchor" href="#都说-composition-api-和-react-hook-很像-请问他们的区别是什么" aria-label="Permalink to &quot;都说 Composition API 和 React Hook 很像，请问他们的区别是什么&quot;">​</a></h2><p>从 React Hook 从实现的角度来看，React Hook 是基于 useState 的调用顺序来确定下一个 re 渲染时间状态从哪个 useState 开始，所以有以下几个限制</p><ul><li>不在循环中、条件、调用嵌套函数 Hook</li><li>必须确保它总是在你这边 React Top level 调用函数 Hook</li><li>使用useEffect(效果)、useMemo(备忘录) 等函数必须手动确定依赖关系</li></ul><p>和 Composition API 是基于 Vue 的响应系统，和 React Hook 相比</p><ul><li>声明在 setup 函数内，一次组件实例化只调用一次 setup，而 React Hook 每次重渲染都需要调用 Hook，使得 React 的 GC 比 Vue 更有压力，性能也相对于 Vue 来说也较慢</li><li>Compositon API 你不必担心调用的顺序，它也可以在循环中、条件、在嵌套函数中使用</li><li>响应式系统自动实现依赖关系收集，而且组件的性能优化是由 Vue 内部完成的，而 React Hook 的依赖关系需要手动传递，并且依赖关系的顺序必须得到保证，让路 useEffect、useMemo 等等，否则组件性能会因为依赖关系不正确而下降。</li></ul><p>虽然 Compositon API 看起来比 React Hook 好用，但是其设计思想也是借鉴 React Hook 的。</p><h2 id="在vue-3中如何处理响应式数据" tabindex="-1">在Vue 3中如何处理响应式数据？ <a class="header-anchor" href="#在vue-3中如何处理响应式数据" aria-label="Permalink to &quot;在Vue 3中如何处理响应式数据？&quot;">​</a></h2><p>在Vue 3中，可以使用 <code>ref</code> 和 <code>reactive</code> 两个函数来处理响应式数据。</p><p><strong>使用ref函数</strong>：<code>ref</code>函数用于创建一个包装了响应式数据的引用对象。它接受一个参数作为初始值，并返回一个包含 <code>value</code> 属性的响应式对象。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> ) </span><span style="color:#E06C75;">from</span><span style="color:#98C379;"> &#39;vue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">console</span><span style="color:#ABB2BF;">,</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">// 输出初始值:0</span></span>
<span class="line"><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//修 改响应式数据</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 输出修改后的值:1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在模板中使用ref对象时，直接使用 <code>.value</code> 来访问和修改响应式数据。</p><p><strong>使用reactive函数</strong>：<code>reactive</code>函数用于创建一个包装了响应式数据的响应式对象。它接受一个普通对象作为参数，并返回一个响应式代理对象，该代理对象会追踪其属性的变化。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    count</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Hello, Vue 3!</span><span style="color:#FFFFFF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 输出初始值:0</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;"> ; </span><span style="color:#7F848E;font-style:italic;">// 修改响应式数据</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 输出修改后的值:1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在模板中使用reactive对象时，可以直接访问和修改其属性，Vue会自动追踪并更新相关的视图。</p><p>注意：对于reactive对象，其内部的属性也会被自动设置为响应式的。因此，可以直接修改state对象的属性，而无需使用 <code>.value</code>。</p><p>以上是在Vue 3中处理响应式数据的两种常用方式。根据具体的使用场景和需求，可以选择合适的方式来处理响应式数据。</p><h2 id="setup-函数" tabindex="-1">setup 函数 <a class="header-anchor" href="#setup-函数" aria-label="Permalink to &quot;setup 函数&quot;">​</a></h2><p><code>setup()</code> 函数是 vue3 中，专门为组件提供的新属性。它为我们使用 vue3 的 <code>Composition API</code> 新特性提供了统一的入口，<code>setup</code> 函数会在 <code>beforeCreate</code> 、<code>created</code> 之前执行，vue3 也是取消了这两个钩子，统一用<code>setup</code>代替, 该函数相当于一个生命周期函数，vue 中过去的<code>data</code>，<code>methods</code>，<code>watch</code>等全部都用对应的新增<code>api</code>写在<code>setup()</code>函数中</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>setup()\` 接收两个参数 \`props\` 和 \`context\`。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>它里面不能使用 \`this\`，而是通过 context 对象来代替当前执行上下文绑定的对象，context 对象有四个属性：\`attrs\`、\`slots\`、\`emit\`、\`expose</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>里面通过 <code>ref</code> 和 <code>reactive</code> 代替以前的 data 语法，<code>return</code> 出去的内容，可以在模板直接使用，包括变量和方法</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">say</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;setup执行了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 定义数据和函数</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> msg</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hi vue3&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#61AFEF;"> say</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Attribute (非响应式对象，等同于 $attrs)</span></span>
<span class="line"><span style="color:#E5C07B;">		context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">attrs</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 插槽 (非响应式对象，等同于 $slots)</span></span>
<span class="line"><span style="color:#E5C07B;">		context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">slots</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 触发事件 (方法，等同于 $emit)</span></span>
<span class="line"><span style="color:#E5C07B;">		context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">emit</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 暴露公共 property (函数)</span></span>
<span class="line"><span style="color:#E5C07B;">		context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">expose</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">say</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	beforeCreate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;beforeCreate执行了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="setup-语法下怎么设置-name-属性" tabindex="-1">setup 语法下怎么设置 name 属性 <a class="header-anchor" href="#setup-语法下怎么设置-name-属性" aria-label="Permalink to &quot;setup 语法下怎么设置 name 属性&quot;">​</a></h2><p>1.安装插件</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> vite-plugin-vue-setup-extend</span><span style="color:#D19A66;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.配置 <code>vite.config.ts</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> vueSetupExtend</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vite-plugin-vue-setup-extend&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> defineConfig</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#61AFEF;">vue</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">vueSetupExtend</span><span style="color:#ABB2BF;">()],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>3.在标签中使用</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;MyCom&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 必须在script标签里面写一点类容，这个插件才会生效,哪怕是注释</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="setup-语法糖-script-setup-语法" tabindex="-1">setup 语法糖 （script setup 语法） <a class="header-anchor" href="#setup-语法糖-script-setup-语法" aria-label="Permalink to &quot;setup 语法糖 （script setup 语法）&quot;">​</a></h2><p><code>scrtpt setup</code> 是 <code>vue3</code> 在单文件组件 (SFC) 中使用组合式 API 的编译时语法糖。</p><p>简化了<code>组合式 API</code> 的写法，并且运行性能更好。使用 <code>script setup</code> 语法糖的特点：</p><ol><li>属性和方法无需返回，直接使用；</li><li>引入<code>组件</code>的时候，会<code>自动注册</code>，无需通过 <code>components</code> 手动注册。</li><li>使用<code>defineProps</code>接收父组件传递的值；</li><li>使用<code>useAttrs</code>获取属性，<code>useSlots</code>获取插槽，<code>defineEmits</code>获取自定义事件；</li><li>默认不会对外暴露任何属性，如果有需要使用<code>defineExpose</code>；</li></ol><p>要使用这个语法，需要将 <code>setup</code> attribute 添加到 <code>&lt;script&gt;</code> 代码块上：</p><p>格式：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello script setup&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>顶层的绑定会自动暴露给模板，所以定义的变量，函数和 import 导入的内容都可以直接在模板中直接使用</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;根组件&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;点击次数：{{ </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">add</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点击修改&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> add</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>使用 <code>setup</code> 语法糖时，不用写 <code>export default {}</code>，子组件只需要 <code>import</code> 就直接使用，不需要像以前一样在 components 里注册，属性和方法也不用 return。</p><p>并且里面不需要用 <code>async</code> 就可以直接使用 <code>await</code>，因为这样默认会把组件的 <code>setup</code> 变为 <code>async setup</code></p><p>用语法糖时，props、attrs、slots、emit、expose 的获取方式也不一样了</p><p>3.0~3.2 版本变成了通过 import 引入的 API：<code>defineProps</code>、<code>defineEmit</code>、<code>useContext</code>(在 3.2 版本已废弃)，useContext 的属性 <code>{ emit, attrs, slots, expose }</code></p><p>3.2+版本不需要引入，而直接调用：<code>defineProps</code>、<code>defineEmits</code>、<code>defineExpose</code>、<code>useSlots</code>、<code>useAttrs</code></p><h2 id="setup-语法糖-script-setup-的一些常用-api" tabindex="-1">setup 语法糖(script setup)的一些常用 API <a class="header-anchor" href="#setup-语法糖-script-setup-的一些常用-api" aria-label="Permalink to &quot;setup 语法糖(script setup)的一些常用 API&quot;">​</a></h2><p>在使用<code>setup语法糖（script setup）</code>时，已经不能像 <code>Vue2和setup函数</code> 那样去定义<code>props</code> 或者 <code>emits</code> 了，取而代之的是各种各样的<code>宏</code>。</p><ul><li><code>defineProps</code>：用于定义组件的 <code>props</code>；</li><li><code>defineEmits</code>：用于定义组件的 <code>emits</code>；</li><li><code>defineOptions</code>：用于定义组件的一些信息<code>name</code>等；</li><li><code>withDefaults</code>：用于定义<code>props的默认值</code>；</li><li><code>defineExpose</code>：<code>script setup</code>的组件默认是<code>关闭的</code>（外界访问不到实例），需要通过该方法导出那些需要<code>被外界访问的属性</code>；</li><li><code>useSlots、useAttrs</code>：相当于 Vue2 的 <code>$slots</code> 和 <code>$attrs</code>，它们是真实的函数，在<code>setup函数</code>中也可以使用；</li></ul><h3 id="script-setup-的优点" tabindex="-1">script setup 的优点 <a class="header-anchor" href="#script-setup-的优点" aria-label="Permalink to &quot;script setup 的优点&quot;">​</a></h3><ul><li>更简洁的代码；</li><li>和 ts 更好的融合；</li><li>更好的运行时性能；</li><li>更好的 ide 类型推导；</li></ul><h2 id="vue3-有哪些新的组件" tabindex="-1">vue3 有哪些新的组件 <a class="header-anchor" href="#vue3-有哪些新的组件" aria-label="Permalink to &quot;vue3 有哪些新的组件&quot;">​</a></h2><h4 id="_1-fragment" tabindex="-1">1.Fragment <a class="header-anchor" href="#_1-fragment" aria-label="Permalink to &quot;1.Fragment&quot;">​</a></h4><ul><li><p>在 Vue2 中：组件必须有一个根标签</p></li><li><p>在 Vue3 中：组件可以没有根标签，内部会将多个标签包含在一个 Fragment 虚拟元素中</p></li><li><p>好处：减少标签层级，减小内存占用</p></li></ul><h4 id="_2-teleport" tabindex="-1">2.Teleport <a class="header-anchor" href="#_2-teleport" aria-label="Permalink to &quot;2.Teleport&quot;">​</a></h4><p>什么是 Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong>组件 html 结构</strong>移动到指定位置的技术。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">teleport</span><span style="color:#D19A66;"> to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;移动位置&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;div class=&quot;dialog&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">teleport</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_3-suspense" tabindex="-1">3.Suspense <a class="header-anchor" href="#_3-suspense" aria-label="Permalink to &quot;3.Suspense&quot;">​</a></h4><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p><p>使用步骤：</p><p>异步引入组件</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineAsyncComponent</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Child</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineAsyncComponent</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./components/Child.vue&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;我是App组件&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">Suspense</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> v-slot</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">default</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">Child</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> v-slot</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">fallback</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;加载中.....&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">Suspense</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="什么是teleport-传送门-如何使用" tabindex="-1">什么是Teleport 传送门？如何使用？ <a class="header-anchor" href="#什么是teleport-传送门-如何使用" aria-label="Permalink to &quot;什么是Teleport 传送门？如何使用？&quot;">​</a></h2><p><code>Teleport</code>是<code>vue3</code>推出的新组件，允许将子组件渲染到 DOM 树中的其他位置，而不是局限于当前组件的位置。这在处理模态框、通知等场景时非常有用。</p><p>比如日常开发中很多子组件会用到<code>dialog</code>，此时<code>dialog</code>就会被嵌到一层层子组件内部，处理嵌套组件的定位、<code>z-index</code>和样式都变得困难。</p><p><code>Dialog</code>从用户感知的层面，应该是一个独立的组件，我们可以用<code>&lt;Teleport&gt;</code>包裹<code>Dialog</code>, 此时就建立了一个传送门，传送到任何地方：<code>&lt;teleport to=&quot;#footer&quot;&gt;</code></p><p>以下是一个 Teleport 的使用示例：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- App.vue --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;Hello World&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">modal</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;这是一个模态框&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">modal</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;modal-root&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- Modal.vue --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">teleport</span><span style="color:#D19A66;"> to</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;#modal-root&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;modal&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">teleport</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在这个例子中，虽然 <code>modal</code> 组件是 <code>App.vue</code> 的子组件，但实际上它的内容被 Teleport 渲染到了 <code>#modal-root</code> 元素中。</p><h2 id="fragments" tabindex="-1">Fragments <a class="header-anchor" href="#fragments" aria-label="Permalink to &quot;Fragments&quot;">​</a></h2><p><code>Fragments</code> 的出现，让 <code>Vue3</code> 一个组件可以有多个根节点（<code>Vue2</code> 一个组件只允许有一个根节点）</p><ul><li>因为虚拟<code>DOM</code>是单根树形结构的，<code>patch</code> 方法在遍历的时候从根节点开始遍历，这就要求了只有一个根节点；</li><li>而 <code>Vue3</code> 允许多个根节点，就是因为引入了 <code>Fragment</code>，这是一个抽象的节点，如果发现组件是多根的，就会创建一个 <code>Fragment</code> 节点，将多根节点作为它的 <code>children</code></li></ul><h2 id="isref、unref、toref、torefs、storetorefs-的用法" tabindex="-1">isRef、unRef、toRef、toRefs、storeToRefs 的用法 <a class="header-anchor" href="#isref、unref、toref、torefs、storetorefs-的用法" aria-label="Permalink to &quot;isRef、unRef、toRef、toRefs、storeToRefs 的用法&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_1-isref" tabindex="-1">（1）isRef <a class="header-anchor" href="#_1-isref" aria-label="Permalink to &quot;（1）isRef&quot;">​</a></h3><p>检查某个值是否为 ref 类型</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">isRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#61AFEF;">isRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-unref" tabindex="-1">（2）unRef <a class="header-anchor" href="#_2-unref" aria-label="Permalink to &quot;（2）unRef&quot;">​</a></h3><p>如果参数是 ref，则返回内部的值，如果不是，则返回参数本身</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">unref</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#61AFEF;">unRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Proxy(age:0)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-toref" tabindex="-1">（3）toRef <a class="header-anchor" href="#_3-toref" aria-label="Permalink to &quot;（3）toRef&quot;">​</a></h3><p>基于响应式对象上的一个属性，创建一个对于的 ref。这样创建的 ref 与其源属性保持同步：改变源属性的值将会同步更新 ref 的值，反之亦然。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> toRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">isRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> changeAge</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 以下两种方式更改数据后，obj.age 和 age都会同步改变</span></span>
<span class="line"><span style="color:#E5C07B;">	obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// age.value ++;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_4-torefs" tabindex="-1">（4）toRefs <a class="header-anchor" href="#_4-torefs" aria-label="Permalink to &quot;（4）toRefs&quot;">​</a></h3><p>将一个非 ref 对象（普通对象或者 reactive 创建的对象）转成一个普通对象，对象里的每个属性都是具有响应式的 ref。</p><p>使用的时候也可以直接将非 ref 对象里的属性解构出来，解构出的值具有响应式。</p><p>对象的每个属性都是指向源对象响应属性的 ref，每个单独的 ref 都是使用 toRef()创建的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> nameObj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;herry&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">age</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// age:  undefined</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nameObj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// name: ObjectRefImpl {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// objA还是普通对象，只是对象objA里的每个属性都有响应式</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> objA</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// objA:    {objA: ObjectRefImpl}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_5-storetorefs" tabindex="-1">（5）storeToRefs <a class="header-anchor" href="#_5-storetorefs" aria-label="Permalink to &quot;（5）storeToRefs&quot;">​</a></h3><p>作用跟 toRefs 基本相同，都是作为解构对象使用，解构后的每个值都保持响应式。</p><p>区别是：</p><p>toRefs 是 vue 的，处理的是组件内的响应式数据</p><p>storeToRefs 是 pinia 的，处理的是 pinia 内的数据</p><h2 id="reactive、-shallowreactive-函数" tabindex="-1">reactive、 shallowReactive 函数 <a class="header-anchor" href="#reactive、-shallowreactive-函数" aria-label="Permalink to &quot;reactive、 shallowReactive 函数&quot;">​</a></h2><h3 id="reactive" tabindex="-1">reactive <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;reactive&quot;">​</a></h3><p><code>reactive()</code> 函数接收一个普通对象，返回一个响应式的数据对象, 相当于 <code>Vue 2.x</code> 中的 <code>Vue.observable()</code> API，响应式转换是“深层”的——它影响所有嵌套属性。基于 proxy 来实现，想要使用创建的响应式数据也很简单，创建出来之后，在<code>setup</code>中<code>return</code>出去，直接在<code>template</code>中调用即可</p><h3 id="shallowreactive" tabindex="-1">shallowReactive <a class="header-anchor" href="#shallowreactive" aria-label="Permalink to &quot;shallowReactive&quot;">​</a></h3><p>创建一个响应式代理，它跟踪其自身属性的响应性<code>shallowReactive</code>生成非递归响应数据，只监听第一层数据的变化，但不执行嵌套对象的深层响应式转换 (暴露原始值)。</p><h2 id="vue3-中的-ref、shallowref-、isref、toref、torefs" tabindex="-1">vue3 中的 ref、shallowRef 、isRef、toRef、toRefs <a class="header-anchor" href="#vue3-中的-ref、shallowref-、isref、toref、torefs" aria-label="Permalink to &quot;vue3 中的 ref、shallowRef 、isRef、toRef、toRefs&quot;">​</a></h2><ul><li><p><strong>ref</strong>：用来根据给定的值创建一个响应式的数据对象，接收一个内部值，生成对应的响应式数据，该内部值挂载在 ref 对象的 value 属性上；</p><ul><li><p>该对象可以用于模版和 reactive。使用 ref 是为了解决值类型在 setup、computed、合成函数等情况下的响应式丢失问题。</p></li><li><p><code>ref()</code> 函数调用的返回值是一个对象，这个对象上只包含一个 <code>value</code> 属性, 只在 setup 函数内部访问<code>ref</code>函数需要加<code>.value</code>，其用途创建独立的原始值</p></li><li><p><code>reactive</code> 将解包所有深层的 <code>refs</code>，同时维持 ref 的响应性。当将 <code>ref</code>分配给 <code>reactive</code> property 时，ref 将被自动解包</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">        t</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		count</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 通过reactive 来获取ref 的值时,不需要使用.value两性:ref 将被自动解包console.log(obj.count);//10</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul></li><li><p><strong>shallowRef</strong>：<code>ref()</code> 的浅层作用形式。<code>shallowRef()</code> 常常用于对大型数据结构的性能优化或是与外部的状态管理系统集成</p><p><strong>isRef</strong>：<code>isRef()</code> 用来判断某个值是否为 <code>ref()</code> 创建出来的对象</p></li><li><p><strong>toRef</strong>：为响应式对象（reactive）的一个属性创建对应的 ref，且该方式创建的 ref 与源属性保持同步。</p></li><li><p><strong>toRefs</strong>：将响应式对象转换成普通对象，对象的每个属性都是对应的 ref，两者间保持同步。使用 toRefs 进行对象解构。</p><ul><li><p><strong>使用场景: 如果对一个响应数据, 进行解构 或者 展开, 会丢失他的响应式特性!</strong></p><p>原因: vue3 底层是对 对象 进行监听劫持</p><p>作用: 对一个响应式对象的所有内部属性, 都做响应式处理</p><ol><li>reactive/ref 的响应式功能是赋值给对象的, 如果给对象解构或者展开, 会让数据丢失响应式的能力</li><li><strong>使用 toRefs 可以保证该对象展开的每个属性都是响应式的</strong></li></ol></li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> wrapper</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">wrapper</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;__v_isRef&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">wrapper</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> toRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> wrapper</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		get</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#C678DD;">		set</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">wrapper</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;__v_isRef&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> wrapper</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		ret</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> toRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 自动脱ref</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> proxyRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_v_isRef</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_v_isRef</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="vue3-的-ref-与-reactive-的区别" tabindex="-1">Vue3 的 ref 与 reactive 的区别？ <a class="header-anchor" href="#vue3-的-ref-与-reactive-的区别" aria-label="Permalink to &quot;Vue3 的 ref 与 reactive 的区别？&quot;">​</a></h2><p>ref 与 reactive 是 <code>Vue3</code> 新推出的主要 <code>API</code> 之一，它们主要用于响应式数据的创建。</p><ul><li>ref：既可以处理基本类型，也可以处理引用类型。</li><li>reactive：处理引用类型的数据。</li></ul><h3 id="使用ref-与-reactive" tabindex="-1">使用ref 与 reactive <a class="header-anchor" href="#使用ref-与-reactive" aria-label="Permalink to &quot;使用ref 与 reactive&quot;">​</a></h3><p><strong>ref</strong>：用于创建一个响应式的基本类型值。使用 <code>ref()</code> 函数创建，通过 <code>.value</code> 访问和修改值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>reactive</strong>：用于创建一个响应式的对象。使用 <code>reactive()</code> 函数创建，直接访问和修改属性值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="reactive源码" tabindex="-1">reactive源码 <a class="header-anchor" href="#reactive源码" aria-label="Permalink to &quot;reactive源码&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">: object) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// if trying to observe a readonly proxy, return the readonly version.</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isReadonly</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> createReactiveObject</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">		target</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		mutableHandlers</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		mutableCollectionHandlers</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		reactiveMap</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>从源码可以看出，<code>reactive</code>需要传入一个<code>对象</code>，如果是一个只读的对象，那就返回原对象，否则就调用<code>createReactiveObject()</code>函数，返回一个<code>经过Proxy代理的对象</code>。</p><h3 id="ref源码" tabindex="-1">ref源码 <a class="header-anchor" href="#ref源码" aria-label="Permalink to &quot;ref源码&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">rawValue</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">shallow</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rawValue</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> rawValue</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> RefImpl</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rawValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">shallow</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> RefImpl</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E06C75;"> _value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E06C75;"> _rawValue</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#E06C75;"> dep</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Dep</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;"> __v_isRef</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> __v_isShallow</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">  ) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">rawValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> __v_isShallow</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> value</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> toRaw</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> __v_isShallow</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> value</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> toReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  get</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    trackRefValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  set</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> useDirectValue</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_v_isShallow</span><span style="color:#56B6C2;"> ||</span><span style="color:#61AFEF;"> isShallow</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#61AFEF;"> isReadonly</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    newVal</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> useDirectValue</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> newVal</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> toRaw</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">hasChanged</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">rawValue</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">rawValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> useDirectValue</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> newVal</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> toReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">      triggerRefValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>从源码可以看出，创建一个<code>ref变量</code>，如果传入的变量已经是一个 ref 变量了，就直接返回这个变量，如果不是就会返回一个<code>new RefImpl()</code>，new 这个类又做了什么呢？其实就是把我们传入的变量进行<code>toReactive</code>然后赋值给<code>this.value</code>，当我们访问<code>value</code>的时候，通过 get 函数，给我们返回了<code>this.value</code>。说白了就是给我们的变量<code>包裹了一层对象</code>，然后转变成了<code>reactive</code>对象。</p><h3 id="ref与reactive有以下区别" tabindex="-1"><code>ref</code>与<code>reactive</code>有以下区别： <a class="header-anchor" href="#ref与reactive有以下区别" aria-label="Permalink to &quot;\`ref\`与\`reactive\`有以下区别：&quot;">​</a></h3><ol><li><code>ref</code>与<code>reactive</code> 它们主要用于响应式数据的创建；</li><li><code>ref</code>函数可以接收原始数据类型和引用数据类型；</li><li>使用<code>ref</code>声明的数据，在 JS 中使用的时候，需要添加<code>.value</code>的后缀；</li><li><code>reactive</code>函数只能接收<strong>引用数据类型</strong>；<code>ref</code> 函数可以接收<strong>原始数据类型</strong>与<strong>引用数据类型</strong>。</li><li><code>ref</code>底层还是使用<code>reactive</code>来做，<code>ref</code>是在<code>reactive</code>上进行了封装，增强了其能力，使其支持了对原始数据类型的处理；</li><li>Vue3 中，<code>reactive</code>能做的<code>ref</code>能做，<code>reactive</code>不能做的<code>ref</code>也能做；</li></ol><p>既然都是用<code>reactive</code>实现的，为什么不都用<code>reactive</code>呢？这就要说到它们的区别了。</p><ul><li>Vue3 的响应式原理是基于<code>Proxy</code>的，而<code>Proxy只能代理对象</code>，如果我们要实现一个<code>基本数据类型的响应式</code>怎么办呢？只能通过将它变成<code>对象的方式</code>；</li><li><code>reactive</code>只能传入一个对象，而<code>ref</code>可以传入任何类型；</li><li><code>ref</code>声明的变量，我们在访问时，除了模板之外，必须使用<code>xxx.value</code>，而<code>reactive不用</code>；</li><li><code>reactive</code>声明的变量可能会造成<code>响应式丢失</code>，这也是为什么官方<code>更推荐使用ref的原因</code>；</li></ul><h3 id="reactive-响应式丢失" tabindex="-1">reactive 响应式丢失 <a class="header-anchor" href="#reactive-响应式丢失" aria-label="Permalink to &quot;reactive 响应式丢失&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>乍一看这种方式挺正常的，但是这种方式会引起<code>响应式丢失</code>，第一次使用<code>reactive</code>创建对象<code>obj</code>时，obj 是一个正常的<code>被Proxy代理的对象</code>，它是响应式的。但是当我们给<code>obj重新赋值</code>时，相当于改变了 obj 的<code>内存地址</code>，此时<code>obj变成了一个非响应式的普通对象</code>，于是造成了<code>响应式丢失</code>。</p><p>为什么<code>ref</code>不会产生这种问题呢？</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>当我们使用<code>ref</code>创建响应式变量时，其实是类似这样的：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	value</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这时我们改变的其实是<code>obj对象的value属性</code>，并没有更改整个对象，于是不会造成<code>响应式丢失</code>。</p><p>如果想使用<code>reactive</code>，一定要确保修改对象时<code>修改的是对象的某个属性</code>，如果想对<code>reactive对象重新赋值</code>，就必须要<code>再次包裹一层reactive</code>，但是不建议这么做。</p><p>使用<code>reactive</code>时，进行解构操作，也会<code>丢失响应式</code>，这是因为在解构赋值中，如果是<code>原始类型</code>就是按照<code>值传递</code>，如果是<code>引用数据类型</code>就会按照<code>引用类型地址传递</code>，因此解构出来的值并不是一个响应式的。</p><h2 id="readonly、isreadonly、shallowreadonly-函数" tabindex="-1">readonly、isReadonly、shallowReadonly 函数 <a class="header-anchor" href="#readonly、isreadonly、shallowreadonly-函数" aria-label="Permalink to &quot;readonly、isReadonly、shallowReadonly 函数&quot;">​</a></h2><h3 id="readonly" tabindex="-1">readonly <a class="header-anchor" href="#readonly" aria-label="Permalink to &quot;readonly&quot;">​</a></h3><p>传入<code>ref</code>或 <code>reactive</code>对象,并返回一个原始对象的只读代理,对象内部任何嵌套的属性也都是只读的、 并且是递归只读。</p><h3 id="isreadonly" tabindex="-1">isReadonly <a class="header-anchor" href="#isreadonly" aria-label="Permalink to &quot;isReadonly&quot;">​</a></h3><p>检查对象是否是由 <code>readonly</code> 创建的只读对象</p><h3 id="shallowreadonly" tabindex="-1">shallowReadonly <a class="header-anchor" href="#shallowreadonly" aria-label="Permalink to &quot;shallowReadonly&quot;">​</a></h3><p><code>shallowReadonly</code> 作用只处理对象最外层属性的响应式（浅响应式）的只读，但不执行嵌套对象的深度只读转换 (暴露原始值)</p><h2 id="readonly和const有什么区别" tabindex="-1"><code>readonly</code>和<code>const</code>有什么区别？ <a class="header-anchor" href="#readonly和const有什么区别" aria-label="Permalink to &quot;\`readonly\`和\`const\`有什么区别？&quot;">​</a></h2><ul><li><code>const</code>是赋值保护，使用<code>const</code>定义的变量，该变量不能重新赋值。但如果<code>const</code>赋值的是对象，那么对象里面的东西是可以改的。原因是<code>const</code>定义的变量不能改说的是，对象对应的那个地址不能改变</li><li>而<code>readonly</code>是属性保护，不能给属性重新赋值</li></ul><h2 id="computed、watch-函数" tabindex="-1">computed、watch 函数 <a class="header-anchor" href="#computed、watch-函数" aria-label="Permalink to &quot;computed、watch 函数&quot;">​</a></h2><h3 id="computed-1" tabindex="-1">computed <a class="header-anchor" href="#computed-1" aria-label="Permalink to &quot;computed&quot;">​</a></h3><p>该函数用来创造计算属性，和过去一样，它返回的值是一个 ref 对象。 里面可以传方法，或者一个对象，对象中包含<code>set()</code>、<code>get()</code>方法</p><h3 id="watch-1" tabindex="-1">watch <a class="header-anchor" href="#watch-1" aria-label="Permalink to &quot;watch&quot;">​</a></h3><p><code>watch</code> 函数用来侦听特定的数据源，并在回调函数中执行副作用。默认情况是懒执行的，也就是说仅在侦听的源数据变更时才执行回调。</p><h4 id="使用watch侦听器" tabindex="-1">使用watch侦听器 <a class="header-anchor" href="#使用watch侦听器" aria-label="Permalink to &quot;使用watch侦听器&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 监听单个ref</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> money</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">money</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldValue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 监听多个ref</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> money</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">money</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">], (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 监听ref复杂数据</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zs&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">	user</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;user变化了&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 深度监听，，，当ref的值是一个复杂数据类型，需要深度监听</span></span>
<span class="line"><span style="color:#E06C75;">		deep</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		immediate</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 监听对象的某个属性的变化</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zs&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">	() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> user</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="watch-和-watcheffect-的共同点和区别" tabindex="-1">watch 和 watchEffect 的共同点和区别？ <a class="header-anchor" href="#watch-和-watcheffect-的共同点和区别" aria-label="Permalink to &quot;watch 和 watchEffect 的共同点和区别？&quot;">​</a></h2><p><code>watch</code> 和 <code>watchEffect</code> 都是监听器，<code>watchEffect</code> 是一个副作用函数。</p><h3 id="它们的使用方法" tabindex="-1">它们的使用方法 <a class="header-anchor" href="#它们的使用方法" aria-label="Permalink to &quot;它们的使用方法&quot;">​</a></h3><h4 id="_1-watch" tabindex="-1">（1）watch <a class="header-anchor" href="#_1-watch" aria-label="Permalink to &quot;（1）watch&quot;">​</a></h4><p>接收两个入参，第一个为侦听的对象，第二个为回调函数。</p><p>侦听一个或多个响应式数据源，在数据源变化的时候调用一个回调函数</p><p>作用是对传入的某个或多个值的变化进行监听；触发时会返回新值和老值；也就是说第一次不会执行，只有变化时才会重新执行；<code>watch</code>加<code>Immediate</code>也可以立即执行。</p><h4 id="_2-watcheffect" tabindex="-1">（2）watchEffect <a class="header-anchor" href="#_2-watcheffect" aria-label="Permalink to &quot;（2）watchEffect&quot;">​</a></h4><p>接收一个入参，立即执行，后续的回调函数也是自身。</p><p>是传入一个函数,会立即执行，所以<strong>默认第一次也会执行一次</strong>；不需要传入监听内容，会<strong>自动收集函数内的数据源作为依赖</strong>，在依赖变化的时候又会重新执行该函数，如果没有依赖就不会执行；而且不会返回变化前后的新值和老值</p><p>立即运行一个函数，然后被动地追踪它的依赖，当这些依赖改变时，重新执行该函数</p><div class="language-scss line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.getter函数 2.cb</span></span>
<span class="line"><span style="color:#ABB2BF;">watch(</span></span>
<span class="line"><span style="color:#ABB2BF;">    ()=&gt;state</span><span style="color:#D19A66;">.name</span><span style="color:#ABB2BF;">,  </span><span style="color:#7F848E;font-style:italic;">// 数据变化之后，会执行回调函数</span></span>
<span class="line"><span style="color:#ABB2BF;">    (newValue, oldValue) =&gt; {}</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// getter函数</span></span>
<span class="line"><span style="color:#ABB2BF;">watchEffect(()=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 数据变化后，会再次执行这个getter函数</span></span>
<span class="line"><span style="color:#ABB2BF;">    app</span><span style="color:#D19A66;">.innerHTML</span><span style="color:#ABB2BF;"> = state</span><span style="color:#D19A66;">.name</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="共同点是-watch-和-watcheffect-会共享以下四种行为" tabindex="-1">共同点是 <code>watch</code> 和 <code>watchEffect</code> 会共享以下四种行为： <a class="header-anchor" href="#共同点是-watch-和-watcheffect-会共享以下四种行为" aria-label="Permalink to &quot;共同点是 \`watch\` 和 \`watchEffect\` 会共享以下四种行为：&quot;">​</a></h3><ul><li><code>停止监听</code>：组件卸载时都会自动停止监听</li><li><code>清除副作用</code>：onInvalidate 会作为回调的第三个参数传入</li><li><code>副作用刷新时机</code>：响应式系统会缓存副作用函数，并异步刷新，避免同一个 tick 中多个状态改变导致的重复调用</li><li><code>监听器调试</code>：开发模式下可以用 onTrack 和 onTrigger 进行调试</li></ul><h3 id="它们之间的区别有" tabindex="-1">它们之间的区别有： <a class="header-anchor" href="#它们之间的区别有" aria-label="Permalink to &quot;它们之间的区别有：&quot;">​</a></h3><ul><li><p><code>watch</code> ：既要指明监视的数据源，也要指明监视的回调。而 <code>watchEffect</code> 可以自动监听数据源作为依赖。不用指明监视哪个数据，监视的回调中用到哪个数据，那就监视哪个数据。</p></li><li><p><code>watch</code> 可以访问<code>改变之前和之后</code>的值，<code>watchEffect</code> 只能获取<code>改变后</code>的值。</p></li><li><p><code>watch</code> 运行的时候<code>不会立即执行</code>，值改变后才会执行，而 <code>watchEffect</code> 运行后可<code>立即执行</code>。这一点可以通过 <code>watch</code> 的配置项 <code>immediate</code> 改变。</p></li><li><p><code>watchEffect</code>有点像 <code>computed</code> ：</p><ul><li>但 <code>computed</code> 注重的计算出来的值（回调函数的返回值）， 所以必须要写返回值。</li><li>而 <code>watcheffect</code>注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调</span></span>
<span class="line"><span style="color:#61AFEF;">watchEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> x1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sum</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> x2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;watchEffect配置的回调执行了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><code>watch</code>与 <code>vue2.x</code>中 <code>watch</code> 配置功能一致，但也有两个小坑</p><ul><li>监视 <code>reactive</code> 定义的响应式数据时，<code>oldValue</code> 无法正确获取，强<code>制开启</code>了深度监视（deep 配置失效）</li><li>监视 <code>reactive</code> 定义的响应式数据中<code>某个属性</code>时，<code>deep配置有效</code>。</li></ul></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> msg</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;你好啊&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> person</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;张三&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	job</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">		j1</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">			salary</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">20</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//情况1：监视ref定义的响应式数据</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sum</span><span style="color:#ABB2BF;">,(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldValue</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sum变化了&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">),(</span><span style="color:#E06C75;font-style:italic;">immediate</span><span style="color:#ABB2BF;">:true)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//情况2：监视多个ref定义的响应式数据</span></span>
<span class="line"><span style="color:#ABB2BF;">watch([</span><span style="color:#E06C75;font-style:italic;">sum</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#ABB2BF;">],(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldValue</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sum或msg变化了&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">),(</span><span style="color:#E06C75;font-style:italic;">immediate</span><span style="color:#ABB2BF;">:true)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//情况3：监视reactive定义的响应式数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue，且强制开启了深度监视。</span></span>
<span class="line"><span style="color:#ABB2BF;">watch(</span><span style="color:#E06C75;font-style:italic;">person</span><span style="color:#ABB2BF;">,(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldValue</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;person变化了&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">),(</span><span style="color:#E06C75;font-style:italic;">immediate</span><span style="color:#ABB2BF;">:true,</span><span style="color:#E06C75;font-style:italic;">deep</span><span style="color:#ABB2BF;">:false) </span><span style="color:#7F848E;font-style:italic;">//此处的deep配置不再生效。</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//情况4：监视reactive所定义的一个响应式数据中的某个属性</span></span>
<span class="line"><span style="color:#ABB2BF;">watch(()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldValue</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;person.name变化了&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//情况5：监视reactive所定义的一个响应式数据中的某些属性</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">([()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, ()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">],(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldValue</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;person.name或person.age变化了&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//特殊情况：</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">job</span><span style="color:#ABB2BF;">,(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldValue</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;person.job变化了&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}, {</span><span style="color:#E06C75;">deep</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="vue3-怎么让全局组件有类型提示" tabindex="-1">Vue3 怎么让全局组件有类型提示 <a class="header-anchor" href="#vue3-怎么让全局组件有类型提示" aria-label="Permalink to &quot;Vue3 怎么让全局组件有类型提示&quot;">​</a></h2><p>vue3 中如果注册的是局部组件，那么 props 是有类型提示的，但是如果注册的是全局组件，props 就没有类型提示了</p><p><img src="`+z+`" alt="image-20240326155921058"></p><p><strong>解决办法</strong></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 在src目录下新建一个文件 global.d.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> XtxSkeleton</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;@/components/XtxSkeleton/XtxSkeleton.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 参考：</span></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> module</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	export</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> GlobalComponents</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		XtxSkeleton</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> XtxSkeleton</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="如何在-vue-3-中实现自定义指令" tabindex="-1">如何在 Vue 3 中实现自定义指令？ <a class="header-anchor" href="#如何在-vue-3-中实现自定义指令" aria-label="Permalink to &quot;如何在 Vue 3 中实现自定义指令？&quot;">​</a></h2><p>Vue 3 中的自定义指令与 Vue 2 有所不同，主要包括以下钩子函数：</p><ul><li><code>beforeMount</code>：在指令挂载到 DOM 之前调用</li><li><code>mounted</code>：在指令挂载到 DOM 之后调用</li><li><code>beforeUpdate</code>：在指令所在组件的 VNode 更新之前调用</li><li><code>updated</code>：在指令所在组件的 VNode 更新之后调用</li><li><code>beforeUnmount</code>：在指令从 DOM 卸载之前调用</li><li><code>unmounted</code>：在指令从 DOM 卸载之后调用</li></ul><h3 id="以下是一个自定义指令的示例-用于监听页面元素的点击事件" tabindex="-1">以下是一个自定义指令的示例，用于监听页面元素的点击事件： <a class="header-anchor" href="#以下是一个自定义指令的示例-用于监听页面元素的点击事件" aria-label="Permalink to &quot;以下是一个自定义指令的示例，用于监听页面元素的点击事件：&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Directive</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> onClickOutside</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Directive</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	beforeMount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">binding</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clickOutsideHandler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">contains</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">				binding</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">value</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clickOutsideHandler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	beforeUnmount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clickOutsideHandler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> onClickOutside</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="在组件中使用自定义指令" tabindex="-1">在组件中使用自定义指令： <a class="header-anchor" href="#在组件中使用自定义指令" aria-label="Permalink to &quot;在组件中使用自定义指令：&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-on-click-outside</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">handleClickOutside</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点击外部区域时触发事件&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> onClickOutside</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./directives/onClickOutside&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	directives</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		onClickOutside</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		handleClickOutside</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Clicked outside&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="注册全局自定义指令" tabindex="-1">注册全局自定义指令 <a class="header-anchor" href="#注册全局自定义指令" aria-label="Permalink to &quot;注册全局自定义指令&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// app.directive(&#39;指令名&#39;, 配置对象)</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">directive</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;lazy&#39;</span><span style="color:#ABB2BF;">，{  </span></span>
<span class="line"><span style="color:#61AFEF;">    mounted</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">        .......</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="vite-和-webpack-的区别" tabindex="-1">Vite 和 Webpack 的区别 <a class="header-anchor" href="#vite-和-webpack-的区别" aria-label="Permalink to &quot;Vite 和 Webpack 的区别&quot;">​</a></h2><p>都是现代化打包工具</p><p>启动方式不一样：vite 在启动的时候不需要打包，所以不用分析模块与模块之间的依赖关系，不用进行编译。这种方式就类似于我们在使用某个 UI 框架的时候，可以对其进行按需加载。同样的，vite 也是这种机制，当浏览器请求某个模块时，再根据需要对模块内容进行编译。按需动态编译可以缩减编译时间，当项目越复杂，模块越多的情况下，vite 明显优于 webpack.</p><p>热更新方面，Vite效率更高：当改动了某个模块的时候，也只用让浏览器重新请求该模块，不需要像 webpack 那样将模块以及模块依赖的模块全部编译一次。</p><p><strong>缺点</strong></p><p>vite 相关生态没有 webpack 完善，vite 可以作为开发的辅助。</p><h2 id="vue3-的-v-model-语法" tabindex="-1">Vue3 的 v-model 语法 <a class="header-anchor" href="#vue3-的-v-model-语法" aria-label="Permalink to &quot;Vue3 的 v-model 语法&quot;">​</a></h2><ol><li>父组件给子组件传入一个 modelValue 的属性</li><li>子组件通知父组件的 <code>update:modelValue</code> 事件，将修改后的值传给父组件</li><li>父组件监听 <code>update:modelValue</code>，修改对应的值</li></ol><p>父组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// 原生写法</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">son</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">model-value</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">money</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">update</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">modelValue</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;">money</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">// v-mode语法糖写法</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;son v-model=&quot;money&quot; v-mode:house=&quot;house&quot; /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>子组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;update:modelValue&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">modelValue</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;点我加钱 &lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>好处是什么</strong></p><p>为了整合 <code>.sync</code> 和 <code>v-model</code></p><p>在 Vue2 中，v-mode 只能绑定一个属性，如果需要绑定多个属性则需要借助 <code>.sync</code> 修饰符</p><p><code>.sync</code> 修饰符在 Vue3 中已<code>被移除</code>，直接被 v-model 取代。</p><h2 id="vue3-中的模板语法有哪些变化" tabindex="-1">Vue3 中的模板语法有哪些变化 <a class="header-anchor" href="#vue3-中的模板语法有哪些变化" aria-label="Permalink to &quot;Vue3 中的模板语法有哪些变化&quot;">​</a></h2><ol><li><strong>v-model 指令</strong>：在 Vue3 中，v-model 指令不再支持修饰符，如.sync 和.lazy，而是通过自定义指令来实现类似的功能。</li><li><strong>v-if 和 v-for 指令</strong>：在 vue2 中，<code>v-for</code> 的优先级比<code>v-if</code>更高；而在 vue3 中，<code>v-if</code>具有比<code>v-for</code>更高的优先级。</li><li><strong>模板中的事件修饰符</strong>：在 Vue3 中，事件修饰符不再使用.native 和.sync，而是使用 on 和 model。</li></ol><h2 id="vue3-中异步组件加载有什么改进" tabindex="-1">Vue3 中异步组件加载有什么改进 <a class="header-anchor" href="#vue3-中异步组件加载有什么改进" aria-label="Permalink to &quot;Vue3 中异步组件加载有什么改进&quot;">​</a></h2><ol><li><strong>Suspense 组件</strong>：Vue3 引入了 Suspense 组件，可以更方便地处理异步组件的加载和错误处理。使用 Suspense 组件可以在异步组件加载过程中显示 loading 状态，同时也可以处理异步组件加载失败的情况。</li><li><strong>新的异步组件加载方式</strong>：在 Vue3 中，异步组件的加载方式有所改进，使用 import()函数可以更加简洁地定义异步组件。同时，Vue3 还提供了 defineAsyncComponent 函数来定义异步组件，使得异步组件的定义更加灵活。</li><li><strong>支持多个异步组件同时加载</strong>：在 Vue3 中，可以同时加载多个异步组件，而不需要等待前一个异步组件加载完成后再加载下一个。这样可以提高页面加载速度和性能。</li></ol><h2 id="vue-3-中如何进行组件通信" tabindex="-1">Vue 3 中如何进行组件通信？ <a class="header-anchor" href="#vue-3-中如何进行组件通信" aria-label="Permalink to &quot;Vue 3 中如何进行组件通信？&quot;">​</a></h2><p>Vue 3 提供了多种组件通信方法，包括：</p><ol><li><strong>Props 和 Events</strong>：父组件通过 props 向子组件传递数据，子组件通过事件向父组件传递数据。</li><li><strong>Provide 和 Inject</strong>：祖先组件通过 provide 提供数据或方法，后代组件通过 inject 获取数据或方法。</li><li><strong>Vuex</strong>：使用 Vuex 状态管理库进行全局状态管理。</li></ol><p>以下是 Provide 和 Inject 的使用示例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ParentComponent.vue</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">provide</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> theme</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;dark&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    provide</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;theme&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">theme</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ChildComponent.vue</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">inject</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> theme</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> inject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;theme&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">theme</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &quot;dark&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="vue2-vue3-组件通信方式" tabindex="-1">Vue2/Vue3 组件通信方式？ <a class="header-anchor" href="#vue2-vue3-组件通信方式" aria-label="Permalink to &quot;Vue2/Vue3 组件通信方式？&quot;">​</a></h2><p><a href="https://juejin.cn/post/6999687348120190983" target="_blank" rel="noreferrer">Vue3 的 8 种和 Vue2 的 12 种组件通信，值得收藏</a></p><p>Vue3 通信方式：</p><ul><li>props</li><li>$emit</li><li>expose / ref</li><li>$attrs</li><li>v-model</li><li>provide / inject（原理：原型链）</li><li>Vuex/pinia</li><li>mitt</li></ul><p>Vue2.x 组件通信共有 12 种</p><ul><li>props</li><li>$emit / v-on</li><li>.sync</li><li>v-model</li><li>ref</li><li>children/children / children/parent</li><li>attrs/attrs / attrs/listeners</li><li>provide / inject</li><li>EventBus</li><li>Vuex</li><li>$root</li><li>slot</li></ul><h2 id="vue3-typescript-如何父传子-子传父" tabindex="-1">vue3+TypeScript 如何父传子，子传父 <a class="header-anchor" href="#vue3-typescript-如何父传子-子传父" aria-label="Permalink to &quot;vue3+TypeScript 如何父传子，子传父&quot;">​</a></h2><p>以下是一个简单的示例，展示如何在 Vue 3 中使用 TypeScript 实现父传子，子传父。</p><p>父组件：App.vue</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">ChildComponent</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">num</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">add</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">increment</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ts&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> ChildComponent</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./ChildComponent.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> defineComponent</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">ChildComponent</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#61AFEF;"> increment</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">			...</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			increment</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>子组件：ChildComponent.vue</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">add</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;Add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ts&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">defineComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">PropType</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">emit</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> defineComponent</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ChildComponent&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		num</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;font-style:italic;">emit</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#61AFEF;"> add</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			add</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在这个示例中，父组件通过 props 将<code>count</code>传递给子组件，并在子组件中显示它。子组件通过<code>@add</code>事件触发<code>increment</code>函数来让父组件增加<code>count</code>的值。</p><blockquote><p>Vue3 结合 TypeScript 可以很方便实现父组件向子组件传递数据，以及子组件向父组件传递事件。</p><p>通过使用**@Prop<strong>和</strong>@Emit<strong>装饰器来定义数据的传递和事件的触发，可以避免数据类型不符等问题。同时，通过使用</strong>泛型**约束，可以进一步增强代码的类型安全。</p></blockquote><h2 id="provide-inject-怎么使用" tabindex="-1">provide/inject 怎么使用? <a class="header-anchor" href="#provide-inject-怎么使用" aria-label="Permalink to &quot;provide/inject 怎么使用?&quot;">​</a></h2><p>&quot;provide&quot;和&quot;inject&quot;是 Vue.js 中的依赖注入机制。在 Vue.js 中，组件是通过属性传递数据的方式进行通信的。但是，如果组件之间存在复杂的依赖关系，则需要使用依赖注入来解决。</p><p>&quot;provide&quot;用于提供一个对象，在当前组件和其子组件中可用。例如，我们可以在父组件中提供一个对象：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">provide</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">	message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Hello, Vue!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后，在子组件中可以通过&quot;inject&quot;来注入该对象：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;message&quot;</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样，子组件就可以访问父组件提供的&quot;message&quot;属性了。</p><p>另外，我们还可以通过&quot;provide&quot;提供一个方法或者组件实例等，然后在子组件中通过&quot;inject&quot;来注入并使用它们。例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">provide</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">  getData</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getData</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  myComponent</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;getData&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;myComponent&#39;</span><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>注入的&quot;getData&quot;可以直接调用父组件提供的方法，而&quot;myComponent&quot;则可以访问父组件的实例方法和属性。</p><blockquote><p>Provide 和 inject 都可以用来在 Vue 组件中注入依赖项。</p><p><strong>provide 是在父组件中提供依赖项，inject 是在子组件中注入依赖项。</strong></p><p>例如，可以在父组件中使用 provide 提供一个计数器，然后在子组件中使用 inject 注入这个计数器来进行计数操作。</p></blockquote><h2 id="说说-vue-3-中-tree-shaking-特性-举例说明一下" tabindex="-1">说说 Vue 3 中 Tree shaking 特性？举例说明一下？ <a class="header-anchor" href="#说说-vue-3-中-tree-shaking-特性-举例说明一下" aria-label="Permalink to &quot;说说 Vue 3 中 Tree shaking 特性？举例说明一下？&quot;">​</a></h2><h3 id="_1、tree-shaking是什么" tabindex="-1">1、Tree shaking是什么？ <a class="header-anchor" href="#_1、tree-shaking是什么" aria-label="Permalink to &quot;1、Tree shaking是什么？&quot;">​</a></h3><ul><li><code>Tree shaking</code> 是一种通过<code>清除多余代码</code>方式来优化项目<code>打包体积</code>的技术，专业术语叫 <code>Dead code elimination</code></li><li>简单来讲，就是在保持代码<code>运行结果不变</code>的前提下，去除无用的代码</li></ul><p><strong>在<code>Vue2</code>中，无论我们使用什么功能，它们最终都会出现在生产代码中。</strong></p><p>主要原因是<code>Vue</code>实例在项目中是单例的，捆绑程序无法检测到该对象的哪些属性在代码中被使用到。</p><p><strong>而<code>Vue3</code>源码引入<code>tree shaking</code>特性，将全局 <code>API</code> 进行分块。</strong></p><p>如果您不使用其某些功能，它们将不会包含在您的基础包中</p><h3 id="_2、如何使用tree-shaking优化代码" tabindex="-1">2、如何使用Tree shaking优化代码？ <a class="header-anchor" href="#_2、如何使用tree-shaking优化代码" aria-label="Permalink to &quot;2、如何使用Tree shaking优化代码？&quot;">​</a></h3><p><code>Tree shaking</code>是基于<code>ES6</code>模板语法（<code>import</code>与<code>exports</code>），主要是借助<code>ES6</code>模块的<code>静态编译</code>思想，在<code>编译时</code>就能确定模块的<code>依赖关系</code>，以及<code>输入</code>和<code>输出</code>的变量。</p><p><code>Tree shaking</code>无非就是做了两件事：</p><ul><li>编译阶段利用<code>ES6 Module</code>判断哪些模块已经加载</li><li>判断那些模块和变量未被使用或者引用，进而删除对应代码</li></ul><h3 id="_3、tree-shaking的作用-好处" tabindex="-1">3、Tree shaking的作用（好处）? <a class="header-anchor" href="#_3、tree-shaking的作用-好处" aria-label="Permalink to &quot;3、Tree shaking的作用（好处）?&quot;">​</a></h3><p>通过<code>Tree shaking</code>，<code>Vue3</code>给我们带来的好处是：</p><ul><li>减少程序体积（更小）</li><li>减少程序执行时间（更快）</li><li>便于将来对程序架构进行优化（更友好）</li></ul><h1 id="十一、vue-测试" tabindex="-1">十一、Vue 测试 <a class="header-anchor" href="#十一、vue-测试" aria-label="Permalink to &quot;十一、Vue 测试&quot;">​</a></h1><ul><li>单元测试和端到端测试</li><li>测试工具和策略</li><li>Mocking 和测试组件</li></ul><h1 id="十二、vue-与其他技术的结合" tabindex="-1">十二、Vue 与其他技术的结合 <a class="header-anchor" href="#十二、vue-与其他技术的结合" aria-label="Permalink to &quot;十二、Vue 与其他技术的结合&quot;">​</a></h1><ul><li>Vue 与 TypeScript</li><li>Vue 与移动端框架的结合</li></ul><h2 id="mint-ui-是什么-怎么使用-说出至少三个组件使用方法" tabindex="-1">mint-ui 是什么？怎么使用？说出至少三个组件使用方法？ <a class="header-anchor" href="#mint-ui-是什么-怎么使用-说出至少三个组件使用方法" aria-label="Permalink to &quot;mint-ui 是什么？怎么使用？说出至少三个组件使用方法？&quot;">​</a></h2><p>基于 vue 的前端组件库。npm 安装，然后 import 样式和 js，vue.use（mintUi）全局引入。</p><p>在单个组件局部引入：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">import { Toast } from &#39;mint-ui&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>组件一：Toast(‘登录成功’)；</li><li>组件二：mint-header；</li><li>组件三：mint-swiper</li></ul><h1 id="十三、其他-vue-面试题" tabindex="-1">十三、其他 vue 面试题 <a class="header-anchor" href="#十三、其他-vue-面试题" aria-label="Permalink to &quot;十三、其他 vue 面试题&quot;">​</a></h1><h2 id="vue-与-react-的相同和区别" tabindex="-1">Vue 与 React 的相同和区别 <a class="header-anchor" href="#vue-与-react-的相同和区别" aria-label="Permalink to &quot;Vue 与 React 的相同和区别&quot;">​</a></h2><p>详细可以参阅：<a href="https://v2.cn.vuejs.org/v2/guide/comparison.html" target="_blank" rel="noreferrer">Vue 对比其他框架 — Vue.js (vuejs.org)</a></p><h3 id="相同点-1" tabindex="-1">相同点 <a class="header-anchor" href="#相同点-1" aria-label="Permalink to &quot;相同点&quot;">​</a></h3><h4 id="_1-virtual-dom" tabindex="-1">1.Virtual DOM： <a class="header-anchor" href="#_1-virtual-dom" aria-label="Permalink to &quot;1.Virtual DOM：&quot;">​</a></h4><p><code>Vue</code> 和 <code>React</code> 都使用虚拟 DOM 技术，通过在 <code>JavaScript</code> 和真实 DOM 之间建立一个轻量级的虚拟 DOM 层，实现高效的 DOM 更新和渲染。</p><p>(当然<code>Vue</code>是在<code>Vue2.x</code>才引用的)</p><p>也就是能让我们通过操作数据的方式来改变真实的<code>DOM</code>状态。</p><p>因为其实<code>Virtual DOM</code>的本质就是一个<code>JS</code>对象，它保存了对真实<code>DOM</code>的所有描述，是真实<code>DOM</code>的一个映射，所以当我们在进行频繁更新元素的时候，改变这个<code>JS</code>对象的开销远比直接改变真实<code>DOM</code>要小得多。</p><h4 id="_2-组件化的开发思想-composable" tabindex="-1">2.组件化的开发思想(Composable)： <a class="header-anchor" href="#_2-组件化的开发思想-composable" aria-label="Permalink to &quot;2.组件化的开发思想(Composable)：&quot;">​</a></h4><p><code>Vue</code> 和 <code>React</code> 都采用了组件化开发的方式，将用户界面划分为独立、可复用的组件，从而使代码更加模块化、可维护和可扩展。</p><p>建议将应用分拆成一个个功能明确的模块，再将这些模块整合在一起以满足我们的业务需求。</p><h4 id="_3-响应式更新-props" tabindex="-1">3.响应式更新(props)： <a class="header-anchor" href="#_3-响应式更新-props" aria-label="Permalink to &quot;3.响应式更新(props)：&quot;">​</a></h4><p><code>Vue</code>和<code>React</code>中都有<code>props</code>的概念，允许父组件向子组件传递数据。</p><p><code>Vue</code> 和 <code>React</code> 都支持响应式更新，即当数据发生变化时，会自动更新相关的组件和视图，以保持用户界面的同步性。</p><h4 id="_4-集成能力-构建工具、chrome-插件、配套框架" tabindex="-1">4.集成能力(构建工具、Chrome 插件、配套框架)： <a class="header-anchor" href="#_4-集成能力-构建工具、chrome-插件、配套框架" aria-label="Permalink to &quot;4.集成能力(构建工具、Chrome 插件、配套框架)：&quot;">​</a></h4><p>两者构建工具以及 Chrome 插件、配套框架都很完善。</p><p>都有自己的构建工具，能让你得到一个根据最佳实践设置的项目模板；</p><p><code>Vue</code> 和 <code>React</code> 都具有良好的集成能力，可以与其他库和框架进行整合，例如 <code>Vue</code> 可以与 <code>Vuex</code>、<code>Vue Router</code> 等配套使用，<code>React</code> 可以与 <code>Redux</code>、<code>React Router</code> 等配套使用。</p><p>比如构建工具，<code>React</code>中可以使用<code>CRA</code>，<code>Vue</code>中可以使用对应的脚手架<code>vue-cli</code>。对于配套框架<code>Vue</code>中有<code>vuex、vue-router</code>，<code>React</code>中有<code>react-router、redux</code>。</p><p>都将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库；</p><h4 id="_5-都支持-ssr服务端渲染" tabindex="-1">5.都支持 SSR服务端渲染 <a class="header-anchor" href="#_5-都支持-ssr服务端渲染" aria-label="Permalink to &quot;5.都支持 SSR服务端渲染&quot;">​</a></h4><h4 id="_6-实现-webcomponents-规范" tabindex="-1">6.实现 webComponents 规范 <a class="header-anchor" href="#_6-实现-webcomponents-规范" aria-label="Permalink to &quot;6.实现 webComponents 规范&quot;">​</a></h4><h4 id="_7-数据驱动" tabindex="-1">7.数据驱动 <a class="header-anchor" href="#_7-数据驱动" aria-label="Permalink to &quot;7.数据驱动&quot;">​</a></h4><h3 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h3><h4 id="_1-模版的编写" tabindex="-1">1.模版的编写： <a class="header-anchor" href="#_1-模版的编写" aria-label="Permalink to &quot;1.模版的编写：&quot;">​</a></h4><p>最大的不同就是模版的编写，<code>Vue</code>鼓励你去写近似常规<code>HTML</code>的模板，<code>React</code>推荐你使用<code>JSX</code>去书写。</p><h4 id="_2-状态管理与对象属性" tabindex="-1">2.状态管理与对象属性： <a class="header-anchor" href="#_2-状态管理与对象属性" aria-label="Permalink to &quot;2.状态管理与对象属性：&quot;">​</a></h4><p>在<code>React</code>中，应用的状态是比较关键的概念，也就是<code>state</code>对象，它允许你使用<code>setState</code>去更新状态。但是在<code>Vue</code>中，<code>state</code>对象并不是必须的，数据是由<code>data</code>属性在<code>Vue</code>对象中进行管理。</p><h4 id="_3-虚拟dom的处理方式不同" tabindex="-1">3.虚拟<code>DOM</code>的处理方式不同： <a class="header-anchor" href="#_3-虚拟dom的处理方式不同" aria-label="Permalink to &quot;3.虚拟\`DOM\`的处理方式不同：&quot;">​</a></h4><p><code>Vue</code>中的虚拟<code>DOM</code>控制了颗粒度，组件层面走<code>watcher</code>通知，而组件内部走<code>vdom</code>做<code>diff</code>，这样，既不会有太多<code>watcher</code>，也不会让<code>vdom</code>的规模过大。而<code>React</code>走了类似于<code>CPU</code>调度的逻辑，把<code>vdom</code>这棵树，微观上变成了链表，然后利用浏览器的空闲时间来做<code>diff</code></p><h4 id="_4-简易程度" tabindex="-1">4.简易程度 <a class="header-anchor" href="#_4-简易程度" aria-label="Permalink to &quot;4.简易程度&quot;">​</a></h4><p>Vue 上手简单，进阶式框架，白话说你可以学一点，就可以在你项目中去用一点，你不一定需要一次性学习整个 Vue 才能去使用它，而 React，恐怕如果你这样会面对项目束手无策。</p><h4 id="_5-语法上" tabindex="-1">5.语法上 <a class="header-anchor" href="#_5-语法上" aria-label="Permalink to &quot;5.语法上&quot;">​</a></h4><p>语法上 Vue 并不限制你必须 es6+完全 js 形式编写页面，可以视图和 js 逻辑尽可能分离，减少很多人看不惯 React-jsx 的恶心嵌套，毕竟都是作为前端开发者，还是更习惯于 html 干净。</p><p>Vue 使用了模板语法，相比于 JSX 来说没有那么灵活，但是完全可以脱离工具链，通过直接编写 render 函数就能在浏览器中运行。</p><p>React 需要使用 JSX ，有一定的上手成本，并且需要一整套的工具链支持，但是完全可以通过 JS 来控制页面，更加的灵活。</p><h4 id="_6-数据流" tabindex="-1">6.数据流 <a class="header-anchor" href="#_6-数据流" aria-label="Permalink to &quot;6.数据流&quot;">​</a></h4><p>Vue 中默认支持双向绑定，组件与 DOM 之间可以通过 v-model 双向绑定。但是，父子组件之间，props 在 是单向数据流</p><p>React 一直提倡的是单向数据流，他称之为 onChange/setState()模式。不过由于我们一般都会用 Vuex 以及 Redux 等单向数据流的状态管理框架，因此很多时候我们感受不到这一点的区别了。</p><p>Vue 是双向数据流（当然为了实现单数据流方便管理组件状态，vuex 便出现了）， react 是单向数据流。</p><p>Vue 的表单可以使用 v-model 支持双向绑定，相比于 React 来说开发上更加方便，当然了 v-model 其实就是个语法糖，本质上和 React 写表单的方式没什么区别</p><h4 id="监听数据变化的实现原理不同" tabindex="-1">监听数据变化的实现原理不同 <a class="header-anchor" href="#监听数据变化的实现原理不同" aria-label="Permalink to &quot;监听数据变化的实现原理不同&quot;">​</a></h4><p>Vue 通过 getter/setter 以及一些函数的劫持，能精确快速的计算出 Virtual DOM 的差异。这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。</p><p>React 默认是通过比较引用的方式进行的，如果不优化，每当应用的状态被改变时，全部子组件都会重新渲染，可能导致大量不必要的 VDOM 的重新渲染。</p><p>Vue 不需要特别的优化就能达到很好的性能，而对于 React 而言，需要通过 PureComponent/shouldComponentUpdate 这个生命周期方法来进行控制。如果你的应用中，交互复杂，需要处理大量的 UI 变化，那么使用 Virtual DOM 是一个好主意。如果你更新元素并不频繁，那么 Virtual DOM 并不一定适用，性能很可能还不如直接操控 DOM。</p><h4 id="_7-改变数据方式不同" tabindex="-1">7.改变数据方式不同 <a class="header-anchor" href="#_7-改变数据方式不同" aria-label="Permalink to &quot;7.改变数据方式不同&quot;">​</a></h4><p>Vue 修改状态相比来说要简单许多， React 需要使用 setState 来改变状态，并且使用这个 API 也有一些坑点。并且 Vue 的底层使用了依赖追踪，页面更新渲染已经是最优的了，但是 React 还是需要用户手动去优化这方面的问题。</p><h4 id="_8-模板渲染方式的不同" tabindex="-1">8.模板渲染方式的不同 <a class="header-anchor" href="#_8-模板渲染方式的不同" aria-label="Permalink to &quot;8.模板渲染方式的不同&quot;">​</a></h4><p>vue 的 vdom 是追踪每个组件的依赖关系，不会渲染整个组件树， react 每当应该状态被改变时，全部子组件都会 re-render。</p><p>在表层上，模板的语法不同</p><ul><li>React 是通过 JSX 渲染模板</li><li>而 Vue 是通过一种拓展的 HTML 语法进行渲染</li></ul><p>在深层上，模板的原理不同，这才是他们的本质区别：</p><ul><li>React 是在组件 JS 代码中，通过原生 JS 实现模板中的常见语法，比如插值，条件，循环等，都是通过 JS 语法实现的</li><li>Vue 是在和组件 JS 代码分离的单独的模板中，通过指令来实现的，比如条件语句就需要 v-if 来实现。对这一点，我个人比较喜欢 React 的做法，因为他更加纯粹更加原生，而 Vue 的做法显得有些独特，会把 HTML 弄得很乱。举个例子，说明 React 的好处：react 中 render 函数是支持闭包特性的，所以我们 import 的组件在 render 中可以直接调用。但是在 Vue 中，由于模板中使用的数据都必须挂在 this 上进行一次中转，所以我们 import 一个组件完了之后，还需要在 components 中。再声明下，这样显然是很奇怪但又不得不这样的做法。</li></ul><h4 id="_9-生态上" tabindex="-1">9.生态上 <a class="header-anchor" href="#_9-生态上" aria-label="Permalink to &quot;9.生态上&quot;">​</a></h4><p>在生态上来说，两者其实没多大的差距，当然 React 的用户是远远高于 Vue 的</p><h4 id="高阶组件" tabindex="-1">高阶组件 <a class="header-anchor" href="#高阶组件" aria-label="Permalink to &quot;高阶组件&quot;">​</a></h4><p>react 可以通过高阶组件（HOC）来扩展，而 Vue 需要通过 mixins 来扩展。</p><p>高阶组件就是高阶函数，而 React 的组件本身就是纯粹的函数，所以高阶函数对 React 来说易如反掌。相反 Vue.js 使用 HTML 模板创建视图组件，这时模板无法有效的编译，因此 Vue 不能采用 HOC 来实现。</p><h4 id="模版语法不同" tabindex="-1">模版语法不同： <a class="header-anchor" href="#模版语法不同" aria-label="Permalink to &quot;模版语法不同：&quot;">​</a></h4><p><code>react</code>采用 JSX 语法，<code>vue</code>使用基于 HTML 的模版语法</p><h4 id="数据绑定不同" tabindex="-1">数据绑定不同： <a class="header-anchor" href="#数据绑定不同" aria-label="Permalink to &quot;数据绑定不同：&quot;">​</a></h4><p><code>vue</code> 使用双向数据绑定，<code>react</code> 则需要手动控制组件的状态和属性。</p><h4 id="状态管理不同" tabindex="-1">状态管理不同： <a class="header-anchor" href="#状态管理不同" aria-label="Permalink to &quot;状态管理不同：&quot;">​</a></h4><p><code>vue</code>使用<code>vuex</code>状态管理，<code>react</code>使用<code>redux</code>状态管理</p><h4 id="组件通信不同" tabindex="-1">组件通信不同： <a class="header-anchor" href="#组件通信不同" aria-label="Permalink to &quot;组件通信不同：&quot;">​</a></h4><p><code>vue</code>使用<code>props</code>和事件的方式进行父子组件通信，<code>react</code>则通过<code>props</code>和回调函数的方式进行通信。</p><h4 id="生命周期不同" tabindex="-1">生命周期不同： <a class="header-anchor" href="#生命周期不同" aria-label="Permalink to &quot;生命周期不同：&quot;">​</a></h4><p><code>vue</code>有 8 个生命周期钩子，<code>react</code>有 10 个</p><h4 id="响应式原理不同" tabindex="-1">响应式原理不同： <a class="header-anchor" href="#响应式原理不同" aria-label="Permalink to &quot;响应式原理不同：&quot;">​</a></h4><p><code>vue</code>使用双向绑定来实现数据更新，<code>react</code>则通过单向数据流来实现</p><h2 id="vue-与-angular-的区别" tabindex="-1">Vue 与 Angular 的区别？ <a class="header-anchor" href="#vue-与-angular-的区别" aria-label="Permalink to &quot;Vue 与 Angular 的区别？&quot;">​</a></h2><ul><li><code>Angular</code>采用<code>TypeScript</code>开发，而<code>Vue</code>可以使用<code>javascript</code>也可以使用<code>TypeScript</code></li><li><code>AngularJS</code>依赖对数据做脏检查，所以<code>Watcher</code>越多越慢；<code>Vue.js</code>使用基于依赖追踪的观察并且使用异步队列更新，所有的数据都是独立触发的。</li><li><code>AngularJS</code>社区完善，<code>Vue</code>的学习成本较小</li></ul><h3 id="一、定位" tabindex="-1">一、定位 ： <a class="header-anchor" href="#一、定位" aria-label="Permalink to &quot;一、定位 ：&quot;">​</a></h3><p>虽然 <code>Vue.js</code> 被定义为 <code>MVC framework</code>，但其实 <code>Vue</code> 本身还是一个 <code>library</code>，加了一些其他的工具，可以被当成一个 <code>framework</code>，而 <code>Angular 2</code> 虽然还是一个 <code>framework</code>，但其实在设计之初，<code>Angular 2</code> 的团队站在了更高的角度，希望做一个 <code>platform</code>。</p><h3 id="二、文档" tabindex="-1">二、文档： <a class="header-anchor" href="#二、文档" aria-label="Permalink to &quot;二、文档：&quot;">​</a></h3><p>vue.js 的更加亲切，中文支持</p><h3 id="三、性能" tabindex="-1">三、性能： <a class="header-anchor" href="#三、性能" aria-label="Permalink to &quot;三、性能：&quot;">​</a></h3><p>angular 所有的数据和方法都是挂载在$scope 上。而 vue 的数据和方法都是挂载在 vue 上，只是数据挂载在 vue 的 data，方法挂载在 vue 的 methods 上，vue 的代码风格更加优雅，json 格式书写代码。Vue.js 有更好的性能，并且非常非常容易优化，因为它不使用脏检查。Angular，当 watcher 越来越多时会变得越来越慢，因为作用域内的每一次变化，所有 watcher 都要重新计算。</p><h3 id="其它区别" tabindex="-1">其它区别： <a class="header-anchor" href="#其它区别" aria-label="Permalink to &quot;其它区别：&quot;">​</a></h3><p>渲染性能：Vue&gt; react &gt;angular。</p><p>使用场景：</p><ul><li>Vue React 覆盖中小型，大型项目。</li><li>angular 一般用于大型（因为比较厚重）。</li></ul><h2 id="说一下-vue、react、angular-和-对于-vue-是一套渐进式框架的理解" tabindex="-1">说一下 Vue、React、Angular 和 对于 Vue 是一套渐进式框架的理解 <a class="header-anchor" href="#说一下-vue、react、angular-和-对于-vue-是一套渐进式框架的理解" aria-label="Permalink to &quot;说一下 Vue、React、Angular 和 对于 Vue 是一套渐进式框架的理解&quot;">​</a></h2><p>渐进式代表的含义是：没有多做职责之外的事，vue.js 只提供了 vue-cli 生态中最核心的组件系统和双向数据绑定，就好像 vuex、vue-router 都属于围绕 vue.js 开发的库。</p><h3 id="使用-angular-必须接受以下东西" tabindex="-1">使用 Angular，必须接受以下东西： <a class="header-anchor" href="#使用-angular-必须接受以下东西" aria-label="Permalink to &quot;使用 Angular，必须接受以下东西：&quot;">​</a></h3><ul><li>1）必须使用它的模块机制。</li><li>2）必须使用它的依赖注入。</li><li>3）必须使用它的特殊形式定义组件（这一点每个视图框架都有，这是难以避免的）</li></ul><p>所以 Angular 是带有比较强的排它性的，如果你的应用不是从头开始，而是要不断考虑是否跟其他东西集成，这些主张会带来一些困扰。</p><h3 id="使用-react-你必须理解" tabindex="-1">使用 React，你必须理解： <a class="header-anchor" href="#使用-react-你必须理解" aria-label="Permalink to &quot;使用 React，你必须理解：&quot;">​</a></h3><ul><li>1）函数式编程的理念。</li><li>2）需要知道它的副作用。</li><li>3）什么是纯函数。</li><li>4）如何隔离、避免副作用。</li><li>5）它的侵入性看似没有 Angular 那么强，主要因为它是属于软性侵入的。</li></ul><h3 id="vue-与-react、angular-的不同是-但它是渐进的" tabindex="-1">Vue 与 React、Angular 的不同是，但它是渐进的： <a class="header-anchor" href="#vue-与-react、angular-的不同是-但它是渐进的" aria-label="Permalink to &quot;Vue 与 React、Angular 的不同是，但它是渐进的：&quot;">​</a></h3><ul><li>1）可以在原有的大系统的上面，把一两个组件改用它实现，就是当成 jQuery 来使用。</li><li>2）可以整个用它全家桶开发，当 Angular 来使用。</li><li>3）可以用它的视图，搭配你自己设计的整个下层使用。</li><li>4）可以在底层数据逻辑的地方用 OO 和设计模式的那套理念。</li><li>5）可以函数式，它只是个轻量视图而已，只做了最核心的东西。</li></ul><h2 id="说说-vue-react-angularjs-jquery-的区别" tabindex="-1">说说 Vue React angularjs jquery 的区别 <a class="header-anchor" href="#说说-vue-react-angularjs-jquery-的区别" aria-label="Permalink to &quot;说说 Vue React angularjs jquery 的区别&quot;">​</a></h2><p>参考回答：</p><p>JQuery 与另外几者最大的区别是，JQuery 是事件驱动，其他两者是数据驱动。</p><p>JQuery 业务逻辑和 UI 更改该混在一起， UI 里面还参杂这交互逻辑，让本来混乱的逻辑更加混乱。</p><p>Angular，Vue 是双向绑定，而 React 不是</p><p>其他还有设计理念上的区别等。</p><h2 id="说一下-vue-和-jquey-的区别" tabindex="-1">说一下 vue 和 jquey 的区别 <a class="header-anchor" href="#说一下-vue-和-jquey-的区别" aria-label="Permalink to &quot;说一下 vue 和 jquey 的区别&quot;">​</a></h2><p>jquery 主要是玩 dom 操作的“神器“，强大的选择器，封装了好多好用的 dom 操作方法和如何获取 ajax 方法 例如：<code>$.ajax()</code>非常好用</p><p>vue：主要用于数据驱动和组件化，很少操作 dom，当然 vue 可能通过 ref 来选择一个 dom 或组件</p><h2 id="vue-为什么没有类似于-react-中-shouldcomponentupdate-的生命周期" tabindex="-1">Vue 为什么没有类似于 React 中 shouldComponentUpdate 的生命周期 <a class="header-anchor" href="#vue-为什么没有类似于-react-中-shouldcomponentupdate-的生命周期" aria-label="Permalink to &quot;Vue 为什么没有类似于 React 中 shouldComponentUpdate 的生命周期&quot;">​</a></h2><p>考点: <code>Vue</code>的变化侦测原理</p><p>前置知识：依赖收集、虚拟<code>DOM</code>、响应式系统</p><blockquote><p>根本原因是<code>Vue</code>与<code>React</code>的变化侦测方式有所不同</p></blockquote><p>当 React 知道发生变化后，会使用<code>Virtual Dom Diff</code>进行差异检测，但是很多组件实际上是肯定不会发生变化的，这个时候需要 <code>shouldComponentUpdate</code> 进行手动操作来减少<code>diff</code>，从而提高程序整体的性能</p><ul><li><em>React</em> 是 pull 的方式侦测变化，当 <em>React</em> 知道发生变化后，会使用 <code>Virtual Dom Diff</code> 进行差异检测,但是很多组件实际上是肯定不会发生变化的，这个时候需要用 <code>shouldComponentUpdate</code> 进行手动操作来减少 <code>diff</code>，从而提高程序整体的性能。</li></ul><p><code>Vue</code>在一开始就知道那个组件发生了变化，不需要手动控制<code>diff</code>，而组件内部采用的<code>diff</code>方式实际上是可以引入类似于<code>shouldComponentUpdate</code>相关生命周期的，但是通常合理大小的组件不会有过量的 <code>diff</code>，手动优化的价值有限，因此目前<code>Vue</code>并没有考虑引入<code>shouldComponentUpdate</code>这种手动优化的生命周期</p><ul><li><code>Vue</code> 是 <code>pull+push</code> 的方式侦测变化的，在一开始就知道那个组件发生了变化，因此在 <code>push</code>_的阶段并不需要手动控制 <code>diff</code>，而组件内部采用的 <code>diff</code> 方式实际上是可以引入类似于 <code>shouldComponentUpdate</code> 相关生命周期的，但是通常合理大小的组件不会有过量的 <code>diff</code>，手动优化的价值有限，因此目前 <code>Vue</code> 并没有考虑引入 <code>shouldComponentUpdate</code> 这种手动优化的生命周期。</li></ul><h1 id="十四、vite-面试题" tabindex="-1">十四、Vite 面试题 <a class="header-anchor" href="#十四、vite-面试题" aria-label="Permalink to &quot;十四、Vite 面试题&quot;">​</a></h1><h2 id="什么是-vite" tabindex="-1">什么是 Vite <a class="header-anchor" href="#什么是-vite" aria-label="Permalink to &quot;什么是 Vite&quot;">​</a></h2><p><strong>Vite</strong> 是一个由 Vue.js 的创作者尤雨溪开发的现代前端构建工具。是新一代的前端构建工具。</p><p>它的法语意思是“快速的”，发音类似于“veet”。Vite 的设计目标是提供一个更快速、更轻量的开发体验。它主要有以下特点：</p><ol><li><strong>快速的冷启动</strong>：不需要打包操作，可以迅速启动开发环境。</li><li><strong>按需编译</strong>：只有当请求时才编译模块，大大加快了重载和热更新的速度。</li><li><strong>丰富的内建功能</strong>：例如模块热更新（HMR）。</li><li><strong>生产环境优化</strong>：使用 Rollup 打包代码，预配置输出高度优化的静态资源。</li></ol><p>Vite 利用浏览器原生 ES 模块导入来实现快速的开发环境启动。在开发环境下，它允许浏览器直接解析 <code>import</code>，从而跳过打包步骤。对于生产环境，Vite 则使用 Rollup 进行高效的打包和优化。</p><p>Vite 的插件 API 和 JavaScript API 提供了高度的可扩展性，并且具有完整的类型支持。这使得 Vite 不仅适用于 Vue 应用程序，也可以用于 React、Preact、Svelte 等其他框架的开发。</p><p>Vite 的出现是前端工具链发展的一个新方向，它的设计理念和特性使得开发者能够享受到更快速、更流畅的开发体验。</p><h2 id="vite-核心原理" tabindex="-1">Vite 核心原理 <a class="header-anchor" href="#vite-核心原理" aria-label="Permalink to &quot;Vite 核心原理&quot;">​</a></h2><ul><li><code>Vite</code>其核心原理是利用浏览器现在已经支持<code>ES6</code>的<code>import</code>，碰见<code>import</code>就会发送一个<code>HTTP</code>请求去加载文件。</li><li><code>Vite</code>启动一个 <code>koa</code> 服务器拦截这些请求，并在后端进行相应的处理将项目中使用的文件通过简单的分解与整合，然后再以<code>ESM</code>格式返回给浏览器。</li><li><code>Vite</code>整个过程中没有对文件进行打包编译，做到了真正的按需加载，所以其运行速度比原始的<code>webpack</code>开发编译速度快出许多！</li></ul><p>它具有以下特点：</p><ul><li><strong>快速的冷启动</strong>：采用<code>No Bundle</code>和<code>esbuild</code>预构建，速度远快于<code>Webpack</code></li><li><strong>高效的热更新</strong>：基于<code>ESM</code>实现，同时利用<code>HTTP</code>头来加速整个页面的重新加载，增加缓存策略：源码模块使用协商缓存，依赖模块使用强缓；因此一旦被缓存它们将不需要再次请求。</li><li><strong>基于 <code>Rollup</code> 打包</strong>：生产环境下由于<code>esbuild</code>对<code>css</code>和<code>代码分割</code>并使用<code>Rollup</code>进行打包；</li></ul><h2 id="基于-esm-的-dev-server" tabindex="-1">基于 ESM 的 Dev server <a class="header-anchor" href="#基于-esm-的-dev-server" aria-label="Permalink to &quot;基于 ESM 的 Dev server&quot;">​</a></h2><ul><li><p>在<code>Vite</code>出来之前，传统的打包工具如<code>Webpack</code>是先解析依赖、打包构建再启动开发服务器，<code>Dev Server</code> 必须等待所有模块构建完成后才能启动，当我们修改了 <code>bundle</code>模块中的一个子模块， 整个 <code>bundle</code> 文件都会重新打包然后输出。项目应用越大，启动时间越长。</p></li><li><p>而<code>Vite</code>利用浏览器对<code>ESM</code>的支持，当 <code>import</code> 模块时，浏览器就会下载被导入的模块。先启动开发服务器，当代码执行到模块加载时再请求对应模块的文件，本质上实现了动态加载。</p></li></ul><h2 id="vite基于-esm-的-hmr-热更新" tabindex="-1">Vite基于 ESM 的 HMR 热更新 <a class="header-anchor" href="#vite基于-esm-的-hmr-热更新" aria-label="Permalink to &quot;Vite基于 ESM 的 HMR 热更新&quot;">​</a></h2><p>所有的 <code>HMR</code> 原理：</p><p>目前所有的打包工具实现热更新的思路都大同小异：主要是通过<code>WebSocket</code>创建浏览器和服务器的通信监听文件的改变，当文件被修改时，服务端发送消息通知客户端修改相应的代码，客户端对应不同的文件进行不同的操作的更新。</p><p><code>Vite</code> 的表现：</p><ul><li><p><code>Vite</code> 监听文件系统的变更，只用对发生变更的模块重新加载，这样<code>HMR</code> 更新速度就不会因为应用体积的增加而变慢</p></li><li><p>而 <code>Webpack</code> 还要经历一次打包构建。</p></li><li><p>所以 <code>HMR</code> 场景下，<code>Vite</code> 表现也要好于 <code>Webpack</code>。</p></li></ul><h2 id="vite基于-esbuild-的依赖预编译优化" tabindex="-1">Vite基于 Esbuild 的依赖预编译优化 <a class="header-anchor" href="#vite基于-esbuild-的依赖预编译优化" aria-label="Permalink to &quot;Vite基于 Esbuild 的依赖预编译优化&quot;">​</a></h2><p><code>Vite</code>预编译之后，将文件缓存在<code>node_modules/.vite/</code>文件夹下</p><h5 id="为什么需要预编译-预构建" tabindex="-1">为什么需要预编译 &amp; 预构建 <a class="header-anchor" href="#为什么需要预编译-预构建" aria-label="Permalink to &quot;为什么需要预编译 &amp; 预构建&quot;">​</a></h5><ul><li><p>支持 <code>非ESM</code> 格式的依赖包：<code>Vite</code>是基于浏览器原生支持<code>ESM</code>的能力实现的，因此必须将<code>commonJs</code>的文件提前处理，转化成 <code>ESM</code> 模块并缓存入 <code>node_modules/.vite</code></p></li><li><p>减少模块和请求数量：Vite 将有许多内部模块的 ESM 依赖关系转换为单个模块，以提高后续页面加载性能。</p><ul><li>如果不使用<code>esbuild</code>进行预构建，浏览器每检测到一个<code>import</code>语句就会向服务器发送一个请求，如果一个三方包被分割成很多的文件，这样就会发送很多请求，会触发浏览器并发请求限制；</li></ul></li></ul><h2 id="为什么用-esbuild" tabindex="-1">为什么用 Esbuild <a class="header-anchor" href="#为什么用-esbuild" aria-label="Permalink to &quot;为什么用 Esbuild&quot;">​</a></h2><p><code>Esbuild</code> 打包速度很快，比类似的工具快<code>10</code>~<code>100</code>倍，</p><h2 id="esbuild-为什么这么快" tabindex="-1">Esbuild 为什么这么快 <a class="header-anchor" href="#esbuild-为什么这么快" aria-label="Permalink to &quot;Esbuild 为什么这么快&quot;">​</a></h2><ul><li><p><code>Esbuild</code> 使用 <code>Go</code> 语言编写，可以直接被转化为机器语言，在启动时直接执行；</p></li><li><p>而其余大多数的打包工具基于 <code>JS</code> 实现，是解释型语言，需要边运行边解释；</p></li><li><p><code>JS</code> 本质上是单线程语言，<code>GO</code>语言天生具有多线程的优势，充分利用 <code>CPU</code> 资源；</p></li></ul>`,817);function Y(X,Z,ss,ns,as,ls){return r(),o("div",null,[Q,s("p",null,[n("使用 vue 开发时，在 vue 初始化之前，由于 div 是不归 vue 管的，所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于 "),s("code",null,t(),1),n(" 的字样，虽然一般情况下这个时间很短暂，但是还是有必要让解决这个问题的。")]),K])}const os=e(J,[["render",Y]]);export{es as __pageData,os as default};
