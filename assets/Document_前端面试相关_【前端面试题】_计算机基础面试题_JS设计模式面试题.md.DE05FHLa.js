import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.DVTrgelf.js";const p="/FrontEndInterviewQuestion/assets/c708723f8b984c1c9ceaf24d674306b3tplv-k3u1fbpfcp-jj-mark3024000q75.DbPHZp0P.webp",u=JSON.parse('{"title":"JS 设计模式面试题","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端面试相关/【前端面试题】/计算机基础面试题/JS设计模式面试题.md","filePath":"Document/前端面试相关/【前端面试题】/计算机基础面试题/JS设计模式面试题.md","lastUpdated":1716655893000}'),e={name:"Document/前端面试相关/【前端面试题】/计算机基础面试题/JS设计模式面试题.md"},o=l(`<h1 id="js-设计模式面试题" tabindex="-1">JS 设计模式面试题 <a class="header-anchor" href="#js-设计模式面试题" aria-label="Permalink to &quot;JS 设计模式面试题&quot;">​</a></h1><p>学习书籍：《JavaScript设计模式与开发实践》：<a href="https://www.ituring.com.cn/book/1632" target="_blank" rel="noreferrer">JavaScript设计模式与开发实践 (ituring.com.cn)</a></p><p>文章：<a href="https://juejin.cn/post/6844903751870840839" target="_blank" rel="noreferrer">《JavaScript设计模式与开发实践》最全知识点汇总大全 - 掘金 (juejin.cn)</a></p><ul><li><a href="https://blog.csdn.net/chenzoff/article/details/127672963" target="_blank" rel="noreferrer">JavaScript 中常见的十五种设计模式_javascript 设计模式_chenzoff 的博客-CSDN 博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/465206177" target="_blank" rel="noreferrer">八大最常用的 JavaScript 设计模式 - 知乎 (zhihu.com)</a></li></ul><h2 id="js-设计模式介绍和知识点" tabindex="-1">JS 设计模式介绍和知识点 <a class="header-anchor" href="#js-设计模式介绍和知识点" aria-label="Permalink to &quot;JS 设计模式介绍和知识点&quot;">​</a></h2><p>设计模式是软件开发人员在软件开发过程中面临的一些具有代表性问题的解决方案。</p><p>JavaScript 设计模式是一套经典的解决方案，用于处理常见的软件设计问题。</p><p>设计模式总的来说是一个抽象的概念，前⼈通过无数次的实践总结出的一套写代码的方式，通过这种方式写的代码可以让别⼈更加容易阅读、维护以及复用。</p><p>在 JavaScript 中，这些模式可以帮助您编写更清晰、更易维护的代码。</p><ul><li>工厂模式及自定义事件</li><li>抽离英雄基类</li><li>设计原则</li><li>单例模式使用</li><li>建造者模式</li><li>装饰者模式使用</li><li>代理模式</li><li>观察者模式/发布订阅模式</li><li>适配器模式...</li></ul><h3 id="学习目标" tabindex="-1">学习目标 <a class="header-anchor" href="#学习目标" aria-label="Permalink to &quot;学习目标&quot;">​</a></h3><ul><li>学会各种设计模式的使用</li><li>学会面向对象中抽象使用</li><li>理解类中的继承</li><li>oop 思想规划项目</li></ul><p><strong>设计模式学习网站</strong>：<a href="https://refactoring.guru/" target="_blank" rel="noreferrer">https://refactoring.guru/</a></p><h2 id="从函数到对象" tabindex="-1">从函数到对象 <a class="header-anchor" href="#从函数到对象" aria-label="Permalink to &quot;从函数到对象&quot;">​</a></h2><p>本节课围绕实现一个验证用户输入的用户名、邮箱、密码的功能，从函数逐渐到对象，使用了多种不同方式去实现，并总结了各种方式的特点。</p><ul><li>01：函数式编程实现 <ul><li>缺点：全局函数污染全局变量空间（函数也是变量）</li></ul></li><li>02：用对象字面量给对象添加方法 <ul><li>对象式定义</li><li>点语法调用</li><li>缺点：无法复用和继承（即无法用new关键字复制出一个相同的对象）</li></ul></li><li>03：使用点语法来给对象添加方法 <ul><li>同上，只不过定义时使用函数，添加方法时使用对象语法；</li></ul></li><li>04：用函数方法返回包装对象 <ul><li>调用方法：先利用函数返回一个对象，再调用该对象的方法</li><li>缺点：返回的对象与定义的对象没有关联【无法同步】</li></ul></li><li>05：使用类的方式：构造函数（使用this赋值） <ul><li>使用 this定义成员方法；</li><li>使用 new 创建新对象</li><li>缺点：每次实例化都会对this上的属性进行复制，消耗大</li></ul></li><li>06：使用类的方式：构造函数（使用原型赋值） <ul><li>使用原型赋值，避免类的共用属性和方法被重复实例化赋值，减少性能开销</li><li>缺点：每一个方法都要写一次prototype,太多重复</li></ul></li><li>07：使用类的方式：构造函数（使用原型对象赋值） <ul><li>不用每个方法都写prototype,只需要写一次，以原型对象的方式一次性赋值；</li><li>缺点：会重写类的prototype属性，导致 constructor 属性丢失</li></ul></li><li>08：使用类的方式：构造函数（使用原型对象赋值）--实现链式调用 <ul><li>每个方法都返回 this （即实例对象自身）来实现链式调用</li></ul></li></ul><h2 id="面向对象编程基础" tabindex="-1">面向对象编程基础 <a class="header-anchor" href="#面向对象编程基础" aria-label="Permalink to &quot;面向对象编程基础&quot;">​</a></h2><ul><li>01：类的属性与方法封装 <ul><li>私有属性：在类内部使用 var 关键字定义，外界访问不到</li><li>私有方法：在类内部定义的 function ，外界访问不到</li><li>对象公有属性：通过 this 关键字创建的属性，外界可以通过点语法访问到；</li><li>对象公有方法：通过 this 关键字创建的方法，外界可以通过点语法访问到；</li><li>特权方法： 通过 this 关键字创建的方法，并且以set和get为前缀的方法，方法可以访问私有属性，外界可通过它获得或修改私有属性；</li><li>构造器：在初始化实例时利用特权方法为一些私有属性进行初始赋值；</li><li>类的静态共有属性：在类外部通过点语法定义的属性，新创建的对象中无法获取它，可以通过类的点语法获取</li><li>类的静态共有方法：在类外部通过点语法定义的方法，新创建的对象中无法获取它，可以获得类的点语法获取</li><li>公有属性：通过prototype对象添加的属性，所有实例都可以通过原型链访问，并且拿到相同的值</li><li>公有方法：通过prototype对象添加的方法，所有实例都可以通过原型链访问，并且只有一份，不会重复创建。</li></ul></li><li>02：利用闭包实现类的静态变量 <ul><li>利用闭包添加类的静态私有属性和静态私有方法</li><li>缺点：在闭包外部利用原型添加静态公有属性和方法，从形式上看似脱离了闭包这个类</li></ul></li><li>03：在闭包内部实现一个完整的类 <ul><li>这样实现，类的定义和与原型添加静态公有属性和方法都在同一个闭包内，更像一个整体</li></ul></li><li>04：创建对象的安全模式 <ul><li>利用 instanceof 方法类判断是否使用 new 关键字</li><li>可以保证忘记写 new 的时候也能正常实例化对象</li></ul></li><li>05：类式继承 <ul><li>将父类的实例赋值给子类的原型</li><li>如果父类中的共有属性是引用类型，则子类的一个实例更改该继承过来的共有属性，就会直接影响到其他子类实例</li><li>实例化父类时无法对父类构造函数进行初始化</li></ul></li><li>06：构造函数继承 <ul><li>利用call来更改子类执行环境为父类，利用绑定的this，子类继承了父类的共有属性。</li><li>使用此种方法，继承没有涉及子类的原型，所以父类的原型方法自然不会被子类继承。</li><li>如果想被子类继承就必须要放在构造函数中</li><li>每个实例都会单独拥有一份，不能共有，违背了代码复用原则。</li></ul></li><li>07：组合继承 <ul><li>综合两种继承方式的优点，过滤掉缺点</li><li>缺点：父类构造函数执行了两遍</li></ul></li><li>08：原型继承 <ul><li>利用过渡对象的原型继承其他对象来生成新的对象</li><li>缺点：由于是类式继承的封装，父类对象中的值类型属性被复制，引用类型的属性被共用</li></ul></li><li>09：寄生式继承 <ul><li>利用原型继承方法，new 一个新对象</li><li>对新对象进行拓展，可以为新对象添加自己私有的方法和属性</li><li>返回新对象</li><li>由于是对原型继承的二次封装，所以具有一样的缺点</li></ul></li><li>10：寄生组合式继承 <ul><li>是寄生继承与构造函数继承的组合方式</li><li>在构造函数继承中调用父类的构造函数</li><li>在寄生方法中将父类原型的一个副本赋值给子类的原型，并且修正因为重写子类原型而导致子类的constractor属性被修改的问题</li><li>缺点：子类再想添加原型方法必须通过 prototype 对象的点语法形式添加</li></ul></li><li>11：单继承 <ul><li>利用 for...in 将源对象属性复制到目标对象上</li><li>这种方法只能进行浅复制</li></ul></li><li>12：多继承 <ul><li>利用函数的 arguments 对象 和 for循环，进行多个对象的继承（属性复制）</li><li>将该方法绑定到对象原型上,这样所有对象就可以直接拥有此方法</li></ul></li><li>13：多态 <ul><li>多态，就是同一个方法多种调用方式</li><li>也是通过判断 arguments对象的长度，不同长度执行不同方法来实现</li></ul></li></ul><h2 id="设计模式分类" tabindex="-1">设计模式分类 <a class="header-anchor" href="#设计模式分类" aria-label="Permalink to &quot;设计模式分类&quot;">​</a></h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/128145128" target="_blank" rel="noreferrer">快速记忆23种设计模式 - 知乎 (zhihu.com)</a></p><p>设计模式是在软件设计中为解决特定问题而提出的一套经过验证的通用解决方案。这些模式有助于在设计阶段采用经验丰富的最佳实践，提高代码的可维护性、可扩展性和重用性。下面详细介绍几种常见的设计模式分类及其具体模式。</p><p>总体来说设计模式分为三大类：</p><ol><li><strong>创建型模式</strong>，共五种：<strong>工厂方法模式</strong>、抽象工厂模式、<strong>单例模式</strong>、建造者模式、<strong>原型模式</strong>。</li><li><strong>结构型模式</strong>，共七种：<strong>适配器模式</strong>、<strong>装饰器模式</strong>、<strong>代理模式</strong>、外观模式、桥接模式、组合模式、享元模式。</li><li><strong>行为型模式</strong>，共十一种：策略模式、模板方法模式、<strong>观察者模式/发布订阅模式</strong>、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li></ol><h3 id="_1、创建型模式-creational-patterns" tabindex="-1">1、创建型模式（Creational Patterns） <a class="header-anchor" href="#_1、创建型模式-creational-patterns" aria-label="Permalink to &quot;1、创建型模式（Creational Patterns）&quot;">​</a></h3><ul><li><p>01-01：无工厂模式</p><ul><li>通过类实例化对象</li><li>多个相似的对象需要多个相似的类</li></ul></li><li><p>01-02：基类工厂</p><ul><li>写多个基类</li><li>但是用一个统一的公厂类进行封装，对参数进行swich判断，来返回不同的类实例</li><li>调用者只需要记住工厂类，而不必记住其它所有类</li><li>如果再有新的类型需求，还需要增加基类，修改工厂类</li></ul></li><li><p>01-03：简单工厂</p><ul><li>不用再写多个基类</li><li>只有一个工厂类</li><li>多个不同对象的相似属性和行为抽象为工厂类的属性和方法</li><li>多个不同对象的不同属性和行为使用分支判断类进行分别处理</li><li>它的使用场合通常限制在创建单一对象</li></ul></li><li><p><strong>单例模式</strong>（Singleton）：确保一个类只有一个实例，并提供一个全局访问点。</p><ul><li>只允许实例化1次的对象类</li><li>单例模式常被用来定义命名空间</li><li>单例模式的另一个作用是进行代码库的模块管理</li><li>单例模式的第三个作用：管理静态变量</li><li>单例的可以延迟创建</li><li>经常用于管理共享资源，如数据库连接池或配置管理器。例如，一个应用程序中只应该有一个数据库连接池实例，以确保连接管理的一致性。</li><li>在应用程序中，配置管理器通常只需要一个实例，以确保整个应用程序中使用的配置信息是一致的。</li></ul></li><li><p><strong>工厂模式</strong>（Factory Method）：定义一个用于创建对象的接口，让子类决定实例化哪个类。</p><ul><li>用于创建对象，当对象需要进行预处理或配置时，这个模式特别有用。例如，一个应用程序可能需要根据不同的服务提供商创建不同的支付处理对象。</li><li>在创建日志记录器时，可能需要根据不同的环境（如开发环境、测试环境、生产环境）来创建不同类型的日志记录器实例。</li><li>01：工厂方法模式前传1———— 类实例化方式</li><li>02： 工厂方法模式前传2———— 基类工厂模式</li><li>03： 工厂方法模式 <ul><li>将实际创建对象的工作推迟到子类当中</li><li>核心类是抽象类</li><li>采用安全模式类</li><li>将创建对象的基类放在工厂方法类的原型中</li></ul></li></ul></li><li><p><strong>抽象工厂模式</strong>（Abstract Factory）：提供一个接口以创建相关或依赖对象的家族，而不需要明确指定具体类。</p><ul><li>抽象类</li><li>可以声明但不能使用的类</li><li>用来定义一个产品簇，声明一些必备方法，如果子类中没有重写就会抛出错误</li><li>通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例</li><li>使用抽象工厂来为抽象的父类创建子类</li><li>在抽象工厂中让子类继承父类的一个实例（缓存类的实例），以此获得父类的对象属性</li><li>由于抽象工厂中的父类是抽象类，而抽象工厂方法不需要实例化，所以抽象工厂添加抽象类直接采用点语法来添加</li></ul></li><li><p><strong>建造者模式</strong>（Builder）：将一个复杂对象的构建与其表示分离，使得同样的构建过程可以创建不同的表示。</p><ul><li>将一个复杂对象的构件层与其表示层相互分离，同样的构建过程可采用不同的表示</li><li>建造者模式与工厂模式的区别： <ul><li>工厂模式关心的是创建的最终结果，即对象实例或者类簇，比如一个人</li><li>建造者模式关心的是创建的过程，更关注细节，比如这个人穿什么衣服，是男还是女，兴趣爱好是什么等</li></ul></li></ul></li><li><p><strong>原型模式</strong>（Prototype）：使用一个已创建的实例作为原型，通过复制这个原型来创建新的对象。</p><ul><li>构造函数继承基类 <ul><li>使用构造函数继承基类，然后重写基类方法的方式，实现多种子类继承同一父类却能创建不同种类对象的需求</li><li>问题：每次子类继承都会执行一遍父类构造函数，如果父类构造函数很耗资源，则无法接受</li></ul></li><li>原型继承 <ul><li>通过将耗资源的方法放入基类的原型来避免重复执行；</li><li>通过让子类的原型继承基类的实例，然后重写子类原型上继承自基类的方法来实现继承和子类的差异化实现</li><li>无论何时都能对基类活子类的原型进行拓展，所有实例都将自动获得这些新拓展的方法。</li></ul></li></ul></li></ul><h3 id="_2、结构型模式-structural-patterns" tabindex="-1">2、结构型模式（Structural Patterns） <a class="header-anchor" href="#_2、结构型模式-structural-patterns" aria-label="Permalink to &quot;2、结构型模式（Structural Patterns）&quot;">​</a></h3><ul><li><p><strong>适配器模式</strong>（Adapter）：允许将一个类的接口转换成客户期望的另一个接口。</p><ul><li>适配器模式是将一个类（对象）的接口（方法或属性）转换成另外一个接口，以满足用户需求，解决接口不兼容问题</li><li>用法一：组件库接口适配</li><li>用法二： 参数适配</li><li>用法三： 数据适配</li><li>当系统需要与第三方库或旧系统集成时，适配器模式可以用来解决接口不兼容的问题。</li></ul></li><li><p><strong>装饰器模式</strong>（Decorator）：动态地给对象添加额外的职责。</p><ul><li>在不改变原对象的基础上，通过对其进行包装拓展（添加属性或者方法）使原有对象可以满足用户更复杂的需求、</li><li>通过缓存对象原有的方法和属性，然后在装饰者方法中调用原有属性和方法和新增的方法和属性来实现功能拓展</li><li>与适配器模式的不同：适配器需要了解原有方法的细节，而装饰器则不关心原有方法的实现细节。</li><li>用于动态地给对象添加功能。例如，一个流处理库可能允许你动态地添加加密或压缩等功能。</li><li>在图形用户界面库中，可以动态地给组件添加新的行为，如滚动条、边框装饰等。</li></ul></li><li><p><strong>代理模式</strong>（Proxy）：为其他对象提供一种代理以控制对这个对象的访问。</p><ul><li>由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介的作用。</li><li>常用于控制对对象的访问，可以用于懒加载、权限控制或日志记录。例如，一个远程对象代理可能会处理网络通信的细节，使得客户端代码可以像访问本地对象一样访问远程对象。</li><li>在实现网络请求时，可以使用代理模式来添加缓存机制，从而提高数据加载的效率。</li></ul></li><li><p><strong>外观模式</strong>（Facade）：提供一个统一的接口，用来访问子系统中的一群接口。</p><ul><li>为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更容易。</li><li>常见的应用为封装一个统一接口来实现不同浏览器的相同功能的兼容。</li><li>外观模式的另一个作用：小型代码库中用来封装多个功能，简化底层操作方法</li></ul></li><li><p><strong>桥接模式</strong>（Bridge）：将抽象部分与实现部分分离，使它们可以独立变化。</p><ul><li>在系统沿着多个维度变化的同时，又不增加其复杂度并已达到解耦。</li><li>主要特点是将实现层与抽象层解耦分离，使两部分可以独立变化</li><li>有时会增加开发成本和性能开销</li></ul></li><li><p><strong>组合模式</strong>（Composite Pattern）：将对象组合成树形结构以表示“部分-整体”的层次结构：组合模式允许将对象组合成树形结构，以表示部分-整体的层次结构。它使客户端可以统一处理单个对象和组合对象，而无需区分它们之间的差异。这对于处理树状结构的数据非常有用，例如文件系统中的文件和文件夹。</p><ul><li>又称部分-整体模式，将对象组合成树形结构以表示“部分-整体”的层次结构。</li><li>组合模式使得用户对单个对象和组合对象的使用具有一致性。</li><li>接口要统一，可以通过继承同一个虚拟类来实现。</li></ul></li><li><p><strong>享元模式</strong>（Flyweight Pattern）：运用共享技术有效地支持大量细粒度的对象：享元模式旨在减少对象的内存占用，通过共享相似对象之间的公共状态来实现，来减少内存消耗和提高代码的执行效率。在JavaScript中，它适用于需要大量相似对象的情况，例如文本编辑器中的字符或游戏中的角色。</p><ul><li>运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余开销</li><li>享元模式将数据和方法分成内部数据、内部方法和外部数据、外部方法。</li><li>内部方法与内部数据指相似或共有的数据和方法，将这一部分提取出来可以减少开销，提高性能</li></ul></li></ul><h3 id="_3、行为型模式-behavioral-patterns" tabindex="-1">3、行为型模式（Behavioral Patterns） <a class="header-anchor" href="#_3、行为型模式-behavioral-patterns" aria-label="Permalink to &quot;3、行为型模式（Behavioral Patterns）&quot;">​</a></h3><p>行为型模式主要关注对象之间的通信和协作。以下是每个模式的简要说明：</p><ul><li><p><strong>观察者模式</strong>（Observer）：对象间的一种一对多的依赖关系，当一个对象改变状态时，所有依赖于它的对象都会得到通知。</p><ul><li>又称发布-订阅者模式或消息机制</li><li>用于实现发布/订阅系统，允许对象在状态变化时通知多个观察者。例如，一个事件管理系统可能会在事件发生时通知所有注册的监听器。</li><li>是通过被观察者直接通知观察者来实现通信。</li><li>在社交网络应用中，当用户发布新动态时，系统需要通知所有关注该用户的其他用户。</li><li>识别、实施和改进系统中不同对象之间的通信。</li><li><strong>发布订阅模式</strong>（Publish-Subscribe Pattern）：发布者（Publisher）不直接通知订阅者（Subscriber），而是通过消息队列或代理（Broker）来实现通信。</li><li>通过消息队列或事件总线等中介来实现发布者和订阅者之间的通信</li><li>它定义了一种依赖关系，解决了主体对象与观察者</li><li>包含两个基本方法：接收消息、向订阅者发布消息</li><li>还需要取消注册方法、消息容器。</li><li>接收消息（即消息注册）作用是将订阅者注册的消息推入消息容器，接收两个参数:消息类型和处理动作</li><li>发布消息作用是当观察者发布一个消息时将所有订阅者订阅的消息一次执行，接收两个参数：消息类型及行为参数</li></ul></li><li><p><strong>迭代器模式</strong>（Iterator）：提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。</p><ul><li>在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素</li></ul></li><li><p><strong>策略模式</strong>（Strategy）：定义一系列算法，把它们一个个封装起来，并且使它们可相互替换。</p><ul><li>将定义的一组算法封装起来，使其相互之间可以替换</li><li>封装的算法具有一定的独立性，不会随客户端变化而变化</li><li>结构上与状态模式很像，在内部封装一个对象，通过返回的接口对象实现对内部对象的调用，但不需要管理状态</li><li>典型应用场景：表单验证</li><li>允许在运行时选择算法或行为。例如，在一个电子商务应用中，可以根据不同的用户或购物车的内容选择不同的折扣策略。</li><li>在电子商务网站中，可以根据不同的促销策略（如打折、满减、返现）来动态选择计算订单总价的算法。</li></ul></li><li><p><strong>模板方法模式</strong>（Template Method）：在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。</p><ul><li><p>在父类中定义一个算法的骨架，允许子类在不改变算法结构的情况下重写算法的特定步骤。</p></li><li><p>虽然模板方法模式通常被归类为行为型模式，但它也可以被视为一种特殊的分类，因为它关注的是算法的骨架和步骤。</p><p><strong>模板方法模式</strong> 是一种行为设计模式，它定义了一个算法的框架，允许子类在不改变算法结构的前提下，重新定义算法的某些步骤。</p><p>模板方法模式适用于有固定算法步骤但步骤实现需要变化的情况。</p><p>模板方法模式通常涉及以下两个主要组件：</p><ol><li><strong>抽象类 (Abstract Class)</strong>：定义算法的骨架和执行算法的模板方法。它可以包含一些基本操作的实现。</li><li><strong>具体类 (Concrete Classes)</strong>：继承自抽象类，并重写其中的某些步骤，提供这些步骤的具体实现。</li></ol></li></ul></li><li><p><strong>职责链模式</strong>（Chain of Responsibility）：将请求的发送者和接收者解耦，使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。</p><ul><li>解决请求的发送者与请求的接受者之间的耦合，通过职责链上的多个对象分解请求流程，实现请求在多个对象之间的传递，直到最后一个对象完成请求的处理。</li><li>把每件事独立出一个模块对象去处理，完整的需求被分解成相互独立的模块需求</li><li>方便进行单元测试，保证每个组件对象的处理逻辑的安全性</li></ul></li><li><p><strong>命令模式</strong>（Command）：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化。</p><ul><li>将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化</li><li>将创建模块的逻辑封装在一个对象里，这个对象提供一个参数化的请求接口，通过调用这个接口并传递一些参数实现调用命令对象内部的一些方法。</li><li>在实现撤销/重做功能时，命令模式可以将操作封装成对象，方便管理操作的历史记录。</li></ul></li><li><p><strong>备忘录模式</strong>（Memento）：在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</p><ul><li>在不破坏对象封装性的前提下，在对象之外捕获并保存该对象内部的状态以便日后对象使用或者对象恢复到以前的某个状态</li><li>主要任务是对现有数据或状态做缓存，这些数据或缓存将在可预期的将来再次用到</li><li>备忘录对象是对数据缓存器的一次保护性封装，防止外界访问</li><li>当数据量过大时会严重占用系统资源</li><li>允许保存和恢复对象先前状态的能力，而不暴露其实现细节</li></ul></li><li><p><strong>状态模式</strong>（State）：允许一个对象在其内部状态改变时改变它的行为，看起来好像改变了它的类。</p><ul><li>当一个对象的内部状态发生改变时，会导致其行为的改变。</li><li>对于分支条件内部独立结果的管理，可以使用状态模式</li><li>每一种条件作为对象内部的一种状态，面对不同判断结果，它其实就是选择对象内的一种状态</li><li>对于状态模式，主要目的就是将条件判断的不同结果转化为对象内部的状态，既然是状态对象的内部状态，所以一般作为状态对象内部的私有变量，然后提供一个能够调用状态对象内部状态的接口方法对象。这样方便管理状态。</li><li>在游戏开发中，角色的状态（如站立、跑动、攻击）可以使用状态模式来管理，使得状态转换更加清晰。</li></ul></li><li><p><strong>访问者模式</strong>（Visitor）：允许添加新的操作到对象结构中的元素，而不改变这些元素的类，表示一个作用于某对象结构中的各元素的操作。</p><ul><li>针对于对象结构中的元素，定义在不改变该对象的前提下访问结构中元素的新方法</li><li>道call和apply的作用就是更改函数执行时的作用域，这正是访问者模式的精髓，通过这两种方法我们就可以让某个对象在其他作用域中运行</li><li>访问者模式解决数据与数据的操作方法之间的耦合，将数据的操作方法独立于数据，使其可以自由化演变。</li></ul></li><li><p><strong>中介者模式</strong>（Mediator）：通过引入一个中介者对象来简化多个对象之间的复杂通信和控制逻辑：用一个中介对象来封装一系列的对象交云。</p><ul><li>通过中介者对象封装一系列对象之间的交互，使对象之间不再相互引用，降低他们之间的耦合</li><li>主要是通过模块间或对象间的复杂通信，来解决模块间或对象间的耦合</li><li>中介者对象的本质是封装多个对象的交互，并且这些对象的交互一般都是在中介者内部实现的。</li><li>与观察者模式相比，观察者模式中的订阅者是双向的，而中介者模式中订阅是单向的。</li></ul></li><li><p><strong>解释器模式</strong>（Interpreter）：定义一种语言的文法，并建立一个解释器来解释该语言中的句子：给定一个语言，定义它的文法的一种表示，并定义一个解释器。</p><ul><li>对于一种语言，给出其文法形式，并定义一种解释器，通过使用这种解释器来解释语言中定义的句子</li></ul></li></ul><h3 id="_4、并发-线程池-模式-concurrency-design-patterns" tabindex="-1">4、并发(线程池)模式（Concurrency Design Patterns） <a class="header-anchor" href="#_4、并发-线程池-模式-concurrency-design-patterns" aria-label="Permalink to &quot;4、并发(线程池)模式（Concurrency Design Patterns）&quot;">​</a></h3><p><strong>并发型模式</strong>：指的是一组用于处理多线程程序中的并发问题的设计模式。这些模式帮助开发者编写出更安全、更高效、更易于管理的并发代码。并发型模式通常涉及到线程同步、状态管理、线程间通信等方面。一些常见的并发型模式包括：</p><ul><li><strong>半同步/半异步模式</strong>：结合同步和异步处理来提高性能和响应性，通常用于处理I/O操作。</li><li><strong>领导者/追随者模式</strong>：多个线程协作处理任务，一个领导者线程接收请求，然后分配给追随者线程处理。</li><li><strong>生产者/消费者模式</strong>：通过一个共享队列来平衡生产者和消费者之间的工作负载：通过一个共享队列来平衡生产者和消费者之间的工作负载，实现生产者和消费者的解耦。</li><li><strong>读写锁模式</strong>：允许多个读操作同时进行，但写操作是互斥的，以保证数据一致性。</li><li><strong>不变模式</strong>（Immutable Pattern）：确保对象一旦被创建，其内部状态就不会改变，从而无需考虑同步问题。</li><li><strong>Future模式</strong>：通过代理的方式进行异步调用，提前返回一个代理对象，真正的计算结果在将来某个时刻完成并返回。</li></ul><h4 id="_4-1、线程池模式" tabindex="-1">4.1、线程池模式 <a class="header-anchor" href="#_4-1、线程池模式" aria-label="Permalink to &quot;4.1、线程池模式&quot;">​</a></h4><p>线程池模式属于并发型模式。线程池模式主要用于管理并发的线程，以提高资源利用率、降低线程创建和销毁的开销，并优化线程之间的竞争。以下是一些线程池模式的常见分类：</p><p>HS/HA半同步/半异步模式：半同步/半异步模式将线程池中的线程分为两类，一部分用于处理同步任务，另一部分用于处理异步任务。这样可以同时满足同步和异步需求，提高系统的性能和响应性。</p><p>L/F领导者与跟随者模式：领导者/追随者模式中，一个线程作为领导者接收任务，然后将任务分配给其他追随者线程来执行。这种模式有助于实现任务的分工和协作，提高线程池的效率。</p><p>线程池模式通过合理地管理线程，使得多线程程序更加高效、可控和易于维护。</p><p><strong>线程池模式</strong>：是一种创建和管理线程的技术，它通过重用一组固定数量的线程来执行多个任务。线程池可以减少创建和销毁线程的开销，提高响应速度，并提供更好的线程管理。线程池模式通常包括以下几个关键组件：</p><ul><li><strong>工作队列</strong>：用于存放待处理的任务。</li><li><strong>工作者线程</strong>：线程池中的线程，负责执行工作队列中的任务。</li><li><strong>线程池管理器</strong>：负责管理线程池的创建、销毁和任务分配。</li></ul><p>这些模式在需要处理大量并发任务的应用程序中非常有用，例如Web服务器、数据库连接池和大型计算任务。</p><p>这些模式可以帮助您解决特定的编程问题，提高代码的可维护性和灵活性。</p><h3 id="_5、架构型模式-architectural-patterns" tabindex="-1">5、架构型模式（Architectural Patterns） <a class="header-anchor" href="#_5、架构型模式-architectural-patterns" aria-label="Permalink to &quot;5、架构型模式（Architectural Patterns）&quot;">​</a></h3><p>用于架构目的的设计模式，包括MVC（模型-视图-控制器）、MVP（模型-视图-表示器）和MVVM（模型-视图-视图模型）等。</p><ul><li>01 同步模块模式 <ul><li>请求发出后，无论模块是否存在，立即执行后续逻辑，实现模块开发中对模块的立即引用</li><li>可以解决多人协作开发时代码互相冲突导致开发进程阻塞的问题</li><li>实质是将所有模块按照层级关系绑定到一个单体对象上，使用时调用该单体对象来完成操作；</li><li>主要有两个方法，定义模块的define方法和引用模块的module方法</li><li>缺点：无法引用尚未加载完成的模块。</li></ul></li><li>02 异步模块模式 <ul><li>请求发出后，继续其他业务逻辑，知道模块加载完成后执行后续的逻辑，实现模块开发中对模块加载完成后的引用。</li><li>核心思路利用闭包返回模块，对未加载模块进行计数，直到未加载模块为0，然后执行回调</li><li>在异步加载脚本文件时，要设置 asycn = true;</li></ul></li><li>03 Widget模式 <ul><li>是指借用Web Widget思想将页面分解成部件，针对部件开发，最终组合成完整的页面</li><li>此模式多针对与页面视图的构造，它将页面分解为很多个组件（即模块），一个完整的组件包含该模块完整的视图和一套完整的功能；其实就是组件化技术。</li><li>模板引擎一般分四步：处理数据=&gt;获取模板=&gt;处理模板=&gt;编译执行；</li><li>对于模板内的js语法解析，主要是eval()与new Function()技术来实现</li></ul></li><li>04 MVC模式 <ul><li>即模型（model）-视图（view）-控制器（controller）</li><li>用一种将业务逻辑、数据、视图分离的方式组织架构代码，主要解决层次混乱问题</li></ul></li><li>05 MVP模式 <ul><li>即模型(Model)-视图(View)-管理器(Presenter)</li><li>View 层不直接引用Model层内的数据，而是通过Presenter层实现对Model层内的数据访问</li><li>所有层次的交互都发生在Presenter层中</li></ul></li><li>06 MVVM模式 <ul><li>即模型（Model）-视图（View）-视图模型（ViewModel）</li><li>为视图层量身定做一套视图模型，并在视图模型中创建属性和方法，为视图层绑定数据并实现交互</li><li>这样做以后 View层可以直接使用HTML来完成。</li></ul></li></ul><p>这些模式关注整个系统的结构和组织方式，而不仅仅是单个类或对象。架构模式用于解决系统级别的问题，例如分布式系统、微服务架构、事件驱动架构等。</p><p>架构模式是针对软件架构中常见问题的通用、可重用解决方案。它们类似于软件设计模式，但覆盖范围更广，涉及到软件工程中不同问题的解决。以下是一些常见的架构模式：</p><p><strong>分层模式</strong>（Layered Pattern）：将系统分解为多个层次，每层提供特定的服务1。客户端-服务器模式（Client-Server Pattern）：由服务提供者（服务器）和服务请求者（客户端）组成的模式。</p><p><strong>主从模式</strong>（Master-Slave Pattern）：一个主节点控制多个从节点，用于任务分配和结果汇总。</p><p><strong>管道-过滤器模式</strong>（Pipe-Filter Pattern）：数据通过一系列处理步骤（过滤器）流动，每个步骤处理一部分数据。</p><p><strong>代理模式</strong>（Broker Pattern）：组件通过代理进行通信，代理负责组件之间的消息传递和路由。</p><p><strong>点对点模式</strong>（Peer-to-Peer Pattern）：每个节点既是客户端又是服务器，可以直接与其他节点通信。</p><p><strong>事件-总线模式</strong>（Event-Bus Pattern）：组件通过事件总线进行通信，事件源发布消息，监听者订阅并响应消息。</p><p><strong>模型-视图-控制器模式</strong>（Model-View-Controller Pattern）：将应用程序分为三个主要部分，实现输入、处理和输出的分离。</p><p><strong>黑板模式</strong>（Blackboard Pattern）：用于没有确定解决方案策略的问题，组件通过共享的黑板进行通信。</p><p><strong>解释器模式</strong>（Interpreter Pattern）：用于设计解释专用语言编写的程序组件。</p><p>这些架构模式有助于解决特定的软件设计问题，提高系统的可维护性和可扩展性。</p><h3 id="_6、企业应用模式" tabindex="-1">6、企业应用模式 <a class="header-anchor" href="#_6、企业应用模式" aria-label="Permalink to &quot;6、企业应用模式&quot;">​</a></h3><p>这些模式专注于企业级应用程序的开发，涵盖了业务逻辑、数据持久性、事务管理等方面。一些常见的企业应用模式包括数据访问对象（DAO）、业务代表、服务定位器等。</p><p>企业应用模式是一系列解决方案，用于处理常见的企业软件开发问题。这些模式通常涉及到如何组织和管理代码以及数据，以便软件能够在企业环境中高效、可靠地运行。以下是一些常见的企业应用模式：</p><ol><li><p><strong>分层架构模式</strong> (Layered Architecture)：将应用程序分为多个层次，每个层次负责不同的任务，例如表示层、业务逻辑层和数据访问层。</p></li><li><p><strong>服务层模式</strong> (Service Layer)：定义一个应用程序的操作界面，通常是为了定义核心业务逻辑的操作而设计的。</p></li><li><p><strong>领域模型模式</strong> (Domain Model)：将复杂的业务逻辑建模为一组相互关联的对象。</p><ul><li><p>用于解决领域驱动设计（DDD）中的问题，帮助将业务需求和软件设计紧密结合。一些常见的领域驱动设计模式包括实体、值对象、聚合等。</p><p><strong>领域驱动设计 (DDD)</strong> 是一种软件设计方法论，它强调基于领域模型来设计软件系统，以确保软件能够精准地解决特定业务领域的问题。</p><p>DDD适用于复杂业务逻辑的建模。</p><p>DDD中的一些关键概念包括：</p><ol><li><strong>实体 (Entities)</strong>：具有唯一标识的对象，代表系统中的主要概念。</li><li><strong>值对象 (Value Objects)</strong>：描述系统中的某些特性，但没有唯一标识。</li><li><strong>聚合 (Aggregates)</strong>：一组相关对象的集合，通常由一个聚合根管理。</li><li><strong>服务 (Services)</strong>：在领域模型中执行特定任务的无状态操作。</li><li><strong>仓储 (Repositories)</strong>：提供对聚合根的检索和持久化的机制。</li><li><strong>工厂 (Factories)</strong>：负责创建复杂的对象和聚合。</li><li><strong>限界上下文 (Bounded Contexts)</strong>：明确界定领域模型的边界，确保模型的一致性。</li></ol></li></ul></li><li><p><strong>数据映射器模式</strong> (Data Mapper)：用于将对象模型表示法映射到基于SQL的关系模型表示法。</p></li><li><p><strong>活动记录模式</strong> (Active Record)：每个对象包含了对数据库的直接访问逻辑。</p></li><li><p><strong>数据传输对象模式</strong> (Data Transfer Object, DTO)：用于在不同的应用程序层次之间传输数据。</p></li><li><p><strong>工作单元模式</strong> (Unit of Work)：维护业务事务中涉及的对象列表和执行的操作。</p></li><li><p><strong>仓储模式</strong> (Repository)：为领域模型中的对象提供一个查找和存储的接口。</p></li></ol><p>这些模式可以帮助开发者创建更加模块化、可维护和可扩展的企业级应用程序。</p><h3 id="proto-patterns-原型模式-和-anti-patterns-反模式" tabindex="-1">Proto-patterns（原型模式）和 Anti-patterns（反模式） <a class="header-anchor" href="#proto-patterns-原型模式-和-anti-patterns-反模式" aria-label="Permalink to &quot;Proto-patterns（原型模式）和 Anti-patterns（反模式）&quot;">​</a></h3><p>这些是在设计模式被广泛接受之前的阶段。Proto-patterns 是被开发者社区认可并广泛使用的设计模式，而 Anti-patterns 代表不良实践。</p><h4 id="原型模式是什么" tabindex="-1">原型模式是什么？ <a class="header-anchor" href="#原型模式是什么" aria-label="Permalink to &quot;原型模式是什么？&quot;">​</a></h4><p>Proto-patterns（原型模式）是指那些在设计模式被广泛接受之前的阶段，由开发者个体提出并在实践中得到验证的设计思想。当一个开发者在解决某一问题时，可能会想到一个独特的解决方案，这个解决方案并没有被广泛认可和文档化，但开发者自身认为它具有可重用性，并认为开发者社区会从中受益。这个阶段被称为 Proto-pattern，意味着这是一个潜在的设计模式，但尚未被完全确认和纳入标准。</p><p>一个 Proto-pattern 在变成一个正式的设计模式之前，需要经历一定的测试阶段，由各种开发者和场景验证，以确保该模式在实践中是有用的、并能够提供正确的结果。通常，将一个 Proto-pattern 转变为完全成熟的模式需要大量的工作和文档化。</p><h4 id="如何辨别设计模式" tabindex="-1">如何辨别设计模式？ <a class="header-anchor" href="#如何辨别设计模式" aria-label="Permalink to &quot;如何辨别设计模式？&quot;">​</a></h4><p>辨别设计模式的方法通常包括以下几个方面：</p><ol><li><p><strong>问题的复发性：</strong> 设计模式是为解决在软件设计中反复出现的问题而提出的，因此首先需要观察问题是否是一种常见的、具有一般性的问题。</p></li><li><p><strong>通用性：</strong> 设计模式通常是一种通用的解决方案，而不是特定于某个特定应用的解决方案。如果一个解决方案在多个上下文中都适用，可能是一个设计模式。</p></li><li><p><strong>可重用性：</strong> 设计模式应该是可重用的，可以在不同的情境中应用。如果解决方案只在特定情境下有用，可能更适合被称为特定应用的最佳实践，而不是设计模式。</p></li><li><p><strong>文档和社区认可：</strong> 成熟的设计模式通常有相应的文档和社区认可。它们被广泛讨论、使用，并有相关的资料可以供开发者学习和参考。</p></li></ol><h4 id="反模式的概念和例子" tabindex="-1">反模式的概念和例子 <a class="header-anchor" href="#反模式的概念和例子" aria-label="Permalink to &quot;反模式的概念和例子&quot;">​</a></h4><p>反模式是指在软件设计和开发中，被认为是不良实践或导致问题的常见做法。这些是反面教材，指导开发者在设计和编码时应该避免的模式。使用 Anti-pattern 可能导致代码不可维护、难以理解、性能低下等问题。</p><ol><li><strong>修改 Object 类原型（Modifying Object Class Prototype）：</strong> 在 JavaScript 中修改 Object 类的原型，影响了所有继承自 Object 的对象，可能导致不可预测的行为和潜在的冲突。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newMethod</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   // 新增的方法</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li><strong>在不拥有的对象上进行修改（Modifying Objects You Don&#39;t Own）：</strong> 修改第三方库或框架中的对象，可能导致兼容性问题和难以维护的代码。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 在第三方库的对象上添加新方法</span></span>
<span class="line"><span style="color:#E5C07B;">thirdPartyLibrary</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">someObject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newMethod</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   // 新增的方法</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li><strong>过度使用全局变量（Overusing Global Variables）：</strong> 过度使用全局变量会增加代码的耦合度，降低模块化和可维护性。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 过度使用全局变量</span></span>
<span class="line"><span style="color:#C678DD;"> var</span><span style="color:#E06C75;"> globalVariable</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;some value&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> exampleFunction</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">     console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">globalVariable</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="技巧型设计模式" tabindex="-1">技巧型设计模式 <a class="header-anchor" href="#技巧型设计模式" aria-label="Permalink to &quot;技巧型设计模式&quot;">​</a></h3><ul><li>01 链模式 <ul><li>通过在对象方法中将当前对象返回，实现对同一个对象方法的链式调用</li></ul></li><li>02 委托模式 <ul><li>多个对象接收并处理同一请求，他们将请求委托给另一个对象同一处理请求</li><li>利用元素冒泡原理可以将所有子元素上的相同事件绑定到父元素上</li></ul></li><li>03 数据访问对象模式 <ul><li>抽象和封装对数据源的访问与存储。</li><li>关键在于定义私有前缀和增删改查接口</li></ul></li><li>04 节流模式 <ul><li>对重复的业务逻辑进行节流控制，执行最后一次操作并取消其他操作，以提高性能</li><li>节流器的关键点在于计数器和事件执行间隔时间的控制，在某个间隔内只允许触发一次。</li><li>节流模式可应用于优化滚动事件性能、优化浮层显隐性能、图片懒加载、统计回报次数优化等</li></ul></li><li>05 简单模板模式 <ul><li>通过格式化字符串拼凑出视图，以避免创建视图时大量的节点操作。优化内存开销。</li><li>从定义可看出其主要针对的是有大量创建视图的高消耗DOM操作场景。</li></ul></li><li>06 惰性模式 <ul><li>减少每次代码执行的重复性的分支判断，通过对对象重定义来屏蔽原对象中的分支判断</li><li>第一种是在文件加载进来时通过闭包执行该方法对其重新定义（会使页面加载时占用一定资源）</li><li>第二种是在第一种方式基础上做一次延迟执行，在函数第一次调用时对其重定义；</li></ul></li><li>07 参与者模式 <ul><li>在特定的作用域中执行给定的函数，并将参数原封不动地传递。</li><li>主要是利用bind方法，它应用了函数柯里化思想来进行传参和作用域绑定</li></ul></li><li>08 等待者模式 <ul><li>通过对多个异步进程监听，来触发未来发生的动作</li><li>其实就是简单地实现Promise规范，通过when/then/done/fail来处理请求和回调，通过resolve和reject状态来监听异步的结果。</li></ul></li></ul><h2 id="设计原则" tabindex="-1">设计原则 <a class="header-anchor" href="#设计原则" aria-label="Permalink to &quot;设计原则&quot;">​</a></h2><p>设计原则是一组用于指导软件开发过程中的决策和设计的规则。这些原则有助于创建可维护、可扩展和灵活的代码。在面向对象编程中，最著名的设计原则被称为SOLID原则，它包括以下五个基本原则：</p><h3 id="六大设计原则" tabindex="-1">六大设计原则 <a class="header-anchor" href="#六大设计原则" aria-label="Permalink to &quot;六大设计原则&quot;">​</a></h3><p><a href="https://zhuanlan.zhihu.com/p/110130347" target="_blank" rel="noreferrer">六大设计原则超详细介绍（再不理解你打我） - 知乎 (zhihu.com)</a></p><ul><li><p><strong>单一职责原则</strong>（Single Responsibility Principle, SRP）：一个类应该只有一个引起变化的原因。</p><ul><li>一个类应该只有一个发生变化的原因。简而言之就是每个类只需要负责自己的那部分，类的复杂度就会降低。</li><li>有的叫：合成复用原则—原则是尽量使用合成/聚合的方式，而不是使用继承。</li></ul></li><li><p><strong>开闭原则</strong>（Open/Closed Principle, OCP）：软件实体应当对扩展开放，对修改关闭。</p><ul><li>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</li><li>一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭</li></ul></li><li><p><strong>里氏替换原则</strong>（Liskov Substitution Principle, LSP）：子类应该能够替换掉它们的父类型。</p><ul><li>里氏代换原则面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</li><li>里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</li><li>所有引用基类的地方必须能透明地使用其子类的对象，也就是说子类对象可以替换其父类对象，而程序执行效果不变。</li></ul></li><li><p><strong>迪米特法则（Law of Demeter）</strong></p><ul><li>又叫作最少知识原则（The Least Knowledge Principle），是面向对象设计的一个重要原则。它的核心思想是“只与你的直接朋友通信”，意味着一个对象(类)应该对其他对象(类)有尽可能少的了解，只和朋友通信，不和陌生人说话。</li><li>具体来说，这个原则建议：一个对象应该尽量少地与其他对象发生相互作用。一个对象不应该暴露它的内部组件给其他对象，即不应该持有其他对象的引用。当需要进行跨类通信时，应该通过中介者来实现，以减少类之间的直接依赖。遵循迪米特法则可以帮助减少类之间的耦合度，提高模块的相对独立性，从而使系统更加容易维护和扩展。</li><li>这个原则在大型复杂系统的设计中尤其重要，但也要注意过度使用可能会导致过多的中介类，增加系统的复杂度。因此，应该根据具体情况适度应用迪米特法则。</li></ul></li><li><p><strong>接口隔离原则</strong>（Interface Segregation Principle, ISP）：不应该强迫客户依赖于它们不用的方法。</p><ul><li>使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</li><li>多个特定的客户端接口要好于一个通用性的总接口</li></ul></li><li><p><strong>依赖倒置原则</strong>（Dependency Inversion Principle, DIP）：高层模块不应该依赖于低层模块，两者都应该依赖于抽象。</p><ul><li>1、上层模块不应该依赖底层模块，它们都应该依赖于抽象。</li><li>2、抽象不应该依赖于细节，细节应该依赖于抽象</li></ul></li></ul><h3 id="solid五大原则-javascript使用的" tabindex="-1">SOLID五大原则(JavaScript使用的) <a class="header-anchor" href="#solid五大原则-javascript使用的" aria-label="Permalink to &quot;SOLID五大原则(JavaScript使用的)&quot;">​</a></h3><h4 id="s-–-single-responsibility-principle-单一职责原则-重点" tabindex="-1">S – Single Responsibility Principle 单一职责原则（重点） <a class="header-anchor" href="#s-–-single-responsibility-principle-单一职责原则-重点" aria-label="Permalink to &quot;S – Single Responsibility Principle 单一职责原则（重点）&quot;">​</a></h4><ul><li>一个程序只做好一件事</li><li>如果功能过于复杂就拆分开，每个部分保持独立</li></ul><h4 id="o-–-openclosed-principle-开放-封闭原则-重点" tabindex="-1">O – OpenClosed Principle 开放/封闭原则（重点） <a class="header-anchor" href="#o-–-openclosed-principle-开放-封闭原则-重点" aria-label="Permalink to &quot;O – OpenClosed Principle 开放/封闭原则（重点）&quot;">​</a></h4><ul><li>对扩展开放，对修改封闭</li><li>增加需求时，扩展新代码，而非修改已有代码</li></ul><h4 id="l-–-liskov-substitution-principle-里氏替换原则" tabindex="-1">L – Liskov Substitution Principle 里氏替换原则 <a class="header-anchor" href="#l-–-liskov-substitution-principle-里氏替换原则" aria-label="Permalink to &quot;L – Liskov Substitution Principle 里氏替换原则&quot;">​</a></h4><ul><li>子类能覆盖父类</li><li>父类能出现的地方子类就能出现</li></ul><h4 id="i-–-interface-segregation-principle-接口隔离原则" tabindex="-1">I – Interface Segregation Principle 接口隔离原则 <a class="header-anchor" href="#i-–-interface-segregation-principle-接口隔离原则" aria-label="Permalink to &quot;I – Interface Segregation Principle 接口隔离原则&quot;">​</a></h4><ul><li>保持接口的单一独立</li><li>类似单一职责原则，这里更关注接口</li></ul><h4 id="d-–-dependency-inversion-principle-依赖倒转原则" tabindex="-1">D – Dependency Inversion Principle 依赖倒转原则 <a class="header-anchor" href="#d-–-dependency-inversion-principle-依赖倒转原则" aria-label="Permalink to &quot;D – Dependency Inversion Principle 依赖倒转原则&quot;">​</a></h4><ul><li>面向接口编程，依赖于抽象而不依赖于具体</li><li>使用方只关注接口而不关注具体类的实现</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li>S 单一职责： 一个程序只做好一件事</li><li>O 开放封闭：对拓展开放，对修改封闭</li><li>L 里氏置换：子类能够覆盖父类，并能出现在父类出现的地方</li><li>I 接口隔离独立</li><li>D 依赖倒置： 使用只关注接口而不关注具体类的实现（组合、策略等）</li></ul><h5 id="so体现较多-举个栗子-比如promise" tabindex="-1">SO体现较多，举个栗子：（比如Promise） <a class="header-anchor" href="#so体现较多-举个栗子-比如promise" aria-label="Permalink to &quot;SO体现较多，举个栗子：（比如Promise）&quot;">​</a></h5><ul><li>单一职责原则：每个then中的逻辑只做好一件事</li><li>开放封闭原则（对扩展开放，对修改封闭）：如果新增需求，扩展then</li></ul><h5 id="再举个栗子-此例来源-守候-改善代码的各方面问题" tabindex="-1">再举个栗子：(此例来源-<a href="https://juejin.im/post/6844903597092651015#comment" target="_blank" rel="noreferrer">守候-改善代码的各方面问题</a>) <a class="header-anchor" href="#再举个栗子-此例来源-守候-改善代码的各方面问题" aria-label="Permalink to &quot;再举个栗子：(此例来源-[守候-改善代码的各方面问题](https://juejin.im/post/6844903597092651015#comment))&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//checkType(&#39;165226226326&#39;,&#39;mobile&#39;)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//result：false</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> checkType</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &#39;email&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">-]+</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">\\.</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">-]+</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">@</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">-]+</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">\\.</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">-]+</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">+</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &#39;mobile&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">1</span><span style="color:#D19A66;">[3|4|5|7|8][0-9]{9}</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &#39;tel&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">(0\\d</span><span style="color:#D19A66;">{2,3}</span><span style="color:#E06C75;">-\\d</span><span style="color:#D19A66;">{7,8}</span><span style="color:#E06C75;">)(-\\d</span><span style="color:#D19A66;">{1,4}</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">?</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>有以下两个问题：</p><ul><li>如果想添加其他规则就得在函数里面增加 case 。添加一个规则就修改一次！这样违反了开放-封闭原则（对扩展开放，对修改关闭）。而且这样也会导致整个 API 变得臃肿，难维护。</li><li>比如A页面需要添加一个金额的校验，B页面需要一个日期的校验，但是金额的校验只在A页面需要，日期的校验只在B页面需要。如果一直添加 case 。就是导致A页面把只在B页面需要的校验规则也添加进去，造成不必要的开销。B页面也同理。</li></ul><p>建议的方式是给这个 API 增加一个扩展的接口:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> checkType</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> rules</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">        email</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">-]+</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">\\.</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">-]+</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">@</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">-]+</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">\\.</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">-]+</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">+</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#61AFEF;">        mobile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">1</span><span style="color:#D19A66;">[3|4|5|7|8][0-9]{9}</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 暴露接口</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 校验</span></span>
<span class="line"><span style="color:#61AFEF;">        check</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> rules</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">?</span><span style="color:#E06C75;">rules</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 添加规则</span></span>
<span class="line"><span style="color:#61AFEF;">        addRule</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E06C75;">            rules</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">]</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用方式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用mobile校验规则</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">checkType</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;188170239&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;mobile&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//添加金额校验规则</span></span>
<span class="line"><span style="color:#E5C07B;">checkType</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRule</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;money&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#D19A66;">[0-9]+</span><span style="color:#E06C75;">(.</span><span style="color:#D19A66;">[0-9]{2}</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">?</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用金额校验规则</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">checkType</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;18.36&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;money&#39;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>此例更详细内容请查看-&gt; <a href="https://juejin.im/post/6844903597092651015#comment" target="_blank" rel="noreferrer">守候i-重构-改善代码的各方面问题</a></p><h1 id="一、创建型模式-creational-patterns" tabindex="-1">一、创建型模式（Creational Patterns） <a class="header-anchor" href="#一、创建型模式-creational-patterns" aria-label="Permalink to &quot;一、创建型模式（Creational Patterns）&quot;">​</a></h1><h2 id="工厂模式-factory-pattern" tabindex="-1">工厂模式（Factory Pattern） <a class="header-anchor" href="#工厂模式-factory-pattern" aria-label="Permalink to &quot;工厂模式（Factory Pattern）&quot;">​</a></h2><p><strong>工厂模式</strong> （Factory Pattern），封装具体实例创建逻辑和过程，外部只需要根据不同条件返回不同的实例。</p><ul><li>优点：实现代码复用性，封装良好，抽象逻辑；</li><li>缺点：增加了代码复杂程度；</li></ul><p>工厂模式（Factory Pattern）是最常用的设计模式之一。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p><blockquote><p>应用实例：您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。而至于需要哪个牌子的汽车，就到哪个牌子的工厂。</p></blockquote><p>工厂方法模式定义了一个创建对象的接口，但是由子类决定要实例化的类是哪一个。可以将对象的创建和使用分离，使得系统更加灵活。其代码示例如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个抽象类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  speak</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;This method must be implemented.&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实现具体的类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Dog</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  speak</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &#39;Woof!&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Cat</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  speak</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &#39;Meow!&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实现工厂方法</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> AnimalFactory</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  createAnimal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">animalType</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      switch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">animalType</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &#39;dog&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">          return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dog</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &#39;cat&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">          return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Cat</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">          throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Invalid animal type: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">animalType</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用工厂方法创建对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> animalFactory</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> AnimalFactory</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dog</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> animalFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createAnimal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;dog&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">speak</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// Output: Woof!</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cat</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> animalFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createAnimal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;cat&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">cat</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">speak</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// Output: Meow!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Product</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    init</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;init&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    fun</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;fun&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Factory</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Product</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// use</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> factory</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Factory</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> factory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;p1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fun</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="简单工厂模式" tabindex="-1">简单工厂模式 <a class="header-anchor" href="#简单工厂模式" aria-label="Permalink to &quot;简单工厂模式&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Man</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	alertName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">		alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Factory</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#61AFEF;"> create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Man</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">Factory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;yck&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">alertName</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>当然工⼚模式并不仅仅是用来 new 出实例。</p><p>可以想象一个场景。假设有一份很复杂的代码需要用户去调用，但是用户并不关⼼这些复杂的代码，只需要你提供给我一个接口去调用，用户只负责传递需要的参数，⾄于这些参数怎么使用，内部有什么逻辑是不关⼼的，只需要你最后返回我一个实例。这个构造过程就是工⼚。</p><p>工⼚起到的作用就是隐藏了创建实例的复杂度，只需要提供一个接口，简单清晰。</p><p>在 Vue 源码中，你也可以看到工⼚模式的使用，比如创建异步组件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createComponent</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	Ctor</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	data</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">VNodeData</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	children</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	tag</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 逻辑处理...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VNode</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">		vue</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">component</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">{Ctor.</span><span style="color:#E06C75;">cid</span><span style="color:#ABB2BF;">}</span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">{name ? </span><span style="color:#98C379;">\`-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;"> : </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		context</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">propsData</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">listeners</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">		asyncFactory</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> vnode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在上述代码中，我们可以看到我们只需要调用 createComponent 传入参数 就能创建一个组件实例，但是创建这个实例是很复杂的一个过程，工⼚帮助我 们隐藏了这个复杂的过程，只需要一句代码调用就能实现功能</p><h4 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h4><ul><li>如果你不想让某个子系统与较大的那个对象之间形成强耦合，而是想运行时从许多子系统中进行挑选的话，那么工厂模式是一个理想的选择</li><li>将new操作简单封装，遇到new的时候就应该考虑是否用工厂模式；</li><li>需要依赖具体环境创建不同实例，这些实例都有相同的行为,这时候我们可以使用工厂模式，简化实现的过程，同时也可以减少每种对象所需的代码量，有利于消除对象间的耦合，提供更大的灵活性</li></ul><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>创建对象的过程可能很复杂，但我们只需要关心创建结果。</li><li>构造函数和创建者分离, 符合“开闭原则”</li><li>一个调用者想创建一个对象，只要知道其名称就可以了。</li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</li><li>屏蔽产品对象的具体实现，使调用者只关注接口；</li><li>扩展性高，如果需要增加产品，只需要添加工厂类就可以，无需修改源代码；</li><li>通过名字就可以创建想要的对象。</li></ul><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>添加新产品时，需要编写新的具体产品类,一定程度上增加了系统的复杂度</li><li>考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度</li><li>每增加一个产品类就要增加一个具体的产品类和工厂类，系统中的类成倍增加，增加了类的复杂度。</li></ul><h4 id="什么时候不用" tabindex="-1">什么时候不用 <a class="header-anchor" href="#什么时候不用" aria-label="Permalink to &quot;什么时候不用&quot;">​</a></h4><p>当被应用到错误的问题类型上时,这一模式会给应用程序引入大量不必要的复杂性.除非为创建对象提供一个接口是我们编写的库或者框架的一个设计上目标,否则我会建议使用明确的构造器,以避免不必要的开销。</p><p>由于对象的创建过程被高效的抽象在一个接口后面的事实,这也会给依赖于这个过程可能会有多复杂的单元测试带来问题。</p><h4 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h4><p>曾经我们熟悉的JQuery的$()就是一个工厂函数，它根据传入参数的不同创建元素或者去寻找上下文中的元素，创建成相应的jQuery对象。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">selector</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">        super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">selector</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    add</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 此处省略若干API</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">selector</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> jQuery</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">selector</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="vue-的异步组件" tabindex="-1">vue 的异步组件 <a class="header-anchor" href="#vue-的异步组件" aria-label="Permalink to &quot;vue 的异步组件&quot;">​</a></h5><p>在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;async-example&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">  setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 向 \`resolve\` 回调传递组件定义</span></span>
<span class="line"><span style="color:#61AFEF;">    resolve</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">      template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&lt;div&gt;I am async!&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>工厂方法</strong>提供创建对象的接口，对象被创建后可以修改。这样做的好处是，创建对象的逻辑集中在一个地方，这样简化了代码，使得代码更易组织。</p><p>这种模式被大量应用。可以通过类和工厂函数（返回对象的函数）来实现：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Alien</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">phrase</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">phrase</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> phrase</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">species</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;alien&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    fly</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Zzzzzziiiiiinnnnnggggg!!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">    sayPhrase</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">phrase</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> alien1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Alien</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Ali&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;I&#39;m Ali the alien!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">alien1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 输出：&quot;Ali&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>使用类</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Alien</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">phrase</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">phrase</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> phrase</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">species</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;alien&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Alien</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fly</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Zzzzzziiiiiinnnnnggggg!!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">Alien</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayPhrase</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">phrase</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> alien1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Alien</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Ali&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;I&#39;m Ali the alien!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">alien1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 输出 &quot;Ali&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">alien1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">phrase</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 输出 &quot;I&#39;m Ali the alien!&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">alien1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fly</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 输出 &quot;Zzzzzziiiiiinnnnnggggg&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>使用工厂函数</p><h2 id="抽象工厂模式-abstract-factory-pattern" tabindex="-1">抽象工厂模式（Abstract Factory Pattern） <a class="header-anchor" href="#抽象工厂模式-abstract-factory-pattern" aria-label="Permalink to &quot;抽象工厂模式（Abstract Factory Pattern）&quot;">​</a></h2><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。</p><p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><blockquote><p>应用实例：对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，都是成套的，即一系列具体产品。假设一种情况，在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。</p></blockquote><p>抽象工厂模式：提供了一种封装一组具有相同主题的单个工厂的方式。它有一个接口，用于创建相关或依赖对象的家族，而不需要指定实际实现的类。</p><p>其代码示例如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一组主题对象类型的抽象类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> AnimalFood</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;This method must be implemented.&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> AnimalToy</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;This method must be implemented.&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一组具体代表家族的对象</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> HighQualityDogFood</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AnimalFood</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &#39;High quality dog food&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> HighQualityDogToy</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AnimalToy</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &#39;High quality dog toy&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> CheapCatFood</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AnimalFood</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &#39;Cheap cat food&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> CheapCatToy</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AnimalToy</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &#39;Cheap cat toy&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一个抽象工厂</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> AnimalProductsAbstractFactory</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  createFood</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;This method must be implemented.&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  createToy</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;This method must be implemented.&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建具体工厂类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> HighQualityAnimalProductsFactory</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AnimalProductsAbstractFactory</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  createFood</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HighQualityDogFood</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  createToy</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HighQualityDogToy</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> CheapAnimalProductsFactory</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AnimalProductsAbstractFactory</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  createFood</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CheapCatFood</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  createToy</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CheapCatToy</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用具体工厂类来创建相关的对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> highQualityAnimalProductsFactory</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HighQualityAnimalProductsFactory</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">highQualityAnimalProductsFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createFood</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// Output: High quality dog food</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">highQualityAnimalProductsFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createToy</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// Output: High quality dog toy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cheapAnimalProductsFactory</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CheapAnimalProductsFactory</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">cheapAnimalProductsFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createFood</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// Output: Cheap cat food</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">cheapAnimalProductsFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createToy</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// Output: Cheap cat toy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div><p><strong>抽象工厂</strong>允许在不指定具体类的情况下生成一系列相关的对象。当你想要创建仅共享某些属性和方法的对象时，抽象工厂模式就可以派上用场。</p><p>它的工作方式是给客户端提供一个可以交互的抽象工厂。<strong>抽象工厂</strong>通过特定逻辑调用<strong>具体工厂</strong>，具体工厂返回最终的对象。</p><p>这样做给工厂模式添加了一个抽象层，我们通过仅和单个工厂函数或者类交互来创建各种不同类型的对象。</p><p>让我们来看几个例子。假设我们是汽车公司，我们除了生产小汽车以外，还生产摩托车和卡车。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 每个汽车种类有一个类或者“具体工厂”</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Car</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Car&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wheels</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 4</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    turnOn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Chacabúm!!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Truck</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Truck&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wheels</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 8</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    turnOn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;RRRRRRRRUUUUUUUUUMMMMMMMMMM!!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Motorcycle</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Motorcycle&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wheels</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    turnOn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sssssssssssssssssssssssssssssshhhhhhhhhhham!!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 抽象工厂作为单一交互点和客户端交互</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 接受特定汽车类型作为参数，调用对应类型的具体工厂</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> vehicleFactory</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    createVehicle</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            case</span><span style="color:#98C379;"> &quot;car&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Car</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">            case</span><span style="color:#98C379;"> &quot;truck&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Truck</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">            case</span><span style="color:#98C379;"> &quot;motorcycle&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Motorcycle</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">            default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> car</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vehicleFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createVehicle</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;car&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// Car { turnOn: [Function: turnOn], name: &#39;Car&#39;, wheels: 4 }</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> truck</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vehicleFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createVehicle</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;truck&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// Truck { turnOn: [Function: turnOn], name: &#39;Truck&#39;, wheels: 8 }</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> motorcycle</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vehicleFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createVehicle</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;motorcycle&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// Motorcycle { turnOn: [Function: turnOn], name: &#39;Motorcycle&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="单例模式-singleton-pattern" tabindex="-1">单例模式（Singleton Pattern） <a class="header-anchor" href="#单例模式-singleton-pattern" aria-label="Permalink to &quot;单例模式（Singleton Pattern）&quot;">​</a></h2><p>单例模式（Singleton Pattern）是最简单的设计模式之一。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> CreateSingleton</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">instance</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"><span style="color:#E5C07B;">CreateSingleton</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>代码测试</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Winner</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CreateSingleton</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Winner&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Looser</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CreateSingleton</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Looser&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Winner</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> Looser</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Winner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// &#39;Winner&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Looser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// &#39;Winner&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>单例模式的核心就是保证全局只有一个对象可以访问。因为 JS 是⻔无类的语⾔，所以别的语⾔实现单例的方式并不能套入 JS 中，我们只需要用一个变量确保实例只创建一次就行，以下是如何实现单例模式的例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getInstance</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			instance</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Singleton</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> s1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> s2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s1</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> s2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在 Vuex 源码中，你也可以看到单例模式的使用，虽然它的实现方式不大一 样，通过一个外部变量来控制只安装一次 Vuex</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// bind on install</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">_Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">Vue</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> _Vue</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果发现 Vue 有值，就不重新创建实例了</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;">	Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _Vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">	applyMixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Vue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>单例模式</strong>确保对象的类只有一个不可更改实例。简言之，单例模式包含一个不能被复制和修改的对象。当你希望应用遵循“真理的单点性”的观点时，这个模式就能发挥作用。</p><p><strong>单例模式</strong> （Singleton Pattern）又称为单体模式，保证一个类只有一个实例，并提供一个访问它的全局访问点。也就是说，第二次使用同一个类创建新对象的时候，应该得到与第一次创建的对象完全相同的对象。</p><p>通过静态属性创建单例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#E06C75;"> instance</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">instance</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>通过函数创建单例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createInstance</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		instance</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Game</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>实现 game 类的单例</p><ul><li>优：单例模式节约内存开支和实例化时的性能开支，节约性能；</li><li>缺：单例模式扩展性不强</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;单例模式&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// window document  store</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 单例模式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// class Person{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     static instance;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     constructor(name){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         if(!Person.instance){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//             Person.instance = this;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         }else{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//             return Person.instance;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         this.name = name;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let zhangsan  = new Person(&quot;张三&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let lisi  = new Person(&quot;李四&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(zhangsan===lisi);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let obj1 = {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     name:&quot;张三&quot;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     age:20</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let obj2 = {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     name:&quot;张三&quot;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     age:20</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(obj1===obj2);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// class Perosn{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     constructor(name){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         this.name = name;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// class Animal{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     constructor(name){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         this.name = name;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// // ....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// // 通用单例</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> createInstance</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">					instance</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let singlePerson = createInstance(Perosn);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let zhansan  = new singlePerson(&quot;张三&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let lisi  = new singlePerson(&quot;李四&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(zhansan===lisi);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 单例应用</span></span>
<span class="line"><span style="color:#C678DD;">		class</span><span style="color:#E5C07B;"> Dialog</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> dialog</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dialog</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> dialog</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dialog</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;none&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isShow</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#61AFEF;">			showDialog</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isShow</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dialog</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;对话框&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">					document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dialog</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dialog</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;block&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isShow</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;已经显示了一个&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> createInstanceFn</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createInstance</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Dialog</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> dialog1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> createInstanceFn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let dialog2 = new createInstanceFn();</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">			dialog1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">showDialog</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// dialog2.showDialog();</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br></div></div><p>比方说，我们想在一个单一对象中包含应用程序的所有配置，而且禁止对该对象进行任何复制或修改。</p><p>可以通过对象字面量和类者两种方法来实现：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Config</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  start</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;App has started&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">  update</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;App has updated&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过冻结对象来限制增加新的属性或者修改已有属性</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">freeze</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Config</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Config</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// &quot;App has started&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">Config</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// &quot;App has updated&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Robert&quot;</span><span style="color:#7F848E;font-style:italic;"> // 尝试添加一个新的键</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Config</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 添加失败： { start: [Function: start], update: [Function: update] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>使用对象的字面量</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Config</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#61AFEF;">    start</span><span style="color:#ABB2BF;">(){ </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;App has started&#39;</span><span style="color:#ABB2BF;">) }  </span></span>
<span class="line"><span style="color:#61AFEF;">    update</span><span style="color:#ABB2BF;">(){ </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;App has updated&#39;</span><span style="color:#ABB2BF;">) }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> instance</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Config</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">freeze</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>使用类</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ding</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> createInstance</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Private method to create a singleton instance</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;This is a singleton instance.&#39;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        getInstance</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                instance</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Usage</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> instance1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> instance2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">instance1</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> instance2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p>实现一个单例，主要是用一个变量来标志是否已经创建过该对象，如果是的话，直接返回改对象。</p><p>应用场景： 只需要一个的对象，比如线程池、全局缓存、浏览器中的window对象</p><p>惰性单例：在需要的时候才创建对象实例。比如点击登录按钮的时候才创建登录窗口，而不是页面加载好的时候就创建。</p><p>第一次按按钮的时候就把登录弹窗给加载好，这里实现了惰性。</p><p>而当我们如果点击浮窗关闭按钮的时候，该节点会从页面上被删除掉，如果等到下一次还需要重新登录的时候，也只能重新创建节点。但是这样频繁的删除又创建节点，是不合理的。</p><p>因此在下面创建了一个变量来表示该节点是否已经被创建了，如果已经被创建，咱们把它的属性变成display:block让它出来，否则让它隐身即可。</p><p>这里的单例体现在我们用了一个闭包，将这个div变量给包起来，使得这个私有变量被封装在闭包内部作用域里面，防止全局变量污染，并且该变量也不会在函数运行完之后，被垃圾回收掉，可以很好的控制弹窗的隐身和显身。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;loginBtn&quot;</span><span style="color:#ABB2BF;">&gt;登录&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> createLogin</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">            var</span><span style="color:#E06C75;"> div</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                    div</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                    div</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">innerHTML</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我是登录浮窗&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                    div</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> none</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                    document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> div</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        })()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">            document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;loginBtn&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">                var</span><span style="color:#E06C75;"> loginLayer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createLogin</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                loginLayer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;block&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>以上实现了一个惰性单例模式，这显然是违背了单一职责的原则。如果我们需要创建一个iframe呢？那我们还需要把以下判断重写一遍。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	obj</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> xxx</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>所以，我们需要把<strong>创建对象实例</strong> 和 <strong>管理单例</strong>给分离出来。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;loginBtn&quot;</span><span style="color:#ABB2BF;">&gt;登录&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //管理单例</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#61AFEF;"> getSingle</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            var</span><span style="color:#E06C75;">  result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">)) </span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //创建login实例</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#61AFEF;"> createLogin</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">           </span></span>
<span class="line"><span style="color:#C678DD;">                var</span><span style="color:#E06C75;"> div</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                div</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">innerHTML</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我是登录浮窗&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                div</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> none</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">             </span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> div</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> createSingleLogin</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getSingle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createLogin</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#E5C07B;">        document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;loginBtn&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            var</span><span style="color:#E06C75;"> loginLayer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createSingleLogin</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            loginLayer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;block&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //创建iframe实例</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#61AFEF;"> createiframe</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">           var</span><span style="color:#E06C75;"> iframe</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;iframe&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">           iframe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">innerHTML</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我是iframe&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">           iframe</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> none</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#C678DD;">           return</span><span style="color:#E06C75;"> iframe</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> createSingleiframe</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getSingle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createiframe</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#E5C07B;">        document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;iframeBtn&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            var</span><span style="color:#E06C75;"> iframeLayer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createSingleLogin</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            iframeLayer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;block&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>单例模式的目的是<code>确保一个类只有一个实例，并为该实例提供全局访问点</code>。其代码示例如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Logger</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Logger</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">logs</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">      Logger</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">instance</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> Logger</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Logger: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">message</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  printLogCount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Number of logs: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可以使用全局变量来访问实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> logger</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Logger</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">freeze</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">logger</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对于每个实例，输出应该是相同的</span></span>
<span class="line"><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;First message&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: Logger: First message</span></span>
<span class="line"><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printLogCount</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Number of logs: 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> anotherLogger</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Logger</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 此时返回一个已经存在的实例</span></span>
<span class="line"><span style="color:#E5C07B;">anotherLogger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Second message&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: Logger: Second message</span></span>
<span class="line"><span style="color:#E5C07B;">anotherLogger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printLogCount</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Number of logs: 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>一个类只有一个实例，并提供一个访问它的全局访问点。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> LoginForm</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;hide&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    show</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;show&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">            alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;已经显示&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            return</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;show&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;登录框显示成功&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    hide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;hide&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">            alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;已经隐藏&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            return</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;hide&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;登录框隐藏成功&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#E5C07B;"> LoginForm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getInstance</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> instance</span></span>
<span class="line"><span style="color:#C678DD;">     return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            instance</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> LoginForm</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> instance</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;"> })()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> LoginForm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">obj1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> LoginForm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">obj2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hide</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj1</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> obj2</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h4 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>划分命名空间，减少全局变量</li><li>增强模块性，把自己的代码组织在一个全局变量名下，放在单一位置，便于维护</li><li>且只会实例化一次。简化了代码的调试和维护</li></ul><h4 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>由于单例模式提供的是一种单点访问，所以它有可能导致模块间的强耦合 从而不利于单元测试。无法单独测试一个调用了来自单例的方法的类，而只能把它与那个单例作为一个单元一起测试。</li></ul><h4 id="场景例子" tabindex="-1">场景例子 <a class="header-anchor" href="#场景例子" aria-label="Permalink to &quot;场景例子&quot;">​</a></h4><ul><li>定义命名空间和实现分支型方法</li><li>登录框</li><li>vuex 和 redux中的store</li><li>比如全局缓存、全局状态管理等等这些只需要一个对象，就可以使用单例模式。</li></ul><h2 id="建造者模式-构建者模式-builder-pattern" tabindex="-1">建造者模式(构建者模式)（Builder Pattern） <a class="header-anchor" href="#建造者模式-构建者模式-builder-pattern" aria-label="Permalink to &quot;建造者模式(构建者模式)（Builder Pattern）&quot;">​</a></h2><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。</p><p>一个Builder类会一步一步构造最终的对象。该Builder类是独立于其他对象的。</p><p>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><blockquote><p>应用实例： 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的“套餐”；</p></blockquote><p>建造者模式是一种对象创建设计模式，它旨在<code>通过一步步的构建流程来创建复杂对象</code>。其代码示例如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建 Product 类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Sandwich</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ingredients</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  addIngredient</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ingredient</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ingredients</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ingredient</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  toString</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ingredients</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;, &#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一个建造者类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> SandwichBuilder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sandwich</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Sandwich</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  reset</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sandwich</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Sandwich</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  putMeat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">meat</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sandwich</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addIngredient</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">meat</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  putCheese</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">cheese</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sandwich</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addIngredient</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">cheese</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  putVegetables</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vegetables</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sandwich</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addIngredient</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vegetables</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  get</span><span style="color:#61AFEF;"> result</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sandwich</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建用户（director）使用的 builder</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> SandwichMaker</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">builder</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SandwichBuilder</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  createCheeseSteakSandwich</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">builder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reset</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">builder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putMeat</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ribeye steak&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">builder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putCheese</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;american cheese&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">builder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putVegetables</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;peppers&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;onions&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">builder</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 建造一个三明治</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sandwichMaker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SandwichMaker</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sandwich</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sandwichMaker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createCheeseSteakSandwich</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Your sandwich: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">sandwich</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: Your sandwich: ribeye steak, american cheese, peppers, onions</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p><strong>构造器</strong>模式分“步骤”创建对象。通常我们通过不同的函数和方法向对象添加属性和方法。</p><p>构造器的好处在于通过不同实体分开创建属性和方法。</p><p>通过类或者构造函数创建的实例通常继承了所有的属性和方法，但是如果使用构造器，我们可以只应用我们需要的“步骤”来创建对象，这样就更灵活。</p><p>这个概念和<a href="https://www.youtube.com/watch?v=wfMtDGfHWpA&amp;t=3s" target="_blank" rel="noreferrer">对象组合</a>相关， 我在<a href="https://chinese.freecodecamp.org/news/object-oriented-javascript-for-beginners/#object-composition" target="_blank" rel="noreferrer">这篇文章</a>讨论过这个话题。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 声明一个对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> bug1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Buggy McFly&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    phrase</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Your debugger doesn&#39;t work with me!&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> bug2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Martiniano Buggland&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    phrase</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Can&#39;t touch this! Na na na na...&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这些函数将对象作为参数，并为对象添加方法</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> addFlyingAbility</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> obj</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fly</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Now </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> can fly!\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> addSpeechAbility</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> obj</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saySmthg</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> walks the walk and talks the talk!\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 最后传入对象作为参数，调用构造器函数</span></span>
<span class="line"><span style="color:#61AFEF;">addFlyingAbility</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bug1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">bug1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fly</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 输出: &quot;Now Buggy McFly can fly!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">addSpeechAbility</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bug2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">bug2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saySmthg</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 输出: &quot;Martiniano Buggland walks the walk and talks the talk!&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="原型模式-prototype-pattern" tabindex="-1">原型模式（Prototype Pattern） <a class="header-anchor" href="#原型模式-prototype-pattern" aria-label="Permalink to &quot;原型模式（Prototype Pattern）&quot;">​</a></h2><p>也可以叫JavaScript构造函数模式</p><p>使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于直接将属性和方法赋值给 this 对象;</p><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。</p><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><blockquote><p>应用实例： 1、细胞分裂； 2、的 Object clone() 方法。</p></blockquote><p>原型模式（<code>Prototype Pattern</code>）是一种<code>创建型设计模式</code>，它可以用于创建对象的成本相对较高，但对于由相同属性的对象可以通过克隆来创建。原型模式将对象的创建过程和对象的使用过程分离，它通过克隆已有对象来创建新的对象，从而避免了昂贵的对象创建过程。在 <code>JavaScript</code> 中，原型模式的实现很容易，因为它天然支持对象的 clone（即<code>浅拷贝</code>）。</p><p>这是一个使用原型模式的示例代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一个原型对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> carPrototype</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  wheels</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;red&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">  start</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Starting the car...&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;">  stop</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Stopping the car...&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用Object.create()方法克隆</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> car1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">carPrototype</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">car1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">car1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wheels</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">car1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wheels</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: 6</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">car1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: red</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">car1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Starting the car...</span></span>
<span class="line"><span style="color:#E5C07B;">car1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stop</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Stopping the car...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 克隆另一个对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> car2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">carPrototype</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">car2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">car2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;blue&#39;</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">car2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: blue</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">car2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wheels</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">car2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Starting the car...</span></span>
<span class="line"><span style="color:#E5C07B;">car2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stop</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Stopping the car...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>在这个例子中，我们创建了一个名为 <code>carPrototype</code> 的原型对象。然后，我们通过 <code>Object.create()</code> 方法克隆了该原型对象。由于我们使用了浅拷贝，所以在使用前我们可以修改对象的属性，并且 <code>car2</code> 和 <code>car1</code> 对象的 <code>start()</code> 和 <code>stop()</code> 方法是相同的，因为它们来自相同的原型对象。</p><p>原型模式的一个优点是它<code>提供了一种简便的方式来创建具有相同属性的对象</code>。它可以<code>减少重复代码，并且在创建对象时节省时间和资源</code>。当然，它也有一些缺点，例如在使用深拷贝时可能会出现意想不到的问题，因为深拷贝将复制所有属性，而这些属性还可能引用其他对象。</p><p>原型模式（prototype）是指用原型实例指向创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  getName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Student</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  sayHello</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Hello， My name is </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> student</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;xiaoming&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">student</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>原型模式，就是创建一个共享的原型，通过拷贝这个原型来创建新的类，用于创建重复的对象，带来性能上的提升。</p><p><strong>原型</strong>允许把一个对象作为蓝图创建另一个对象，新对象继承原对象的属性和方法。</p><p>如果你已经使用过一段时间的JavaScript，你应该对<a href="https://chinese.freecodecamp.org/news/prototypes-and-inheritance-in-javascript/" target="_blank" rel="noreferrer">原型继承</a>有一定了解。</p><p>原型链继承的结果和使用类相似，只是更为灵活，因为属性和方法可以不通过同一个类在对象之间共享。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 声明一个有两个方法的原型对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> enemy</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    attack</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Pim Pam Pum!&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">    flyAway</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Flyyyy like an eagle!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 声明另外一个对象，这个对象将继承原型</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> bug1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Buggy McFly&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    phrase</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Your debugger doesn&#39;t work with me!&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用setPrototypeOf设置对象的原型</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setPrototypeOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bug1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">enemy</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用getPrototypeOf来确认我们是否设置成功</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPrototypeOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bug1</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">// { attack: [Function: attack], flyAway: [Function: flyAway] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">bug1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">phrase</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// Your debugger doesn&#39;t work with me!</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">bug1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attack</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// Pim Pam Pum!</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">bug1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flyAway</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// Flyyyy like an eagle!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>定义3</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Dog</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    breed</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Unknown&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">    clone</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> clone</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        clone</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sound</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;Woof&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> clone</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Usage</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dog1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Dog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">dog1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">breed</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;Labrador&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dog2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Dog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">dog2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">breed</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;Poodle&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dog1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sound</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: Woof</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dog1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">breed</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: Labrador</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dog2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sound</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: Woof</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dog2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">breed</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: Poodle</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h1 id="二、结构型模式-structural-patterns" tabindex="-1">二、结构型模式（Structural Patterns） <a class="header-anchor" href="#二、结构型模式-structural-patterns" aria-label="Permalink to &quot;二、结构型模式（Structural Patterns）&quot;">​</a></h1><h2 id="适配器模式" tabindex="-1">适配器模式 <a class="header-anchor" href="#适配器模式" aria-label="Permalink to &quot;适配器模式&quot;">​</a></h2><p>适配器用来解决两个接口不兼容的情况，不需要改变已有的接口，通过包装一层的方式实现两个接口的正常协作。</p><p>以下是如何实现适配器模式的例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Plug</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	getName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;港版插头&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Target</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">plug</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Plug</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	getName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">plug</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; 适配器转二脚插头&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Target</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 港版插头 适配器转二脚插头</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在 Vue 中，我们其实经常使用到适配器模式。比如父组件传递给子组件一个 时间戳属性，组件内部需要将时间戳转为正常的日期显示，一般会使用 computed 来做转换这件事情，这个过程就使用到了适配器模式</p><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。</p><p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。</p><p>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><blockquote><p>应用实例： 1、读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡； 2、美国电器110V，中国220V，就要有一个变压器将110V转化为220V。</p></blockquote><p>def: 主要解决两个已有接口之间不匹配的问题</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> aMap</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	show</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;开始渲染地图A&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> bMap</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	display</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;开始渲染地图B&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> bMapAdapter</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	show</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> bMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">display</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> renderMap</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">map</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">show</span><span style="color:#E06C75;"> instance</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">renderMap</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">aMap</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">renderMap</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bMapAdapter</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>适配器模式（Adapter Pattern）是一种结构型设计模式，它<code>允许将不兼容的对象包装在适配器中，从而使它们能够在一起工作</code>。以下是适配器模式的代码示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 目标接口</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Target</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  request</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Target: 请求已被调用&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 需要适配的类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Adaptee</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  specificRequest</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Adaptee 方法已被访问&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 适配器类，将 Adaptee 转换为 Target</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Adapter</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Target</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">adaptee</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">adaptee</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> adaptee</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  request</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">adaptee</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">specificRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用适配器将客户端与 Adaptee 解耦</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Adapter</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Adaptee</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">request</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Adaptee 方法已被访问</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在上述代码中，我们有一个目标接口 <code>Target</code> 和一个需要适配的类 <code>Adaptee</code>。我们通过创建一个适配器类 <code>Adapter</code> 将 <code>Adaptee</code> 转换为 <code>Target</code>，并使用适配器进行通信的客户端 <code>client</code> 调用 <code>request()</code> 方法，从而实现 <code>Adaptee</code> 的功能。</p><p>将一个类的接口转化为另外一个接口，以满足用户需求，使类之间接口不兼容问题通过适配器得以解决。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Plug</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  getName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &#39;iphone充电头&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Target</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">plug</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Plug</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  getName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">plug</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39; 适配器Type-c充电头&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Target</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// iphone充电头 适配器转Type-c充电头</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>可以让任何两个没有关联的类一起运行。</li><li>提高了类的复用。</li><li>适配对象，适配库，适配数据</li></ul><h4 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>额外对象的创建，非直接调用，存在一定的开销（且不像代理模式在某些功能点上可实现性能优化)</li><li>如果没必要使用适配器模式的话，可以考虑重构，如果使用的话，尽量把文档完善</li></ul><h4 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h4><ul><li>整合第三方SDK</li><li>封装旧接口</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 自己封装的ajax， 使用方式如下</span></span>
<span class="line"><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/getData&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Post&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    dataType</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;json&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        test</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">111</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">done</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 因为历史原因，代码中全都是：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// $.ajax({....})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 做一层适配器</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> $</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    ajax</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>vue的computed</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;example&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;Original message: &quot;{{ message }}&quot;&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- Hello --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;Computed reversed message: &quot;{{ reversedMessage }}&quot;&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- olleH --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&#39;text/javascript&#39;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;demo&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">        data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Hello&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;">        computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">            reversedMessage</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">message</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">reverse</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h5 id="原有data-中的数据不满足当前的要求-通过计算属性的规则来适配成我们需要的格式-对原有数据并没有改变-只改变了原有数据的表现形式" tabindex="-1">原有data 中的数据不满足当前的要求，通过计算属性的规则来适配成我们需要的格式，对原有数据并没有改变，只改变了原有数据的表现形式 <a class="header-anchor" href="#原有data-中的数据不满足当前的要求-通过计算属性的规则来适配成我们需要的格式-对原有数据并没有改变-只改变了原有数据的表现形式" aria-label="Permalink to &quot;原有data 中的数据不满足当前的要求，通过计算属性的规则来适配成我们需要的格式，对原有数据并没有改变，只改变了原有数据的表现形式&quot;">​</a></h5><h4 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h4><p>适配器与代理模式相似</p><ul><li>适配器模式： 提供一个不同的接口（如不同版本的插头）</li><li>代理模式： 提供一模一样的接口</li></ul><p><strong>适配器</strong>允许两个接口不兼容的对象相互交互。</p><p>假设你的应用程序调用一个API并会返回一个<a href="https://www.freecodecamp.org/news/what-is-an-xml-file-how-to-open-xml-files-and-the-best-xml-viewers/" target="_blank" rel="noreferrer">XML</a>，然后将结果发送给另一个API来处理信息，但是处理信息的API期待的是<a href="https://www.freecodecamp.org/news/what-is-json-a-json-file-example/" target="_blank" rel="noreferrer">JSON</a>格式。因为格式不兼容，所以你不能直接发送信息，需要先适配结果。 😉</p><p>我们可以举一个更简单的例子来具象化这个概念。假设我们有一个以城市为元素的数组，以及一个可以返回拥有最多人口城市的函数。数组中的城市人口以百万为单位计数，但是有一个新城市的人口单位不是百万：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 城市数组</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> citiesHabitantsInMillions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;London&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">habitants</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8.9</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Rome&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">habitants</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2.8</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;New york&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">habitants</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8.8</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Paris&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">habitants</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2.1</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">] </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 待添加的新城市</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> BuenosAires</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Buenos Aires&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    habitants</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3100000</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 适配器函数将城市的人口属性转换成统一的计数单位</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> toMillionsAdapter</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> city</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">city</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">habitants</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> parseFloat</span><span style="color:#ABB2BF;">((</span><span style="color:#E5C07B;">city</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">habitants</span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;">1000000</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toFixed</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">toMillionsAdapter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">BuenosAires</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将新城市添加到数组</span></span>
<span class="line"><span style="color:#E5C07B;">citiesHabitantsInMillions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">BuenosAires</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 函数返回人口最多的城市</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> MostHabitantsInMillions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(...</span><span style="color:#E5C07B;">citiesHabitantsInMillions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">city</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> city</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">habitants</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">MostHabitantsInMillions</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// 8.9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>两个不兼容的接口之间的桥梁，将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;适配器模式&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 适配器模式</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> getUsers</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">				{</span></span>
<span class="line"><span style="color:#E06C75;">					name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">				{</span></span>
<span class="line"><span style="color:#E06C75;">					name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// [{zhangsan:20},{lisi,30}]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> Adaptor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">users</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> users</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> users</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let res =  Adaptor(getUsers());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(res);</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="装饰器模式-decorator-pattern" tabindex="-1">装饰器模式（Decorator Pattern） <a class="header-anchor" href="#装饰器模式-decorator-pattern" aria-label="Permalink to &quot;装饰器模式（Decorator Pattern）&quot;">​</a></h2><p>装饰模式不需要改变已有的接口，作用是给对象添加功能。就像我们经常需要给手机戴个保护套防摔一样，不改变手机自身，给手机添加了保护套提供防摔功能。</p><p>以下是如何实现装饰模式的例子，使用了 ES7 中的装饰器语法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> readonly</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">descriptor</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	descriptor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">writable</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> descriptor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E06C75;">readonly</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;yck&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Test</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">yck</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;111&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 不可修改</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在 React 中，装饰模式其实随处可见</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">connect</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-redux&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> MyComponent</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> connect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mapStateToProps</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">MyComponent</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。</p><p>使用一种更为灵活的方式来动态给一个对象/函数等添加额外信息</p><ul><li>扩展功能 和继承类似</li><li>扩展不同类的功能，和原始类并无关联；</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;装饰者模式&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//装饰者模式： 功能扩展 extends</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		class</span><span style="color:#E5C07B;"> Yase</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;亚瑟&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#61AFEF;">			release</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;释放技能&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> yase</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Yase</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// yase.release();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> hurt</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;造成100点伤害&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> walk</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;走&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Decorator</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> _this</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">				_this</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">				fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// yase.release.Decorator(hurt)();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 装饰者链</span></span>
<span class="line"><span style="color:#E5C07B;">		yase</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">release</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Decorator</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">hurt</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">Decorator</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">walk</span><span style="color:#ABB2BF;">)();</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p><p>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p><blockquote><p>应用实例： 1、孙悟空有72变，当他变成&quot;庙宇&quot;后，他的根本还是一只猴子，但是他又有了庙宇的功能； 2、将一个形状装饰上不同的颜色，同时又不改变形状。</p></blockquote><p>def：不改变对象的基础上，程序运行期间，给对象动态添加职责 -&gt; 不会影响这个类中派生的其他对象</p><p>下面介绍一种用AOP装饰函数，其主要就是在通过在函数执行前或者执行后添加新的函数来添加新功能。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">after</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">afterFn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">( </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //绑定回原来的函数showLogin，那么arguments就能够用它的</span></span>
<span class="line"><span style="color:#E5C07B;">        afterFn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//上面可以参考箭头函数的this指向</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Function.prototype.after = function(afterFn) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     var _self = this;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     return function() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         let ret = _self.apply(this, arguments);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         afterFn.apply(_self,arguments);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         return ret;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">before</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">beforeFn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        beforeFn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> showLogin</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;login&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> log</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;after&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">showLogin</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> showLogin</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">after</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">log</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//这里改写了函数，所以上面要重新把原来的函数return出来</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;loginBtn&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> showLogin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>应用场景：表单验证（可以直接在beforeFn那里加判断，如果等于true则执行后面的函数，否则直接return） ， Ajax请求前带上token (个人认为这跟axios的拦截器有异曲同工之妙)，数据上报、统计函数执行时间</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">before</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">beforeFn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    	beforeFn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">   	 	return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> ajax</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> getToken</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> &#39;Token&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ajax</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">before</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	param</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Token</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getToken</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">get</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;http://xxxx.com&#39;</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;seve&#39;</span><span style="color:#ABB2BF;">}) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//{name:&#39;seven&#39;, Token:&#39;Token&#39;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>装饰模式（Decorator Pattern）是一种<code>结构型设计模式</code>，它允许<code>在不影响其他对象的情况下，动态地将功能添加到对象中</code>。以下是装饰模式的代码示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 抽象组件类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  operation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Component：基础操作&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 具体组件类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteComponent</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  operation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ConcreteComponent：具体操作&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 抽象装饰器类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Decorator</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">component</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">component</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> component</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  operation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">component</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 具体装饰器类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteDecoratorA</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Decorator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  operation</span><span style="color:#ABB2BF;">() { </span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ConcreteDecoratorA：添加操作&#39;</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteDecoratorB</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Decorator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  operation</span><span style="color:#ABB2BF;">() { </span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ConcreteDecoratorB：添加操作&#39;</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用装饰器组合对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> component</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteComponent</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> decoratorA</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteDecoratorA</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> decoratorB</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteDecoratorB</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">decoratorA</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">decoratorB</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>在上述代码中，我们有一个抽象组件类 <code>Component</code> 和一个具体组件类 <code>ConcreteComponent</code>。我们创建了两个装饰器类 <code>ConcreteDecoratorA</code> 和 <code>ConcreteDecoratorB</code>，它们都继承自 <code>Decorator</code> 类，并且可以添加新的行为到被装饰的对象上。最后，我们实例化 <code>ConcreteComponent</code> 类,将其封装在 <code>ConcreteDecoratorA</code> 和 <code>ConcreteDecoratorB</code> 类中，最终组成一个具有多个操作的对象。</p><ul><li>动态地给某个对象添加一些额外的职责，，是一种实现继承的替代方案</li><li>在不改变原对象的基础上，通过对其进行包装扩展，使原有对象可以满足用户的更复杂需求，而不会影响从这个类中派生的其他对象</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Cellphone</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    create</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;生成一个手机&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Decorator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">cellphone</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cellphone</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cellphone</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    create</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">cellphone</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createShell</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">cellphone</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    createShell</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;生成手机壳：&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 测试代码</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> cellphone</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Cellphone</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">cellphone</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;------------&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> dec</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Decorator</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">cellphone</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">dec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="场景例子-1" tabindex="-1">场景例子 <a class="header-anchor" href="#场景例子-1" aria-label="Permalink to &quot;场景例子&quot;">​</a></h4><ul><li>比如现在有4 种型号的自行车，我们为每种自行车都定义了一个单 独的类。现在要给每种自行车都装上前灯、尾 灯和铃铛这3 种配件。如果使用继承的方式来给 每种自行车创建子类，则需要 4×3 = 12 个子类。 但是如果把前灯、尾灯、铃铛这些对象动态组 合到自行车上面，则只需要额外增加3 个类</li><li>ES7 Decorator <a href="https://es6.ruanyifeng.com/#docs/decorator" target="_blank" rel="noreferrer">装饰器 - ECMAScript 6入门 (ruanyifeng.com)</a></li><li>core-decorators</li></ul><h4 id="优点-3" tabindex="-1">优点 <a class="header-anchor" href="#优点-3" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>装饰类和被装饰类都只关心自身的核心业务，实现了解耦。</li><li>方便动态的扩展功能，且提供了比继承更多的灵活性。</li></ul><h4 id="缺点-3" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-3" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>多层装饰比较复杂。</li><li>常常会引入许多小对象，看起来比较相似，实际功能大相径庭，从而使得我们的应用程序架构变得复杂起来</li></ul><p><strong>装饰</strong>通过增加一个修饰对象来包裹原来的对象，从而给原来的对象添加新的行为。如果你熟悉React或者高阶组件（HOC），你内心的小铃铛可能会叮当一下。</p><p>从技术上讲，React中的组件是函数而不是对象。但如果你仔细思索React上下文（React Context）或者<a href="https://chinese.freecodecamp.org/news/memoization-in-javascript-and-react/" target="_blank" rel="noreferrer">Memo</a>是怎么运作的，你会发现我们将组件作为子组件传入HOC后，子组件而可以访问某些功能。</p><p>在下面的例子里中ContextProvider组件接受子组件作为prop：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Context</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;./Context&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> ContextProvider</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">React</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">FC</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ({</span><span style="color:#E06C75;font-style:italic;">children</span><span style="color:#ABB2BF;">}) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">darkModeOn</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setDarkModeOn</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">englishLanguage</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setEnglishLanguage</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">Context.Provider</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">            darkModeOn</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            setDarkModeOn</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            englishLanguage</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            setEnglishLanguage</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> &gt;</span></span>
<span class="line"><span style="color:#C678DD;">            {</span><span style="color:#E06C75;">children</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">Context.Provider</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> ContextProvider</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>然后我们包裹整个应用：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> App</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">ContextProvider</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">ErrorBoundary</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;</span><span style="color:#E5C07B;">Suspense</span><span style="color:#D19A66;font-style:italic;"> fallback</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;&gt;&lt;/&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">Header</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;/</span><span style="color:#E5C07B;">Suspense</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;</span><span style="color:#E5C07B;">Routes</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Suspense</span><span style="color:#D19A66;font-style:italic;"> fallback</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;&gt;&lt;/&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E5C07B;">AboutPage</span><span style="color:#ABB2BF;"> /&gt;&lt;/</span><span style="color:#E5C07B;">Suspense</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;/projects&#39;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Suspense</span><span style="color:#D19A66;font-style:italic;"> fallback</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;&gt;&lt;/&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E5C07B;">ProjectsPage</span><span style="color:#ABB2BF;"> /&gt;&lt;/</span><span style="color:#E5C07B;">Suspense</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;/projects/helpr&#39;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Suspense</span><span style="color:#D19A66;font-style:italic;"> fallback</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;&gt;&lt;/&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E5C07B;">HelprProject</span><span style="color:#ABB2BF;"> /&gt;&lt;/</span><span style="color:#E5C07B;">Suspense</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;/projects/myWebsite&#39;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Suspense</span><span style="color:#D19A66;font-style:italic;"> fallback</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;&gt;&lt;/&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E5C07B;">MyWebsiteProject</span><span style="color:#ABB2BF;"> /&gt;&lt;/</span><span style="color:#E5C07B;">Suspense</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;/projects/mixr&#39;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Suspense</span><span style="color:#D19A66;font-style:italic;"> fallback</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;&gt;&lt;/&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E5C07B;">MixrProject</span><span style="color:#ABB2BF;"> /&gt;&lt;/</span><span style="color:#E5C07B;">Suspense</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;/projects/shortr&#39;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Suspense</span><span style="color:#D19A66;font-style:italic;"> fallback</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;&gt;&lt;/&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E5C07B;">ShortrProject</span><span style="color:#ABB2BF;"> /&gt;&lt;/</span><span style="color:#E5C07B;">Suspense</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;/curriculum&#39;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Suspense</span><span style="color:#D19A66;font-style:italic;"> fallback</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;&gt;&lt;/&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E5C07B;">CurriculumPage</span><span style="color:#ABB2BF;"> /&gt;&lt;/</span><span style="color:#E5C07B;">Suspense</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;/blog&#39;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Suspense</span><span style="color:#D19A66;font-style:italic;"> fallback</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;&gt;&lt;/&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E5C07B;">BlogPage</span><span style="color:#ABB2BF;"> /&gt;&lt;/</span><span style="color:#E5C07B;">Suspense</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;/contact&#39;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Suspense</span><span style="color:#D19A66;font-style:italic;"> fallback</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;&gt;&lt;/&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E5C07B;">ContactPage</span><span style="color:#ABB2BF;"> /&gt;&lt;/</span><span style="color:#E5C07B;">Suspense</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;/</span><span style="color:#E5C07B;">Routes</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">ErrorBoundary</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E5C07B;">ContextProvider</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>接着，我们使用<code>useContext</code>钩子，使得应用内所有组件都可以获得定义在Context的状态（state）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> AboutPage</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">React</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">FC</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">darkModeOn</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">englishLanguage</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useContext</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Context</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (...)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> AboutPage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这个例子可能不是书的作者在写这个模式时想到的确切实现，但我相信想法是一样的：把一个对象放在另一个对象中，这样它就可以访问某些功能。</p><h2 id="混入-混合模式" tabindex="-1">混入/混合模式 <a class="header-anchor" href="#混入-混合模式" aria-label="Permalink to &quot;混入/混合模式&quot;">​</a></h2><p>混入模式（Mixin）通常指的是面向对象编程中的一种设计模式，也称为“混合”或“混入”。它允许类在不继承的情况下复用代码。在这种模式中，一个类可以通过将一个或多个混入类（mixin）的方法和属性混入到自己的定义中，来增强自身的功能。</p><p>Mixin 模式在某种程度上类似于装饰器模式。装饰器模式允许在不改变对象接口的情况下动态地添加功能。类似地，Mixin 模式也允许在不改变对象本身的结构的情况下，将功能添加到对象中。然而，两者之间的主要区别在于实现方式和目的。Mixin 模式更注重于将多个对象的功能组合起来，而装饰器模式更注重于为对象添加额外的功能。</p><p>通常，混入类不是为了独立存在的，而是为了被多个类共享的。这种模式使得代码的复用更加灵活，避免了类层次结构的过度膨胀。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;混入模式&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 混入模式</span></span>
<span class="line"><span style="color:#C678DD;">		class</span><span style="color:#E5C07B;"> Yase</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;亚瑟&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		class</span><span style="color:#E5C07B;"> Skills</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			hurt</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;造成伤害&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#61AFEF;">			walk</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;走路&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#61AFEF;">			release</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;释放技能&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let yase = new Yase();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 混入模式</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> mixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">receivingClass</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">givingClass</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">!==</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					receivingClass</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]] </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E5C07B;">						givingClass</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]];</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#61AFEF;">		mixin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Yase</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Skills</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hurt&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;walk&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;release&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> yase</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Yase</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">yase</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		yase</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h2 id="代理模式" tabindex="-1">代理模式 <a class="header-anchor" href="#代理模式" aria-label="Permalink to &quot;代理模式&quot;">​</a></h2><p>当本体不便于访问的时候，提供一个替身对象来访问本体</p><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。</p><p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p><p>为其他对象提供一种代理以控制对这个对象的访问。</p><blockquote><p>应用实例： 1、Windows里面的快捷方式； 2、买火车票不一定在火车站买，也可以去代售点； 3、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制； 4、Spring AOP。</p></blockquote><p>注意事项：</p><p>1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。</p><p>2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p><p>三种代理模式</p><h3 id="保护代理" tabindex="-1">保护代理 <a class="header-anchor" href="#保护代理" aria-label="Permalink to &quot;保护代理&quot;">​</a></h3><p>def: 当请求带到标准的时候，则允许访问本体，否则拒绝请求。（由于比较简单这里就不代码演示了）</p><h3 id="虚拟代理" tabindex="-1">虚拟代理 <a class="header-anchor" href="#虚拟代理" aria-label="Permalink to &quot;虚拟代理&quot;">​</a></h3><p>def: 把开销很大的对象，延迟到真正需要他的时候再去创建。</p><p>介绍一种应用场景在开发的过程中，如果直接给img设置src的话，由于请求图片过大或者网络不佳，出现时滞问题，会出现空白，常见的做法是先用一张loading图片进行占位，等异步请求过来之后，再把它填充到img的src里面。下面介绍用虚拟代理实现图片预加载。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> myImage</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> imgNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;img&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">imgNode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        setSrc</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        imgNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> src</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    	}</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//里面的this.src是</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> proxyImage</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> img</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E06C75;"> Image</span><span style="color:#ABB2BF;">;   </span><span style="color:#7F848E;font-style:italic;">//一个图片对象代理</span></span>
<span class="line"><span style="color:#E5C07B;">    img</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onload</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() { </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //这里的this.src是下面绑定了img.src的</span></span>
<span class="line"><span style="color:#E5C07B;">        myImage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setSrc</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {	</span></span>
<span class="line"><span style="color:#61AFEF;">        setSrc</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //真正加载好之前先加载loading图片</span></span>
<span class="line"><span style="color:#E5C07B;">            myImage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setSrc</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;loading.gif&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //先添加src属性</span></span>
<span class="line"><span style="color:#E5C07B;">            img</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> src</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">proxyImage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setSrc</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://imgcache.com/aaa.jpg&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>这个时候有人可能会有疑问，为啥要整个proxy代理这么麻烦呢？直接把proxyImage的逻辑放到myImage还省事，这不香吗？实则不然，如果按照这么做，则违反了单一职责原则。代理负责了预加载图片，将预加载操作完成之后再把请求交给本体myImage。给img节点设置src和预加载两个功能分别隔离在两个对象里面。</p><p><strong>代理和本体接口的一致性</strong></p><p>观察以上代码就会发现proxyImage和myImage都暴露了一个setSrc的接口（闭包return出去的都是对外暴露接口，其他为内在属性）。</p><p>这样做的好处是</p><p>1、用户可以放心请求代理，只关心是否得到了想要的结果。而代理接手请求的过程中是完全透明的。</p><p>2、可能过了一段时间之后，网速快到已经不需要预加载了，不需要改本体myImage的内在逻辑</p><p>更多的应用场景有</p><p>合并http请求：为了防止点击过快，在代理中设置两秒后合并请求一起发送，这样能够减轻服务器的压力。个人认为，防抖节流效果跟这个有异曲同工之处。</p><h3 id="缓存代理" tabindex="-1">缓存代理 <a class="header-anchor" href="#缓存代理" aria-label="Permalink to &quot;缓存代理&quot;">​</a></h3><p>def: 把开销大的运算结果放到缓存中，等到下一次再出现该缓存对象的时候，直接可以从缓存中取。举个例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> mult</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    	a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> *</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> cacheFactory</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> args</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">join</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;,&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">]){</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // this是window</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">cacheFactory</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">mult</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>代理模式（Proxy Pattern）是一种<code>结构型设计模式</code>，它允许<code>在访问对象时提供一个占位符或代理，以控制对对象的访问</code>。以下是代理模式的代码示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 主题接口</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Subject</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  request</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Subject：处理请求&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 真实主题类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> RealSubject</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Subject</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  request</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;RealSubject：处理请求&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 代理类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Proxy</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Subject</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">realSubject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">realSubject</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> realSubject</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  request</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkAccess</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">realSubject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">request</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">logAccess</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  checkAccess</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Proxy：检查访问权限&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  logAccess</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Proxy：记录访问日志&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用代理访问真实对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> realSubject</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> RealSubject</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> proxy</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">realSubject</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">proxy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">request</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>在上述代码中，我们有一个主题接口 <code>Subject</code> 和一个真实主题类 <code>RealSubject</code>。我们创建了一个代理类 <code>Proxy</code>，它封装了一个真实主题，并在对其进行访问时提供了额外的功能，例如检查访问权限和记录访问日志。我们通过实例化 <code>RealSubject</code> 类并封装它在 <code>Proxy</code> 类中，最终通过代理访问真实的主题对象。</p><p>是为一个对象提供一个代用品或占位符，以便控制对它的访问</p><blockquote><p>假设当A 在心情好的时候收到花，小明表白成功的几率有 60%，而当A 在心情差的时候收到花，小明表白的成功率无限趋近于0。 小明跟A 刚刚认识两天，还无法辨别A 什么时候心情好。如果不合时宜地把花送给A，花 被直接扔掉的可能性很大，这束花可是小明吃了7 天泡面换来的。 但是A 的朋友B 却很了解A，所以小明只管把花交给B，B 会监听A 的心情变化，然后选 择A 心情好的时候把花转交给A，代码如下：</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> Flower</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> xiaoming</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  sendFlower</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> flower</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Flower</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">    target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">receiveFlower</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flower</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E5C07B;"> B</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  receiveFlower</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">flower</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    A</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listenGoodMood</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">      A</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">receiveFlower</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flower</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E5C07B;"> A</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  receiveFlower</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">flower</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;收到花&#39;</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> flower</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;">  listenGoodMood</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">      fn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">xiaoming</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sendFlower</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="场景-1" tabindex="-1">场景 <a class="header-anchor" href="#场景-1" aria-label="Permalink to &quot;场景&quot;">​</a></h4><ul><li>HTML元 素事件代理</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;1&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;2&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;3&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> ul</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#ul&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">  ul</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>ES6 的 proxy <a href="https://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noreferrer">Proxy - ECMAScript 6入门 (ruanyifeng.com)</a></li><li>jQuery.proxy()方法</li></ul><h4 id="优点-4" tabindex="-1">优点 <a class="header-anchor" href="#优点-4" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>代理模式能将代理对象与被调用对象分离，降低了系统的耦合度。代理模式在客户端和目标对象之间起到一个中介作用，这样可以起到保护目标对象的作用</li><li>代理对象可以扩展目标对象的功能；通过修改代理对象就可以了，符合开闭原则；</li></ul><h4 id="缺点-4" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-4" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><p>处理请求速度可能有差别，非直接访问存在开销</p><h4 id="不同点-1" tabindex="-1">不同点 <a class="header-anchor" href="#不同点-1" aria-label="Permalink to &quot;不同点&quot;">​</a></h4><p>装饰者模式实现上和代理模式类似</p><ul><li>装饰者模式： 扩展功能，原有功能不变且可直接使用</li><li>代理模式： 显示原有功能，但是经过限制之后的</li></ul><p><strong>代理</strong>模式为另一个对象提供替代或者占位符。这个想法是控制对原始对象的访问，当请求到达实际的原始对象之前或者之后再执行某种操作。</p><p>如果你熟悉<a href="https://expressjs.com/" target="_blank" rel="noreferrer">ExpressJS</a>的话，这个概念就不陌生。Express是用于开发NodeJS API的框架，其中一个功能就是中间件的使用。中间件是我们可以在请求到达终点之前、之中和之后执行的一段代码。</p><p>让我们看一个例子。是一个验证身份令牌的函数，不用太关注验证是如何实现的，但是要注意函数接受令牌作为参数，一旦验证完毕就会调用<code>next()</code>函数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> jwt</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;jsonwebtoken&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> authenticateToken</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> authHeader</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">headers</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;authorization&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> token</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> authHeader</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> authHeader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">token</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">401</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;No access token provided&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#E5C07B;">    jwt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">verify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">TOKEN_SECRET</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">user</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">403</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Wrong token provided&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">      req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> user</span></span>
<span class="line"><span style="color:#61AFEF;">      next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这个函数就是一个中间件，我们可以API中的任意终点使用这个中间件。只需要将其添加在终点地址之后，终点的函数声明之前：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/:jobRecordId&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">authenticateToken</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> job</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> JobRecord</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findOne</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">_id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">jobRecordId</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">job</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果没有提供令牌或者提供了错误的令牌，中间件就会返回相应的错误响应。如果提供了有效令牌，中间件将调用<code>next()</code>函数，然后将执行终点函数。</p><p>我们可以在终点内部编写相同的代码来验证令牌，这样就用不着中间件了，但使用了抽象的方法，我们可以在不同的终点复用中间件。😉</p><p>同样这个例子可能不是作者的确切想法，但我相信这是一个有效的例子。我们控制对象的访问，以便我们可以在特定时刻执行操作。</p><p><strong>代理模式</strong> 为其他对象提供一种代理以控制对这个对象的访问，类似于生活中的中介。</p><ul><li>为 hero 添加代理模式 控制 伤害的输出</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;代理模式&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 代理模式</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> zhangsan</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			sellHouse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;卖了&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> num</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;万元&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 中介 代理模式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// zhangsan.sellHouse(100);</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> proxySeller</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			sellHouse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">hasSold</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">hasSold</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					zhangsan</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sellHouse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">					zhangsan</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sellHouse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		proxySeller</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sellHouse</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// proxy 服务器代理 转发请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Proxy 代理对象 （后面会讲）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 创建图片</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		class</span><span style="color:#E5C07B;"> CreateImage</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">img</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;img&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">img</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#61AFEF;">			setSrc</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">img</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> src</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let img = new CreateImage();</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> src</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#98C379;">			&quot;https://gimg2.baidu.com/image_search/src=http%3A//youimg1.c-ctrip.com/target/tg/035/063/726/3ea4031f045945e1843ae5156749d64c.jpg&amp;refer=http%3A//youimg1.c-ctrip.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1621318136&amp;t=b1dc094a27bb4f111a5787a6d4ca21c5&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// img.setSrc(src);</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> proxyImg</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> myImg</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CreateImage</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> loadImg</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Image</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">			myImg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setSrc</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./loading.gif&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			loadImg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> src</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			loadImg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onload</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				myImg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setSrc</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#61AFEF;">		proxyImg</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><h2 id="外观模式-facade-pattern" tabindex="-1">外观模式（Facade Pattern） <a class="header-anchor" href="#外观模式-facade-pattern" aria-label="Permalink to &quot;外观模式（Facade Pattern）&quot;">​</a></h2><p>外观模式提供了一个接口，隐藏了内部的逻辑，更加方便外部调用。</p><p>个例子来说，我们现在需要实现一个兼容多种浏览器的添加事件方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> addEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">evType</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">useCapture</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">elm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">addEventListener</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		elm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">evType</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useCapture</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">elm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">attachEvent</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> r</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> elm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attachEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;on&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> evType</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> r</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		elm</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;on&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> evType</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> fn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>对于不同的浏览器，添加事件的方式可能会存在兼容问题。如果每次都需要去 这样写一遍的话肯定是不能接受的，所以我们将这些判断逻辑统一封装在一个接口中，外部需要添加事件只需要调用 addEvent 即可。</p><p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。</p><p>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p><p>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><blockquote><p>应用实例： 去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。</p></blockquote><p>外观模式（Facade Pattern）是一种<code>结构型设计模式</code>，<code>它为一组复杂的子系统提供了一个更简单的接口</code>。以下是外观模式的代码示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 子系统1</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Subsystem1</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  operation1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Subsystem1：执行操作1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 子系统2</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Subsystem2</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  operation2</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Subsystem2：执行操作2&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 外观类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Facade</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subsystem1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Subsystem1</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subsystem2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Subsystem2</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  operation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subsystem1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation1</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subsystem2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation2</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 客户端代码</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> facade</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Facade</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">facade</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Subsystem1：执行操作1，Subsystem2：执行操作2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>在上述代码中，我们有两个子系统 <code>Subsystem1</code> 和 <code>Subsystem2</code>，它们都提供了复杂的操作。我们通过使用外观模式创建了一个 <code>Facade</code> 类，它的接口更加简单，通过组合 <code>Subsystem1</code> 和 <code>Subsystem2</code> 对象的操作来实现其功能。最后，我们实例化 <code>Facade</code> 类并调用操作方法 <code>operation()</code>，完成了复杂的功能操作。</p><p>为子系统的一组接口提供一个一致的界面，定义了一个高层接口，这个接口使子系统更加容易使用</p><ol><li>兼容浏览器事件绑定</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> addMyEvent</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ev</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">addEventListener</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ev</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">attachEvent</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attachEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;on&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> ev</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        el</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;on&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> ev</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> fn</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol><li>封装接口</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myEvent</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#61AFEF;">    stop</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stopPropagation</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="场景-2" tabindex="-1">场景 <a class="header-anchor" href="#场景-2" aria-label="Permalink to &quot;场景&quot;">​</a></h4><ul><li>设计初期，应该要有意识地将不同的两个层分离，比如经典的三层结构，在数据访问层和业务逻辑层、业务逻辑层和表示层之间建立外观Facade</li><li>在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观Facade可以提供一个简单的接口，减少他们之间的依赖。</li><li>在维护一个遗留的大型系统时，可能这个系统已经很难维护了，这时候使用外观Facade也是非常合适的，为系系统开发一个外观Facade类，为设计粗糙和高度复杂的遗留代码提供比较清晰的接口，让新系统和Facade对象交互，Facade与遗留代码交互所有的复杂工作。</li></ul><p>参考： 大话设计模式</p><h4 id="优点-5" tabindex="-1">优点 <a class="header-anchor" href="#优点-5" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>减少系统相互依赖。</li><li>提高灵活性。</li><li>提高了安全性</li></ul><h4 id="缺点-5" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-5" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</li></ul><p><strong>外观</strong>模式给库、框架以及其他复杂的类集提供简化的接口。</p><p>嗯……我们可以举的例子非常多，不是吗？React本身以及各种各样的软件开发相关的库就是基于这个模式。特别是当你思考<a href="https://chinese.freecodecamp.org/news/an-introduction-to-programming-paradigms/#declarative-programming" target="_blank" rel="noreferrer">声明式编程</a>，会发现这个范式就是使用抽象的方法对开发者隐藏复杂性。</p><p>JavaScript中的 <code>map</code>、<code>sort</code>、<code>reduce</code> 和 <code>filter</code>函数都是很好的例子，这些函数的背后其实是我们的老朋友<code>for</code>循环。</p><p>另一个例子是一些UI库，如：<a href="https://mui.com/" target="_blank" rel="noreferrer">MUI</a>。正如以下示例所展现的这样，库提供了组件，组件带来了内置特性和功能，帮助我们更快、更轻松地构建代码。</p><p>这些代码最后都会编译成简单的HTML元素，这是浏览器唯一能理解的东西。组件只是采用了抽象的办法，使得我们的编码过程更容易。</p><p>一个外观模式......</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> *</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;react&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Table</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@mui/material/Table&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> TableBody</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@mui/material/TableBody&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> TableCell</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@mui/material/TableCell&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> TableContainer</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@mui/material/TableContainer&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> TableHead</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@mui/material/TableHead&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> TableRow</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@mui/material/TableRow&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Paper</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@mui/material/Paper&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createData</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  calories</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  fat</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  carbs</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  protein</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">calories</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fat</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">carbs</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">protein</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> rows</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#61AFEF;">  createData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Frozen yoghurt&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">159</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">24</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4.0</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">  createData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Ice cream sandwich&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">237</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4.3</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">  createData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Eclair&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">262</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">16.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">24</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6.0</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">  createData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Cupcake&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">305</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3.7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">67</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4.3</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">  createData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Gingerbread&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">356</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">16.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">49</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3.9</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> BasicTable</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">TableContainer</span><span style="color:#D19A66;font-style:italic;"> component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Paper</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E5C07B;">Table</span><span style="color:#D19A66;font-style:italic;"> sx</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">minWidth</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">650</span><span style="color:#ABB2BF;"> }</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> aria-label</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;simple table&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">TableHead</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;</span><span style="color:#E5C07B;">TableRow</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">TableCell</span><span style="color:#ABB2BF;">&gt;Dessert (100g serving)&lt;/</span><span style="color:#E5C07B;">TableCell</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">TableCell</span><span style="color:#D19A66;font-style:italic;"> align</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;right&quot;</span><span style="color:#ABB2BF;">&gt;Calories&lt;/</span><span style="color:#E5C07B;">TableCell</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">TableCell</span><span style="color:#D19A66;font-style:italic;"> align</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;right&quot;</span><span style="color:#ABB2BF;">&gt;Fat</span><span style="color:#E06C75;">&amp;nbsp;</span><span style="color:#ABB2BF;">(g)&lt;/</span><span style="color:#E5C07B;">TableCell</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">TableCell</span><span style="color:#D19A66;font-style:italic;"> align</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;right&quot;</span><span style="color:#ABB2BF;">&gt;Carbs</span><span style="color:#E06C75;">&amp;nbsp;</span><span style="color:#ABB2BF;">(g)&lt;/</span><span style="color:#E5C07B;">TableCell</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">TableCell</span><span style="color:#D19A66;font-style:italic;"> align</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;right&quot;</span><span style="color:#ABB2BF;">&gt;Protein</span><span style="color:#E06C75;">&amp;nbsp;</span><span style="color:#ABB2BF;">(g)&lt;/</span><span style="color:#E5C07B;">TableCell</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;/</span><span style="color:#E5C07B;">TableRow</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">TableHead</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">TableBody</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">          {</span><span style="color:#E5C07B;">rows</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">row</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">TableRow</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">              key</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">              sx</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{ </span><span style="color:#98C379;">&#39;&amp;:last-child td, &amp;:last-child th&#39;</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">border</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> } }</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">            &gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">TableCell</span><span style="color:#D19A66;font-style:italic;"> component</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;th&quot;</span><span style="color:#D19A66;font-style:italic;"> scope</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;row&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">                {</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;/</span><span style="color:#E5C07B;">TableCell</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">TableCell</span><span style="color:#D19A66;font-style:italic;"> align</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;right&quot;</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">calories</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">TableCell</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">TableCell</span><span style="color:#D19A66;font-style:italic;"> align</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;right&quot;</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fat</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">TableCell</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">TableCell</span><span style="color:#D19A66;font-style:italic;"> align</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;right&quot;</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">carbs</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">TableCell</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E5C07B;">TableCell</span><span style="color:#D19A66;font-style:italic;"> align</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;right&quot;</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">protein</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">TableCell</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E5C07B;">TableRow</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          ))</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">TableBody</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E5C07B;">Table</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E5C07B;">TableContainer</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><p>定义3</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Subsystem1</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    operation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#98C379;"> &#39;Subsystem 1 operation&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Subsystem2</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    operation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#98C379;"> &#39;Subsystem 2 operation&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Facade</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">subsystem1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">subsystem2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subsystem1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> subsystem1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subsystem2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> subsystem2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    operation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> result1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subsystem1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> result2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subsystem2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">result1</span><span style="color:#C678DD;">}</span><span style="color:#56B6C2;">\\n</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">result2</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Usage</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> subsystem1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Subsystem1</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> subsystem2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Subsystem2</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> facade</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Facade</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">subsystem1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">subsystem2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">facade</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Output:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Subsystem 1 operation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Subsystem 2 operation</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="桥接模式-bridge-pattern" tabindex="-1">桥接模式（Bridge Pattern） <a class="header-anchor" href="#桥接模式-bridge-pattern" aria-label="Permalink to &quot;桥接模式（Bridge Pattern）&quot;">​</a></h2><p>桥接模式（Bridge Pattern）是用于把抽象化与实现化解耦，使得二者可以独立变化。它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p><p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><p>将抽象部分与实现部分分离，使它们都可以独立的变化。</p><p>又称为柄体（Handle and Body）模式或接口（Interface）模式。</p><blockquote><p>应用实例： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择； 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的； 3、如果要绘制不同的颜色，如红色、绿色、蓝色的矩形、圆形、椭圆、正方形，我们需要根据实际需要对形状和颜色进行组合，那么颜色、形状就是抽象部分，组合后的就是实现部分。</p></blockquote><p>注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。</p><p>桥接模式（Bridge Pattern）是一种结构型设计模式，它<code>将一个对象的抽象和实现分离开来，从而使它们都可以独立变化</code>。以下是桥接模式的示例代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 实现类接口</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Implementor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  operationImpl</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Implementor：执行操作&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 抽象类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Abstraction</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">implementor</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">implementor</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> implementor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  operation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">implementor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operationImpl</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 扩展抽象类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> RefinedAbstraction</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Abstraction</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  otherOperation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;RefinedAbstraction：其他操作&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用桥接模式</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> implementor</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Implementor</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> abstraction</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Abstraction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">implementor</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">abstraction</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Implementor：执行操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> refinedAbstraction</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> RefinedAbstraction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">implementor</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">refinedAbstraction</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Implementor：执行操作</span></span>
<span class="line"><span style="color:#E5C07B;">refinedAbstraction</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">otherOperation</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: RefinedAbstraction：其他操作</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>在上述代码中，我们有一个实现类接口 <code>Implementor</code> 和一个抽象类 <code>Abstraction</code>。我们通过创建一个扩展抽象类 <code>RefinedAbstraction</code> 来扩展抽象类的功能，它们都使用了某个实现类的实例对象。然后，我们实例化 <code>Implementor</code> 并通过在 <code>Abstraction</code> 和 <code>RefinedAbstraction</code> 类的声明中传递 <code>Implementor</code> 对象来创建两个具有不同行为的对象。通过将实现和抽象分离开来，我们可以随意地组合实现与抽象，并使其易于扩展。</p><p>桥接模式（Bridge）将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Shape</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">color</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> color</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    draw</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">color</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#C678DD;"> \${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//测试</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> red</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Color</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;red&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> yellow</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Color</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;yellow&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> circle</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Shape</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;circle&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">red</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">circle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">draw</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> triangle</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Shape</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;triangle&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">yellow</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">triangle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">draw</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="优点-6" tabindex="-1">优点 <a class="header-anchor" href="#优点-6" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>有助于独立地管理各组成部分， 把抽象化与实现化解耦</li><li>提高可扩充性</li></ul><h4 id="缺点-6" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-6" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>大量的类将导致开发成本的增加，同时在性能方面可能也会有所减少。</li></ul><h2 id="组合模式-composite-pattern" tabindex="-1">组合模式（Composite Pattern） <a class="header-anchor" href="#组合模式-composite-pattern" aria-label="Permalink to &quot;组合模式（Composite Pattern）&quot;">​</a></h2><p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了<strong>对象组的树形结构</strong>。</p><p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p><p>将对象组合成树形结构以表示&quot;部分-整体&quot;的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><blockquote><p>应用实例： 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作数也可以是操作数、操作符和另一个操作数。 2、在JAVAAWT和SWING中，对于Button和Checkbox是树叶，Container是树枝。</p></blockquote><p>def: 用小的子对象来构建更大的对象，将对象组合成树形结构，以表示“**部分—整体”**的层次结构。<strong>统一对待</strong>树中所有对象。</p><p>组合模式（Composite Pattern）是一种结构型设计模式，它使用树形结构来表示<code>对象的部分-整体层次结构</code>，并使用户<code>能够以统一的方式处理单个对象和对象组合</code>。以下是组合模式的示例代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 抽象构件</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  operation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Component </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">：执行操作\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">component</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Component：不支持的操作&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">component</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Component：不支持的操作&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  getChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Component：不支持的操作&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 叶子节点</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Leaf</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 树枝节点</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Composite</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">component</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">component</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  getChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用组合模式</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> root</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Composite</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;根&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> branch1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Composite</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;树枝1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> branch2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Composite</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;树枝2&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> leaf1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Leaf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;叶子1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> leaf2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Leaf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;叶子2&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> leaf3</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Leaf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;叶子3&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">branch1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">branch2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">branch1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">leaf1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">branch1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">leaf2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">branch2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">leaf3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Component 根：执行操作</span></span>
<span class="line"><span style="color:#E5C07B;">branch1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Component 树枝1：执行操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">branch1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">leaf2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">branch2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Component 树枝2：执行操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getChild</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Component 树枝1：执行操作</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br></div></div><p>在上述代码中，我们有一个抽象构件 <code>Component</code>，通过创建两个具体构建 <code>Leaf</code> 和 <code>Composite</code> 来扩展抽象构件的功能。 <code>Composite</code> 保持着一个子对象的数组，并实现了在包含其他组件的能力。然后，我们使用所有这些组件来建立一个树形结构， 父节点模型是 <code>Component</code> 对象，而子节点可以是 <code>Component</code> 对象或 <code>Composite</code> 对象。最终，我们可以通过调用操作方法来进行操作。</p><ul><li>将对象组合成树形结构，以表示“整体-部分”的层次结构。</li><li>通过对象的多态表现，使得用户对单个对象和组合对象的使用具有一致性。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> TrainOrder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	create</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;创建火车票订单&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> HotelOrder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	create</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;创建酒店订单&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> TotalOrder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">orderList</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	addOrder</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">order</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">orderList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">order</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	create</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">orderList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			item</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">		})</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可以在购票网站买车票同时也订房间</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> train</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> TrainOrder</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> hotel</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HotelOrder</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> total</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> TotalOrder</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">total</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addOrder</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">train</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addOrder</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">hotel</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h4 id="场景-3" tabindex="-1">场景 <a class="header-anchor" href="#场景-3" aria-label="Permalink to &quot;场景&quot;">​</a></h4><ul><li>表示对象-整体层次结构</li><li>希望用户忽略组合对象和单个对象的不同，用户将统一地使用组合结构中的所有对象（方法）</li></ul><h4 id="缺点-7" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-7" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><p>如果通过组合模式创建了太多的对象，那么这些对象可能会让系统负担不起。</p><h2 id="享元模式" tabindex="-1">享元模式 <a class="header-anchor" href="#享元模式" aria-label="Permalink to &quot;享元模式&quot;">​</a></h2><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p><p>运用共享技术有效地支持大量细粒度的对象。</p><blockquote><p>应用实例： 1、的String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面； 2、数据库的数据池。</p></blockquote><p>享元模式（Flyweight Pattern）是一种结构型设计模式，它<code>通过共享对象来最小化内存使用和类实例化的数量</code>。以下是享元模式的示例代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Flyweight 工厂类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> FlyweightFactory</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">flyweights</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  getFlyweight</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">flyweights</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">flyweights</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteFlyweight</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">flyweights</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 具体 Flyweight 类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteFlyweight</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  operation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`ConcreteFlyweight </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">: 执行操作\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用享元模式</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> factory</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FlyweightFactory</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> flyweight1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> factory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFlyweight</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;key&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> flyweight2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> factory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFlyweight</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;key&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">flyweight1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: ConcreteFlyweight key: 执行操作</span></span>
<span class="line"><span style="color:#E5C07B;">flyweight2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: ConcreteFlyweight key: 执行操作</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flyweight1</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> flyweight2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>在上述代码中，我们有一个 Flyweight 工厂类 <code>FlyweightFactory</code>，用于创建并管理基础的共享 <code>ConcreteFlyweight</code> 对象。<code>ConcreteFlyweight</code> 对象包含需要共享的数据或状态。我们实例化 <code>FlyweightFactory</code>，并通过在 <code>FlyweightFactory</code> 的 <code>getFlyweight()</code> 方法中获取对象，以及通过多个对象来验证是否共享相同的对象。最终，结果显示 <code>flyweight1</code> 跟 <code>flyweight2</code> 指向同一个对象，由此证明了共享对象的概念。</p><p>运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种对象结构型模式</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> examCarNum</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#7F848E;font-style:italic;">         // 驾考车总数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 驾考车对象 */</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ExamCar</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">carType</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        examCarNum</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">carId</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> examCarNum</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">carType</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> carType</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &#39;手动档&#39;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &#39;自动档&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">usingState</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#7F848E;font-style:italic;">    // 是否正在使用</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 在本车上考试 */</span></span>
<span class="line"><span style="color:#61AFEF;">    examine</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">candidateId</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">usingState</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`考生- </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;"> candidateId</span><span style="color:#C678DD;"> }</span><span style="color:#98C379;"> 开始在</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">carType</span><span style="color:#C678DD;"> }</span><span style="color:#98C379;">驾考车- </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">carId</span><span style="color:#C678DD;"> }</span><span style="color:#98C379;"> 上考试\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">            setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">usingState</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#E5C07B;">                console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`%c考生- </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;"> candidateId</span><span style="color:#C678DD;"> }</span><span style="color:#98C379;"> 在</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">carType</span><span style="color:#C678DD;"> }</span><span style="color:#98C379;">驾考车- </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">carId</span><span style="color:#C678DD;"> }</span><span style="color:#98C379;"> 上考试完毕\`</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;color:#f40&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">                resolve</span><span style="color:#ABB2BF;">()                       </span><span style="color:#7F848E;font-style:italic;">// 0~2秒后考试完毕</span></span>
<span class="line"><span style="color:#ABB2BF;">            }, </span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 2000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }))</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 手动档汽车对象池 */</span></span>
<span class="line"><span style="color:#E06C75;">ManualExamCarPool</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    _pool</span><span style="color:#ABB2BF;">: [],                  </span><span style="color:#7F848E;font-style:italic;">// 驾考车对象池</span></span>
<span class="line"><span style="color:#E06C75;">    _candidateQueue</span><span style="color:#ABB2BF;">: [],        </span><span style="color:#7F848E;font-style:italic;">// 考生队列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 注册考生 ID 列表 */</span></span>
<span class="line"><span style="color:#61AFEF;">    registCandidates</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">candidateList</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        candidateList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">candidateId</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">registCandidate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">candidateId</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 注册手动档考生 */</span></span>
<span class="line"><span style="color:#61AFEF;">    registCandidate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">candidateId</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> examCar</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getManualExamCar</span><span style="color:#ABB2BF;">()    </span><span style="color:#7F848E;font-style:italic;">// 找一个未被占用的手动档驾考车</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">examCar</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            examCar</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">examine</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">candidateId</span><span style="color:#ABB2BF;">)           </span><span style="color:#7F848E;font-style:italic;">// 开始考试，考完了让队列中的下一个考生开始考试</span></span>
<span class="line"><span style="color:#ABB2BF;">              .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                  const</span><span style="color:#E5C07B;"> nextCandidateId</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_candidateQueue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_candidateQueue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">                  nextCandidateId</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">registCandidate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nextCandidateId</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">              })</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_candidateQueue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">candidateId</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 注册手动档车 */</span></span>
<span class="line"><span style="color:#61AFEF;">    initManualExamCar</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">manualExamCarNum</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> manualExamCarNum</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_pool</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ExamCar</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 获取状态为未被占用的手动档车 */</span></span>
<span class="line"><span style="color:#61AFEF;">    getManualExamCar</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_pool</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">car</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">car</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">usingState</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ManualExamCarPool</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">initManualExamCar</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)          </span><span style="color:#7F848E;font-style:italic;">// 一共有3个驾考车</span></span>
<span class="line"><span style="color:#E5C07B;">ManualExamCarPool</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">registCandidates</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">])  </span><span style="color:#7F848E;font-style:italic;">// 10个考生来考试</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h4 id="场景例子-2" tabindex="-1">场景例子 <a class="header-anchor" href="#场景例子-2" aria-label="Permalink to &quot;场景例子&quot;">​</a></h4><ul><li>文件上传需要创建多个文件实例的时候</li><li>如果一个应用程序使用了大量的对象，而这些大量的对象造成了很大的存储开销时就应该考虑使用享元模式</li></ul><h4 id="优点-7" tabindex="-1">优点 <a class="header-anchor" href="#优点-7" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>大大减少对象的创建，降低系统的内存，使效率提高。</li></ul><h4 id="缺点-8" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-8" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质， 不应该随着内部状态的变化而变化，否则会造成系统的混乱</li></ul><p>享元模式：运用共享技术来有效地支持对象的复用，以减少创建的对象的数量。</p><ul><li>通过共享对象节约内存资源，提高性能和效率</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;享元模式&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 享元模式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let userNumber = 10;  //单数是大人  双数是小孩；</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> horseNum</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// class CreateHorse{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     constructor(type){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         horseNum++;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         this.horseNum = horseNum;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         this.type = type?&#39;大马&#39;:&#39;小马&#39;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     ride(uid){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         console.log(\`人\${uid}在骑\${this.horseNum}号\${this.type}\`);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 更多实例</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// for(let i=1;i&lt;=userNumber;i++){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     let horse;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     if(i%2===0){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         horse = new CreateHorse(false);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     }else{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         horse = new CreateHorse(true);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     horse.ride(i);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(horseNum);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 享元模式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let  smallHorse = new CreateHorse(false);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let  bigHorse = new CreateHorse(true);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// for(let i=1;i&lt;=userNumber;i++){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     if(i%2===0){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         smallHorse.ride(i);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     }else{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         bigHorse.ride(i);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(horseNum);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 改进享元模式</span></span>
<span class="line"><span style="color:#C678DD;">		class</span><span style="color:#E5C07B;"> CreateHorse</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				horseNum</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">horseNum</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> horseNum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> type</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;大马&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;小马&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">finish</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#61AFEF;">			ride</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">uid</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`人</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">uid</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">在骑</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">horseNum</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">号</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">finish</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">					setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">						resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`人</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">uid</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">在骑</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">horseNum</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">号</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">骑行完毕!!\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">						this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">finish</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					}, </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		class</span><span style="color:#E5C07B;"> HorsePool</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">horse</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#C678DD;">					new</span><span style="color:#61AFEF;"> CreateHorse</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#C678DD;">					new</span><span style="color:#61AFEF;"> CreateHorse</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#C678DD;">					new</span><span style="color:#61AFEF;"> CreateHorse</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">				];</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">people</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#61AFEF;">			rideHorse</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">people</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">uid</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					let</span><span style="color:#E06C75;"> horse</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHorse</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">horse</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">						horse</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ride</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">uid</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">							console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">							this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">people</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">rideHorse</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">people</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">						});</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#61AFEF;">			getHorse</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">horse</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">finish</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> horsePool</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HorsePool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		horsePool</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">rideHorse</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br></div></div><h1 id="三、行为型模式-behavioral-patterns" tabindex="-1">三、行为型模式（Behavioral Patterns） <a class="header-anchor" href="#三、行为型模式-behavioral-patterns" aria-label="Permalink to &quot;三、行为型模式（Behavioral Patterns）&quot;">​</a></h1><h2 id="策略模式-strategy-pattern" tabindex="-1">策略模式（Strategy Pattern） <a class="header-anchor" href="#策略模式-strategy-pattern" aria-label="Permalink to &quot;策略模式（Strategy Pattern）&quot;">​</a></h2><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。</p><p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的context对象。策略对象改变context对象的执行算法。</p><p>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。目的把算法使用和算法的实现分离开来。算法使用(不变)， 算法实现即策略(变)分开来。</p><blockquote><p>应用实例： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略； 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。</p></blockquote><p>策略模式（宿主节点，类组件节点，函数节点diff）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//算法的实现</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> stragies</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#98C379;">            &#39;S&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">salary</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> salary</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 4</span></span>
<span class="line"><span style="color:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#98C379;">            &#39;A&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">salary</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> salary</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 5</span></span>
<span class="line"><span style="color:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#98C379;">            &#39;B&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">salary</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> salary</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 6</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//算法的使用</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> calculateBonus</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">level</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">salary</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> stragies</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">level</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">salary</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">calculateBonus</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;S&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4000</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">calculateBonus</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;B&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>以上代码还有很大的改进空间，比如当一个实例有多个策略的时候，我们可以在算法的使用即calculateBonus改写一下，可以放置一个缓存区来进行存储策略，再一一使用这些策略。</p><p>再举以下表单验证🌰</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 算法实现</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> strategies</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    isNonEmpty</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">errorMsg</span><span style="color:#ABB2BF;"> ){</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> ( </span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;"> ){ </span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#61AFEF;">    minLength</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">length</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">errorMsg</span><span style="color:#ABB2BF;"> ){ </span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> ( </span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;"> ){</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#61AFEF;">    isMobile</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">errorMsg</span><span style="color:#ABB2BF;"> ){ </span><span style="color:#7F848E;font-style:italic;">// 手机号码格式</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> ( </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">/(</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">1</span><span style="color:#D19A66;">[3|5|8][0-9]{9}</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">)/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> ) ){ </span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//算法的使用</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> Validator</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []; </span><span style="color:#7F848E;font-style:italic;">// 保存校验规则</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Validator</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">( </span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    var</span><span style="color:#E06C75;font-style:italic;"> ary</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&#39;:&#39;</span><span style="color:#ABB2BF;"> ); </span></span>
<span class="line"><span style="color:#ABB2BF;">    this.cache.push(</span><span style="color:#E06C75;font-style:italic;">function</span><span style="color:#ABB2BF;">(){ </span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> strategy</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ary</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">(); </span></span>
<span class="line"><span style="color:#E5C07B;">        ary</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unshift</span><span style="color:#ABB2BF;">( </span><span style="color:#E5C07B;">dom</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> ); </span></span>
<span class="line"><span style="color:#E5C07B;">        ary</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;">errorMsg</span><span style="color:#ABB2BF;"> ); </span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> strategies</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">strategy</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dom</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ary</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }); </span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Validator</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> ( </span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">validatorFunc</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">validatorFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;"> ]; ){</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> msg</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> validatorFunc</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 开始校验，并取得校验后的返回信息 </span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> ( </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;"> ){ </span><span style="color:#7F848E;font-style:italic;">// 如果有确切的返回值，说明校验没有通过</span></span>
<span class="line"><span style="color:#C678DD;">              return</span><span style="color:#E06C75;"> msg</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> validataFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> validator</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Validator</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 创建一个 validator 对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /***************添加一些校验规则****************/</span></span>
<span class="line"><span style="color:#E5C07B;">    validator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">( </span><span style="color:#E5C07B;">registerForm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userName</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;isNonEmpty&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;用户名不能为空&#39;</span><span style="color:#ABB2BF;"> );           </span></span>
<span class="line"><span style="color:#E5C07B;">    validator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">( </span><span style="color:#E5C07B;">registerForm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;minLength:6&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;密码长度不能少于 6位&#39;</span><span style="color:#ABB2BF;">);     </span></span>
<span class="line"><span style="color:#E5C07B;">    validator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">( </span><span style="color:#E5C07B;">registerForm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">phoneNumber</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;isMobile&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;手机号码格式不正确&#39;</span><span style="color:#ABB2BF;"> );</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> validator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 获得校验结果</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 返回校验结果 </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//调用</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> registerForm</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&#39;registerForm&#39;</span><span style="color:#ABB2BF;"> ); </span><span style="color:#E5C07B;">registerForm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onsubmit</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> validataFunc</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 如果 errorMsg 有确切的返回值，说明未通过校验 </span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> ( </span><span style="color:#E06C75;">errorMsg</span><span style="color:#ABB2BF;"> ){</span></span>
<span class="line"><span style="color:#61AFEF;">        alert</span><span style="color:#ABB2BF;"> ( </span><span style="color:#E06C75;">errorMsg</span><span style="color:#ABB2BF;"> );</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 阻止表单提交 </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p>策略模式是一种设计模式，它<code>定义了一系列算法，并将每个算法封装起来，使它们可以相互替换</code>。策略模式让算法独立于使用它的客户端而独立变化。这种模式属于行为型模式。 示例代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Strategy</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  execute</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> StrategyA</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Strategy</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  execute</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Executing strategy A&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> StrategyB</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Strategy</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  execute</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Executing strategy B&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Context</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">strategy</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">strategy</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> strategy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  executeStrategy</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">strategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Context</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> StrategyA</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;A&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">executeStrategy</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Executing strategy A</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">strategy</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> StrategyB</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;B&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">executeStrategy</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Executing strategy B</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;策略模式-校验表单&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/html; charset=utf-8&quot;</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">form</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">&quot;registerForm&quot;</span><span style="color:#D19A66;"> method</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;post&quot;</span><span style="color:#D19A66;"> action</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://xxxx.com/api/register&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        用户名：&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;userName&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        密码：&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;password&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        手机号码：&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;phoneNumber&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;submit&quot;</span><span style="color:#ABB2BF;">&gt;提交&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">form</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 策略对象</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> strategies</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">          isNoEmpty</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">errorMsg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">              return</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">          },</span></span>
<span class="line"><span style="color:#61AFEF;">          isNoSpace</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">errorMsg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">              return</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">          },</span></span>
<span class="line"><span style="color:#61AFEF;">          minLength</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">length</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">errorMsg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">().</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">              return</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">          },</span></span>
<span class="line"><span style="color:#61AFEF;">          maxLength</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">length</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">errorMsg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">              return</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">          },</span></span>
<span class="line"><span style="color:#61AFEF;">          isMobile</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">errorMsg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">(13</span><span style="color:#D19A66;">[0-9]</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">14</span><span style="color:#D19A66;">[5|7]</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">15</span><span style="color:#D19A66;">[0|1|2|3|5|6|7|8|9]</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">17</span><span style="color:#D19A66;">[7]</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">18</span><span style="color:#D19A66;">[0|1|2|3|5|6|7|8|9]</span><span style="color:#E06C75;">)\\d</span><span style="color:#D19A66;">{8}</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">              return</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }                </span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 验证类</span></span>
<span class="line"><span style="color:#C678DD;">        class</span><span style="color:#E5C07B;"> Validator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">          constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#61AFEF;">          add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dom</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">rules</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">rule</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">rule</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> rules</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">];) {</span></span>
<span class="line"><span style="color:#C678DD;">              let</span><span style="color:#E06C75;"> strategyAry</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rule</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">strategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;:&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">              let</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rule</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">errorMsg</span></span>
<span class="line"><span style="color:#E5C07B;">              this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                let</span><span style="color:#E06C75;"> strategy</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> strategyAry</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">                strategyAry</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unshift</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dom</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                strategyAry</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">errorMsg</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> strategies</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">strategy</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dom</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">strategyAry</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">              })</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#61AFEF;">          start</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">validatorFunc</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">validatorFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">];) {</span></span>
<span class="line"><span style="color:#C678DD;">              let</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> validatorFunc</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">              if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">errorMsg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> errorMsg</span></span>
<span class="line"><span style="color:#ABB2BF;">              }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 调用代码</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> registerForm</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;registerForm&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#61AFEF;"> validataFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">          let</span><span style="color:#E06C75;"> validator</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Validator</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">          validator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">registerForm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userName</span><span style="color:#ABB2BF;">, [{</span></span>
<span class="line"><span style="color:#E06C75;">            strategy</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;isNoEmpty&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            errorMsg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;用户名不可为空&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">          }, {</span></span>
<span class="line"><span style="color:#E06C75;">            strategy</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;isNoSpace&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            errorMsg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;不允许以空白字符命名&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">          }, {</span></span>
<span class="line"><span style="color:#E06C75;">            strategy</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;minLength:2&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            errorMsg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;用户名长度不能小于2位&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">          }])</span></span>
<span class="line"><span style="color:#E5C07B;">          validator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">registerForm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">, [ {</span></span>
<span class="line"><span style="color:#E06C75;">            strategy</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;minLength:6&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            errorMsg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;密码长度不能小于6位&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">          }])</span></span>
<span class="line"><span style="color:#E5C07B;">          validator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">registerForm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">phoneNumber</span><span style="color:#ABB2BF;">, [{</span></span>
<span class="line"><span style="color:#E06C75;">            strategy</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;isMobile&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            errorMsg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;请输入正确的手机号码格式&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">          }])</span></span>
<span class="line"><span style="color:#C678DD;">          return</span><span style="color:#E5C07B;"> validator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        registerForm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onsubmit</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">          let</span><span style="color:#E06C75;"> errorMsg</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> validataFunc</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">          if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">errorMsg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">            alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">errorMsg</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br></div></div><h4 id="场景例子-3" tabindex="-1">场景例子 <a class="header-anchor" href="#场景例子-3" aria-label="Permalink to &quot;场景例子&quot;">​</a></h4><ul><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的&#39;行为&#39;，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li><li>一个系统需要动态地在几种算法中选择一种。</li><li>表单验证</li></ul><h4 id="优点-8" tabindex="-1">优点 <a class="header-anchor" href="#优点-8" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>利用组合、委托、多态等技术和思想，可以有效的避免多重条件选择语句</li><li>提供了对开放-封闭原则的完美支持，将算法封装在独立的strategy中，使得它们易于切换，理解，易于扩展</li><li>利用组合和委托来让Context拥有执行算法的能力，这也是继承的一种更轻便的代替方案</li></ul><h4 id="缺点-9" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-9" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>会在程序中增加许多策略类或者策略对象</li><li>要使用策略模式，必须了解所有的strategy，必须了解各个strategy之间的不同点，这样才能选择一个合适的strategy</li></ul><h2 id="模板方法模式-template-method-pattern" tabindex="-1">模板方法模式（Template Method Pattern） <a class="header-anchor" href="#模板方法模式-template-method-pattern" aria-label="Permalink to &quot;模板方法模式（Template Method Pattern）&quot;">​</a></h2><p>在模板方法模式（Template Method Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</p><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><blockquote><p>应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异； 2、西游记里面菩萨定好的81难，这就是一个顶层的逻辑骨架； 3、spring中对Hibernate的支持，将一些已经定好的方法封装起来，比如开启事务、获取Session、关闭Session等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p></blockquote><p>模板方法模式是一种行为设计模式。它定义了一个操作中的算法骨架，将某些步骤延迟到子类中实现。模板方法<code>使得子类可以不改变算法的结构即可重新定义该算法的某些特定步骤</code>。</p><p>示例代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Game</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  setup</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  start</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">finish</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  play</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  finish</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Chess</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Game</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Setting up chess game&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  play</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Playing chess&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  finish</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Finishing chess game&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> TicTacToe</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Game</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Setting up TicTacToe game&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  play</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Playing TicTacToe&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  finish</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Finishing TicTacToe game&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> game</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Chess</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">game</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">game</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> TicTacToe</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">game</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法和封装子类中所有方法的执行顺序。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Beverage</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;font-style:italic;">brewDrink</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">addCondiment</span><span style="color:#ABB2BF;">}) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">brewDrink</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> brewDrink</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">addCondiment</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> addCondiment</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 烧开水，共用方法 */</span></span>
<span class="line"><span style="color:#61AFEF;">    boilWater</span><span style="color:#ABB2BF;">() { </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;水已经煮沸=== 共用&#39;</span><span style="color:#ABB2BF;">) }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 倒杯子里，共用方法 */</span></span>
<span class="line"><span style="color:#61AFEF;">    pourCup</span><span style="color:#ABB2BF;">() { </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;倒进杯子里===共用&#39;</span><span style="color:#ABB2BF;">) }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 模板方法 */</span></span>
<span class="line"><span style="color:#61AFEF;">    init</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">boilWater</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">brewDrink</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pourCup</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addCondiment</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 咖啡 */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> coffee</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Beverage</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     /* 冲泡咖啡，覆盖抽象方法 */</span></span>
<span class="line"><span style="color:#61AFEF;">     brewDrink</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() { </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;冲泡咖啡&#39;</span><span style="color:#ABB2BF;">) },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     /* 加调味品，覆盖抽象方法 */</span></span>
<span class="line"><span style="color:#61AFEF;">     addCondiment</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() { </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;加点奶和糖&#39;</span><span style="color:#ABB2BF;">) }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">coffee</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="场景例子-4" tabindex="-1">场景例子 <a class="header-anchor" href="#场景例子-4" aria-label="Permalink to &quot;场景例子&quot;">​</a></h4><ul><li>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现</li><li>子类中公共的行为应被提取出来并集中到一个公共父类中的避免代码重复</li></ul><h4 id="优点-9" tabindex="-1">优点 <a class="header-anchor" href="#优点-9" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>提取了公共代码部分，易于维护</li></ul><h4 id="缺点-10" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-10" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>增加了系统复杂度，主要是增加了的抽象类和类间联系</li></ul><h2 id="代理模式-javascript独有" tabindex="-1">代理模式(JavaScript独有) <a class="header-anchor" href="#代理模式-javascript独有" aria-label="Permalink to &quot;代理模式(JavaScript独有)&quot;">​</a></h2><p>代理是为了控制对对象的访问，不让外部直接访问到对象。在现实生活中，也有很多代理的场景。比如你需要买一件国外的产品，这时候你可以通过代购来购买产品。</p><p>在实际代码中其实代理的场景很多，也就不举框架中的例子了，比如事件代理就用到了代理模式。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;1&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;2&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;3&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;4&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;5&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> ul</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#ul&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	ul</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>因为存在太多的 li，不可能每个都去绑定事件。这时候可以通过给父节点绑定一个事件，让父节点作为代理去拿到真实点击的节点。</p><h2 id="观察者模式-observer-pattern" tabindex="-1">观察者模式（Observer Pattern） <a class="header-anchor" href="#观察者模式-observer-pattern" aria-label="Permalink to &quot;观察者模式（Observer Pattern）&quot;">​</a></h2><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。</p><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><blockquote><p>应用实例： 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价； 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义observe</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> queuedObservers</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> observe</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> queuedObservers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> observable</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// notify</span></span>
<span class="line"><span style="color:#E5C07B;">			queuedObservers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">observer</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> observer</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>代码测试</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> observable</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;789&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;触发了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;前端柒八九&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 触发了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 前端柒八九</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>观察者模式是一种行为设计模式，其中对象之间存在一对多的依赖关系。当一个对象的状态发生变化时，它的所有依赖者都得到通知并自动更新。观察者模式将<code>对象之间的关系解耦，使得它们可以独立变化</code>。</p><p>示例代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Subject</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">observers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  attach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">observer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">observers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">observer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  detach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">observer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">observers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">observer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">observers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  notify</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> observer</span><span style="color:#C678DD;"> of</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">observers</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Observer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">subject</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteSubject</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Subject</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  set_state</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  get_state</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteObserver</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Observer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">subject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Got updated value: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">subject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_state</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> subject</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteSubject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;initial state&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> observer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteObserver</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">subject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">observer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">subject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set_state</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;new state&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><p>定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使它们能够自动更新自己，当一个对象的改变需要同时改变其它对象，并且它不知道具体有多少对象需要改变的时候，就应该考虑使用观察者模式。</p><ul><li>发布 &amp; 订阅</li><li>一对多</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 主题 保存状态，状态变化之后触发所有观察者对象</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Subject</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">observers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  getState</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notifyAllObservers</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  notifyAllObservers</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">observers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">observer</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">      observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  attach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">observer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">observers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">observer</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 观察者</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Observer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">subject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subject</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> subject</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attach</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  update</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> update, state: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 测试</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Subject</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> o1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Observer</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;o1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> o2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Observer</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;02&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h4 id="场景-4" tabindex="-1">场景 <a class="header-anchor" href="#场景-4" aria-label="Permalink to &quot;场景&quot;">​</a></h4><ul><li>DOM事件</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello world!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>vue 响应式</li></ul><h4 id="优点-10" tabindex="-1">优点 <a class="header-anchor" href="#优点-10" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>支持简单的广播通信，自动通知所有已经订阅过的对象</li><li>目标对象与观察者之间的抽象耦合关系能单独扩展以及重用</li><li>增加了灵活性</li><li>观察者模式所做的工作就是在解耦，让耦合的双方都依赖于抽象，而不是依赖于具体。从而使得各自的变化都不会影响到另一边的变化。</li></ul><h4 id="缺点-11" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-11" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><p>过度使用会导致对象与对象之间的联系弱化，会导致程序难以跟踪维护和理解</p><p><strong>观察者</strong>模式允许你定义一个订阅机制来通知多个对象它们正在观察的对象发生的任何事件。基本上，这就像在给定对象上有一个事件侦听器，当该对象执行我们正在侦听的操作时，我们会采取一些行动。</p><p>React的useEffect钩子就是一个很好的例子。 useEffect在我们声明的那一刻执行给定的函数。</p><p>钩子分为两个主要部分：可执行函数和依赖数组。如果数组为空，如下例所示，每次渲染组件时都会执行该函数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">  useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;The component has rendered&#39;</span><span style="color:#ABB2BF;">) }, [])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果在依赖数组中声明任何变量，则该函数将仅在这些变量发生变化时执行。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">  useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;var1 has changed&#39;</span><span style="color:#ABB2BF;">) }, [</span><span style="color:#E06C75;">var1</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>也可以将JavaScript的事件监听器视为观察者模式。另外，响应式编程和库如<a href="https://rxjs.dev/" target="_blank" rel="noreferrer">RxJS</a>，用来处理异步信息和事件的方法也是这个模式。</p><ul><li><strong>观察者模式</strong> （Observer Pattern） 定义一个对象与其他对象之间的一种依赖关系，当对象发生某种变化的时候，依赖它的其它对象都会得到更新 <ul><li>自定义事件绑定 addEvent</li><li>自定义事件触发 trigger</li><li>自定义事件移除 removeEvent</li></ul></li><li>实现案例 GameEvent 类</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;观察者模式（自定义事件）&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 观察者模式 （自定义事件）:定义一个对象与其他对象之间的一种依赖关系，当对象发生某种变化的时候，依赖它的其它对象都会得到更新。解耦 、延迟执行、一对多的依赖关系；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 发布订阅 ：三者关系。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let obj ={</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     fn(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         console.log(&quot;fn&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// document.querySelector(&quot;button&quot;).addEventListener(&quot;click&quot;,function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     // console.log(&quot;fn1&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     obj.fn();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// document.querySelector(&quot;button&quot;).addEventListener(&quot;click&quot;,function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     // console.log(&quot;fn1&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     obj.fn();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		class</span><span style="color:#E5C07B;"> Event</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 保存事件</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 添加事件,监听 、观察</span></span>
<span class="line"><span style="color:#61AFEF;">			addEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// {&#39;myevent&#39;:[fn1,fn2....],&#39;myevent2&#39;:[fn1,fn2..]}</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 触发</span></span>
<span class="line"><span style="color:#61AFEF;">			trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">					v</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 移除事件removeEvent (eventName,fn）;</span></span>
<span class="line"><span style="color:#61AFEF;">			removeEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eventName</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#C678DD;">				for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">][</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#E06C75;"> fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">						this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">						break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fn111&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fn222&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> myevent</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Event</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 添加事件(没有执行)</span></span>
<span class="line"><span style="color:#E5C07B;">		myevent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;myevent&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">obj1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		myevent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;myevent&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">obj2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// myevent.removeEvent(&quot;myevent&quot;,obj1.fn);  //移除obj2.fn</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			myevent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;myevent&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// vue2  eventBus ：总线模式。 // $bus =  new Vue();   $bus.on() //添加事件  $bus.emit(&quot;eventName&quot;,fn); //触发</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 作业：1.移除事件removeEvent(eventName,fn）;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><p>自定义事件例子</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;自定义事件管理&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#ABB2BF;">&gt;111&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// document.querySelector(&quot;.box&quot;).addEventListener(&quot;click&quot;,function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     console.log(&quot;click1&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// document.querySelector(&quot;.box&quot;).addEventListener(&quot;click&quot;,function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     console.log(&quot;click2&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			fn1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fn1更新&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			fn2</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fn2更新&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 管理事件类</span></span>
<span class="line"><span style="color:#C678DD;">		class</span><span style="color:#E5C07B;"> MyEvent</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#61AFEF;">			addEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// {myevent1:[fn1,fn2...],myevent2:[fn1,fn2...]}</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#61AFEF;">			trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eventName</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">					fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> eventObj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyEvent</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		eventObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;myevent&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">obj1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fn1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		eventObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;myevent&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">obj2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fn2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// eventObj.removeEvent(&quot;myevent&quot;,obj2.fn2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			eventObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;myevent&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 作业：1.实现一个removeEvent 可以删除指定的指定以事件。2.通过自定义事件管理init方法，在登录时候延迟执行。</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div><p>定义3</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Observer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">observers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    subscribe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">observers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    unsubscribe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">observers</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">observers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">observer</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> observer</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">observers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">observer</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Usage</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> observer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Observer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> callback1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> data</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Callback 1: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">data</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> callback2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> data</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Callback 2: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">data</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Data has been updated.&#39;</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Output: </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Callback 1: Data has been updated.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Callback 2: Data has been updated.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="发布订阅模式-publish-subscribe-pattern" tabindex="-1">发布订阅模式（Publish-Subscribe Pattern） <a class="header-anchor" href="#发布订阅模式-publish-subscribe-pattern" aria-label="Permalink to &quot;发布订阅模式（Publish-Subscribe Pattern）&quot;">​</a></h2><p>发布-订阅模式也叫做观察者模式。通过一对一或者一对多的依赖关系，当对象发生改变时，订阅方都会收到通知。在现实生活中，也有很多类似场景，比如我需要在购物网站上购买一个产品，但是发现该产品目前处于缺货状态，这时候我可以点击有货通知的按钮，让网站在产品有货的时候通过短信通知我。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Observer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	caches</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}; </span><span style="color:#7F848E;font-style:italic;">// 事件中心</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// eventName事件名-独一无二, fn订阅后执行的自定义行为</span></span>
<span class="line"><span style="color:#61AFEF;">	on</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">caches</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">caches</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">caches</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 发布 =&gt; 将订阅的事件进行统一执行</span></span>
<span class="line"><span style="color:#61AFEF;">	emit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">caches</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">caches</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 取消订阅 =&gt; 若fn不传, 直接取消该事件所有订阅信息</span></span>
<span class="line"><span style="color:#61AFEF;">	off</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">caches</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> newCaches</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> fn</span></span>
<span class="line"><span style="color:#C678DD;">				?</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">caches</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> fn</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">				:</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">caches</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newCaches</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>代码测试</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">ob</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Observer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">l1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`l1\`</span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">}</span><span style="color:#98C379;">\`);</span></span>
<span class="line"><span style="color:#98C379;">l2 = (data) =&gt; console.log(\`</span><span style="color:#61AFEF;">l2</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">data</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;event1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;event1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//发布订阅</span></span>
<span class="line"><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;event1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">789</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// l1\`789</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// l2\`789</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 取消，订阅l1</span></span>
<span class="line"><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">off</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;event1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;event1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">567</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//l2\`567</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在实际代码中其实发布-订阅模式也很常见，比如我们点击一个按钮触发了点击事件就是使用了该模式</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> ul</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#ul&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	ul</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 Vue 中，如何实现响应式也是使用了该模式。对于需要实现响应式的对象来说，在 get 的时候会进行依赖收集，当改变了对象的属性时，就会触发派发更新。</p><p>发布订阅模式（Publish-Subscribe Pattern）是一种消息传递范式，它允许系统中的各个部分在不直接引用彼此的情况下进行通信。这种模式通过使用消息队列或主题来实现，发布者（Publisher）将消息发布到这些队列或主题中，而订阅者（Subscriber）则订阅这些队列或主题以接收和处理消息。这种模式的核心优势在于它提供了一种松耦合的通信方式，使得发布者和订阅者能够灵活地进行交互，而无需知道对方的具体实现。</p><p><strong>发布订阅模式的关键特点</strong>包括：</p><ul><li><strong>松耦合</strong>：发布者和订阅者之间不需要相互了解，它们之间的通信是通过消息队列或主题进行的。</li><li><strong>消息过滤</strong>：订阅者可以根据自己的需求订阅特定类型的消息，而不是接收所有发布的消息。</li><li><strong>动态网络构建</strong>：新的订阅者可以随时加入并开始接收消息，而发布者无需进行任何修改。</li><li><strong>异步通信</strong>：消息的发送和接收是异步进行的，发布者在发布消息后可以继续其他处理，而不必等待订阅者的响应。</li></ul><p><strong>使用场景</strong>：</p><ul><li>当你希望在多个消费者之间广播消息时，例如新闻更新、股票价格变动等。</li><li>当你的应用程序需要与其他独立开发的应用程序或服务进行通信时，这些应用程序或服务可能使用不同的平台或编程语言。</li><li>当你需要实现一个事件驱动的架构时，其中某些事件的发生会触发多个处理流程。</li></ul><p><strong>实现发布订阅模式时需要考虑的点</strong>：</p><ul><li><strong>订阅管理</strong>：如何有效地管理订阅者的订阅和取消订阅。</li><li><strong>消息传递的可靠性</strong>：确保消息能够可靠地传递到每个订阅者。</li><li><strong>性能和扩展性</strong>：系统应该能够处理大量的消息和订阅者。</li><li><strong>安全性</strong>：消息传递过程中的数据安全和访问控制。</li></ul><p>发布订阅模式是一种强大的设计模式，它在现代软件架构中扮演着重要的角色，特别是在构建大规模、分布式和微服务架构的系统时</p><p>定义对象间的一种一对多的依赖关系，当对象状态发生变化，所有依赖与它的对象都能被通知。</p><p>1、主要广泛应用于异步编程中。比如dom监听事件、ajax请求后的回调等等</p><p>2、发布和订阅对象分别互不干扰，当发布者改变时不会影响订阅者，当订阅者改变时不改变发布者</p><p>优点：1、时间上解耦 2、对象之间解耦</p><p>1、订阅一个消息，如果该消息最终未发生，这个订阅者会在内存里面，因此会消耗内存。</p><p>2、该模式虽然可以弱化对象之间的关系，但是如果过度使用，对象之间的关系深埋在背后，会导致程序难维护</p><p>下面用es6写了一个通用的发布订阅者模式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Pubsub</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     //{key: [fn,fn,fn], key2: [fn,fn,fn]}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // listen是放到cache里面</span></span>
<span class="line"><span style="color:#61AFEF;">    listen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 根据name,调传进来的fn</span></span>
<span class="line"><span style="color:#61AFEF;">    trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">,...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //  // 创建副本，如果回调函数内继续注册相同事件，会造成死循环</span></span>
<span class="line"><span style="color:#C678DD;">            var</span><span style="color:#E06C75;"> fns</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> fn</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> fns</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">                fn</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// class Salesoffice extends Pubsub {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     constructor() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         super() ES6在继承中强制要求，必须在子类调用super，因为子类的this是由父类得来的。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //super等价于parent.prototype.constructor.call(sub)。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> pubsub</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Pubsub</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">pubsub</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;suq88&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">price</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">squ</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;价格&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">price</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;平方&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">squ</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">pubsub</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;suq108&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">price</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">squ</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;价格&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">price</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;平方&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">squ</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">pubsub</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;suq108&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">108</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">pubsub</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;suq88&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">19900</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">1088</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p>从需求来看，不一定需要订阅才发布。举个例子，像QQ的离线消息，离线消息放在了服务器之中，等到下一次登入上线的时候可以重新收到这条消息。再比如，获取到信息之后才渲染用户导航模块，而获取用户信息操作是一个ajax异步请求，当ajax请求成功返回之后发布事件，之前订阅的事件可以收到信息。</p><p>但是这只是一个理想的状况，有可能ajax返回地比较快，用户导航的模块还没有被加载好（也就是还没有订阅相应的事件），所以需要有先发布后订阅的能力。这个时候，我们可以采取以下方法：</p><p>（像QQ离线未读消息一样，只会被重读一次，这种操作也只能进行一次）</p><p>1、建立一个存放离线事件的堆栈</p><p>2、事件发布的时候如果还没有订阅的，暂时把发布时间这个动作包裹在一个函数里面，再放入堆栈中</p><p>3、等有对象来订阅的时候，遍历改堆栈并且执行这些包装函数，重新发布里面的时间</p><h3 id="观察者模式和发布订阅模式的区别" tabindex="-1">观察者模式和发布订阅模式的区别 <a class="header-anchor" href="#观察者模式和发布订阅模式的区别" aria-label="Permalink to &quot;观察者模式和发布订阅模式的区别&quot;">​</a></h3><p><strong>观察者模式</strong>和<strong>发布订阅模式</strong>虽然有相似之处，但它们之间存在一些区别：</p><ol><li><strong>观察者模式</strong>（Observer Pattern）： <ul><li>用于实现<strong>松耦合</strong>（loosely coupled）。</li><li>一个被观察者（Subject）维护一组观察者（Observer），这些观察者实现相同的接口。</li><li>当被观察者状态发生变化时，通知观察者调用相应的方法。</li><li>适用于单个应用内部。</li></ul></li><li><strong>发布订阅模式</strong>（Publish-Subscribe Pattern）： <ul><li>更灵活，是观察者模式的进阶版。</li><li>发布者（Publisher）不直接通知订阅者（Subscriber），而是通过消息队列或代理（Broker）来实现通信。</li><li>发布者和订阅者之间完全解耦，互不相识。</li><li>适用于跨应用的场景，如消息中间件。</li></ul></li></ol><p>总结：</p><ul><li>观察者模式中只有两个角色：观察者和被观察者。</li><li>发布订阅模式中除了发布者和订阅者，还有一个经纪人（Broker）。</li><li>观察者和被观察者是松耦合的关系，而发布者和订阅者则完全不存在耦合。</li></ul><h2 id="观察者模式-vs-发布订阅模式" tabindex="-1">观察者模式 VS 发布订阅模式 <a class="header-anchor" href="#观察者模式-vs-发布订阅模式" aria-label="Permalink to &quot;观察者模式 VS 发布订阅模式&quot;">​</a></h2><p><img src="`+p+`" alt="img"></p><ol><li>从表面上看： <ul><li>观察者模式里，只有两个角色 —— <strong>观察者</strong> + <strong>被观察者</strong></li><li>而发布订阅模式里，却不仅仅只有发布者和订阅者两个角色，还有一个经常被我们忽略的 —— <code>{经纪人|Broker}</code></li></ul></li><li>往更深层次讲： <ul><li>观察者和被观察者，是<code>松耦合</code>的关系</li><li>发布者和订阅者，则完全不存在耦合</li></ul></li><li>从使用层面上讲： <ul><li>观察者模式，多用于<strong>单个应用内部</strong></li><li>发布订阅模式，则更多的是一种<code>{跨应用的模式|cross-application pattern}</code> ，比如我们常用的消息中间件</li></ul></li></ol><h2 id="迭代器模式" tabindex="-1">迭代器模式 <a class="header-anchor" href="#迭代器模式" aria-label="Permalink to &quot;迭代器模式&quot;">​</a></h2><p>迭代器模式（Iterator Pattern）是Java和.Net编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。</p><p>迭代器模式属于行为型模式。</p><p>提供一种方法顺序访问一个聚合对象中各个元素，而又无须暴露该对象的内部表示。</p><blockquote><p>应用实例：的iterator。</p></blockquote><p>迭代器模式是一种行为设计模式，它提供了一种方式来<code>顺序访问集合对象中的元素</code>。迭代器模式将遍历集合的责任交给迭代器，而不是集合自己。这样就可以将集合的实现和遍历算法的实现分离开来，从而提供更好的灵活性。</p><p>示例代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Iterator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">items</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">items</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> items</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cursor</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  has_next</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cursor</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  next</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> item</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cursor</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cursor</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Collection</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">items</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  add_item</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">  iterator</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Iterator</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> collection</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Collection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">collection</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add_item</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;item 1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">collection</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add_item</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;item 2&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">collection</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add_item</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;item 3&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> iterator</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> collection</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has_next</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>提供一种方法顺序一个聚合对象中各个元素，而又不暴露该对象的内部表示。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Iterator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">conatiner</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">list</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> conatiner</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">list</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    next</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    hasNext</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Container</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">list</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">list</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> list</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    getIterator</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Iterator</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 测试代码</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> container</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Container</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> iterator</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> container</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getIterator</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h4 id="场景例子-5" tabindex="-1">场景例子 <a class="header-anchor" href="#场景例子-5" aria-label="Permalink to &quot;场景例子&quot;">​</a></h4><ul><li>Array.prototype.forEach</li><li>jQuery中的$.each()</li><li>ES6 Iterator</li></ul><h4 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h4><ul><li>访问一个聚合对象的内容而无需暴露它的内部表示。</li><li>为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作</li></ul><h4 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>对于集合内部结果常常变化各异，不想暴露其内部结构的话，但又想让客户代码透明的访问其中的元素，可以使用迭代器模式</p><p><strong>迭代器</strong>用于遍历集合的元素。这在现代编程语言中显得微不足道，但并非如此。</p><p>JavaScript内置函数（<code>for</code>、<code>forEach</code>、<code>for...of</code>、<code>for...in</code>、<code>map</code>、<code>reduce</code>、<code>filter</code>等）就是手边可以拿来遍历数据结构的方法。</p><p><a href="https://www.freecodecamp.org/news/introduction-to-algorithms-with-javascript-examples/#traversing-algorithms" target="_blank" rel="noreferrer">遍历算法</a> 以及更为复杂的<a href="https://www.freecodecamp.org/news/data-structures-in-javascript-with-examples/" target="_blank" rel="noreferrer">树和图这样的数据结构</a>使用的代码也是迭代器的例子。</p><h2 id="责任链模式" tabindex="-1">责任链模式 <a class="header-anchor" href="#责任链模式" aria-label="Permalink to &quot;责任链模式&quot;">​</a></h2><p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。</p><p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><p>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p><blockquote><p>应用实例：红楼梦中的&quot;击鼓传花&quot;。</p></blockquote><p>责任链模式（Chain of Responsibility）是一种行为型设计模式。它可以<code>让多个对象都有机会处理请求，从而避免将请求的发送者和接收者耦合在一起</code>。将这些对象连成一个链，并沿着这条链传递请求，直到有一个对象处理它为止。</p><p>实现方式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Handler</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nextHandler</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  setNextHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">handler</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nextHandler</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> handler</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nextHandler</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteHandlerA</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Handler</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">request</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;A&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#98C379;"> \`Handle Request </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">request</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;font-style:italic;"> super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteHandlerB</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Handler</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">request</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;B&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#98C379;"> \`Handle Request </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">request</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;font-style:italic;"> super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteHandlerC</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Handler</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">request</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;C&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#98C379;"> \`Handle Request </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">request</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;font-style:italic;"> super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> handlerA</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteHandlerA</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> handlerB</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteHandlerB</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> handlerC</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteHandlerC</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">handlerA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setNextHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">handlerB</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">handlerB</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setNextHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">handlerC</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">handlerA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;A&#39;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// Handle Request A</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">handlerA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;B&#39;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// Handle Request B</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">handlerA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;C&#39;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// Handle Request C</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">handlerA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;D&#39;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><p>使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 请假审批，需要组长审批、经理审批、总监审批</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Action</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nextAction</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    setNextAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nextAction</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> action</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    handle</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> 审批\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nextAction</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextAction</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Action</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;组长&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Action</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;经理&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a3</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Action</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;总监&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">a1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setNextAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">a2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setNextAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">a1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="场景例子-6" tabindex="-1">场景例子 <a class="header-anchor" href="#场景例子-6" aria-label="Permalink to &quot;场景例子&quot;">​</a></h4><ul><li>JS 中的事件冒泡</li><li>作用域链</li><li>原型链</li></ul><h4 id="优点-11" tabindex="-1">优点 <a class="header-anchor" href="#优点-11" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>降低耦合度。它将请求的发送者和接收者解耦。</li><li>简化了对象。使得对象不需要知道链的结构</li><li>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任</li><li>增加新的请求处理类很方便。</li></ul><h4 id="缺点-12" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-12" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>不能保证某个请求一定会被链中的节点处理，这种情况可以在链尾增加一个保底的接受者节点来处理这种即将离开链尾的请求。</li><li>使程序中多了很多节点对象，可能再一次请求的过程中，大部分的节点并没有起到实质性的作用。他们的作用仅仅是让请求传递下去，从性能当面考虑，要避免过长的职责链到来的性能损耗。</li></ul><p><strong>责任链</strong>将请求通过处理链传递，链条上的每一个处理程序决定要么处理请求，要么将请求传递给链条上的下一个处理程序。</p><p>我们可以使用之前示例来演示这个模式，因为Express的中间件就是一种处理程序，要么处理请求，要么将其传递给下一个处理程序。</p><p>如果你想要另一个示例，可以考虑任何需要通过步骤来一步一步实现信息处理的系统。在每个步骤中，不同的实体负责执行操作，并且只有在满足特定条件时，信息才会传递给另一个实体。</p><p>需要使用API的前端应用程序就是很好的例子：</p><ul><li>有一个负责渲染UI的函数</li><li>一旦渲染，另一个函数向API终点发出请求</li><li>如果终点响应符合预期，则将信息传递给另一个函数，该函数以给定方式对数据进行排序并存储在变量中</li><li>一旦变量存储了所需的信息，另一个函数负责在UI中呈现它。</li></ul><p>可以看到这里有许多不同的实体协作执行任务。每个都负责该任务的一个“步骤”，这有助于代码模块化和关注点分离。👌👌</p><h2 id="命令模式" tabindex="-1">命令模式 <a class="header-anchor" href="#命令模式" aria-label="Permalink to &quot;命令模式&quot;">​</a></h2><p>命令模式（Command Pattern）是一种数据驱动的设计模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p><p>将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</p><blockquote><p>应用实例：电视机是请求的接收者，遥控器是请求的发送者，遥控器上有一些按钮，不同的按钮对应电视机的不同操作。抽象命令角色由一个命令接口来扮演，有三个具体的命令类实现了抽象命令接口，这三个具体命令类分别代表三种操作：打开电视机、关闭电视机和切换频道。</p></blockquote><p>应用场景：向某些对象发送请求，但是不知道请求者是谁，也不知道被请求操作是什么。比如，当客人点菜时，不知道做菜的人是谁以及这道菜的做法是什么。</p><p>接收者被当成command对象的属性保存起来，同时约定执行命令操作调用command.execute</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;"> button1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;button1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //设置命令</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> setCommand</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            button.</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                command</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //业务逻辑</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //菜的做法</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> MenuBar</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            refresh</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">                console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;refresh&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //给谁做</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#61AFEF;"> RefreshMenuBarCommand</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                execute</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                    receiver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">refresh</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> refreshMenuBarCommand</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> RefreshMenuBarCommand</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">MenuBar</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //绑定按钮命令</span></span>
<span class="line"><span style="color:#61AFEF;">        setCommand</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">button1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">refreshMenuBarCommand</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>撤销和重做的做法：</p><p>1、棋子游戏，当悔棋到第n步的时候，可以把执行过的下棋命令存储在一个历史列表（array）中，然后倒序循环输出依次执行这些undo命令，直到执行到第n步。</p><p>2、但是当Canvas操作时，命令模式很难undo某条线，这个时候可以先清除canvas再把之前执行过的命令全部执行一遍，同样用一个历史列表可以做到。</p><p>当撤回完时候需要进行通知，我们可以用发布订阅者模式或者回调函数来通知进行下一步操作</p><p>另外还能够使用宏命令来进行一组命令的组合</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> colse</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">     execute</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">     	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;关门&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> openPC</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	execute</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;开电脑&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> openQQ</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    execute</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;打开QQ&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//存到缓存里面，当执行的时候再迭代出来</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> MacroCommand</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">commandList</span><span style="color:#ABB2BF;">: []</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#E06C75;">    add</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">command</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">commandList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#E06C75;">    execute</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">commandList</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">commandList</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> macroCommand</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> MacroCommand</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">macroCommand</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">close</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">macroCommand</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">openPC</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">macroCommand</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">openQQ</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">macroCommand</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>命令模式（Command）是一种行为型设计模式，<code>它将请求或操作封装到一个对象中，从而允许你将请求或操作的发起者与具体执行者解耦</code>。命令模式可以将请求或操作参数化，甚至在运行时动态地组合命令</p><p>实现方式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Command</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">receiver</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> receiver</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  execute</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;You have to implement the method execute!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteCommandA</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Command</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  execute</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">receiver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">actionA</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteCommandB</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Command</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  execute</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">receiver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">actionB</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Receiver</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  actionA</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Receiver Action A.&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  actionB</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Receiver Action B.&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Invoker</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">commands</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  setCommand</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">command</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">commands</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  executeCommand</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> command</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">commands</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Command </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> is not found.\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    command</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> receiver</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Receiver</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> invoker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Invoker</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">invoker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setCommand</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;A&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ConcreteCommandA</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">invoker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setCommand</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;B&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ConcreteCommandB</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">invoker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">executeCommand</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;A&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Receiver Action A.</span></span>
<span class="line"><span style="color:#E5C07B;">invoker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">executeCommand</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;B&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Receiver Action B.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p>将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 接收者类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Receiver</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    execute</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;接收者执行请求&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 命令者</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Command</span><span style="color:#ABB2BF;"> {  </span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">receiver</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> receiver</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    execute</span><span style="color:#ABB2BF;"> () {    </span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;命令&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">receiver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 触发者</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Invoker</span><span style="color:#ABB2BF;"> {   </span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">command</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">command</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> command</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    invoke</span><span style="color:#ABB2BF;">() {   </span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;开始&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">command</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 仓库</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> warehouse</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Receiver</span><span style="color:#ABB2BF;">();   </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 订单    </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> order</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Command</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">warehouse</span><span style="color:#ABB2BF;">);  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 客户</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Invoker</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">order</span><span style="color:#ABB2BF;">);      </span></span>
<span class="line"><span style="color:#E5C07B;">client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">invoke</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h4 id="优点-12" tabindex="-1">优点 <a class="header-anchor" href="#优点-12" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>对命令进行封装，使命令易于扩展和修改</li><li>命令发出者和接受者解耦，使发出者不需要知道命令的具体执行过程即可执行</li></ul><h4 id="缺点-13" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-13" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>使用命令模式可能会导致某些系统有过多的具体命令类。</li></ul><p>定义3</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Command</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">receiver</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> receiver</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    execute</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;execute method must be overridden&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteCommand</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Command</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    execute</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">receiver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">action</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Receiver</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    action</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Receiver is performing an action.&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Invoker</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">command</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">command</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> command</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    invoke</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">command</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Usage</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> receiver</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Receiver</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> command</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteCommand</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> invoker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Invoker</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">invoker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">invoke</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Output: Receiver is performing an action.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="备忘录模式" tabindex="-1">备忘录模式 <a class="header-anchor" href="#备忘录模式" aria-label="Permalink to &quot;备忘录模式&quot;">​</a></h2><p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。</p><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</p><blockquote><p>应用实例： 1、后悔药； 2、打游戏时的存档； 3、Windows里的ctri+z； 4、IE中的后退； 5、数据库的事务管理。</p></blockquote><p>备忘录模式（Memento）是一种行为型设计模式，它允许你在不暴露对象实现细节的情况下保存和恢复对象的状态。备忘录模式涉及到三个角色：<code>备忘录（Memento）, 发起人（Originator）, 管理者（Caretaker）</code>。</p><p>实现方式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Memento</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  getState</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Originator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  createMemento</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Memento</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  restoreMemento</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">memento</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> memento</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  getState</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Caretaker</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mementos</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  addMemento</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">memento</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">mementos</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">memento</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  getMemento</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mementos</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> originator</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Originator</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;State A&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> caretaker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Caretaker</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Save state</span></span>
<span class="line"><span style="color:#E5C07B;">caretaker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addMemento</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">originator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createMemento</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// change state</span></span>
<span class="line"><span style="color:#E5C07B;">originator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;State B&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Current State: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">originator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Restore state</span></span>
<span class="line"><span style="color:#E5C07B;">originator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">restoreMemento</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">caretaker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMemento</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Current State: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">originator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//备忘类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Memento</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">content</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">content</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> content</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    getContent</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">content</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 备忘列表</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> CareTaker</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">list</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">memento</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">memento</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 编辑器</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Editor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">content</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    setContent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">content</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">content</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> content</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    getContent</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">     return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">content</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    saveContentToMemento</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Memento</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    getContentFromMemento</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">memento</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">content</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> memento</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getContent</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//测试代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> editor</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Editor</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> careTaker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CareTaker</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">editor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setContent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;111&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">editor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setContent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;222&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">careTaker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">editor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saveContentToMemento</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#E5C07B;">editor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setContent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;333&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">careTaker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">editor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saveContentToMemento</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#E5C07B;">editor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setContent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;444&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">editor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getContent</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">//444</span></span>
<span class="line"><span style="color:#E5C07B;">editor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getContentFromMemento</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">careTaker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">editor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getContent</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">//333</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">editor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getContentFromMemento</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">careTaker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">editor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getContent</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">//222</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><h4 id="场景例子-7" tabindex="-1">场景例子 <a class="header-anchor" href="#场景例子-7" aria-label="Permalink to &quot;场景例子&quot;">​</a></h4><ul><li>分页控件</li><li>撤销组件</li></ul><h4 id="优点-13" tabindex="-1">优点 <a class="header-anchor" href="#优点-13" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态</li></ul><h4 id="缺点-14" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-14" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</li></ul><h2 id="状态模式-state-pattern" tabindex="-1">状态模式（State Pattern） <a class="header-anchor" href="#状态模式-state-pattern" aria-label="Permalink to &quot;状态模式（State Pattern）&quot;">​</a></h2><p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。</p><p>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的context对象。</p><p>允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</p><blockquote><p>应用实例： 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态； 2、曾侯乙编钟中，&#39;钟是抽象接口&#39;，&#39;钟A&#39;等是具体状态，&#39;曾侯乙编钟&#39;是具体环境（Context）。</p></blockquote><p>状态模式（State）是一种行为型设计模式，它<code>允许对象在其内部状态发生改变时改变其行为</code>。状态模式通过将每个状态封装在一个类中，使得对于该状态进行的任何操作都可以在该类中处理。从而将状态转换的代码从主要业务逻辑中抽离出来，<code>避免出现大量 if-else 语句</code>。</p><p>实现方式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Context</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteStateA</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  request</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> State</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> context</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  handle</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;You have to implement the method handle!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteStateA</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> State</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  handle</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Handle State A&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ConcreteStateB</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteStateB</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> State</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  handle</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Handle State B&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ConcreteStateA</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Context</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">request</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Handle State A</span></span>
<span class="line"><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">request</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Handle State B</span></span>
<span class="line"><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">request</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Handle State A</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>允许一个对象在其内部状态改变的时候改变它的行为，对象看起来似乎修改了它的类</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 状态 （弱光、强光、关灯）</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> State</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    handle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`this is </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> light\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">        context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Context</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    getState</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> state</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// test </span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Context</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> weak</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> State</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;weak&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> strong</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> State</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;strong&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> off</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> State</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;off&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 弱光</span></span>
<span class="line"><span style="color:#E5C07B;">weak</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 强光</span></span>
<span class="line"><span style="color:#E5C07B;">strong</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 关闭</span></span>
<span class="line"><span style="color:#E5C07B;">off</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h4 id="场景-5" tabindex="-1">场景 <a class="header-anchor" href="#场景-5" aria-label="Permalink to &quot;场景&quot;">​</a></h4><ul><li>一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为</li><li>一个操作中含有大量的分支语句，而且这些分支语句依赖于该对象的状态</li></ul><h4 id="优点-14" tabindex="-1">优点 <a class="header-anchor" href="#优点-14" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>定义了状态与行为之间的关系，封装在一个类里，更直观清晰，增改方便</li><li>状态与状态间，行为与行为间彼此独立互不干扰</li><li>用对象代替字符串来记录当前状态，使得状态的切换更加一目了然</li><li></li></ul><h4 id="缺点-15" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-15" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>会在系统中定义许多状态类</li><li>逻辑分散</li></ul><h2 id="访问者模式" tabindex="-1">访问者模式 <a class="header-anchor" href="#访问者模式" aria-label="Permalink to &quot;访问者模式&quot;">​</a></h2><p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p><p>主要将数据结构与数据操作分离。</p><p>主要解决：稳定的数据结构和易变的操作耦合问题。</p><blockquote><p>应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。</p></blockquote><p>访问者模式（Visitor）是一种行为型设计模式，它<code>允许你将算法封装在一个或多个访问者类中，从而让你在不改变各个元素类接口的前提下定义作用于这些元素的新操作</code>。</p><p>实现方式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Element</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  accept</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">visitor</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;You have to implement the method accept!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteElementA</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Element</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  accept</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">visitor</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    visitor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">visitConcreteElementA</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  operationA</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Operation A of Concrete Element A.&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteElementB</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Element</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  accept</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">visitor</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    visitor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">visitConcreteElementB</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  operationB</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Operation B of Concrete Element B.&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Visitor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  visitConcreteElementA</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Visit Concrete Element A with </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">element</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operationA</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  visitConcreteElementB</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Visit Concrete Element B with </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">element</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operationB</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> elementA</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteElementA</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> elementB</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteElementB</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> visitor</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Visitor</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">elementA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">visitor</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">elementB</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">visitor</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 访问者  </span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Visitor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#61AFEF;">    visitConcreteElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ConcreteElement</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        ConcreteElement</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operation</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 元素类  </span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConcreteElement</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    operation</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">       console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ConcreteElement.operation invoked&quot;</span><span style="color:#ABB2BF;">);  </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    accept</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">visitor</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        visitor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">visitConcreteElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// client</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> visitor</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Visitor</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> element</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConcreteElement</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">element</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">visitor</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="场景例子-8" tabindex="-1">场景例子 <a class="header-anchor" href="#场景例子-8" aria-label="Permalink to &quot;场景例子&quot;">​</a></h4><ul><li>对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作&quot;污染&quot;这些对象的类，也不希望在增加新操作时修改这些类。</li></ul><h4 id="优点-15" tabindex="-1">优点 <a class="header-anchor" href="#优点-15" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>符合单一职责原则</li><li>优秀的扩展性</li><li>灵活性</li></ul><h4 id="缺点-16" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-16" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>具体元素对访问者公布细节，违反了迪米特原则</li><li>违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</li><li>具体元素变更比较困难</li></ul><h2 id="中介者模式-mediator-pattern" tabindex="-1">中介者模式（Mediator Pattern） <a class="header-anchor" href="#中介者模式-mediator-pattern" aria-label="Permalink to &quot;中介者模式（Mediator Pattern）&quot;">​</a></h2><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。</p><p>用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><blockquote><p>应用实例： 1、中国加入WTO之前是各个国家相互贸易，结构复杂，现在是各个国家通过WTO来互相贸易； 2、机场调度系统； 3、MVC框架，其中C（控制器）就是M（模型）和V（视图）的中介者。</p></blockquote><p>中介者模式（Mediator）是一种行为型设计模式，它允许你<code>减少组件之间的直接依赖关系，将它们通过一个中介者对象进行交互</code>。通过避免在组件之间显式引用彼此，中介者可以让你更容易地复用组件。</p><p>实现方式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Mediator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">components</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  register</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">component</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    component</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mediator</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">components</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sender</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">components</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">component</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">component</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> sender</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        component</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">receive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sender</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mediator</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Send event </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">event</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> from </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">mediator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  receive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sender</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Receive event </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">event</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> from </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">sender</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> by </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> mediator</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Mediator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> componentA</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Component A&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> componentB</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Component B&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> componentC</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Component C&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">mediator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">componentA</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">mediator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">componentB</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">mediator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">componentC</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">componentA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Hello&#39;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// Send event Hello from Component A, Receive event Hello from Component A by Component B, Receive event Hello from Component A by Component C</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>解除对象与对象之间的紧耦合关系。增加一个中介者对象后，所有的 相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知 中介者对象即可。中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。中介者 模式使网状的多对多关系变成了相对简单的一对多关系（类似于观察者模式，但是单向的，由中介者统一管理。）</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> A</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    setNumber</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">m</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> num</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setB</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> B</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    setNumber</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">m</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> num</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setA</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Mediator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> b</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    setA</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> number</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setNumber</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">number</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    setB</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> number</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setNumber</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">number</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> A</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> B</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> m</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Mediator</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setNumber</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setNumber</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h4 id="场景例子-9" tabindex="-1">场景例子 <a class="header-anchor" href="#场景例子-9" aria-label="Permalink to &quot;场景例子&quot;">​</a></h4><ul><li>系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象</li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li></ul><h4 id="优点-16" tabindex="-1">优点 <a class="header-anchor" href="#优点-16" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>使各对象之间耦合松散，而且可以独立地改变它们之间的交互</li><li>中介者和对象一对多的关系取代了对象之间的网状多对多的关系</li><li>如果对象之间的复杂耦合度导致维护很困难，而且耦合度随项目变化增速很快，就需要中介者重构代码</li></ul><h4 id="缺点-17" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-17" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>系统中会新增一个中介者对象，因 为对象之间交互的复杂性，转移成了中介者对象的复杂性，使得中介者对象经常是巨大的。中介 者对象自身往往就是一个难以维护的对象。</li></ul><p>定义3</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Mediator</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">colleagues</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    addColleague</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">colleague</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">colleagues</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">colleague</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    mediate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">originator</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">colleagues</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">colleague</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">colleague</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> originator</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                colleague</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">receive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Colleague</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">mediator</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mediator</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> mediator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">mediator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addColleague</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">mediator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mediate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    receive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> received: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">message</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Usage</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> mediator</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Mediator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> colleague1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Colleague</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mediator</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;Colleague 1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> colleague2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Colleague</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mediator</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;Colleague 2&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">colleague1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Hello from Colleague 1!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Output: Colleague 2 received: Hello from Colleague 1!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="解释器模式" tabindex="-1">解释器模式 <a class="header-anchor" href="#解释器模式" aria-label="Permalink to &quot;解释器模式&quot;">​</a></h2><p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在SQL解析、符号处理引擎等。</p><p>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p><blockquote><p>应用实例：编译器、运算表达式计算。</p></blockquote><p>解释器模式（Interpreter）是一种行为型设计模式，它能够将一种语言（通常是一种编程语言）或者表达式的文法表示为解析树，并<code>定义一个解释器，使用该解释器来解释这个语言或者表达式</code>。</p><p>实现方式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Context</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">input</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> input</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Expression</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  interpreter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;You have to implement the method interpreter!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ThousandExpression</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Expression</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  interpreter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;M&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> HundredExpression</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Expression</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  interpreter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;C&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;CD&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 400</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;CM&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 900</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> TenExpression</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Expression</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  interpreter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;X&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;XL&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 40</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;XC&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 90</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> OneExpression</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Expression</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  interpreter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;I&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;IV&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;V&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;IX&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 9</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Interpreter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#61AFEF;"> parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">roman</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Context</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">roman</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> tree</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#C678DD;">      new</span><span style="color:#61AFEF;"> ThousandExpression</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#C678DD;">      new</span><span style="color:#61AFEF;"> HundredExpression</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#C678DD;">      new</span><span style="color:#61AFEF;"> TenExpression</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#C678DD;">      new</span><span style="color:#61AFEF;"> OneExpression</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    ];</span></span>
<span class="line"><span style="color:#E5C07B;">    tree</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">expression</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> expression</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interpreter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Interpreter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;CDXLVIII&#39;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// 448</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br></div></div><p>给定一个语言, 定义它的文法的一种表示，并定义一个解释器, 该解释器使用该表示来解释语言中的句子。</p><p>此例来自<a href="https://link.juejin.cn?target=https%3A%2F%2Fxin-tan.com%2Fpassages%2F2019-01-25-interpreter-pattern%2F%23_3-%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">心谭博客</a></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Context</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_list</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []; </span><span style="color:#7F848E;font-style:italic;">// 存放 终结符表达式</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_sum</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 存放 非终结符表达式(运算结果)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">    get</span><span style="color:#61AFEF;"> sum</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_sum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    set</span><span style="color:#61AFEF;"> sum</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_sum</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">expression</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">expression</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    get</span><span style="color:#61AFEF;"> list</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;"> [...</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_list</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">  class</span><span style="color:#E5C07B;"> PlusExpression</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    interpret</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Context</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;TypeError&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sum</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> ++</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  class</span><span style="color:#E5C07B;"> MinusExpression</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    interpret</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Context</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;TypeError&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sum</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> --</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /** 以下是测试代码 **/</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Context</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 依次添加: 加法 | 加法 | 减法 表达式</span></span>
<span class="line"><span style="color:#E5C07B;">  context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> PlusExpression</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">  context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> PlusExpression</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">  context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> MinusExpression</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 依次执行: 加法 | 加法 | 减法 表达式</span></span>
<span class="line"><span style="color:#E5C07B;">  context</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">expression</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> expression</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interpret</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sum</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h4 id="优点-17" tabindex="-1">优点 <a class="header-anchor" href="#优点-17" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>易于改变和扩展文法。</li><li>由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法</li></ul><h4 id="缺点-18" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-18" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>执行效率较低，在解释器模式中使用了大量的循环和递归调用，因此在解释较为复杂的句子时其速度慢</li><li>对于复杂的文法比较难维护</li></ul><h1 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h1><h2 id="介绍设计模式-单例-工厂-观察者-发布订阅" tabindex="-1">介绍设计模式：单例，工厂，观察者/发布订阅 <a class="header-anchor" href="#介绍设计模式-单例-工厂-观察者-发布订阅" aria-label="Permalink to &quot;介绍设计模式：单例，工厂，观察者/发布订阅&quot;">​</a></h2><p><strong>考察点：设计模式</strong></p><details class="details custom-block"><summary>查看参考回答</summary><p><strong>单例模式</strong>：在它的核心结构中值包含一个被称为单例的特殊类。一个类只有一个实例，即一个类只有一个对象实例。</p><p><strong>工厂模式</strong>：在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><p><strong>发布订阅模式</strong>：在软件架构中，发布订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。</p><p>同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。</p></details><h2 id="你觉得设计模式怎么样" tabindex="-1">你觉得设计模式怎么样？ <a class="header-anchor" href="#你觉得设计模式怎么样" aria-label="Permalink to &quot;你觉得设计模式怎么样？&quot;">​</a></h2><p><strong>考察点：设计模式</strong></p><details class="details custom-block"><summary>查看参考回答</summary><p>JS 中常用的设计模式中，我最常用的是装饰者模式，在不改变元对象的基础上，对这个对象进行包装和拓展（包括添加属性和方法），从而使这个对象可以有更复杂的功能。</p></details><h2 id="javascript设计模式有哪些" tabindex="-1">JavaScript设计模式有哪些？ <a class="header-anchor" href="#javascript设计模式有哪些" aria-label="Permalink to &quot;JavaScript设计模式有哪些？&quot;">​</a></h2><p>总体来说设计模式分为三大类：</p><ol><li><strong>创建型模式</strong>，共五种：<strong>工厂方法模式</strong>、抽象工厂模式、<strong>单例模式</strong>、建造者模式、<strong>原型模式</strong>。</li><li><strong>结构型模式</strong>，共七种：<strong>适配器模式</strong>、<strong>装饰器模式</strong>、<strong>代理模式</strong>、外观模式、桥接模式、组合模式、享元模式。</li><li><strong>行为型模式</strong>，共十二种：策略模式、模板方法模式、观察者模式/发布订阅模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li></ol><h2 id="手写单例模式-创建模式" tabindex="-1">手写单例模式（创建模式） <a class="header-anchor" href="#手写单例模式-创建模式" aria-label="Permalink to &quot;手写单例模式（创建模式）&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> CreateSingleton</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">instance</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"><span style="color:#E5C07B;">CreateSingleton</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>代码测试</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Winner</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CreateSingleton</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Winner&#39;</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Looser</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span></span>
<span class="line"><span style="color:#61AFEF;">CreateSingleton</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Looser&#39;</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Winner</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> Looser</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Winner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// &#39;Winner&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Looser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// &#39;Winner&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>实现2：核心要点：用闭包和 Proxy 属性拦截</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">func</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		construct</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				instance</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">construct</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">func</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">func</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">handler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="手写观察者模式-行为模式" tabindex="-1">手写观察者模式（行为模式） <a class="header-anchor" href="#手写观察者模式-行为模式" aria-label="Permalink to &quot;手写观察者模式（行为模式）&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义observe </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> queuedObservers</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> observe</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> queuedObservers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> observable</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// notify</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			queuedObservers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">observer</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> observer</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>代码测试</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> observable</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;789&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;触发了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;前端柒八九&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 触发了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 前端柒八九</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="手写发布订阅-行为模式" tabindex="-1">手写发布订阅 （行为模式） <a class="header-anchor" href="#手写发布订阅-行为模式" aria-label="Permalink to &quot;手写发布订阅 （行为模式）&quot;">​</a></h2><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Observer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  caches </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}; </span><span style="color:#7F848E;font-style:italic;">// 事件中心</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // eventName事件名-独一无二, fn订阅后执行的自定义行为</span></span>
<span class="line"><span style="color:#61AFEF;">  on</span><span style="color:#ABB2BF;"> (eventName, fn){</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.caches[eventName] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.caches[eventName] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.caches[eventName].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(fn);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 发布 =&gt; 将订阅的事件进行统一执行</span></span>
<span class="line"><span style="color:#61AFEF;">  emit</span><span style="color:#ABB2BF;"> (eventName, </span><span style="color:#C678DD;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.caches[eventName]) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.caches[eventName]</span></span>
<span class="line"><span style="color:#ABB2BF;">      .</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(fn </span><span style="color:#56B6C2;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">data</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 取消订阅 =&gt; 若fn不传, 直接取消该事件所有订阅信息</span></span>
<span class="line"><span style="color:#61AFEF;">  off</span><span style="color:#ABB2BF;"> (eventName, fn) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.caches[eventName]) {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#ABB2BF;"> newCaches </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> fn</span></span>
<span class="line"><span style="color:#ABB2BF;">        ? </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.caches[eventName].</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(e </span><span style="color:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;"> e </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> fn)</span></span>
<span class="line"><span style="color:#ABB2BF;">        : [];</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.caches[eventName] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> newCaches;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>代码测试</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">ob</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Observer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">l1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`l1_</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">data</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">l2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`l2_</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">data</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;event1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;event1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//发布订阅</span></span>
<span class="line"><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;event1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">789</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// l1_789</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// l2_789</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 取消，订阅l1</span></span>
<span class="line"><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">off</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;event1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;event1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">567</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//l2_567</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="请描述一下-revealing-module-pattern-设计模式。" tabindex="-1">请描述一下 Revealing Module Pattern 设计模式。 <a class="header-anchor" href="#请描述一下-revealing-module-pattern-设计模式。" aria-label="Permalink to &quot;请描述一下 Revealing Module Pattern 设计模式。&quot;">​</a></h2><p>暴露模块模式(Revealing Module Pattern)是模块模式的一个变体，目的是维护封装性并暴露在对象中返回的某些变量和方法。</p><p>如下所示：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> Exposer</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> privateVariable</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#61AFEF;"> privateMethod</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Inside a private method!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		privateVariable</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#61AFEF;"> methodToExpose</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;This is a method I want to expose!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#61AFEF;"> otherMethodIWantToExpose</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">		privateMethod</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		first</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">methodToExpose</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		second</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">otherMethodIWantToExpose</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"><span style="color:#E5C07B;">Exposer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">first</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 输出: This is a method I want to expose!</span></span>
<span class="line"><span style="color:#E5C07B;">Exposer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">second</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 输出: Inside a private method!</span></span>
<span class="line"><span style="color:#E5C07B;">Exposer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methodToExpose</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>它的一个明显的缺点是无法引用私有方法。</p>`,748),r=[o];function t(c,B,y,i,F,b){return a(),n("div",null,r)}const C=s(e,[["render",t]]);export{u as __pageData,C as default};
