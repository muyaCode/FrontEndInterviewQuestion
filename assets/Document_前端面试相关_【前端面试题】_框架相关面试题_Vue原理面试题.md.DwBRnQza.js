import{_ as l,c as p,o as e,a5 as o}from"./chunks/framework.DVTrgelf.js";const s="/FrontEndInterviewQuestion/assets/640-4784787.CfKCX0GU.webp",r="/FrontEndInterviewQuestion/assets/640-1715067341023-1.COh0kowc.webp",c="/FrontEndInterviewQuestion/assets/640-1715067341023-2.Tzv7Lo4F.webp",t="/FrontEndInterviewQuestion/assets/640-1715067341023-3.COSi51Uy.webp",B="/FrontEndInterviewQuestion/assets/640-1715067341024-4.DRxPkwX9.webp",i="/FrontEndInterviewQuestion/assets/640-1715067341024-5.CjnMnF-L.webp",y="/FrontEndInterviewQuestion/assets/640-1715067341024-6.Cn-Nqk00.webp",d="/FrontEndInterviewQuestion/assets/640-1715067341024-7.Upcu2CMR.webp",b="/FrontEndInterviewQuestion/assets/640-1715067341024-8.BqFeXuX-.webp",u="/FrontEndInterviewQuestion/assets/640-1715067341024-9.D9m9O84Z.webp",F="/FrontEndInterviewQuestion/assets/640-1715067341024-10.OmZ0D5dE.webp",A="/FrontEndInterviewQuestion/assets/image-20240518012550476.BVSP54yL.png",n="/FrontEndInterviewQuestion/assets/image-20240518013854544.w4w4jTdJ.png",m="/FrontEndInterviewQuestion/assets/image-20240326181522954-1714859666969-119.CRZ_yfCO.png",C="/FrontEndInterviewQuestion/assets/%E6%A1%88%E4%BE%8B%E9%87%8D%E7%8E%B0%E7%9A%84%E6%98%AF%E4%BB%A5%E4%B8%8B%E8%BF%87%E7%A8%8B1.5bsyWtKZ.jpg",E="/FrontEndInterviewQuestion/assets/%E6%A1%88%E4%BE%8B%E9%87%8D%E7%8E%B0%E7%9A%84%E6%98%AF%E4%BB%A5%E4%B8%8B%E8%BF%87%E7%A8%8B2.yIVxo_7q.jpg",h="/FrontEndInterviewQuestion/assets/vue%E4%B8%AD%E7%9A%84diff%E7%AE%97%E6%B3%95.BEQi62sj.jpg",a="/FrontEndInterviewQuestion/assets/image-20240326181612327-1714852901302-75.BTIsRnqK.png",f="/FrontEndInterviewQuestion/assets/image-20240326193524381.Dd8mDQg0.png",D="/FrontEndInterviewQuestion/assets/image-20240326165439062-1714851942734-56.Bc7bX3jt.png",v="/FrontEndInterviewQuestion/assets/image-20240326165531589-1714851942734-57.gMor8lJs.png",g="/FrontEndInterviewQuestion/assets/image-20240326165554937-1714851942734-60.DUM4lAke.png",q="/FrontEndInterviewQuestion/assets/image-20240326165623340-1714851942734-58.D6-a9kp9.png",k="/FrontEndInterviewQuestion/assets/image-20240326165651928-1714851942734-63.DVFT7GBD.png",x="/FrontEndInterviewQuestion/assets/image-20240326165720203-1714851942734-59.5uS5u2-n.png",V="/FrontEndInterviewQuestion/assets/image-20240326165736015-1714851942734-61.OzPQs6AI.png",P="/FrontEndInterviewQuestion/assets/image-20240326165806861-1714851942734-62.BXA3fiko.png",O="/FrontEndInterviewQuestion/assets/image-20240326165825426-1714851942734-64.Cvp3dnKC.png",j="/FrontEndInterviewQuestion/assets/image-20240326181632399-1714852901302-76.DXU-K2rV.png",w="/FrontEndInterviewQuestion/assets/image-20240326181655153-1714852901302-77.BDhQ2xdV.png",M="/FrontEndInterviewQuestion/assets/image-20240518014213907.DMuayWXS.png",S="/FrontEndInterviewQuestion/assets/vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%9A%84%E5%8E%9F%E7%90%86.B23f9hzB.jpg",J=JSON.parse('{"title":"Vue 原理面试题","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端面试相关/【前端面试题】/框架相关面试题/Vue原理面试题.md","filePath":"Document/前端面试相关/【前端面试题】/框架相关面试题/Vue原理面试题.md","lastUpdated":1716655893000}'),I={name:"Document/前端面试相关/【前端面试题】/框架相关面试题/Vue原理面试题.md"},T=o(`<h1 id="vue-原理面试题" tabindex="-1">Vue 原理面试题 <a class="header-anchor" href="#vue-原理面试题" aria-label="Permalink to &quot;Vue 原理面试题&quot;">​</a></h1><ul><li>组件化和 MVVM</li><li>响应式原理</li><li>vdom 和 diff 算法</li><li>模板编译</li><li>组件渲染过程</li><li>前端路由</li></ul><h1 id="待定" tabindex="-1">待定 <a class="header-anchor" href="#待定" aria-label="Permalink to &quot;待定&quot;">​</a></h1><p><a href="https://juejin.cn/post/7195517440344211512" target="_blank" rel="noreferrer">抽丝剥茧带你复习vue源码（2023年面试版本） - 掘金 (juejin.cn)</a></p><h1 id="vue2-原理面试题" tabindex="-1">Vue2 原理面试题 <a class="header-anchor" href="#vue2-原理面试题" aria-label="Permalink to &quot;Vue2 原理面试题&quot;">​</a></h1><h2 id="vue2-中怎么重置-data" tabindex="-1">Vue2 中怎么重置 data? <a class="header-anchor" href="#vue2-中怎么重置-data" aria-label="Permalink to &quot;Vue2 中怎么重置 data?&quot;">​</a></h2><p>使用 <code>Object.assign()</code>，<code>vm.$data</code> 可以获取当前状态下的 data。</p><p><code>vm.$options.data(this)</code> 可以获取到组件初始化状态下的 data。</p><h2 id="为什么-vue2-组件中-data-必须是一个函数" tabindex="-1">为什么 Vue2 组件中 data 必须是一个函数？ <a class="header-anchor" href="#为什么-vue2-组件中-data-必须是一个函数" aria-label="Permalink to &quot;为什么 Vue2 组件中 data 必须是一个函数？&quot;">​</a></h2><p>或者会问：<strong>为什么 data 函数里面要 return 一个对象</strong></p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 返回一个唯一的对象，不要和其他组件共用一个对象进行返回</span></span>
<span class="line"><span style="color:#E06C75;">			menu</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">MENU</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			poi</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">POILIST</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="简单回答" tabindex="-1">简单回答： <a class="header-anchor" href="#简单回答" aria-label="Permalink to &quot;简单回答：&quot;">​</a></h3><p>因为一个组件是可以共享的，但他们<strong>的 data 是私有的，所以每个组件都要 return 一个新的 data 对象，返回一个唯一的对象，不要和其他组件共用一个对象</strong>。</p><h3 id="完整回答" tabindex="-1">完整回答： <a class="header-anchor" href="#完整回答" aria-label="Permalink to &quot;完整回答：&quot;">​</a></h3><h4 id="场景一-new-vue-data" tabindex="-1">场景一：<code>new Vue({data: ...})</code> <a class="header-anchor" href="#场景一-new-vue-data" aria-label="Permalink to &quot;场景一：\`new Vue({data: ...})\`&quot;">​</a></h4><p>这种场景主要为项目入口或者多个<code>html</code>页面各实例化一个<code>Vue</code>时，这里的<code>data</code>即可用对象的形式，也可用工厂函数返回对象的形式。因为，这里的<code>data</code>只会出现一次，不存在重复引用而引起的数据污染问题。</p><p><strong>在 <code>new Vue()</code> 中，可以是函数也可以是对象</strong>，因为 <code>new Vue()</code> 的方式是生成一个根组件，该组件不会复用，不会产生数据污染。</p><h4 id="场景二-组件中的-data-选项" tabindex="-1">场景二：组件中的 data 选项 <a class="header-anchor" href="#场景二-组件中的-data-选项" aria-label="Permalink to &quot;场景二：组件中的 data 选项&quot;">​</a></h4><p>在每一次创建<code>组件实例</code>时，Vue 都会去初始化这个组件的状态。</p><p><strong>在组件中，data 必须为函数</strong>，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染；而采用函数的形式，initData 时会将其作为工厂函数都会返回全新的 data 对象。</p><h4 id="详细原理" tabindex="-1">详细原理 <a class="header-anchor" href="#详细原理" aria-label="Permalink to &quot;详细原理&quot;">​</a></h4><ul><li><p>JavaScript对象是引用类型的数据，当多个实例引用同一个对象时，只要一个实例对这个对象进行操作，其他实例中的数据也会发生变化。</p></li><li></li><li><p><code>data</code>是一个组件的<code>私有属性</code>，但是<code>一个组件</code>可以被<code>其它多个组件</code>使用，之所以必须是一个函数，是因为函数作用域是<code>私有作用域</code>，保证变量不会被污染。</p></li><li><p>如果<code>data</code>是一个对象，当重用组件时，都指向同一个<code>data</code>，会互相影响；</p></li><li><p>而使用返回对象的函数，由于每次返回的都是一个新对象，引用地址不同，则不会出现这个问题。</p></li><li><p>而在 Vue 中，更多的是想要复用组件，那就需要每个组件都有自己的数据，这样组件之间才不会相互干扰。</p></li><li><p>所以组件的数据不能写成对象的形式，而是要写成函数的形式。数据以函数返回值的形式定义，这样当每次复用组件的时候，就会返回一个新的 data，也就是说每个组件都有自己的私有数据空间，它们各自维护自己的数据，不会干扰其他组件的正常运行。</p></li><li><p>Vue 内部也帮我们做了<code>异常处理</code>，当我们的<code>data不是一个函数</code>时，会<code>抛出异常</code>。</p></li></ul><h4 id="从源码层面了解-srcorenstancetate-js-initdata" tabindex="-1">从源码层面了解：src\\core\\instance\\state.js - initData() <a class="header-anchor" href="#从源码层面了解-srcorenstancetate-js-initdata" aria-label="Permalink to &quot;从源码层面了解：src\\core\\instance\\state.js - initData()&quot;">​</a></h4><p>在生成组件<code>vnode</code>的过程中，组件会在生成构造函数的过程中执行合并策略：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// data合并策略</span></span>
<span class="line"><span style="color:#E5C07B;">strats</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">parentVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">childVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">childVal</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> childVal</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;production&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF;">				warn</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">					&#39;The &quot;data&quot; option should be a function &#39;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">						&quot;that returns a per-instance value in component &quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">						&quot;definitions.&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					vm</span></span>
<span class="line"><span style="color:#ABB2BF;">				);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> parentVal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> mergeDataOrFn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parentVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">childVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> mergeDataOrFn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parentVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">childVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>如果合并过程中发现子组件的数据不是函数，即<code>typeof childVal !== &#39;function&#39;</code>成立，进而在开发环境会在控制台输出警告并且直接返回<code>parentVal</code>，说明这里压根就没有把<code>childVal</code>中的任何<code>data</code>信息合并到<code>options</code>中去。</p><p>上面讲到组件 data 必须是一个函数，不知道大家有没有思考过这是为什么呢？</p><p>在我们定义好一个组件的时候，vue 最终都会通过 Vue.extend()构成组件实例</p><p>这里我们模仿组件构造函数，定义 data 属性，采用对象的形式</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Component</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建两个组件实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> componentA</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Component</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> componentB</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Component</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 修改componentA组件data属性的值，componentB中的值也发生了改变</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">componentB</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#E5C07B;">componentA</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">componentB</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 产生这样的原因这是两者共用了同一个内存地址，componentA修改的内容，同样对componentB产生了影响</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果我们采用函数的形式，则不会出现这种情况（函数返回的对象内存地址并不相同）</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Component</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="vue2-data-中某一个属性的值发生改变后-视图会立即同步执行重新渲染吗" tabindex="-1">Vue2 data 中某一个属性的值发生改变后，视图会立即同步执行重新渲染吗？ <a class="header-anchor" href="#vue2-data-中某一个属性的值发生改变后-视图会立即同步执行重新渲染吗" aria-label="Permalink to &quot;Vue2 data 中某一个属性的值发生改变后，视图会立即同步执行重新渲染吗？&quot;">​</a></h2><p>不会立即同步执行重新渲染。Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化， Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。</p><p>如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环 tick 中，Vue 刷新队列并执行实际（已去重的）工作。</p><h2 id="vue2-声明组件的-state-是用-data-方法-为什么-data-是通过一个-function-来返回一个对象-而不是直接写一个对象呢" tabindex="-1">Vue2 声明组件的 state 是用 data 方法，为什么 data 是通过一个 function 来返回一个对象，而不是直接写一个对象呢？ <a class="header-anchor" href="#vue2-声明组件的-state-是用-data-方法-为什么-data-是通过一个-function-来返回一个对象-而不是直接写一个对象呢" aria-label="Permalink to &quot;Vue2 声明组件的 state 是用 data 方法，为什么 data 是通过一个 function 来返回一个对象，而不是直接写一个对象呢？&quot;">​</a></h2><p><strong>从语法上说</strong>：如果不用 function 返回就会出现语法错误导致编译不通过。</p><p><strong>从原理上的话</strong>：大概就是组件可以被多次创建，如果不使用 function 就会使所有调用该组件的页面公用同一个数据域，这样就失去了组件的概念了。</p><h2 id="vue-loader-是什么-用途有哪些" tabindex="-1">vue-loader 是什么？用途有哪些？ <a class="header-anchor" href="#vue-loader-是什么-用途有哪些" aria-label="Permalink to &quot;vue-loader 是什么？用途有哪些？&quot;">​</a></h2><p><code>vue-loader</code> 是解析<code>.vue</code> 文件的一个加载器，跟 <code>template/js/style</code> 转换成 js 模块。</p><p><strong>用途</strong>：js 可以写 es6、style 样式可以 scss 或 less、template 可以加 jade 等</p><ul><li>是用于处理单文件组件的 <code>webpack-loader</code>，有了它之后，我们可以把代码分割为<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>，代码会异常清晰</li><li><code>webpack</code>打包时，会以<code>loader</code>的方式调用<code>vue-loader</code></li><li><code>vue-loader</code>被执行时，它会对<code>SFC</code>中的每个语言块用单独的<code>loader</code>处理。最后将这些单独的块装配成最终的组件模块。</li></ul><h2 id="vue2-7-向后兼容的内容" tabindex="-1">Vue2.7 向后兼容的内容 <a class="header-anchor" href="#vue2-7-向后兼容的内容" aria-label="Permalink to &quot;Vue2.7 向后兼容的内容&quot;">​</a></h2><ul><li><code>composition API</code></li><li><code>SFC &lt;script setup&gt;</code></li><li><code>SFC CSS v-bind</code></li></ul><h2 id="vue-delete-原理" tabindex="-1">Vue delete 原理 <a class="header-anchor" href="#vue-delete-原理" aria-label="Permalink to &quot;Vue delete 原理&quot;">​</a></h2><ul><li>先判断是否为数组，如果是数组就调用 <code>splice</code></li><li>然后判断<code>target</code>对象有这个属性的话，就 <code>delete</code> 删除这个属性；</li><li>还要判断是否是响应式的，如果是就需要通知视图更新</li></ul><h2 id="new-vue-这个过程中究竟做了什么" tabindex="-1">new Vue 这个过程中究竟做了什么？ <a class="header-anchor" href="#new-vue-这个过程中究竟做了什么" aria-label="Permalink to &quot;new Vue 这个过程中究竟做了什么？&quot;">​</a></h2><ul><li>在 new Vue 的时候，会做一些初始化操作</li><li>内部会初始化组件绑定的事件，初始化组件的父子关系：<code>parentparent </code>、<code>parentchildren</code>、 <code>$root</code></li><li>初始化响应式数据 data、computed、props、watch、methods。同时也初始化了 provider、inject 方法。内部会对数据进行劫持，对象采用 <code>defineProperty</code>，数组采用方法重写</li><li>再看一些用户是否传入了 el 属性和 template 或者 render。render 的优先级更高，如果用户写的是 template，会做模板编译，将 template 转化成 render 函数</li><li>内部挂载的时候会产生一个 watcher，会调用 render 函数来触发依赖收集。内部还会给所有的响应式数据增加 dep 属性，让属性记录当前的 watcher（用户后续修改的时候，可以触发 watcher 重新渲染）</li><li>vue 更新的时候采用虚拟 DOM 的方式，进行 diff 算法更新</li></ul><h2 id="new-vue-做了什么" tabindex="-1">new Vue() 做了什么 <a class="header-anchor" href="#new-vue-做了什么" aria-label="Permalink to &quot;new Vue() 做了什么&quot;">​</a></h2><ul><li>合并配置</li><li>初始化生命周期</li><li>初始化事件</li><li>初始化<code>render</code>函数</li><li>调用 <code>beforecreate</code>钩子函数</li><li>初始化<code>state</code>，包括<code>data</code>、<code>props</code>、<code>computed</code></li><li>调用 <code>created </code>钩子函数</li><li>然后按照生命周期，调用 <code>vm.$mount</code> 挂载渲染；</li></ul><h2 id="vue2-数据式原理" tabindex="-1">vue2 数据式原理 <a class="header-anchor" href="#vue2-数据式原理" aria-label="Permalink to &quot;vue2 数据式原理&quot;">​</a></h2><p>也叫：vue 数据驱动原理？ 数据更新原理？数据绑定原理？数据响应原理？响应式 原理？</p><p>官网详解：<a href="https://vuejs.bootcss.com/guide/reactivity.html" target="_blank" rel="noreferrer">https://vuejs.bootcss.com/guide/reactivity.html</a></p><h4 id="代码解析" tabindex="-1">代码解析 <a class="header-anchor" href="#代码解析" aria-label="Permalink to &quot;代码解析&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obox</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// es5 定义属性的方法</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;我被访问了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> obox</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;有人修改了name值&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		obox</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li><p>(1) 数据通过 object.defineProperty 进行 get set 拦截，</p></li><li><p>(2) 通知 watcher ，观察者模式， 订阅发布模式，触发 组件重新渲染，创建新的虚拟 dom(js 对象模拟 dom 树) 对比旧的虚拟 dom ，找到不同的地方， 以最小的代价更新节点。</p></li></ul><h2 id="vue2-为什么要求组件模板只能有一个根元素" tabindex="-1">vue2 为什么要求组件模板只能有一个根元素 <a class="header-anchor" href="#vue2-为什么要求组件模板只能有一个根元素" aria-label="Permalink to &quot;vue2 为什么要求组件模板只能有一个根元素&quot;">​</a></h2><p>从三方面考虑</p><ul><li>1.<code>new Vue({el:&#39;#app&#39;})</code></li><li>2.单文件组件中，template 下的元素 div。其实就是&quot;树”状数据结构中的&quot;根”。</li><li>3.diff 算法要求的，源码中，<code>patch.js</code> 里 <code>patchVnode()</code>。</li></ul><h3 id="第一" tabindex="-1">第一 <a class="header-anchor" href="#第一" aria-label="Permalink to &quot;第一&quot;">​</a></h3><p>实例化 Vue 时</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果我在 body 下这样</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;div id=&quot;app1&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;div id=&quot;app2&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Vue 其实并不知道哪一个才是我们的入口。如果同时设置了多个入口，那么 vue 就不知道哪一个才是这个类。</p><h3 id="第二" tabindex="-1">第二 <a class="header-anchor" href="#第二" aria-label="Permalink to &quot;第二&quot;">​</a></h3><p>vue 开发环境下，使用单文件组件时：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>template 这个标签，它有三个特性：</p><ul><li>1.<strong>隐藏性</strong>：该标签不会显示在页面的任何地方，即便里面有多少内容，它永远都是隐藏的状态，设置了 display: none;</li><li>2.<strong>任意性</strong>：该标签可以写在任何地方，甚至是 head、body、sciprt 标签内;</li><li>3.<strong>无效性</strong>：该标签里的任何 HTML 内容都是无效的，不会起任何作用;只能 innerHTML 来获取到里面的内容</li></ul><p>一个 vue 单文件组件就是一个 vue 实例，如果 template 下有多个 div 那么如何指定 vue 实例的根入口呢，为了让组件可以正常生成一个 vue 实例，这个 div 会自然的处理成程序的入口，通过这个根节点，来递归遍历整个 vue 树下的所有节点，并处理为 vdom，最后再渲染成真正的 HTML，插入在正确的位置。</p><h3 id="第三" tabindex="-1">第三 <a class="header-anchor" href="#第三" aria-label="Permalink to &quot;第三&quot;">​</a></h3><p>diff 算法中 patchVnode 方法，用来比较新旧节点，我们一起来看下源码</p><p>vue 源码：<code>vdom/patch.js</code> - <code>patchVnode</code>方法</p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ol><li>new Vue({el:&#39;#app&#39;})</li><li>单文件组件中，template 下的元素 div。其实就是&quot;树&quot;状数据结构中的&quot;根&quot;。</li><li>diff 算法要求的，源码中，patch.js 里 patchVnode()。</li></ol><h2 id="说一下你对单向数据流的理解" tabindex="-1">说一下你对单向数据流的理解 <a class="header-anchor" href="#说一下你对单向数据流的理解" aria-label="Permalink to &quot;说一下你对单向数据流的理解&quot;">​</a></h2><p>答：<strong>单向数据流</strong>主要是 vue 组件间传递数据是单向的，即数据总是由父组件传递给子组件，子组件在其内部维护自己的数据，但它无权修改父组件传递给它的数据，当开发者尝试这样做的时候，vue 将会报错。这样做是为了组件间更好的维护。</p><p>在开发中可能有多个子组件依赖于父组件的某个数据，假如子组件可以修改父组件数据的话，一个子组件变化会引发所有依赖这个数据的子组件发生变化，所以 vue 不推荐子组件修改父组件的数据</p><h2 id="vue-中封装的数组方法有哪些-其如何实现页面更新" tabindex="-1">Vue 中封装的数组方法有哪些，其如何实现页面更新 <a class="header-anchor" href="#vue-中封装的数组方法有哪些-其如何实现页面更新" aria-label="Permalink to &quot;Vue 中封装的数组方法有哪些，其如何实现页面更新&quot;">​</a></h2><ul><li>&quot;push&quot;,&quot;pop&quot;, &quot;shift&quot;, &quot;unshift&quot;, &quot;splice&quot;, &quot;sort&quot;, &quot;reverse&quot;</li><li>在 Vue 中，对响应式处理利用的是 Object.defineProperty 对数据进行拦截，而这个方法并不能监听到数组内部变化，数组长度变化，数组的截取变化等，所以需要对这些操作进行 hack，让 Vue 能监听到其中的变化。</li></ul><h2 id="nexttick-原理分析" tabindex="-1">NextTick 原理分析 <a class="header-anchor" href="#nexttick-原理分析" aria-label="Permalink to &quot;NextTick 原理分析&quot;">​</a></h2><ul><li>对于实现 macrotasks ，会先判断是否能使用 setImmediate ，不能的话降级为 MessageChannel ，以上都不行的话就使用 setTimeout</li><li>Vue 的 nextTick 其本质是对 JavaScript 执行原理 EventLoop 的一种应用。</li><li>nextTick 的核心是利用了如 Promise 、MutationObserver、setImmediate、setTimeout 的原生 JavaScript 方法来模拟对应的微/宏任务的实现，本质是为了利用 JavaScript 的这些异步回调任务队列来实现 Vue 框架中自己的异步回调队列。</li><li>nextTick 不仅是 Vue 内部的异步队列的调用方法，同时也允许开发者在实际项目中使用这个方法来满足实际应用中对 DOM 更新数据时机的后续逻辑处理</li></ul><p>问题</p><ul><li>如果是同步更新，则多次对一个或多个属性赋值，会频繁触发 UI/DOM 的渲染，可以减少一些无用渲染</li><li>同时由于 VirtualDOM 的引入，每一次状态发生变化后，状态变化的信号会发送给组件，组件内部使用 VirtualDOM 进行计算得出需要更新的具体的 DOM 节点，然后对 DOM 进行更新操作，每次更新状态后的渲染过程需要更多的计算，而这种无用功也将浪费更多的性能，所以异步渲染变得更加至关重要</li></ul><h2 id="nexttick-原理及作用" tabindex="-1">$nextTick 原理及作用 <a class="header-anchor" href="#nexttick-原理及作用" aria-label="Permalink to &quot;$nextTick 原理及作用&quot;">​</a></h2><p>Vue 的 <code>nextTick</code> 其本质是对 <code>JavaScript</code> 执行原理 <code>EventLoop</code> 的一种应用。 <code>nextTick</code>是将回调函数放到一个异步队列中，保证在异步更新 DOM 的<code>watcher</code>后面，从而获取到更新后的 DOM。</p><p>因为在<code>created()</code>钩子函数中，页面的 DOM 还未渲染，这时候也没办法操作 DOM，所以，此时如果想要操作 DOM，必须将操作的代码放在<code>nextTick()</code>的回调函数中。</p><h3 id="vdom-三个-part" tabindex="-1">VDOM：三个 part <a class="header-anchor" href="#vdom-三个-part" aria-label="Permalink to &quot;VDOM：三个 part&quot;">​</a></h3><ul><li>虚拟节点类，将真实 DOM 节点用 js 对象的形式进行展示，并提供 render 方法，将虚拟节点渲染成真实 DOM</li><li>节点 diff 比较：对虚拟节点进行 js 层面的计算，并将不同的操作都记录到 patch 对象</li><li>re-render ：解析 patch 对象，进行 re-render</li></ul><h4 id="补充-1-vdom-的必要性" tabindex="-1">补充 1：VDOM 的必要性？ <a class="header-anchor" href="#补充-1-vdom-的必要性" aria-label="Permalink to &quot;补充 1：VDOM 的必要性？&quot;">​</a></h4><ul><li>创建真实 DOM 的代价高：真实的 DOM 节点 node 实现的属性很多，而 vnode 仅仅实现一些必要的属性，相比起来，创建一个 vnode 的成本比较低。</li><li>触发多次浏览器重绘及回流：使用 vnode ，相当于加了一个缓冲，让一次数据变动所带来的所有 node 变化，先在 vnode 中进行修改，然后 diff 之后对所有产生差异的节点集中一次对 DOM tree 进行修改，以减少浏览器的重绘及回流。</li></ul><h4 id="补充-2-vue-为什么采用-vdom" tabindex="-1">补充 2：vue 为什么采用 vdom？ <a class="header-anchor" href="#补充-2-vue-为什么采用-vdom" aria-label="Permalink to &quot;补充 2：vue 为什么采用 vdom？&quot;">​</a></h4><p>引入 Virtual DOM 在性能方面的考量仅仅是一方面。</p><ul><li>性能受场景的影响是非常大的，不同的场景可能造成不同实现方案之间成倍的性能差距，所以依赖细粒度绑定及 Virtual DOM 哪个的性能更好还真不是一个容易下定论的问题。</li><li>Vue 之所以引入了 Virtual DOM ，更重要的原因是为了解耦 HTML 依赖，这带来两个非常重要的好处是： <ul><li>不再依赖 HTML 解析器进行模版解析，可以进行更多的 AOT 工作提高运 行时效率：通过模版 AOT 编译， Vue 的运行时体积可以进一步压缩，运 行时效率可以进一步提升；</li><li>可以渲染到 DOM 以外的平台，实现 SSR 、同构渲染这些高级特性， Weex 等框架应用的就是这一特性。</li></ul></li></ul><p>综上， Virtual DOM 在性能上的收益并不是最主要的，更重要的是它使得 Vue 具备了现代框架应有的高级特性。</p><h3 id="patch-过程-nexttick-原理" tabindex="-1">Patch 过程 nextTick 原理 <a class="header-anchor" href="#patch-过程-nexttick-原理" aria-label="Permalink to &quot;Patch 过程 nextTick 原理&quot;">​</a></h3><h3 id="watch-和-computed-原理" tabindex="-1">watch 和 computed 原理 <a class="header-anchor" href="#watch-和-computed-原理" aria-label="Permalink to &quot;watch 和 computed 原理&quot;">​</a></h3><h3 id="computed-是怎么收集依赖的" tabindex="-1">computed 是怎么收集依赖的？ <a class="header-anchor" href="#computed-是怎么收集依赖的" aria-label="Permalink to &quot;computed 是怎么收集依赖的？&quot;">​</a></h3><h3 id="watcheffect-是怎么收集依赖的" tabindex="-1">watchEffect 是怎么收集依赖的？ <a class="header-anchor" href="#watcheffect-是怎么收集依赖的" aria-label="Permalink to &quot;watchEffect 是怎么收集依赖的？&quot;">​</a></h3><h2 id="vue-的-nexttick-的原理是什么" tabindex="-1">Vue 的 nextTick 的原理是什么？ <a class="header-anchor" href="#vue-的-nexttick-的原理是什么" aria-label="Permalink to &quot;Vue 的 nextTick 的原理是什么？&quot;">​</a></h2><h4 id="_1-为什么需要-nexttick" tabindex="-1">1）为什么需要 nextTick <a class="header-anchor" href="#_1-为什么需要-nexttick" aria-label="Permalink to &quot;1）为什么需要 nextTick&quot;">​</a></h4><p>Vue 是异步修改 DOM 的并且不鼓励开发者直接接触 DOM，但有时候业务需要必须对数据更改--刷新后的 DOM 做相应的处理，这时候就可以使用 Vue.nextTick(callback)这个 api 了。</p><h4 id="_2-理解原理前的准备" tabindex="-1">2）理解原理前的准备 <a class="header-anchor" href="#_2-理解原理前的准备" aria-label="Permalink to &quot;2）理解原理前的准备&quot;">​</a></h4><p>首先需要知道事件循环中宏任务和微任务这两个概念(这其实也是面试常考点)。</p><p>常见的宏任务有 script, setTimeout, setInterval, setImmediate, I/O, UI rendering</p><p>常见的微任务有 process.nextTick(Nodejs),Promise.then(), MutationObserver;</p><h4 id="_3-理解-nexttick" tabindex="-1">3）理解 nextTick <a class="header-anchor" href="#_3-理解-nexttick" aria-label="Permalink to &quot;3）理解 nextTick&quot;">​</a></h4><p>而 nextTick 的原理正是 vue 通过异步队列控制 DOM 更新和 nextTick 回调函数先后执行的方式。如果大家看过这部分的源码，会发现其中做了很多 isNative()的判断，因为这里还存在兼容性优雅降级的问题。可见 Vue 开发团队的深思熟虑，对性能的良苦用心。</p><h2 id="nexttick-原理及作用-1" tabindex="-1">$nextTick 原理及作用 <a class="header-anchor" href="#nexttick-原理及作用-1" aria-label="Permalink to &quot;$nextTick 原理及作用&quot;">​</a></h2><p><a href="https://juejin.cn/post/7345499817316188160" target="_blank" rel="noreferrer">细聊 Vue 中的 nextTick（面试常考！！！附带手写 nextTick 代码） - 掘金 (juejin.cn)</a></p><p>Vue 的 nextTick 其本质是对 JavaScript 执行原理 EventLoop 的一种应用。</p><p>nextTick 的 核 心 是 利 用 了 如 Promise 、 MutationObserver 、setImmediate、setTimeout 的原生 JavaScript 方法来模拟对应的微/宏任务的实现，本质是为了利用 JavaScript 的这些异步回调任务队列来实现 Vue 框架中自己的异步回调队列。</p><p>nextTick 不仅是 Vue 内部的异步队列的调用方法，同时也允许开发者在实际项目中使用这个方法来满足实际应用中对 DOM 更新数据时机的后续逻辑处理</p><p>nextTick 是典型的将底层 JavaScript 执行原理应用到具体案例中的示例，引入异步更新队列机制的原因：</p><p>如果是同步更新，则多次对一个或多个属性赋值，会频繁触发 UI/DOM 的渲染，可以减少一些无用渲染</p><p>同时由于 VirtualDOM 的引入，每一次状态发生变化后，状态变化的信号会发送给组件，组件内部使用 VirtualDOM 进行计算得出需要更新的具体的 DOM 节点，然后对 DOM 进行更新操作，每次更新状态后的渲染过程需要更多的计算，而这种无用功也将浪费更多的性能，所以异步渲染变得更加至关重要</p><p>Vue 采用了数据驱动视图的思想，但是在一些情况下，仍然需要操作 DOM。有时候，可能遇到这样的情况，DOM1 的数据发生了变化，而 DOM2 需要从 DOM1 中获取数据，那这时就会发现 DOM2 的视图并没有更新，这时就需要用到了 nextTick 了。</p><p>由于 Vue 的 DOM 操作是异步的，所以，在上面的情况中，就要将 DOM2 获取数据的操作写在$nextTick 中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$nextTick</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取数据的操作...</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>所以，在以下情况下，会用到 nextTick：</p><p>在数据变化后执行的某个操作，而这个操作需要使用随数据变化而变化的 DOM 结构的时候，这个操作就需要方法在 nextTick()的回调函数中。</p><p>在 vue 生命周期中，如果在 created()钩子进行 DOM 操作，也一定要放在 nextTick()的回调函数中。</p><p>因为在 created()钩子函数中，页面的 DOM 还未渲染，这时候也没办法操作 DOM，所以，此时如果想要操作 DOM，必须将操作的代码放在 nextTick()的回调函数中。</p><h2 id="你知道-nexttick-的原理吗" tabindex="-1">你知道 nextTick 的原理吗? <a class="header-anchor" href="#你知道-nexttick-的原理吗" aria-label="Permalink to &quot;你知道 nextTick 的原理吗?&quot;">​</a></h2><p>nextTick 官方文档的解释，它可以在 DOM 更新完毕之后执行一个回调</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 修改数据</span></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// DOM 还没有更新</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextTick</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// DOM 更新了</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>尽管 MVVM 框架并不推荐访问 DOM，但有时候确实会有这样的需求，尤其是和第三方插件进行配合的时候，免不了要进行 DOM 操作。而 nextTick 就提供了一个桥梁，确保我们操作的是更新后的 DOM。</p><h3 id="nexttick-原理分析-1" tabindex="-1">NextTick 原理分析 <a class="header-anchor" href="#nexttick-原理分析-1" aria-label="Permalink to &quot;NextTick 原理分析&quot;">​</a></h3><p>nextTick 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于 获得更新后的 DOM 。</p><ul><li>在 Vue 2.4 之前都是使用的 microtasks ，但是 microtasks 的优先级过高，在某些情况下可能会出现比事件冒泡更快的情况，但如果都使用 macrotasks ⼜可能会出现渲染的性能问题。所以在新版本中，会默认使用 microtasks ，但在特殊情况下会使用 macrotasks ，比如 v-on 。</li><li>macrotasks 任务的实现：<code>setImmediate</code> / <code>MessageChannel</code> / <code>setTimeout</code></li><li>对于实现 macrotasks ，会先判断是否能使用 setImmediate ，不能的话降级为 MessageChannel ，以上都不行的话就使用 setTimeout</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> setImmediate</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> isNative</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">setImmediate</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">	macroTimerFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		setImmediate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushCallbacks</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#C678DD;">	typeof</span><span style="color:#E06C75;"> MessageChannel</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#61AFEF;">isNative</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">MessageChannel</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// PhantomJS</span></span>
<span class="line"><span style="color:#E5C07B;">		MessageChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;[object MessageChannelConstructor]&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> channel</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MessageChannel</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> port</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> channel</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">port2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	channel</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">port1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onmessage</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> flushCallbacks</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">	macroTimerFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		port</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">postMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	macroTimerFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushCallbacks</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>以上代码很简单，就是判断能不能使用相应的 API</p><h3 id="问-vue-如何检测到-dom-更新完毕呢" tabindex="-1">问：Vue 如何检测到 DOM 更新完毕呢？ <a class="header-anchor" href="#问-vue-如何检测到-dom-更新完毕呢" aria-label="Permalink to &quot;问：Vue 如何检测到 DOM 更新完毕呢？&quot;">​</a></h3><p>H5 新增的能监听到 DOM 改动的 API：<code>MutationObserver</code></p><h4 id="理解-mutationobserver" tabindex="-1">理解 MutationObserver <a class="header-anchor" href="#理解-mutationobserver" aria-label="Permalink to &quot;理解 MutationObserver&quot;">​</a></h4><p>MutationObserver 是 HTML5 新增的属性，用于监听 DOM 修改事件，能够监听到节点的属性、文本内容、子节点等的改动，是一个功能强大的利器。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//MutationObserver基本用法</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> observer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MutationObserver</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//这里是回调函数</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;DOM被修改了！&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> article</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;article&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">article</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>vue 是不是用 MutationObserver 来监听 DOM 更新完毕的呢？</p><p>vue 的源码中实现 nextTick 的地方：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//vue@2.2.5 /src/core/util/env.js</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#C678DD;">	typeof</span><span style="color:#E06C75;"> MutationObserver</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#61AFEF;">isNative</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">MutationObserver</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#E5C07B;">		MutationObserver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;[object MutationObserverConstructor]&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> counter</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> observer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MutationObserver</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nextTickHandler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> textNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createTextNode</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">	observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">textNode</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		characterData</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	timerFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		counter</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">counter</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">%</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		textNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="javascript-事件循环机制-event-loop" tabindex="-1">JavaScript 事件循环机制（Event Loop） <a class="header-anchor" href="#javascript-事件循环机制-event-loop" aria-label="Permalink to &quot;JavaScript 事件循环机制（Event Loop）&quot;">​</a></h3><p>在 js 的运行环境中，通常伴随着很多事件的发生，比如用户点击、页面渲染、脚本执行、网络请求，等等。为了协调这些事件的处理，浏览器使用事件循环机制。</p><p>简要来说，事件循环会维护一个或多个任务队列（task queues），以上提到的事件作为任务源往队列中加入任务。有一个持续执行的线程来处理这些任务，每执行完一个就从队列中移除它，这就是一次事件循环。</p><p>![事件循环（Event Loop）](./../../../../../../../../[MyProject]/[Docs]/FrontEndInterviewQuestion/docs/Document/前端面试相关/【前端面试题】/框架相关面试题/Vue面试题/Vue 面试题.assets/事件循环（Event Loop）.jpg)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	dom</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">left</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;px&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>事实上，这 100 次 for 循环同属一个 task，浏览器只在该 task 执行完后进行一次 DOM 更新。</p><p>只要让 nextTick 里的代码放在 UI render 步骤后面执行，岂不就能访问到更新后的 DOM 了？</p><blockquote><p>vue 就是这样的思路，并不是用 MO 进行 DOM 变动监听，而是用队列控制的方式达到目的。那么 vue 又是如何做到队列控制的呢？我们可以很自然的想到 setTimeout，把 nextTick 要执行的代码 当作下一个 task 放入队列末尾。 vue 的数据响应过程包含：数据更改-&gt;通知 Watcher-&gt;更新 DOM。而数据的更改不由我们控制， 可能在任何时候发生。如果恰巧发生在重绘之前，就会发生多次渲染。这意味着性能浪费，是 vue 不愿意看到的。 所以，vue 的队列控制是经过了深思熟虑的。在这之前，我们还需了解 event loop 的另一个重要概 念，microtask。</p></blockquote><h3 id="microtask-微任务" tabindex="-1">microtask 微任务 <a class="header-anchor" href="#microtask-微任务" aria-label="Permalink to &quot;microtask 微任务&quot;">​</a></h3><p>每一次事件循环都包含一个 microtask 队列，在循环结束后会依次执行队列中的 microtask 并移除，然后再开始下一次事件循环。</p><p>在执行 microtask 的过程中后加入 microtask 队列的微任务，也会在下一次事件循环之前被执行。也就是说，macrotask 总要等到 microtask 都执行完后才能执行，microtask 有着更高的优先级。</p><p>microtask 的这一特性，是做队列控制的最佳选择。vue 进行 DOM 更新内部也是调用 nextTick 来做异步队列控制。</p><p>而当我们自己调用 nextTick 的时候，它就在更新 DOM 的那个 microtask 后追加了我们自己的回调函数，从而确保我们的代码在 DOM 更新后执行，同时也避免了 setTimeout 可能存在的多次执行问题。</p><p>常见的 microtask 有：<code>Promise</code>、<code>MutationObserver</code>、<code>Object.observe(废弃)</code>，以及 nodejs 中的<code>process.nextTick</code></p><p>看到了 MutationObserver，vue 用 MutationObserver 是想利用它的 microtask 特性，而不是想做 DOM 监听。核心是 microtask，用不用 MutationObserver 都行的。事实上，vue 在 2.5 版本中已经删去了 MutationObserver 相关的代码，因为它是 HTML5 新增的特性，在 iOS 上尚有 bug。</p><p>那么最优的 microtask 策略就是 Promise 了，而令人尴尬的是，Promise 是 ES6 新增的东西，也存在兼容问题呀。所以 vue 就面临一个降级策略。</p><h3 id="vue-的降级策略" tabindex="-1">vue 的降级策略 <a class="header-anchor" href="#vue-的降级策略" aria-label="Permalink to &quot;vue 的降级策略&quot;">​</a></h3><p>上面我们讲到了，队列控制的最佳选择是 microtask，而 microtask 的最佳选择是<code>Promise</code>但如果当前环境不支持 Promise，vue 就不得不降级为 macrotask 来做队列控制了。</p><p>macrotask 有哪些可选的方案呢？前面提到了 setTimeout 是一种，但它不是理想的方案。因为 setTimeout 执行的最小时间间隔是约 4ms 的样子，略微有点延迟。</p><p>在 vue2.5 的源码中，macrotask 降级的方案依次是：setImmediate、MessageChannel、setTimeout.setImmediate 是最理想的方案了，可惜的是只有 IE 和 nodejs 支持。</p><p>MessageChannel 的 onmessage 回调也是 microtask，但也是个新 API，面临兼容性的尴尬。</p><p>所以最后的兜底方案就是<code>setTimeout</code>了，尽管它有执行延迟，可能造成多次渲染，算是没有办法的办法了。</p><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ol><li><p>vue 用异步队列的方式来控制 DOM 更新和 nextTick 回调先后执行</p></li><li><p>microtask 因为其高优先级特性，能确保队列中的微任务在一次事件循环前被执行完毕</p></li><li><p>因为兼容性问题，vue 不得不做了 microtask 向 macrotask 的降级方案</p></li></ol><h1 id="vue3-原理面试题" tabindex="-1">Vue3 原理面试题 <a class="header-anchor" href="#vue3-原理面试题" aria-label="Permalink to &quot;Vue3 原理面试题&quot;">​</a></h1><h2 id="vue3-双向数据绑定原理" tabindex="-1">Vue3 双向数据绑定原理 <a class="header-anchor" href="#vue3-双向数据绑定原理" aria-label="Permalink to &quot;Vue3 双向数据绑定原理&quot;">​</a></h2><p>Vue3 中的双向数据绑定原理和 Vue2 有所不同。Vue3 使用了 Proxy 对象来实现双向数据绑定，而不是 Vue2 中使用的 Object.defineProperty。</p><p>具体地说，当页面中的数据发生变化时，会触发 Proxy 对象的 set 方法，从而修改源数据；当源数据发生变化时，会触发 Proxy 对象的 get 方法，从而重新渲染页面。</p><p>下面是一个简单的示例：</p><p>1.创建一个 Vue 实例，并在 data 中定义一个变量 message：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createApp</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Hello Vue3!&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>2.将 message 绑定到页面上的一个 input 元素：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.输入框中的值发生变化时，会触发 Proxy 对象的 set 方法，从而更新 message 的值：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Hello Vue3!&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> proxy</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">!==</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 更新页面</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>4.当 message 的值发生变化时，会触发 Proxy 对象的 get 方法，从而重新渲染页面：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Hello Vue3!&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> proxy</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">!==</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 重新渲染页面</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>通过<strong>Proxy 对象的 get 和 set 方法</strong>实现双向数据绑定，这也是 Vue3 中双向数据绑定的原理。</p><blockquote><p>Vue3 使用<strong>Proxy 对象</strong>实现双向数据绑定，当<strong>数据</strong>变化时会自动更新相关的<strong>视图</strong>，而当<strong>视图</strong>被修改时也会自动更新对应的<strong>数据</strong>。</p><p>通过拦截属性的读取、赋值、删除等操作来实现<strong>响应式更新</strong>，从而实现高效的<strong>双向绑定效果</strong>。</p></blockquote><h2 id="vue3-0-里为什么要用-proxy-替代-defineproperty" tabindex="-1">Vue3.0 里为什么要用 Proxy 替代 defineProperty ？ <a class="header-anchor" href="#vue3-0-里为什么要用-proxy-替代-defineproperty" aria-label="Permalink to &quot;Vue3.0 里为什么要用 Proxy 替代 defineProperty ？&quot;">​</a></h2><h3 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h3><p>Vue3 中最重大的更新之一就是响应式模块<code>reactivity</code>的重写。主要的修改就是<code>Proxy</code>替换<code>defineProperty</code>实现响应式。</p><p>此变化主要是从性能方面考量。</p><h3 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h3><ul><li>属性拦截的几种方式</li><li>defineProperty 的问题</li><li>Proxy 的优点</li><li>其他考量</li></ul><h3 id="回答范例" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><ul><li>JS 中做属性拦截常见的方式有三：: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">defineProperty</a>，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get" target="_blank" rel="noreferrer">getter</a>/<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set" target="_blank" rel="noreferrer">setters</a> 和<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxies</a>.</li><li>Vue2 中使用<code>defineProperty</code>的原因是，2013 年时只能用这种方式。由于该 API 存在一些局限性，比如对于数组的拦截有问题，为此 vue 需要专门为数组响应式做一套实现。另外不能拦截那些新增、删除属性；最后<code>defineProperty</code>方案在初始化时需要深度递归遍历待处理的对象才能对它进行完全拦截，明显增加了初始化的时间。</li><li>以上两点在 Proxy 出现之后迎刃而解，不仅可以对数组实现拦截，还能对 Map、Set 实现拦截；另外 Proxy 的拦截也是懒处理行为，如果用户没有访问嵌套对象，那么也不会实施拦截，这就让初始化的速度和内存占用都改善了。</li><li>当然 Proxy 是有兼容性问题的，IE 完全不支持，所以如果需要 IE 兼容就不合适</li></ul><h3 id="知其所以然" tabindex="-1">知其所以然 <a class="header-anchor" href="#知其所以然" aria-label="Permalink to &quot;知其所以然&quot;">​</a></h3><p>Proxy 属性拦截的原理：利用 get、set、deleteProperty 这三个 trap 实现拦截</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {},</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {},</span></span>
<span class="line"><span style="color:#61AFEF;">		deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Object.defineProperty 属性拦截原理：利用 get、set 这两个 trap 实现拦截</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {},</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>很容易看出两者的区别！</p><h2 id="vue3-0-里为什么要用-proxy-api-替代-defineproperty-api" tabindex="-1">Vue3.0 里为什么要用 Proxy API 替代 defineProperty API ？ <a class="header-anchor" href="#vue3-0-里为什么要用-proxy-api-替代-defineproperty-api" aria-label="Permalink to &quot;Vue3.0 里为什么要用 Proxy API 替代 defineProperty API ？&quot;">​</a></h2><p>1、<code>vue2</code>中采用 <code>defineProperty</code>来劫持整个对象，然后进行深度遍历所有属性，给每个属性添加 getter 和 setter，实现响应式。但是存在以下的问题：</p><ul><li>检测不到对象属性的添加和删除</li><li>数组 API 方法无法监听到</li><li>需要对每个属性进行遍历监听，如果嵌套对象，需要深层监听，造成性能问题</li></ul><p>2、proxy：监听是针对一个对象的，那么对这个对象的所有操作会进入监听操作。</p><p>总结：</p><ul><li>Object.defineProperty 只能遍历对象属性进行劫持</li><li>Proxy 直接可以劫持整个对象，并返回一个新对象，我们可以只操作新的对象达到响应式目的</li><li>Proxy 可以直接监听数组的变化（push、shift、splice）</li><li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等，这是 Object.defineProperty 不具备的</li></ul><h2 id="vue3-中为什么采用-proxy-代替-defineprototype" tabindex="-1">Vue3 中为什么采用 Proxy 代替 definePrototype <a class="header-anchor" href="#vue3-中为什么采用-proxy-代替-defineprototype" aria-label="Permalink to &quot;Vue3 中为什么采用 Proxy 代替 definePrototype&quot;">​</a></h2><ul><li><p>definePrototype：</p><ul><li><p>来劫持整个对象，然后进行深度遍历，给每个属性添加 <code>getter</code> 和 <code>setter</code>，实现响应式，但是存在以下问题：</p><ul><li>检测不到对象属性的添加和删除；</li><li>数组 API 方法无法监听到；</li><li>需要对每个属性进行深度遍历，如果是嵌套对象，需要深层次监听，造成性能问题；</li></ul></li></ul></li><li><p>Proxy：</p><ul><li>监听整个对象，那么整个对象的所有操作都会进入监听操作；</li></ul></li><li><p>总结：</p><ul><li><code>Object.definePrototype</code> 只能遍历对象属性进行劫持；</li><li><code>Proxy</code> 直接可以劫持整个对象，便返回一个新对象，我们可以操作新对象达到响应式目的；</li><li><code>Proxy</code> 可以直接监听数组的变化；</li><li>Proxy 有 13 种拦截方法，不限于 apply、ownKeys、deleteProperty、has 等等，这是 Object.defineProperty 不具备的；</li></ul></li></ul><h2 id="手写-vue3-组合式-api" tabindex="-1">手写 vue3 组合式 API <a class="header-anchor" href="#手写-vue3-组合式-api" aria-label="Permalink to &quot;手写 vue3 组合式 API&quot;">​</a></h2><p>文档：<a href="https://24kcs.github.io/vue3_study/chapter4/03_%E6%89%8B%E5%86%99%E7%BB%84%E5%90%88API.html#_1-shallowreactive-%E4%B8%8E-reactive" target="_blank" rel="noreferrer">3. 手写组合 API | Vue3+TS 快速上手 (24kcs.github.io)</a></p><h3 id="_1-shallowreactive-与-reactive" tabindex="-1">1.shallowReactive 与 reactive <a class="header-anchor" href="#_1-shallowreactive-与-reactive" aria-label="Permalink to &quot;1.shallowReactive 与 reactive&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// *****shallowReactive (浅的劫持，浅的监视，浅的响应数据) 与 reactive(深的响应数据监视)*****</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个reactiveHandler处理对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> reactiveHandler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取属性值</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">prop</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;_is_reactive&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;拦截了读取数据&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 修改属性值或者是添加属性</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;拦截了修改数据或者是添加属性&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 删除某个属性</span></span>
<span class="line"><span style="color:#61AFEF;">	deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;拦截了删除数据&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个shallowReactive函数,传入一个目标对象</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> shallowReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断当前的目标对象是不是object类型(对象/数组)</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reactiveHandler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果传入的数据是基本类型的数据,那么就直接返回</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个reacive函数，传入一个目标对象</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断当前的目标对象是不是object类型（对象/数组）</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 对数组或是对象中的所有数据进行reactive的递归处理</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 先判断当前的数据是不是数组</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 数组的数据要进行遍历操作</span></span>
<span class="line"><span style="color:#E5C07B;">			target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果还是数组，递归调用自己</span></span>
<span class="line"><span style="color:#E06C75;">				target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果是是对象数据也要进行遍历操作</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果还是数组，递归调用自己</span></span>
<span class="line"><span style="color:#E06C75;">				target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reactiveHandler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果传入的数据是基本类型的数据，那么就直接返回</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><p>调用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// *****shallowReactive (浅的劫持，浅的监视，浅的响应数据) 与 reactive(深的响应数据监视)*****</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> proxyUser1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> shallowReactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;夏明&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	car</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 拦截到了读和写的数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// proxyUser1.name +=&#39;==&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 拦截到了读取数据,但是拦截不到写的数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// proxyUser1.car.color+&#39;==&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 拦截到了删除数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// delete proxyUser1.name</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 只拦截到了读,但是拦截不到删除</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// delete proxyUser1.car.color</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> proxyUser2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;夏明&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	car</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 拦截到了读和修改的数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// proxyUser2.name +=&#39;==&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 拦截到了读和修改数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// proxyUser2.car.color+&#39;==&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 拦截到了删除数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// delete proxyUser2.name</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 拦截到了读和拦截到了删除</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// delete proxyUser2.car.color</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>shallowRef 与 ref</p><p>shallowReadonly 与 readonly</p><p>isRef, isReactive 与 isReadonly</p><h2 id="vue3-和-vue2-的响应式原理" tabindex="-1">Vue3 和 Vue2 的响应式原理 <a class="header-anchor" href="#vue3-和-vue2-的响应式原理" aria-label="Permalink to &quot;Vue3 和 Vue2 的响应式原理&quot;">​</a></h2><h3 id="什么是响应式" tabindex="-1">什么是响应式 <a class="header-anchor" href="#什么是响应式" aria-label="Permalink to &quot;什么是响应式&quot;">​</a></h3><p><code>响应式</code>就是在我们修改数据之后，无需<code>手动</code>触发视图更新，视图会自动更新。</p><h3 id="vue2-响应式实现" tabindex="-1">Vue2 响应式实现 <a class="header-anchor" href="#vue2-响应式实现" aria-label="Permalink to &quot;Vue2 响应式实现&quot;">​</a></h3><p><code>Vue2</code>中，响应式系统是通过<code>依次遍历</code>data 返回的对象，将里面每一个属性通过<code>Object.defineProperty</code>进行定义，然后在<code>属性描述符</code>中添加<code>get/set</code>，实现<code>getter/setter方法</code>，在<code>访问属性</code>时，在 getter 函数中<code>收集依赖</code>（记录哪些方法或变量在使用这个属性），在<code>修改属性</code>时，在 setter 函数中<code>派发依赖</code>（将收集到的依赖依次更新），从而达到<code>响应式</code>。</p><h3 id="vue3-响应式实现" tabindex="-1">Vue3 响应式实现 <a class="header-anchor" href="#vue3-响应式实现" aria-label="Permalink to &quot;Vue3 响应式实现&quot;">​</a></h3><p><code>Vue3</code>中，响应式系统是通过<code>ES6中的Proxy</code>实现对一个对象的<code>代理</code>，然后设置<code>handler.get/handler.set</code>，在对<code>代理对象</code>进行操作时，可以触发<code>get/set</code>，和<code>Object.defineProperty类似</code>，get 中实现<code>收集依赖</code>，在 set 中实现<code>派发依赖</code>，从而达到<code>响应式</code>的效果。</p><h2 id="vue3-为什么要改为-proxy-实现响应式" tabindex="-1">Vue3 为什么要改为 Proxy 实现响应式？ <a class="header-anchor" href="#vue3-为什么要改为-proxy-实现响应式" aria-label="Permalink to &quot;Vue3 为什么要改为 Proxy 实现响应式？&quot;">​</a></h2><p>既然 Vue3 要更改响应式的实现方式，那么说明<code>Vue2的响应式实现一定是有缺点的</code>。</p><h3 id="object-defineproperty-实现响应式的缺点" tabindex="-1">Object.defineProperty()实现响应式的缺点 <a class="header-anchor" href="#object-defineproperty-实现响应式的缺点" aria-label="Permalink to &quot;Object.defineProperty()实现响应式的缺点&quot;">​</a></h3><ol><li><code>Object.defineProperty</code>只能对<code>对象的属性</code>进行监听，也就是说当我们想对<code>某个对象</code>进行监听时，必须将这个对象<code>遍历</code>，然后对其中的每一个属性进行监听。如果说对象中的某个属性又是一个对象，那就需要<code>递归遍历</code>，将每一层都进行监听，这样的性能肯定是比较低的。</li><li><code>Object.defineProperty</code>只能对<code>已有属性</code>进行监听，也就是说，在 Vue2 中，<code>created()阶段</code>Vue 内部已经帮我们把 data 中的属性遍历完毕并且对每个属性进行监听了，如果在之后的阶段我们给某个对象<code>使用obj.xx的方式</code>给对象添加了一个新属性，这个属性就<code>不再是响应式了</code>，这也是为什么我们在添加新属性时，需要使用<code>this.$set</code>的方式。</li><li><code>Object.defineProperty</code>不能监听<code>数组长度的改变</code>，这也就造成了我们在使用一些<code>影响原数组</code>的数组方法时，它监听不到，比如我们使用<code>pop、shift、push</code>等，这也是为什么<code>Vue2要重写部分数组原型方法</code>。</li></ol><blockquote><p><code>Object.defineProperty</code>不能监听数组长度变化，但是它是可以监听数组内容变化的，前提是我们需要像对象一样，把数组进行遍历，然后对<code>每一个索引值</code>进行监听。之所以 Vue2 没有对数组的每一项进行监听，是因为<code>数组的长度有可能会很长</code>，一般来说对象的属性值并不会有太多，而数组中的数据可能<code>长达上万甚至数十万</code>，如果对数组进行遍历监听每一项，代价无疑是巨大的。</p></blockquote><h3 id="proxy-改变了什么" tabindex="-1">Proxy 改变了什么 <a class="header-anchor" href="#proxy-改变了什么" aria-label="Permalink to &quot;Proxy 改变了什么&quot;">​</a></h3><ol><li>首先针对 Object.defineProperty 的第一个缺点，<code>Proxy</code>的作用是<code>返回一个代理对象</code>，因此它不需要再<code>遍历/深度遍历</code>一个对象，而是只需要将<code>原对象作为参数传入</code>，就可以返回该对象的<code>代理对象</code>，并且它的第二个参数<code>handler</code>提供了<code>13种</code>方法，能够监听代理对象的各种操作。</li><li>针对 Object.defineProperty 的第二个缺点，当我们对<code>代理对象</code>使用<code>obj.xx</code>的方式添加一个新属性时，它依旧能够对新添加的数据进行监听。</li><li>针对 Object.defineProperty 的第三个缺点，<code>Proxy</code>不仅可以监听数组索引值的变化，还能够监听<code>原型方法（pop、push）</code>等。</li></ol><h2 id="vue3-是如何变得更快的-底层-源码" tabindex="-1">Vue3 是如何变得更快的？<strong>（底层，源码）</strong> <a class="header-anchor" href="#vue3-是如何变得更快的-底层-源码" aria-label="Permalink to &quot;Vue3 是如何变得更快的？**（底层，源码）**&quot;">​</a></h2><h3 id="a-diff-方法优化" tabindex="-1">a. diff 方法优化 <a class="header-anchor" href="#a-diff-方法优化" aria-label="Permalink to &quot;a. diff 方法优化&quot;">​</a></h3><ul><li><p>Vue2.x 中的虚拟 dom 是进行全量的对比。</p></li><li><p>Vue3.0 中新增了静态标记（PatchFlag）：</p><p>在与上次虚拟结点进行对比的时候，值对比带有 patch flag 的节点，并且可以通过 flag 的信息得知当前节点要对比的具体内容化。</p></li></ul><h3 id="b-hoiststatic-静态提升" tabindex="-1">b. hoistStatic 静态提升 <a class="header-anchor" href="#b-hoiststatic-静态提升" aria-label="Permalink to &quot;b. hoistStatic 静态提升&quot;">​</a></h3><ul><li>Vue2.x : 无论元素是否参与更新，每次都会重新创建。</li><li>Vue3.0 : 对不参与更新的元素，只会被创建一次，之后会在每次渲染时候被不停的复用。</li></ul><h3 id="c-cachehandlers-事件侦听器缓存" tabindex="-1">c. cacheHandlers 事件侦听器缓存 <a class="header-anchor" href="#c-cachehandlers-事件侦听器缓存" aria-label="Permalink to &quot;c. cacheHandlers 事件侦听器缓存&quot;">​</a></h3><ul><li>默认情况下 onClick 会被视为动态绑定，所以每次都会去追踪它的变化但是因为是同一个函数，所以没有追踪变化，直接缓存起来复用即可。</li></ul><h2 id="virtual-虚拟-dom-的-diff-算法" tabindex="-1">Virtual(虚拟) DOM 的 diff 算法 <a class="header-anchor" href="#virtual-虚拟-dom-的-diff-算法" aria-label="Permalink to &quot;Virtual(虚拟) DOM 的 diff 算法&quot;">​</a></h2><h3 id="对比虚拟-dom" tabindex="-1">对比虚拟 DOM <a class="header-anchor" href="#对比虚拟-dom" aria-label="Permalink to &quot;对比虚拟 DOM&quot;">​</a></h3><p>(1)把树按照层级分解</p><ul><li><p>父级</p></li><li><p>子级</p></li><li><p>孙级</p></li><li><p>减少无效对比</p></li></ul><p>(2) 同 key 值对比</p><ul><li>辅助对比</li></ul><p>(3)同组件对比</p><ul><li>如果标签节点相同，内容不同，diff 算法把文本内容替换，成为一个新的 DOM</li></ul><h2 id="vue2-和-vue3-的对比" tabindex="-1">vue2 和 vue3 的对比 <a class="header-anchor" href="#vue2-和-vue3-的对比" aria-label="Permalink to &quot;vue2 和 vue3 的对比&quot;">​</a></h2><ul><li><p>1.Vue3 支持大多数的 Vue2 的特性</p></li><li><p>2.Vue 中设计了一套强大的组合 APi 代替了 Vue2 中的 option API ,复用性更强了</p></li><li><p>3.更好的支持 TS(TypeScript)</p></li><li><p>4.最主要: Vue3 中使用了 Proxy 配合 Reflect 代替了 Vue2 中 Object.defineProperty()方法实现数据的响应式(数据代理)</p></li><li><p>5.重写了虚拟 DOM,速度更快了</p></li><li><p>6.新的组件: Fragment(片段) / Teleport(瞬移) / Suspense(不确定)</p></li><li><p>7.设计了一个新的脚手架工具,vite</p></li></ul><h2 id="vue2-和-vue3-响应式的对比" tabindex="-1">vue2 和 vue3 响应式的对比 <a class="header-anchor" href="#vue2-和-vue3-响应式的对比" aria-label="Permalink to &quot;vue2 和 vue3 响应式的对比&quot;">​</a></h2><h3 id="vue2-的响应式" tabindex="-1">vue2 的响应式 <a class="header-anchor" href="#vue2-的响应式" aria-label="Permalink to &quot;vue2 的响应式&quot;">​</a></h3><h4 id="核心" tabindex="-1">核心 <a class="header-anchor" href="#核心" aria-label="Permalink to &quot;核心&quot;">​</a></h4><ul><li><p>对象：通过 defineProperty 对 对象的已有属性值的读取和修改进行劫持(监视/拦截)</p></li><li><p>数组：通过重写数组更新数组一系列更新元素的方法来实现元素修改的劫持</p></li></ul><h4 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;count&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h4><p>对象直接新添加的属性或删除已有属性，界面不会自动更新</p><p>直接通过下标替换元素或更新 length，界面不会自动更新 <code>arr[1] = {}</code></p><p>视图数据不更新 问题解决方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        student</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">            name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">mounted</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 24</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>视图不更新</p><ul><li>原因是：受 ES5 的限制，Vue.js 不能检测到对象属性的添加或删除。因为 Vue.js 在初始化实例时将属性转为 getter/setter，所以属性必须在 data 对象上才能让 Vue.js 转换它，才能让它是响应的。</li></ul><p>要处理这种情况，我们可以使用$set()方法，既可以新增属性,又可以触发视图更新。</p><p>使用$set 方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">mounted</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">student</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">24</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="vue3-的响应式" tabindex="-1">Vue3 的响应式 <a class="header-anchor" href="#vue3-的响应式" aria-label="Permalink to &quot;Vue3 的响应式&quot;">​</a></h3><h4 id="核心-1" tabindex="-1">核心 <a class="header-anchor" href="#核心-1" aria-label="Permalink to &quot;核心&quot;">​</a></h4><ul><li><p>通过 Proxy(代理对象)：拦截对 data 任意属性的任意(13 种)操作，包括属性值的读写，属性的添加，属性的删除等...</p></li><li><p>通过 Reflect(反射对象)：动态对被代理对象的相应属性进行特定的操作</p></li><li><p>文档：</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p></li></ul></li></ul><h4 id="代码例子" tabindex="-1">代码例子 <a class="header-anchor" href="#代码例子" aria-label="Permalink to &quot;代码例子&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 目标对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;佐助&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">wife</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小樱&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">19</span><span style="color:#ABB2BF;"> } };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 把目标对象变成代理对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 参数1:user----&gt;target目标对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 参数2:handler----&gt;处理器对象,用来监视数据,及数据的操作</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> proxyUser</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取目标对象的某个属性值</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get方法调用了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 修改目标对象的属性值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 为目标对象添加新的属性</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set方法调用了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 删除目标对象上的某个属性</span></span>
<span class="line"><span style="color:#61AFEF;">	deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;delete方法调用了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过代理对象获取目标对象中的某个属性值</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">proxyUser</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过代理对象更新目标对象上的某个属性值</span></span>
<span class="line"><span style="color:#E5C07B;">proxyUser</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;鸣人&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过代理对象向目标对象中添加一个新的属性</span></span>
<span class="line"><span style="color:#E5C07B;">proxyUser</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">gender</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;男&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#E5C07B;"> proxyUser</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 更新目标对象中的某个属性对象中的属性值</span></span>
<span class="line"><span style="color:#E5C07B;">proxyUser</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">wife</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;雏田&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="vue3-响应式" tabindex="-1">Vue3 响应式 <a class="header-anchor" href="#vue3-响应式" aria-label="Permalink to &quot;Vue3 响应式&quot;">​</a></h2><h3 id="vue3-响应式的特点" tabindex="-1">Vue3 响应式的特点 <a class="header-anchor" href="#vue3-响应式的特点" aria-label="Permalink to &quot;Vue3 响应式的特点&quot;">​</a></h3><ul><li><p>众所周知 <code>Vue2</code> 数据响应式是通过 <code>Object.defineProperty()</code> 劫持各个属性 <code>get</code> 和 <code>set</code>，在数据变化时发布消息给<code>订阅者</code>，触发相应的监听回调，而这个<code>API</code>存在很多问题；</p></li><li><p>Vue3 中为了解决这些问题，使用 Proxy 结合 Reflect 代替 Object.defineProperty，</p><ul><li>支持监听<code>对象</code>和<code>数组</code>的变化，</li><li>对象嵌套属性只代理第一层，运行时递归，用到才代理，也不需要维护特别多的依赖关系，性能取得很大进步；</li><li>并且能拦截对象<code>13</code>种方法，动态属性增删都可以拦截，新增数据结构全部支持，</li></ul></li><li><p><code>Vue3</code> 提供了 <code>ref</code> 和 <code>reactive</code> 两个<code>API</code>来实现响应式；</p></li></ul><h3 id="什么是-proxy" tabindex="-1">什么是 Proxy <a class="header-anchor" href="#什么是-proxy" aria-label="Permalink to &quot;什么是 Proxy&quot;">​</a></h3><p><code>Proxy</code>是<code>ES6</code>中的方法，<code>Proxy</code>用于创建一个目标对象的代理，在对目标对象的操作之前提供了拦截，可以对外界的操作进行过滤和改写，这样我们可以不直接操作对象本身，而是通过操作对象的<code>代理对象</code>来间接来操作对象；</p><h3 id="defineproperty-和-proxy-的区别" tabindex="-1">defineProperty 和 Proxy 的区别 <a class="header-anchor" href="#defineproperty-和-proxy-的区别" aria-label="Permalink to &quot;defineProperty 和 Proxy 的区别&quot;">​</a></h3><ul><li><code>Object.defineProperty</code> 是 <code>Es5</code> 的方法，<code>Proxy</code> 是 <code>Es6</code> 的方法</li><li><code>defineProperty</code> 是劫持对象属性，<code>Proxy</code> 是代理整个对象；</li><li><code>defineProperty</code> 监听对象和数组时，需要迭代对象的每个属性；</li><li><code>defineProperty</code> 不能监听到对象新增属性，<code>Proxy</code> 可以</li><li><code>defineProperty</code> 不兼容 <code>IE8</code>，<code>Proxy</code> 不兼容 <code>IE11</code></li><li><code>defineProperty</code> 不支持 <code>Map</code>、<code>Set</code> 等数据结构</li><li><code>defineProperty</code> 只能监听 <code>get</code>、<code>set</code>，而 <code>Proxy</code> 可以拦截多达<code>13</code>种方法；</li><li><code>Proxy</code> 兼容性相对较差，且无法通过 <code>pollyfill</code> 解决；所以<code>Vue3</code>不支持<code>IE</code>；</li></ul><h3 id="为什么需要-reflect" tabindex="-1">为什么需要 Reflect <a class="header-anchor" href="#为什么需要-reflect" aria-label="Permalink to &quot;为什么需要 Reflect&quot;">​</a></h3><ul><li>使用 <code>Reflect</code> 可以修正 <code>Proxy</code> 的<code>this</code>指向问题；</li><li><code>Proxy</code> 的一些方法要求返回 <code>true/false</code> 来表示操作是否成功，比如<code>set</code>方法，这也和 <code>Reflect</code> 相对应；</li><li>之前的诸多接口都定义在 <code>Object</code> 上，历史问题导致这些接口越来越多越杂，所以干脆都挪到 <code>Reflect</code> 新接口上，目前是<code>13</code>种标准行为，可以预期后续新增的接口也会放在这里；</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	#name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Guest&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	getName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">#name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> User</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> userProxy</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">, {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 此时，\`getName\` 的 this 指向代理对象 userProxy</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 但 userProxy 对象并没有 #name 私有属性，导致报错</span></span>
<span class="line"><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">userProxy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// Error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解决方案：使用 Reflect</span></span>
<span class="line"><span style="color:#E06C75;">user</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(...</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="vue3-响应式对数组的处理" tabindex="-1">Vue3 响应式对数组的处理 <a class="header-anchor" href="#vue3-响应式对数组的处理" aria-label="Permalink to &quot;Vue3 响应式对数组的处理&quot;">​</a></h3><ul><li><code>Vue2</code> 对数组的监听做了特殊的处理，在 <code>Vue3</code> 中也需要对数组做特殊的处理；</li><li><code>Vue3</code> 对数组实现代理时，也对数组原型上的一些方法进行了重写；</li></ul><p><strong>原因：</strong></p><ul><li>比如使用 <code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>、<code>splice</code>这些方法操作响应式数组对象时，会隐式地访问和修改数组的<code>length</code>属性，所以我们需要让这些方法间接读取<code>length</code>属性时禁止进行依赖追踪；</li><li>还比如使用 <code>includes</code>、<code>indexOf </code>等对数组元素进行查找时，可能是使用<code>代理对象</code>进查找，也可能使用原始值进行查找，所以就需要重写查找方法，让查找时先去<code>响应式对象</code>中查找，没找到再去<code>原始值</code>中查找；</li></ul><h3 id="vue3-惰性响应式" tabindex="-1">Vue3 惰性响应式 <a class="header-anchor" href="#vue3-惰性响应式" aria-label="Permalink to &quot;Vue3 惰性响应式&quot;">​</a></h3><ul><li><code>Vue2</code>对于一个深层属性嵌套的对象做响应式，就需要递归遍历这个对象，将每一层数据都变成响应式的；</li><li>而在<code>Vue3</code>中使用 <code>Proxy</code> 并不能监听到对象内部深层次的属性变化，因此它的处理方式是在 <code>getter</code> 中去<code>递归响应式</code>，<strong>这样的好处是真正访问到的内部属性才会变成响应式，减少性能消耗</strong></li></ul><h3 id="proxy-只会代理对象的第一层-vue3-如何处理" tabindex="-1">Proxy 只会代理对象的第一层，Vue3 如何处理 <a class="header-anchor" href="#proxy-只会代理对象的第一层-vue3-如何处理" aria-label="Permalink to &quot;Proxy 只会代理对象的第一层，Vue3 如何处理&quot;">​</a></h3><ul><li>判断当前 <code>Reflect.get</code> 的返回值是否为 <code>Object</code>，如果是则再通过 <code>reactive</code> 方法做代理，这样就实现了深度观测</li><li>检测数组的时候可能触发了多个 <code>get/set</code>，那么如何防止触发多次呢？我们可以判断 <code>key</code> 是否是当前被代理的 <code>target</code> 自身属性；</li></ul><h3 id="vue3-解构丢失响应式" tabindex="-1">Vue3 解构丢失响应式 <a class="header-anchor" href="#vue3-解构丢失响应式" aria-label="Permalink to &quot;Vue3 解构丢失响应式&quot;">​</a></h3><ul><li>对<code>Vue3</code>响应式数据使用<code>ES6解构</code>出来的是一个<code>引用对象类型</code>时，它还是响应式的，但是结构出的是<code>基本数据类型</code>时，响应式会丢失。</li><li>因为<code>Proxy</code>只能监听对象的第一层，深层对象的监听<code>Vue是</code>通过<code>reactive</code>方法再次代理，所以返回的引用仍然是一个<code>Proxy</code>对象；而基本数据类型就是值；</li></ul><h3 id="vue3-响应式-对-set、map-做的处理" tabindex="-1">Vue3 响应式 对 Set、Map 做的处理 <a class="header-anchor" href="#vue3-响应式-对-set、map-做的处理" aria-label="Permalink to &quot;Vue3 响应式 对 Set、Map 做的处理&quot;">​</a></h3><ul><li><code>Vue3</code> 对 <code>Map、Set</code>做了很多特殊处理，这是因为<code>Proxy</code>无法直接拦截 <code>Set、Map</code>，因为 <code>Set、Map</code>的方法必须得在它们自己身上调用；<code>Proxy</code> 返回的是代理对象；</li><li>所以 <code>Vue3</code> 在这里的处理是，封装了 <code>toRaw()</code> 方法返回原对象，通过<code>Proxy</code>的拦截，在调用诸如 <code>set</code>、<code>add</code>方法时，在原对象身上调用方法；</li></ul><blockquote><p>其实还有一个方法是，用<code>Class</code>搞一个子类去继承 <code>Set</code>、<code>Map</code>，然后用子类<code>new</code>的对象就可以通过<code>proxy</code>来代理，而<code>Vue</code>没有采用此方法的原因，猜测是：<code>calss</code>只兼容到<code> Edge13</code></p></blockquote><h2 id="vue3-响应式原理" tabindex="-1">Vue3 响应式原理 <a class="header-anchor" href="#vue3-响应式原理" aria-label="Permalink to &quot;Vue3 响应式原理&quot;">​</a></h2><p>vue3 响应式是使用 ES6 的 proxy 和 Reflect 相互配合实现数据响应式，解决了 vue2 中视图不能自动更新的问题。</p><p>proxy 是深度监听，所以可以监听对象和数组内的任意元素，从而可以实现视图实时更新。</p><p>详细的原理可查看：<a href="https://juejin.cn/post/6858899262596448270" target="_blank" rel="noreferrer">vue3.0 响应式原理(超详细)</a></p><p>总结响应式大致分为三个阶段:</p><ul><li><code>初始化阶段</code>：初始化阶段通过组件初始化方法形成对应的<code>proxy对象</code>，然后形成一个负责渲染的<code>effect</code>。</li><li><code>get依赖收集阶段</code>：通过<code>解析template</code>，替换<code>真实data</code>属性，来触发<code>get</code>,然后通过<code>stack方法</code>，通过<code>proxy对象</code>和<code>key</code>形成对应的<code>deps</code>，将负责渲染的<code>effect</code>存入<code>deps</code>。（这个过程还有其他的 effect，比如 watchEffect 存入 deps 中 ）。</li><li><code>set派发更新阶段</code>：当我们 <code>this[key] = value</code> 改变属性的时候，首先通过<code>trigger</code>方法，通过<code>proxy对象</code>和<code>key</code>找到对应的<code>deps</code>，然后给<code>deps</code>分类分成<code>computedRunners</code>和<code>effect</code>,然后依次执行，如果需要<code>调度</code>的，直接放入调度。</li></ul><blockquote><p>Proxy 只会代理对象的第⼀层，那么 Vue3 ⼜是怎样处理这个问题的呢？</p></blockquote><p>判断当前 Reflect.get 的返回值是否为 Object，如果是则再通过 reactive 方法做代理， 这样就实现了深度观测。</p><blockquote><p>监测数组的时候可能触发多次 get/set，那么如何防⽌触发多次呢？</p></blockquote><p>我们可以判断 key 是否为当前被代理对象 target ⾃身属性，也可以判断旧值与新值是否相等，只有满⾜以上两个条件之⼀时，才有可能执⾏ trigger。</p><h2 id="vue3-中的响应式系统有什么改变" tabindex="-1">Vue3 中的响应式系统有什么改变 <a class="header-anchor" href="#vue3-中的响应式系统有什么改变" aria-label="Permalink to &quot;Vue3 中的响应式系统有什么改变&quot;">​</a></h2><ol><li><strong>Proxy 代替了 Object.defineProperty</strong>：Vue3 中使用 Proxy 对象来实现响应式数据，而不再使用 Object.defineProperty。Proxy 提供了更强大和灵活的拦截器，<strong>可以监听对象的任何变化</strong>，包括新增、删除和修改属性。</li><li><strong>Composition API</strong>：Vue3 引入了 Composition API，允许开发者将逻辑代码按功能组织，提高代码的可读性和可维护性。Composition API 还可以更好地与 TypeScript 等工具集成，提供更好的开发体验。</li><li><strong>更灵活的响应式数据</strong>：Vue3 中可以通过 reactive 函数手动创建响应式数据，而不再需要像 Vue2 中那样依赖于 data 选项。这样可以更灵活地管理数据的响应式状态。</li></ol><h2 id="vue3-响应式原理-1" tabindex="-1">Vue3 响应式原理 <a class="header-anchor" href="#vue3-响应式原理-1" aria-label="Permalink to &quot;Vue3 响应式原理&quot;">​</a></h2><ul><li><p>Vue 响应式使用的是 ES6 的<code>Proxy</code>和<code>Reflect</code>相互配合实现数据响应式，解决了 Vue2 中试图不能自动更新的问题；</p></li><li><p><code>Proxy</code>是深度监听，所以可以监听对象和数组内的任意元素，从而可以实现视图实时更新；</p></li><li><p>响应式大致分为三个阶段：</p><ul><li><p>初始化阶段</p><p>：</p><ul><li>初始化阶段通过组件初始化方法形成对应的<code>proxy</code>对象，然后形成一个负责渲染的<code>effct</code>；</li></ul></li><li><p>get 依赖收集阶段</p><p>：</p><ul><li>通过解析<code>template</code>，替换真实<code>data</code>属性，来触发<code>get</code>，然后通过<code>satck</code>方法，通过<code>proxy对象</code>和<code>key</code>形成对应的<code>deps</code>，将负责渲染的<code>effect</code>存入<code>deps</code>。（这个过程还有其他的 effect，比如 watchEffect 存入 deps 中 ）。</li></ul></li><li><p>set 派发更新阶段</p><p>：</p><ul><li>当我们 <code>this[key] = value</code> 改变属性的时候，首先通过<code>trigger</code>方法，通过<code>proxy对象</code>和<code>key</code>找到对应的<code>deps</code>，然后给<code>deps</code>分类分成<code>computedRunners</code>和<code>effect</code>,然后依次执行，如果需要<code>调度</code>的，直接放入调度。</li></ul></li></ul></li></ul><blockquote><p>Proxy 只会代理对象的第⼀层，那么 Vue3 ⼜是怎样处理这个问题的呢？</p><ul><li>判断当前 Reflect.get 的返回值是否为 Object，如果是则再通过 reactive 方法做代理， 这样就实现了深度观测。</li></ul></blockquote><blockquote><p>监测数组的时候可能触发多次 get/set，那么如何防⽌触发多次呢？</p><ul><li>我们可以判断 key 是否为当前被代理对象 target ⾃身属性，也可以判断旧值与新值是否相等，只有满⾜以上两个条件之⼀时，才有可能执⾏ trigger。</li></ul></blockquote><h2 id="vue-响应式原理是什么-vue3-的响应式有何不同" tabindex="-1">Vue 响应式原理是什么？vue3 的响应式有何不同 <a class="header-anchor" href="#vue-响应式原理是什么-vue3-的响应式有何不同" aria-label="Permalink to &quot;Vue 响应式原理是什么？vue3 的响应式有何不同&quot;">​</a></h2><p>Vue 在初始化数据时，会使用<code>Object.defineProperty</code>重新定义 data 中的所有属性，当页面使用对应属性时，首先会进行依赖收集(收集当前组件的<code>watcher</code>)如果属性发生变化会通知相关依赖进行更新操作(<code>发布订阅</code>)。</p><p>Vue3.x 改用<code>Proxy</code>替代 Object.defineProperty。因为 Proxy 可以直接监听对象和数组的变化，并且有多达 13 种拦截方法。并且作为新标准将受到浏览器厂商重点持续的性能优化。</p><blockquote><p>❝</p><p>Proxy 只会代理对象的第一层，那么 Vue3 又是怎样处理这个问题的呢？</p><p>❞</p></blockquote><p>（很简单啊）</p><p>判断当前 Reflect.get 的返回值是否为 Object，如果是则再通过<code>reactive</code>方法做代理， 这样就实现了深度观测。</p><blockquote><p>❝</p><p>监测数组的时候可能触发多次 get/set，那么如何防止触发多次呢？</p><p>❞</p></blockquote><p>我们可以判断 key 是否为当前被代理对象 target 自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行 trigger。</p><h2 id="ref-和-reactive-定义响应式数据" tabindex="-1">Ref 和 Reactive 定义响应式数据 <a class="header-anchor" href="#ref-和-reactive-定义响应式数据" aria-label="Permalink to &quot;Ref 和 Reactive 定义响应式数据&quot;">​</a></h2><ul><li>在 <code>vue2</code> 中， 定义数据都是在<code>data</code>中， 而<code>vue3</code>中对响应式数据的声明，可以使用 <code>ref</code> 和<code>reactive</code>，<code>reactive</code>的参数必须是<code>对象</code>，而<code>ref</code>可以处理<code>基本数据类型</code>和<code>对象</code></li><li><code>ref</code>在<code>JS</code>中读值要加<code>.value</code>，可以用<code>isRef</code>判断是否<code>ref</code>对象，<code>reactive</code>不能改变本身，但可以改变内部的值</li><li>在<code>模板</code>中访问从 <code>setup</code> 返回的 <code>ref</code> 时，会自动<code>解包</code>；因此无须再在模板中为它写 <code>.value</code>；</li><li><code>Vue3</code>区分 <code>ref</code> 和 <code>reactive</code> 的原因就是 <code>Proxy</code> 无法对原始值进行代理，所以需要一层对象作为包裹；</li></ul><h3 id="ref-原理" tabindex="-1">Ref 原理 <a class="header-anchor" href="#ref-原理" aria-label="Permalink to &quot;Ref 原理&quot;">​</a></h3><ul><li><code>ref</code>内部封装一个<code>RefImpl</code>类，并设置<code>get</code>/<code>set</code>，当通过<code>.value</code>调用时就会触发劫持，从而实现响应式。</li><li>当接收的是对象或者数组时，内部仍然是 <code>reactive</code> 去实现一个响应式；</li></ul><h3 id="reactive-原理" tabindex="-1">Reactive 原理 <a class="header-anchor" href="#reactive-原理" aria-label="Permalink to &quot;Reactive 原理&quot;">​</a></h3><ul><li><code>reactive</code>内部使用<code>Proxy</code>代理传入的对象，从而实现响应式。</li><li>使用 <code>Proxy</code> 拦截数据的更新和获取操作，再使用 <code>Reflect</code> 完成原本的操作（<code>get</code>、<code>set</code>）</li></ul><h3 id="使用注意点" tabindex="-1">使用注意点 <a class="header-anchor" href="#使用注意点" aria-label="Permalink to &quot;使用注意点&quot;">​</a></h3><ul><li><code>reactive</code>内部如果接收<code>Ref</code>对象会自动<code>解包</code>（<code>脱ref</code>）；</li><li><code>Ref</code> 赋值给 <code>reactive</code> 属性 时，也会自动解包；</li><li>值得注意的是，当访问到某个<code>响应式数组</code>或 <code>Map</code>这样的原生集合类型中的 <code>ref</code> 元素时，不会执行 <code>ref</code> 的解包。</li><li>响应式转换是深层的，会影响到所有的嵌套属性，如果只想要浅层的话，只要在前面加<code>shallow</code>即可（<code>shallowRef</code>、<code>shallowReactive</code>）</li></ul><h2 id="vue3-初始化的一个大概流程" tabindex="-1">Vue3 初始化的一个大概流程 <a class="header-anchor" href="#vue3-初始化的一个大概流程" aria-label="Permalink to &quot;Vue3 初始化的一个大概流程&quot;">​</a></h2><h4 id="初始化的一个大概流程" tabindex="-1">初始化的一个大概流程 <a class="header-anchor" href="#初始化的一个大概流程" aria-label="Permalink to &quot;初始化的一个大概流程&quot;">​</a></h4><p>createApp() =&gt; mount() =&gt; render() =&gt; patch() =&gt; processComponent() =&gt; mountComponent()</p><h4 id="简易版流程编写" tabindex="-1">简易版流程编写 <a class="header-anchor" href="#简易版流程编写" aria-label="Permalink to &quot;简易版流程编写&quot;">​</a></h4><ul><li><p>1.Vue.createApp() 实际执行的是 renderer 的 createApp()</p></li><li><p>2.renderer 是 createRenderer 这个方法创建</p></li><li><p>3.renderer 的 createApp()是 createAppAPI()返回的</p></li><li><p>4.createAppApi 接受到 render 之后，创建一个 app 实例，定义 mount 方法</p></li><li><p>5.mount 会调用 render 函数。将 vnode 转换为真实 dom</p></li><li><p>createRenderer() =&gt; renderer =&gt; renderer.createApp() &lt;= createAppApi()</p></li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.createAppAPI</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> createAppAPI</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">render</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">rootComponent</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 返回应用程序实例</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			mount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">rootContainer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 挂载vnode =&gt; dom</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">					tag</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">rootComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 执行渲染</span></span>
<span class="line"><span style="color:#61AFEF;">				render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">rootContainer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> app</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1. 创建createApp</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//实际执行的为renderer的createApp()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 返回app实例</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> renderer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.实现renderer工厂函数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> createRenderer</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 实现patch</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#61AFEF;"> patch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">n1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">n2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">container</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 获取根组件配置</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> rootComponent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> n2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E5C07B;">rootComponent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">() };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 执行render获取vnode</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rootComponent</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">render</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 转换vnode =&gt; dom</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> parent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> child</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			child</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//array</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 追加</span></span>
<span class="line"><span style="color:#E5C07B;">		options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 实现render</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#61AFEF;"> render</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">container</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vnode</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		container</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> vnode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 该对象就是renderer</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		render</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		createApp</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">createAppAPI</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">render</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> renderer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createRenderer</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">tag</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">child</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">parent</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		parent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createApp</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			bar</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;hello,vue3&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			tag</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;h1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			children</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br></div></div><h2 id="vue3-x-响应式数据" tabindex="-1">Vue3.x 响应式数据 <a class="header-anchor" href="#vue3-x-响应式数据" aria-label="Permalink to &quot;Vue3.x 响应式数据&quot;">​</a></h2><p>可以从以下方面展开回答：</p><ul><li><em>Vue3.x</em> 响应式数据原理是什么？</li><li><em>Proxy</em> 只会代理对象的第一层，那么 <em>Vue3</em> 又是怎样处理这个问题的呢？</li><li>监测数组的时候可能触发多次 <em>get/set</em>，那么如何防止触发多次呢？</li></ul><p>参考答案：</p><p><strong>Vue3.x 响应式数据原理是什么？</strong></p><p>在 Vue 2 中，响应式原理就是使用的 Object.defineProperty 来实现的。但是在 Vue 3.0 中采用了 Proxy，抛弃了 Object.defineProperty 方法。</p><p>究其原因，主要是以下几点：</p><ol><li>Object.defineProperty 无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应</li><li>Object.defineProperty 只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍历。Proxy 可以劫持整个对象，并返回一个新的对象。</li><li>Proxy 不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。</li><li>Proxy 有多达 13 种拦截方法</li><li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化</li></ol><p><strong>Proxy 只会代理对象的第一层，那么 Vue3 又是怎样处理这个问题的呢？</strong></p><p>判断当前 Reflect.get 的返回值是否为 Object，如果是则再通过 reactive 方法做代理， 这样就实现了深度观测。</p><p><strong>监测数组的时候可能触发多次 get/set，那么如何防止触发多次呢？</strong></p><p>我们可以判断 key 是否为当前被代理对象 target 自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行 trigger。</p><h2 id="vue3响应式原理" tabindex="-1">vue3响应式原理 <a class="header-anchor" href="#vue3响应式原理" aria-label="Permalink to &quot;vue3响应式原理&quot;">​</a></h2><p>在Vue 3中，响应式原理主要基于Proxy和Reflect两个ES6的特性。</p><p>Vue 3的响应式系统通过使用Proxy来代理对象，并使用Reflect来拦截对对象的操作，从而实现对对象的观察和响应。以下是Vue 3响应式原理的主要步骤：</p><ul><li><strong>初始化阶段</strong>：在创建组件实例时，Vue会对组件的data选项进行处理。Vue会遍历data选项中的属性，并使用Proxy将它们转换为响应式属性。</li><li><strong>响应式代理</strong>：通过使用Proxy，Vue创建了一个代理对象来包裹原始的数据对象。代理对象拦截对属性的访问和修改操作。</li><li><strong>Getter拦截</strong>：当访问代理对象的属性时，Proxy会拦截getter操作，并返回属性的值。同时，Vue会收集当前组件的依赖关系，并建立响应式依赖。</li><li><strong>Setter拦截</strong>：当修改代理对象的属性时，Proxy会拦截setter操作，并更新属性的值。同时，Vue会通知依赖该属性的相关组件进行更新。</li><li><strong>依赖追踪</strong>：Vue会使用一个专门的数据结构，称为Reactive Effect（响应式副作用），来追踪组件的依赖关系。当一个属性被访问时，Vue会将当前正在执行的副作用函数与该属性建立关联。</li><li><strong>触发更新</strong>：当代理对象的属性发生变化时，Vue会触发与该属性相关的副作用函数，从而更新相关组件的视图。</li></ul><p>通过上述步骤，Vue 3实现了对组件数据的响应式追踪和更新。Proxy拦截对象的访问和修改操作，而Reflect提供了操作对象的方法。这种机制使得Vue能够在属性被访问和修改时自动进行依赖收集和更新，从而实现了高效的响应式系统。</p><h2 id="关于-vue3-双向绑定的实现" tabindex="-1">关于 vue3 双向绑定的实现 <a class="header-anchor" href="#关于-vue3-双向绑定的实现" aria-label="Permalink to &quot;关于 vue3 双向绑定的实现&quot;">​</a></h2><p>vue3 实现双向绑定的核心是 Proxy（代理的使用），它会对需要响应式处理的对象进行一层代理，对象的所有操作（get、set 等）都会被 Prxoy 代理到。在 vue 中，所有响应式对象相关的副作用函数会使用 weakMap 来存储。当执行对应的操作时，会去执行操作中所收集到的副作用函数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// WeakMap常用于存储只有当key所引用的对象存在时（没有被回收）才有价值的消息，十分贴合双向绑定场景</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> bucket</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WeakMap</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 存储副作用函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> activeEffect</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 用一个全局变量处理被注册的函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> tempObj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}; </span><span style="color:#7F848E;font-style:italic;">// 临时对象，用于操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;hello world&quot;</span><span style="color:#ABB2BF;"> }; </span><span style="color:#7F848E;font-style:italic;">// 响应数据源</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 用于清除依赖</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> cleanup</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">effectFn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> effectFn</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">deps</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> deps</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> effectFn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">deps</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">		deps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delete</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">effectFn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	effectFn</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">deps</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理依赖函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> effect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#61AFEF;"> effectFn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		cleanup</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">effectFn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		activeEffect</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> effectFn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">		fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#E5C07B;">	effectFn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">deps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#61AFEF;">	effectFn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在get时拦截函数调用track函数追踪变化</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> track</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">activeEffect</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> depsMap</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> bucket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">depsMap</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		bucket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">depsMap</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> deps</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> depsMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">deps</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		depsMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">deps</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	deps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">activeEffect</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	activeEffect</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">deps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">deps</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在set拦截函数内调用trigger来触发变化</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> depsMap</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> bucket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">depsMap</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> effects</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> depsMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> effectsToRun</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">effects</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	effectsToRun</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">effectFn</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> effectFn</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// effects &amp;&amp; effects.forEach(fn =&gt; fn());</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 拦截读取操作</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">activeEffect</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get -&gt; key&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		track</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 拦截设置操作</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set -&gt; key: newValue&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">		trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">effect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	tempObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;tempObj.text :&gt;&gt; &quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">tempObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hi vue3&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div><h2 id="手写vue3响应式" tabindex="-1">手写Vue3响应式 <a class="header-anchor" href="#手写vue3响应式" aria-label="Permalink to &quot;手写Vue3响应式&quot;">​</a></h2><p><a href="https://www.jianshu.com/p/1c37eecd272d" target="_blank" rel="noreferrer">第三节:vue3源码响应系统:reactive创建响应式代理 - 简书 (jianshu.com)</a></p><p>要手写Vue 3的Proxy响应式系统，可以按照以下步骤实现：</p><p>创建一个reactive函数，接受一个普通对象作为参数，并返回一个响应式代理对象。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="手写vue2响应式" tabindex="-1">手写vue2响应式 <a class="header-anchor" href="#手写vue2响应式" aria-label="Permalink to &quot;手写vue2响应式&quot;">​</a></h2><p>要手写Vue 2的响应式系统，需要实现以下几个核心部分：依赖追踪、响应式数据的代理和触发更新。</p><p>下面是一个简化版本的手写Vue 2响应式系统的示例：</p><p>依赖追踪1 个用法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 依赖追踪1 个用法</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Dep</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 1 个用法</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subscribers</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 1 个用法</span></span>
<span class="line"><span style="color:#61AFEF;">    depend</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">activeEffect</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subscribers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">activeEffect</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 1个用法</span></span>
<span class="line"><span style="color:#61AFEF;">    notify</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subscribers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">effect</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">            effect</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>响应式数据的代理</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1 个用法</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    0</span><span style="color:#E5C07B;">bject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dep</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">        0</span><span style="color:#E5C07B;">bject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">            get</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">                dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#61AFEF;">            set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E06C75;">            	value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            	dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        	}</span></span>
<span class="line"><span style="color:#ABB2BF;">    	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>副作用函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 副作用函数</span></span>
<span class="line"><span style="color:#E06C75;">Let</span><span style="color:#E06C75;"> activeEffect</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1 个用法</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> effect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E06C75;">    activeEffect</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> callback</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    callback</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    activeEffect</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 示例使用</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">	count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">effect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Count</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">{data.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">}); </span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 触发更新，输出“Count:1&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">comsole</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>在上述示例中，我们定义了一个Dep类用于追踪依赖关系，其中的depend方法用于收集当前活动的副作用函数，notify方法用于触发更新。</p><p>然后，我们使用reactive函数对数据对象进行代理，将属性的访问和修改操作转换为依赖的收集和触发更新。在get方法中，我们收集依赖，即将活动的副作用函数添加到依赖中。在set方法中，我们更新属性的值，并触发依赖的更新。</p><p>最后，我们定义了effect函数用于执行副作用函数，并在执行前将其设置为活动的副作用函数。这样，在访问响应式数据时，会触发依赖收集，当数据发生变化时，会触发依赖的更新。</p><p>请注意，上述示例是一个简化版本，仅用于说明Vue 2响应式的基本原理。在实际应用中，Vue 2的响应式系统还包含了更多的功能和优化，如递归代理、数组处理、派发更新等。完整的Vue 3响应式系统是基于Proxy和Reflect的，并且处理了更多的细节，以提供更高效和全面的响应式能力。</p><h2 id="vue3-里为什么要用-proxy-api-替代-defineproperty-api" tabindex="-1">Vue3 里为什么要用 Proxy API 替代 defineProperty API？ <a class="header-anchor" href="#vue3-里为什么要用-proxy-api-替代-defineproperty-api" aria-label="Permalink to &quot;Vue3 里为什么要用 Proxy API 替代 defineProperty API？&quot;">​</a></h2><p><strong>响应式优化（高频，重点）</strong></p><p>这是在面试中问的最多的一个问题，无论是大厂还是中小型公司，都喜欢问，也是 Vue 更新的重点。</p><p>a. defineProperty API 的局限性最大原因是<strong>它只能针对单例属性做监听</strong>。</p><ul><li>Vue2.x 中的响应式实现正是基于 defineProperty 中的 descriptor，对 data 中的属性做了遍历 + 递归，为每个属性设置了 getter、setter。</li><li>这也就是为什么 Vue 只能对 data 中预定义过的属性做出响应的原因，在 Vue 中使用下标的方式直接修改属性的值或者添加一个预先不存在的对象属性是无法做到 setter 监听的，这是 defineProperty 的局限性。</li></ul><p>b. Proxy API 的监听是针对一个对象的，那么对这个对象的所有操作会进入监听操作， 这就完全可以代理所有属性，将会带来很大的性能提升和更优的代码。</p><ul><li>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</li></ul><p><strong>c. 响应式是惰性的</strong></p><ul><li>在 Vue.js 2.x 中，对于一个深层属性嵌套的对象，要劫持它内部深层次的变化，就需要递归遍历这个对象，执行 Object.defineProperty 把每一层对象数据都变成响应式的，这无疑会有很大的性能消耗。</li><li>在 Vue.js 3.0 中，使用 Proxy API 并不能监听到对象内部深层次的属性变化，因此它的处理方式是在 getter 中去递归响应式，这样的好处是真正访问到的内部属性才会变成响应式，简单的可以说是按需实现响应式，减少性能消耗。</li><li>基础用法：</li></ul><h2 id="vue3-编译做了哪些优化-底层-源码" tabindex="-1">Vue3 编译做了哪些优化？（底层，源码） <a class="header-anchor" href="#vue3-编译做了哪些优化-底层-源码" aria-label="Permalink to &quot;Vue3 编译做了哪些优化？（底层，源码）&quot;">​</a></h2><h3 id="a-生成-block-tree" tabindex="-1">a. 生成 Block tree <a class="header-anchor" href="#a-生成-block-tree" aria-label="Permalink to &quot;a. 生成 Block tree&quot;">​</a></h3><ul><li>Vue.js 2.x 的数据更新并触发重新渲染的粒度是组件级的，单个组件内部 需要遍历该组件的整个 vnode 树。</li><li>在 2.0 里，渲染效率的快慢与组件大小成正相关：组件越大，渲染效率越慢。并且，对于一些静态节点，又无数据更新，这些遍历都是性能浪费。</li><li>Vue.js 3.0 做到了通过编译阶段对静态模板的分析，编译生成了 Block tree。</li><li>Block tree 是一个将模版基于动态节点指令切割的嵌套区块，每个 区块内部的节点结构是固定的，每个区块只需要追踪自身包含的动态节点。 所以，在 3.0 里，渲染效率不再与模板大小成正相关，而是与模板中动态节点的数量成正相关。</li></ul><p>Diff <code>&lt;p&gt;</code> textContent</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;content&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">&gt;Lorem ipsum&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">&gt;Lorem ipsum&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">&gt;Lorem ipsum&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">&gt;Lorem ipsum&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>节点结构完全不会改变</li><li>只有一个动态节点</li></ul><h3 id="b-slot-编译优化" tabindex="-1">b. slot 编译优化 <a class="header-anchor" href="#b-slot-编译优化" aria-label="Permalink to &quot;b. slot 编译优化&quot;">​</a></h3><ul><li><p>Vue.js 2.x 中，如果有一个组件传入了 slot，那么每次父组件更新的时候，会强制使子组件 update，造成性能的浪费。</p></li><li><p>Vue.js 3.0 优化了 slot 的生成，使得非动态 slot 中属性的更新只会触发子组件的更新。 动态 slot 指的是在 slot 上面使用 v-if，v-for，动态 slot 名字等会导致 slot 产生运行时动态变化但是又无法被子组件 track 的操作。</p></li><li><p>c. diff 算法优化（此知识点进大厂可能会问到，由于篇幅较长，大家可以去官网看下）</p></li></ul><h2 id="vue3-新特性-——-composition-api-与-react-js-中-hooks-的异同点-难点问题" tabindex="-1">Vue3 新特性 —— Composition API 与 React.js 中 Hooks 的异同点**（难点问题）** <a class="header-anchor" href="#vue3-新特性-——-composition-api-与-react-js-中-hooks-的异同点-难点问题" aria-label="Permalink to &quot;Vue3 新特性 —— Composition API 与 React.js 中 Hooks 的异同点**（难点问题）**&quot;">​</a></h2><h3 id="a-react-js-中的-hooks-基本使用" tabindex="-1">a. React.js 中的 Hooks 基本使用 <a class="header-anchor" href="#a-react-js-中的-hooks-基本使用" aria-label="Permalink to &quot;a. React.js 中的 Hooks 基本使用&quot;">​</a></h3><ul><li><p>React Hooks 允许你 &quot;勾入&quot; 诸如组件状态和副作用处理等 React 功能中。</p><p>Hooks 只能用在函数组件中，并允许我们在不需要创建类的情况下将状态、副作用处理和更多东西带入组件中。</p></li><li><p>React 核心团队奉上的采纳策略是不反对类组件，所以你可以升级 React 版本、在新组件中开始尝试 Hooks，并保持既有组件不做任何更改。</p></li><li><p>案例：</p></li></ul><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">React</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">usestate</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> NoteForm</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ({</span><span style="color:#E06C75;font-style:italic;">onNotesent</span><span style="color:#ABB2BF;">}) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">currentNote</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">setCurrentNote</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> usestate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Current note: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">currenthote</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    	&lt;</span><span style="color:#E06C75;">form</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">        	onSubmit</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            	onNoteSent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">currentNote</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">                setcurrentNote</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">        &gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        	&lt;</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;Note:&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        	&lt;</span><span style="color:#E06C75;">input</span></span>
<span class="line"><span style="color:#FFFFFF;">                value-{currenthote}</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">                onChange</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">                    const</span><span style="color:#E5C07B;"> val</span><span style="color:#ABB2BF;"> - e,</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.value &amp;&amp; e.target.value.toUppercase()[0]];</span></span>
<span class="line"><span style="color:#C678DD;">                    const</span><span style="color:#E5C07B;"> validNotes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;E&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;F&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;G&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#61AFEF;">                    setCurrentNote</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">validNotes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> val</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">        	/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;submit&quot;</span><span style="color:#ABB2BF;">&gt;Send&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E06C75;">form</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><ul><li>useState 和 useEffect 是 React Hooks 中的一些例子，使得函数组件中也能增加状态和运行副作用。</li><li>我们也可以自定义一个 Hooks，它打开了代码复用性和扩展性的新大门。</li></ul><h3 id="b-vue-composition-api-基本使用" tabindex="-1">b. Vue Composition API 基本使用 <a class="header-anchor" href="#b-vue-composition-api-基本使用" aria-label="Permalink to &quot;b. Vue Composition API 基本使用&quot;">​</a></h3><ul><li><p>Vue Composition API 围绕一个新的组件选项 setup 而创建。</p><p>setup() 为 Vue 组件提供了状态、计算值、watcher 和生命周期钩子。</p></li><li><p>并没有让原来的 API（Options-based API）消失。</p><p>允许开发者 结合使用新旧两种 API（向下兼容）。</p></li></ul><h3 id="c-原理" tabindex="-1">c. 原理 <a class="header-anchor" href="#c-原理" aria-label="Permalink to &quot;c. 原理&quot;">​</a></h3><ul><li><p>React hook 底层是基于链表实现，调用的条件是每次组件被 render 的时候都会顺序执行所有的 hooks。</p></li><li><p>vue hook 只会被注册调用一次，vue 能避开这些麻烦的问题，原因在于它对数据的响应是基于 proxy 的，对数据直接代理观察。</p><p>（这种场景下，只要任何一个更改 data 的地方，相关的 function 或者 template 都会被重新计算，因此避开了 react 可能遇到的性能上的问题）。</p></li><li><p>react 中，数据更改的时候，会导致重新 render，重新 render 又会重新把 hooks 重新注册一次，所以 react 复杂程度会高一些。</p></li></ul><h2 id="composition-api-实现原理" tabindex="-1">Composition API 实现原理 <a class="header-anchor" href="#composition-api-实现原理" aria-label="Permalink to &quot;Composition API 实现原理&quot;">​</a></h2><p>在 Vue 3 中，Composition API 如何改进了组件的逻辑组织？请结合实际项目经验，举例说明如何使用<code>setup()</code>函数、<code>ref</code>和<code>reactive</code>来优化组件结构。</p><h3 id="解答" tabindex="-1">解答 <a class="header-anchor" href="#解答" aria-label="Permalink to &quot;解答&quot;">​</a></h3><ul><li><strong><code>setup()</code>函数</strong>：它是一个特殊的生命周期钩子，用于集中定义组件的响应式状态、计算属性、方法以及副作用（如监听和定时器）。相比选项式 API，<code>setup()</code>允许我们将关注点分离，按逻辑而非选项类别组织代码，提升代码可读性和复用性。例如，在一个购物车组件中，我们可以将商品筛选逻辑、数量计算和添加商品到购物车的操作全部放在<code>setup()</code>中，形成一个清晰的功能模块。</li><li><strong><code>ref</code></strong>：用于创建响应式的引用类型变量，其值可以通过<code>.value</code>属性访问和修改。相比于 Vue 2 中的<code>data</code>属性，<code>ref</code>更易于在组件内外传递和在<code>setup()</code>中使用。比如，我们可能有一个商品详情组件，其中的商品价格就是一个<code>ref</code>，当后台接口返回新价格时，只需更新<code>price.value</code>即可触发视图更新。</li><li><strong><code>reactive</code></strong>：用于创建响应式的对象或数组。与<code>ref</code>不同，<code>reactive</code>创建的是一个 Proxy 对象，可以直接访问其属性而无需<code>.value</code>。这对于管理复杂的数据结构（如用户信息、订单列表等）非常有用。例如，在一个用户个人资料编辑页面，我们可以使用<code>reactive</code>创建一个包含姓名、邮箱、地址等属性的用户对象，当用户在表单中修改这些信息时，相应属性会自动更新，触发视图刷新。</li></ul><h2 id="vue3-为什么要用-proxy" tabindex="-1">Vue3 为什么要用 proxy？ <a class="header-anchor" href="#vue3-为什么要用-proxy" aria-label="Permalink to &quot;Vue3 为什么要用 proxy？&quot;">​</a></h2><p>在 Vue2 中， 0bject.defineProperty 会改变原始数据，而 Proxy 是创建对象的虚拟表示，并提供 set 、get 和 deleteProperty 等处理器，这些处理器可在访问或修改原始对象上的属性时进行拦截，有以下特点 ∶</p><ul><li>不需用使用 <code>Vue.$set</code> 或 <code>Vue.$delete</code> 触发响应式。</li><li>全方位的数组变化检测，消除了 Vue2 无效的边界情况。</li><li>支持 Map，Set，WeakMap 和 WeakSet。</li></ul><p>Proxy 实现的响应式原理与 Vue2 的实现原理相同，实现方式大同小异 ∶</p><ul><li>get 收集依赖</li><li>Set、delete 等触发依赖</li><li>对于集合类型，就是对集合对象的方法做一层包装：原方法执行后执行依赖相关的收集或触发逻辑。</li></ul><h2 id="proxy-相比-defineproperty-的优势在哪里" tabindex="-1">Proxy 相比 defineProperty 的优势在哪里 <a class="header-anchor" href="#proxy-相比-defineproperty-的优势在哪里" aria-label="Permalink to &quot;Proxy 相比 defineProperty 的优势在哪里&quot;">​</a></h2><p>参考答案：</p><p>Vue3.x 改用 Proxy 替代 Object.defineProperty</p><p>原因在于 Object.defineProperty 本身存在的一些问题：</p><ul><li>Object.defineProperty 只能劫持对象属性的 getter 和 setter 方法。</li><li>Object.definedProperty 不支持数组(可以监听数组,不过数组方法无法监听自己重写)，更准确的说是不支持数组的各种 API(所以 Vue 重写了数组方法。</li></ul><p>而相比 Object.defineProperty，Proxy 的优点在于：</p><ul><li>Proxy 是直接代理劫持整个对象。</li><li>Proxy 可以直接监听对象和数组的变化，并且有多达 13 种拦截方法。</li></ul><p>目前，Object.definedProperty 唯一比 Proxy 好的一点就是兼容性，不过 Proxy 新标准也受到浏览器厂商重点持续的性能优化当中。</p><p>数组变化也能监听到</p><p>不需要深度遍历监听</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> reactiveData</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="proxy-基本使用" tabindex="-1">Proxy 基本使用 <a class="header-anchor" href="#proxy-基本使用" aria-label="Permalink to &quot;Proxy 基本使用&quot;">​</a></h2><p>Proxy 文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxy - JavaScript | MDN (mozilla.org)</a></p><p>Reflect 文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noreferrer">Reflect - JavaScript | MDN (mozilla.org)</a></p><p>1.Proxy.revocable(target, handler)创建一个可撤销的代理对象，返回一个包含proxy和revoke属性的对象。proxy表示创建的代理对象，revoke是一个函数，用于撤销代理。</p><p>2.Proxy.revocable() 示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">proxy</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">revoke</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Proxy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">revocable</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">handler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用代理对象</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">proxy</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 撒销代理</span></span>
<span class="line"><span style="color:#61AFEF;">revoke</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>3.new Proxy(target, handler) 通过new Proxy()创建一个代理对象，接受两个参数：target表示要代理的目标对象，handler表示拦截器对象，用于定义代理行为。</p><p>4.handler.get(target, property, receiver) 拦截对目标对象的属性读取操作。当读取目标对象的属性时，会调用handler.get方法。</p><p>5.handler.set(target, property, value, receiver) 拦截对目标对象的属性赋值操作。当给目标对象的属性赋值时，会调用handler.set方法。</p><p>6.handler.has(target, property) 拦截in操作符，判断属性是否存在于目标对象中。当使用in操作符检查属性是否存在时，会调用handler.has方法。</p><p>7.handler.deleteProperty(target, property) 拦截对目标对象属性的删除操作。当删除目标对象的属性时，会调用handler.deleteProperty方法。</p><p>8.handler.apply(target, thisArg, argumentsList)拦截对目标对象的函数调用。当调用目标对象的函数时，会调用handler.apply方法。</p><p>9.handler.construct(target, argumentsList, newTarget)拦截对目标对象的new操作符，用于创建对象实例。当使用new操作符创建对象实例时，会调用handler.construct方法。</p><p>10.handler.defineProperty(target, property, descriptor)拦截对目标对象的属性定义操作。当定义目标对象的属性时，会调用handler.defineProperty方法。</p><p>11.handler.getOwnPropertyDescriptor(target, property)拦截对目标对象的属性描述符的获取操作。当获取目标对象属性的描述符时，会调用handler.getOwnPropertyDescriptor方法。</p><p>这些API提供了丰富的方法来定义和操作代理对象的行为。通过实现拦截器对象中的方法，可以自定义代理对象的各种操作行为，以满足不同的需求。请注意，这些API只是Proxy对象的一部分，还有其他API可用于更细粒度的拦截和操作。更多详细信息和示例可以参考相关的文档和规范。</p><p>Proxy 和 Reflect 结合使用：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// const data = {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     name: &#39;zhangsan&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     age: 20,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> proxyData</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 只处理本身（非原型的）属性</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> ownKeys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ownKeys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ownKeys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 监听</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 返回结果</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 重复的数据，不处理</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">val</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(&#39;result&#39;, result); // true</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 是否设置成功</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;delete property&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(&#39;result&#39;, result); // true</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 是否删除成功</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><ul><li>和 Proxy 能力一一对应</li><li>规范化、标准化、函数式</li><li>替代掉 Object 上的工具函数</li><li></li></ul><h2 id="proxy-实现响应式" tabindex="-1">Proxy 实现响应式 <a class="header-anchor" href="#proxy-实现响应式" aria-label="Permalink to &quot;Proxy 实现响应式&quot;">​</a></h2><p>index.html</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;head&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;meta</span></span>
<span class="line"><span style="color:#ABB2BF;">			name=&quot;viewport&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			content=&quot;width=device-width, initial-scale=1, minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot; /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;title&gt;Observe demo&lt;/title&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/head&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;body&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;p&gt;响应式 demo&lt;/p&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;!-- &lt;script src=&quot;./observe.js&quot;&gt;&lt;/script&gt; --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;script src=&quot;./proxy-observe.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/body&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/html&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>proxy-observe.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建响应式</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 不是对象或数组，则返回</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 代理配置</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> proxyConf</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 只处理本身（非原型的）属性</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> ownKeys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ownKeys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ownKeys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 监听</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 深度监听</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 性能如何提升的？</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 重复的数据，不处理</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">val</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> ownKeys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ownKeys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ownKeys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;已有的 key&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;新增的 key&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(&#39;result&#39;, result); // true</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 是否设置成功</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;delete property&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(&#39;result&#39;, result); // true</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 是否删除成功</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 生成代理对象</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> observed</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">proxyConf</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> observed</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 测试数据</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	info</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;beijing&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		a</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			b</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				c</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">					d</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">						e</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> proxyData</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br></div></div><h2 id="proxy-的问题" tabindex="-1">Proxy 的问题 <a class="header-anchor" href="#proxy-的问题" aria-label="Permalink to &quot;Proxy 的问题&quot;">​</a></h2><ul><li>Proxy 能规避 Object.defineProperty 的问题</li><li>Proxy 兼容性不好，且无法 polyfill</li></ul><h2 id="proxy-与-object-defineproperty-的优劣对比" tabindex="-1">Proxy 与 Object.defineProperty 的优劣对比? <a class="header-anchor" href="#proxy-与-object-defineproperty-的优劣对比" aria-label="Permalink to &quot;Proxy 与 Object.defineProperty 的优劣对比?&quot;">​</a></h2><h4 id="proxy-的优势如下" tabindex="-1">Proxy 的优势如下： <a class="header-anchor" href="#proxy-的优势如下" aria-label="Permalink to &quot;Proxy 的优势如下：&quot;">​</a></h4><ul><li>Proxy 可以直接监听对象而非属性</li><li>Proxy 可以直接监听数组的变化</li><li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的</li><li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改</li><li>Proxy 作为新标准将受到浏览器⼚商重点持续的性能优化，也就是传说中的新标准的性能红利</li></ul><h4 id="object-defineproperty-的优势如下" tabindex="-1">Object.defineProperty 的优势如下： <a class="header-anchor" href="#object-defineproperty-的优势如下" aria-label="Permalink to &quot;Object.defineProperty 的优势如下：&quot;">​</a></h4><p>兼容性好，支持 IE9</p><h2 id="proxy-和-defineproperty-的区别" tabindex="-1">proxy 和 defineProperty 的区别 <a class="header-anchor" href="#proxy-和-defineproperty-的区别" aria-label="Permalink to &quot;proxy 和 defineProperty 的区别&quot;">​</a></h2><ul><li>Vue 在实例初始化时遍历 data 中的所有属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。这样当追踪数据发生变化时，setter 会被自动调用。</li><li>Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。</li><li>但是这样做有以下问题： <ul><li>添加或删除对象的属性时，Vue 检测不到。因为添加或删除的对象没有在初始化进行响应式处理，只能通过<code>$set</code> 来调用 Object.defineProperty()处理。</li><li>无法监控到数组下标和长度的变化。</li></ul></li><li>Vue3 使用 Proxy 来监控数据的变化。Proxy 是 ES6 中提供的功能，其作用为：用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。相对于 Object.defineProperty()，其有以下特点： <ul><li>Proxy 直接代理整个对象而非对象属性，这样只需做一层代理就可以监听同级结构下的所有属性变化，包括新增属性和删除属性。</li><li>Proxy 可以监听数组的变化。</li></ul></li></ul><h2 id="defineproperty-和-proxy-的区别-1" tabindex="-1">defineProperty 和 proxy 的区别 <a class="header-anchor" href="#defineproperty-和-proxy-的区别-1" aria-label="Permalink to &quot;defineProperty 和 proxy 的区别&quot;">​</a></h2><p>Vue 在 实 例 初 始 化 时 遍 历 data 中 的 所 有 属 性 ， 并 使 用 Object.defineProperty 把这些属性全部转为 getter/setter。这样当追踪数据发生变化时，setter 会被自动调用。</p><p>Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。</p><p>但是这样做有以下问题：</p><p>1.添加或删除对象的属性时，Vue 检测不到。因为添加或删除的对象没 有 在 初 始 化 进 行 响 应 式 处 理 ， 只 能 通 过 $set 来 调 用 Object.defineProperty()处理。</p><p>2.无法监控到数组下标和长度的变化。</p><p>Vue3 使用 Proxy 来监控数据的变化。Proxy 是 ES6 中提供的功能，其作用为：用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。相对于 Object.defineProperty()，其有以下特点：</p><ul><li>1.Proxy 直接代理整个对象而非对象属性，这样只需做一层代理就可以监听同级结构下的所有属性变化，包括新增属性和删除属性。</li><li>2.Proxy 可以监听数组的变化。</li></ul><h2 id="defineproperty-和-proxy-的区别-2" tabindex="-1">defineProperty 和 proxy 的区别 <a class="header-anchor" href="#defineproperty-和-proxy-的区别-2" aria-label="Permalink to &quot;defineProperty 和 proxy 的区别&quot;">​</a></h2><p>Vue 在实例初始化时遍历 data 中的所有属性，并使用 <code>Object.defineProperty</code> 把这些属性全部转为 getter/setter。并 劫持各个属性 getter 和 setter，在数据变化时发布消息给订阅者，触发相应的监听回调，而这之间存在几个问题</p><ul><li>初始化时需要遍历对象所有 key，如果对象层次较深，性能不好</li><li>通知更新过程需要维护大量 dep 实例和 watcher 实例，额外占用内存较多</li><li>Object.defineProperty 无法监听到数组元素的变化，只能通过劫持重写数方法</li><li>动态新增，删除对象属性无法拦截，只能用特定 set/delete API 代替</li><li>不支持 Map、Set 等数据结构</li></ul><p>Vue3 使用 Proxy 来监控数据的变化。Proxy 是 ES6 中提供的功能，其作用为：用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。相对于<code>Object.defineProperty()</code>，其有以下特点：</p><ol><li><strong>Proxy 直接代理整个对象而非对象属性</strong>，这样只需做一层代理就可以监听同级结构下的所有属性变化，包括新增属性和删除属性。</li><li>它的处理方式是在 getter 中去递归响应式，这样的好处是真正访问到的内部属性才会变成响应式，简单的可以说是按需实现响应式，减少性能消耗。</li><li>Proxy 可以监听数组的变化</li></ol><h2 id="vue3-为什么要用-proxy-1" tabindex="-1">Vue3 为什么要用 proxy？ <a class="header-anchor" href="#vue3-为什么要用-proxy-1" aria-label="Permalink to &quot;Vue3 为什么要用 proxy？&quot;">​</a></h2><p>在 Vue2 中， 0bject.defineProperty 会改变原始数据，而 Proxy 是创建对象的虚拟表示，并提供 set 、get 和 deleteProperty 等</p><p>处理器，这些处理器可在访问或修改原始对象上的属性时进行拦截，有以下特点 ∶ 不需用使用 Vue.$set 或 Vue.$delete 触发响应式。</p><p>全方位的数组变化检测，消除了 Vue2 无效的边界情况。</p><p>支持 Map，Set，WeakMap 和 WeakSet。</p><p>Proxy 实现的响应式原理与 Vue2 的实现原理相同，实现方式大同小异 ∶</p><p>get 收集依赖</p><p>Set、delete 等触发依赖</p><p>对于集合类型，就是对集合对象的方法做一层包装：原方法执行后执行依赖相关的收集或触发逻辑。</p><h2 id="vue3-里为什么要用-proxy-api-替代-defineproperty-api-1" tabindex="-1">Vue3 里为什么要用 Proxy API 替代 defineProperty API？ <a class="header-anchor" href="#vue3-里为什么要用-proxy-api-替代-defineproperty-api-1" aria-label="Permalink to &quot;Vue3 里为什么要用 Proxy API 替代 defineProperty API？&quot;">​</a></h2><p>参考回答：</p><p><strong>响应式优化。</strong></p><h4 id="a-defineproperty-api-的局限性最大原因是它只能针对单例属性做监听。" tabindex="-1">a. defineProperty API 的局限性最大原因是它只能针对单例属性做监听。 <a class="header-anchor" href="#a-defineproperty-api-的局限性最大原因是它只能针对单例属性做监听。" aria-label="Permalink to &quot;a. defineProperty API 的局限性最大原因是它只能针对单例属性做监听。&quot;">​</a></h4><p>Vue2.x 中的响应式实现正是基于 defineProperty 中的 descriptor，对 data 中的属性做了遍历 + 递归，为每个属性设置了 getter、setter。</p><p>这也就是为什么 Vue 只能对 data 中预定义过的属性做出响应的原因，在 Vue 中使用下标的方式直接修改属性的值或者添加一个预先不存在的对象属性是无法做到 setter 监听的，这是 defineProperty 的局限性。</p><h4 id="b-proxy-api-的监听是针对一个对象的" tabindex="-1">b. Proxy API 的监听是针对一个对象的 <a class="header-anchor" href="#b-proxy-api-的监听是针对一个对象的" aria-label="Permalink to &quot;b. Proxy API 的监听是针对一个对象的&quot;">​</a></h4><p>那么对这个对象的所有操作会进入监听操作，这就完全可以代理所有属性，将会带来很大的性能提升和更优的代码。</p><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p><h4 id="c-响应式是惰性的" tabindex="-1">c. 响应式是惰性的 <a class="header-anchor" href="#c-响应式是惰性的" aria-label="Permalink to &quot;c. 响应式是惰性的&quot;">​</a></h4><p>在 Vue.js 2.x 中，对于一个深层属性嵌套的对象，要劫持它内部深层次的变化，就需要递归遍历这个对象，执行 Object.defineProperty 把每一层对象数据都变成响应式的，这无疑会有很大的性能消耗。</p><p>在 Vue.js 3.0 中，使用 Proxy API 并不能监听到对象内部深层次的属性变化，因此它的处理方式是在 getter 中去递归响应式，这样的好处是真正访问到的内部属性才会变成响应式，简单的可以说是按需实现响应式，减少性能消耗。</p><p>基础用法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> datas</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    num</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> proxy</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">datas</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">handler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> prop</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> obj</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 37</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;">  set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">+=</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="vue3-编译做了哪些优化" tabindex="-1">Vue3 编译做了哪些优化？ <a class="header-anchor" href="#vue3-编译做了哪些优化" aria-label="Permalink to &quot;Vue3 编译做了哪些优化？&quot;">​</a></h2><p>参考回答：</p><h5 id="a-生成-block-tree-1" tabindex="-1">a. 生成 Block tree <a class="header-anchor" href="#a-生成-block-tree-1" aria-label="Permalink to &quot;a. 生成 Block tree&quot;">​</a></h5><p>Vue.js 2.x 的数据更新并触发重新渲染的粒度是组件级的，单个组件内部 需要遍历该组件的整个 vnode 树。在 2.0 里，渲染效率的快慢与组件大小成正相关：组件越大，渲染效率越慢。并且，对于一些静态节点，又无数据更新，这些遍历都是性能浪费。</p><p>Vue.js 3.0 做到了通过编译阶段对静态模板的分析，编译生成了 Block tree。</p><p>Block tree 是一个将模版基于动态节点指令切割的嵌套区块，每个 区块内部的节点结构是固定的，每个区块只需要追踪自身包含的动态节点。所以，在 3.0 里，渲染效率不再与模板大小成正相关，而是与模板中动态节点的数量成正相关。</p><h4 id="b-slot-编译优化-1" tabindex="-1">b. slot 编译优化 <a class="header-anchor" href="#b-slot-编译优化-1" aria-label="Permalink to &quot;b. slot 编译优化&quot;">​</a></h4><p>Vue.js 2.x 中，如果有一个组件传入了 slot，那么每次父组件更新的时候，会强制使子组件 update，造成性能的浪费。</p><p>Vue.js 3.0 优化了 slot 的生成，使得非动态 slot 中属性的更新只会触发子组件的更新。动态 slot 指的是在 slot 上面使用 v-if，v-for，动态 slot 名字等会导致 slot 产生运行时动态变化但是又无法被子组件 track 的操作。</p><h4 id="c-diff-算法优化" tabindex="-1">c. diff 算法优化 <a class="header-anchor" href="#c-diff-算法优化" aria-label="Permalink to &quot;c. diff 算法优化&quot;">​</a></h4><h2 id="vue3-新特性-——-composition-api-与-react-js-中-hooks-的异同点" tabindex="-1">Vue3 新特性 —— Composition API 与 React.js 中 Hooks 的异同点 <a class="header-anchor" href="#vue3-新特性-——-composition-api-与-react-js-中-hooks-的异同点" aria-label="Permalink to &quot;Vue3 新特性 —— Composition API 与 React.js 中 Hooks 的异同点&quot;">​</a></h2><p>参考回答：</p><h4 id="a-react-js-中的-hooks-基本使用-1" tabindex="-1">a. React.js 中的 Hooks 基本使用 <a class="header-anchor" href="#a-react-js-中的-hooks-基本使用-1" aria-label="Permalink to &quot;a. React.js 中的 Hooks 基本使用&quot;">​</a></h4><p>React Hooks 允许你 &quot;勾入&quot; 诸如组件状态和副作用处理等 React 功能中。</p><p>Hooks 只能用在函数组件中，并允许我们在不需要创建类的情况下将状态、副作用处理和更多东西带入组件中。</p><p>React 核心团队奉上的采纳策略是不反对类组件，所以你可以升级 React 版本、在新组件中开始尝试 Hooks，并保持既有组件不做任何更改。</p><p>案例：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>useState 和 useEffect 是 React Hooks 中的一些例子，使得函数组件中也能增加状态和运行副作用。</p><p>我们也可以自定义一个 Hooks，它打开了代码复用性和扩展性的新大门。</p><h4 id="b-vue-composition-api-基本使用-1" tabindex="-1">b. Vue Composition API 基本使用 <a class="header-anchor" href="#b-vue-composition-api-基本使用-1" aria-label="Permalink to &quot;b. Vue Composition API 基本使用&quot;">​</a></h4><p>Vue Composition API 围绕一个新的组件选项 setup 而创建。setup() 为 Vue 组件提供了状态、计算值、watcher 和生命周期钩子。</p><p>并没有让原来的 API（Options-based API）消失。允许开发者 结合使用新旧两种 API（向下兼容）。</p><h4 id="c-原理-1" tabindex="-1">c. 原理 <a class="header-anchor" href="#c-原理-1" aria-label="Permalink to &quot;c. 原理&quot;">​</a></h4><p>React hook 底层是基于链表实现，调用的条件是每次组件被 render 的时候都会顺序执行所有的 hooks。</p><p>Vue hook 只会被注册调用一次，Vue 能避开这些麻烦的问题，原因在于它对数据的响应是基于 proxy 的，对数据直接代理观察。（这种场景下，只要任何一个更改 data 的地方，相关的 function 或者 template 都会被重新计算，因此避开了 React 可能遇到的性能上的问题）。</p><p>React 中，数据更改的时候，会导致重新 render，重新 render 又会重新把 hooks 重新注册一次，所以 React 复杂程度会高一些。</p><h2 id="vue3-是如何变得更快的-底层-源码-1" tabindex="-1">Vue3 是如何变得更快的？（底层，源码） <a class="header-anchor" href="#vue3-是如何变得更快的-底层-源码-1" aria-label="Permalink to &quot;Vue3 是如何变得更快的？（底层，源码）&quot;">​</a></h2><p>参考回答：</p><h4 id="a-diff-方法优化-1" tabindex="-1">a. diff 方法优化 <a class="header-anchor" href="#a-diff-方法优化-1" aria-label="Permalink to &quot;a. diff 方法优化&quot;">​</a></h4><p>Vue2.x 中的虚拟 dom 是进行全量的对比。</p><p>Vue3.0 中新增了静态标记（PatchFlag）：在与上次虚拟结点进行对比的时候，值对比带有 patch flag 的节点，并且可以通过 flag 的信息得知当前节点要对比的具体内容化。</p><h4 id="b-hoiststatic-静态提升-1" tabindex="-1">b. hoistStatic 静态提升 <a class="header-anchor" href="#b-hoiststatic-静态提升-1" aria-label="Permalink to &quot;b. hoistStatic 静态提升&quot;">​</a></h4><p>Vue2.x : 无论元素是否参与更新，每次都会重新创建。</p><p>Vue3.0 : 对不参与更新的元素，只会被创建一次，之后会在每次渲染时候被不停的复用。</p><h4 id="c-cachehandlers-事件侦听器缓存-1" tabindex="-1">c. cacheHandlers 事件侦听器缓存 <a class="header-anchor" href="#c-cachehandlers-事件侦听器缓存-1" aria-label="Permalink to &quot;c. cacheHandlers 事件侦听器缓存&quot;">​</a></h4><p>默认情况下 onClick 会被视为动态绑定，所以每次都会去追踪它的变化但是因为是同一个函数，所以没有追踪变化，直接缓存起来复用即可。</p><h2 id="说说你对-proxy-的理解" tabindex="-1">说说你对 proxy 的理解 <a class="header-anchor" href="#说说你对-proxy-的理解" aria-label="Permalink to &quot;说说你对 proxy 的理解&quot;">​</a></h2><p>参考回答：</p><p>vue 的数据劫持有两个缺点:</p><ul><li>1、无法监听通过索引修改数组的值的变化</li><li>2、无法监听 object 也就是对象的值的变化</li></ul><p>所以 vue2.x 中才会有$set 属性的存在</p><p>proxy 是 es6 中推出的新 api，可以弥补以上两个缺点，所以 vue3.x 版本用 proxy 替换 object.defineproperty。</p><h2 id="既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行-diff-检测差异" tabindex="-1">既然 Vue 通过数据劫持可以精准探测数据变化，为什么还需要虚拟 DOM 进行 diff 检测差异? <a class="header-anchor" href="#既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行-diff-检测差异" aria-label="Permalink to &quot;既然 Vue 通过数据劫持可以精准探测数据变化，为什么还需要虚拟 DOM 进行 diff 检测差异?&quot;">​</a></h2><p>考点：Vue 的变化侦测原理</p><p>前置知识: 依赖收集、虚拟 DOM、响应式系统</p><p>现代前端框架有两种方式侦测变化,一种是 pull 一种是 push</p><p>pull: 其代表为 React，我们可以回忆一下 React 是如何侦测到变化的,我们通常会用 setState API 显式更新,然后 React 会进行一层层的 Virtual Dom Diff 操作找出差异,然后 Patch 到 DOM 上，React 从一开始就不知道到底是哪发生了变化,只是知道「有变化了」，然后再进行比较暴⼒的 Diff 操作查找「哪发生变化了」，另外一个代表就是 Angular 的脏检查操作。</p><p>push: Vue 的响应式系统则是 push 的代表,当 Vue 程序初始化的时候就会对数据 data 进行依赖的收集，一但数据发生变化,响应式系统就会立刻得知，因此 Vue 是一开始就知道是「在哪发生变化了」，但是这⼜会产生一个问题,如果你熟悉 Vue 的响应式系统就知道，通常一个绑定一个数据就需要一个 Watcher，一但我们的绑定细粒度过高就会产生大量的 Watcher，这会带来内存以及依赖追踪的开销，而细粒度过低会无法精准侦测变化，因此 Vue 的设计是选择中等细粒度的方案，在组件级别进行 push 侦测的方式,也就是那套响应式系统,通常我们会第一时间侦测到发生变化的组件，然后在组件内部进行 Virtual Dom Diff 获取更加具体的差异，而 Virtual Dom Diff 则是 pull 操作，Vue 是 push+pull 结合的方式进行变化侦测的。</p><h2 id="vue-为什么没有类似于-react-中-shouldcomponentupdate-的生命周期" tabindex="-1">Vue 为什么没有类似于 React 中 shouldComponentUpdate 的生命周期？ <a class="header-anchor" href="#vue-为什么没有类似于-react-中-shouldcomponentupdate-的生命周期" aria-label="Permalink to &quot;Vue 为什么没有类似于 React 中 shouldComponentUpdate 的生命周期？&quot;">​</a></h2><p>考点: Vue 的变化侦测原理</p><p>前置知识: 依赖收集、虚拟 DOM、响应式系统</p><p>根本原因是 Vue 与 React 的变化侦测方式有所不同</p><p>React 是 pull 的方式侦测变化,当 React 知道发生变化后，会使用 Virtual Dom Diff 进行差异检测,但是很多组件实际上是肯定不会发生变化的,这个时候需要用 shouldComponentUpdate 进行手动操作来减少 diff，从而提高程序整体的性能。</p><p>Vue 是 pull+push 的方式侦测变化的,在一开始就知道那个组件发生了变化,因此在 push 的阶段并不需要手动控制 diff，而组件内部采用的 diff 方式实际上是可以引入类似于 shouldComponentUpdate 相关生命周期的,但是通常合理大小的组件不会有过量的 diff，手动优化的价值有限，因此目前 Vue 并没有考虑引入 shouldComponentUpdate 这种手动优化的生命周期。</p><h2 id="vue-中的-key-到底有什么用" tabindex="-1">Vue 中的 key 到底有什么用？ <a class="header-anchor" href="#vue-中的-key-到底有什么用" aria-label="Permalink to &quot;Vue 中的 key 到底有什么用？&quot;">​</a></h2><p>key 是为 Vue 中的 vnode 标记的唯一 id，通过这个 key，我们的 diff 操作可以更准确、更快速 diff 算法的过程中，先会进行新旧节点的首尾交叉对比，当无法匹配的时候会用新节点的 key 与旧节点进行比对，然后超出差异。</p><p>diff 程可以概括为：oldCh 和 newCh 各有两个头尾的变量 StartIdx 和 EndIdx，它们的 2 个变量相互比较，一共有 4 种比较方式。</p><p>如果 4 种比较都没匹配，如果设置了 key，就会用 key 进行比较，在比较的过程中，变量会往中间靠，一旦 StartIdx&gt;EndIdx 表明 oldCh 和 newCh ⾄少有一个已经遍历完了，就会结束比较,这四种比较方式就是首、尾、旧尾新头、旧头新尾。</p><ul><li>准确：如果不加 key，那么 vue 会选择复用节点(Vue 的就地更新策略)，导致之前节点的状态被保留下来，会产生一系列的 bug。</li><li>快速：key 的唯一性可以被 Map 数据结构充分利用，相比于遍历查找的时间复杂度 O(n)，Map 的时间复杂度仅仅为 O(1)。</li></ul><h2 id="vue3-响应式-api-如何编写" tabindex="-1">vue3 响应式 api 如何编写 <a class="header-anchor" href="#vue3-响应式-api-如何编写" aria-label="Permalink to &quot;vue3 响应式 api 如何编写&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> activeEffect</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> effect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	activeEffect</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> fn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">	activeEffect</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">	activeEffect</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> depsMap</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WeakMap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> gather</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 避免例如console.log(obj1.name)而触发gather</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">activeEffect</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> depMap</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> depsMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">depMap</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		depsMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">depMap</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> dep</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> depMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">dep</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		depMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">activeEffect</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> depMap</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> depsMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">depMap</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> dep</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> depMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">dep</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">effect</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> effect</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> handle</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 设置值时触发自动更新</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			gather</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 访问时收集依赖</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">handle</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h2 id="说一下-vue3-是如何变得更快的" tabindex="-1">说一下 vue3 是如何变得更快的？ <a class="header-anchor" href="#说一下-vue3-是如何变得更快的" aria-label="Permalink to &quot;说一下 vue3 是如何变得更快的？&quot;">​</a></h2><p>参考答案：</p><p><strong>优化 Diff 算法</strong></p><p>相比 <em>Vue 2</em>，<em>Vue 3</em> 采用了更加优化的渲染策略。去掉不必要的虚拟 <em>DOM</em> 树遍历和属性比较，因为这在更新期间往往会产生最大的性能开销。</p><p>这里有三个主要的优化：</p><ul><li>首先，在 <em>DOM</em> 树级别。</li></ul><p>在没有动态改变节点结构的模板指令（例如 <em>v-if</em> 和 <em>v-for</em>）的情况下，节点结构保持完全静态。</p><p>当更新节点时，不再需要递归遍历 <em>DOM</em> 树。所有的动态绑定部分将在一个平面数组中跟踪。这种优化通过将需要执行的树遍历量减少一个数量级来规避虚拟 <em>DOM</em> 的大部分开销。</p><ul><li>其次，编译器积极地检测模板中的静态节点、子树甚至数据对象，并在生成的代码中将它们提升到渲染函数之外。这样可以避免在每次渲染时重新创建这些对象，从而大大提高内存使用率并减少垃圾回收的频率。</li><li>第三，在元素级别。</li></ul><p>编译器还根据需要执行的更新类型，为每个具有动态绑定的元素生成一个优化标志。</p><p>例如，具有动态类绑定和许多静态属性的元素将收到一个标志，提示只需要进行类检查。运行时将获取这些提示并采用专用的快速路径。</p><p>综合起来，这些技术大大改进了渲染更新基准，<em>Vue 3.0</em> 有时占用的 <em>CPU</em> 时间不到 <em>Vue 2</em> 的十分之一。</p><p><strong>体积变小</strong></p><p>重写后的 <em>Vue</em> 支持了 <em>tree-shaking</em>，像修剪树叶一样把不需要的东西给修剪掉，使 <em>Vue 3.0</em> 的体积更小。</p><p>需要的模块才会打入到包里，优化后的 <em>Vue 3.0</em> 的打包体积只有原来的一半（<em>13kb</em>）。哪怕把所有的功能都引入进来也只有 <em>23kb</em>，依然比 <em>Vue 2.x</em> 更小。像 <em>keep-alive、transition</em> 甚至 <em>v-for</em> 等功能都可以按需引入。</p><p>并且 <em>Vue 3.0</em> 优化了打包方法，使得打包后的 <em>bundle</em> 的体积也更小。</p><p>官方所给出的一份惊艳的数据：打包大小减少 <em>41%</em>，初次渲染快 <em>55%</em>，更新快 <em>133%</em>，内存使用减少 <em>54%</em>。</p><h2 id="一个-vue-文件是如何渲染成浏览器上面的真实-dom" tabindex="-1">一个 vue 文件是如何渲染成浏览器上面的真实 DOM？ <a class="header-anchor" href="#一个-vue-文件是如何渲染成浏览器上面的真实-dom" aria-label="Permalink to &quot;一个 vue 文件是如何渲染成浏览器上面的真实 DOM？&quot;">​</a></h2><p>就简单说了一下先是编译成 render 函数、然后根据 render 函数生成虚拟 DOM，最后就是根据虚拟 DOM 生成真实 DOM。</p><h2 id="那-render-函数又是怎么生成的呢" tabindex="-1">那 render 函数又是怎么生成的呢？ <a class="header-anchor" href="#那-render-函数又是怎么生成的呢" aria-label="Permalink to &quot;那 render 函数又是怎么生成的呢？&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzMzYzNzMzMQ==&amp;mid=2247484305&amp;idx=1&amp;sn=6f228cb6b4aa2c7d2a5ae70d716d36a2&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">看不懂来打我，vue3 如何将 template 编译成 render 函数 (qq.com)</a></p><p>底层其实是调用的一个叫<code>baseCompile</code>的函数。在<code>baseCompile</code>函数中主要有三部分，执行<code>baseParse</code>函数将 template 模版转换成<code>模版AST抽象语法树</code>，接着执行<code>transform</code>函数处理掉 vue 内置的指令和语法糖就可以得到<code>javascript AST抽象语法树</code>，最后就是执行<code>generate</code>函数递归遍历<code>javascript AST抽象语法树</code>进行字符串拼接就可以生成 render 函数。</p><h2 id="说说-vue3-是怎么处理内置的-v-for、v-model-等指令" tabindex="-1">说说 vue3 是怎么处理内置的 v-for、v-model 等指令？ <a class="header-anchor" href="#说说-vue3-是怎么处理内置的-v-for、v-model-等指令" aria-label="Permalink to &quot;说说 vue3 是怎么处理内置的 v-for、v-model 等指令？&quot;">​</a></h2><p>先来看一下我画的<code>transform</code>函数执行流程图，让你对整个流程有个大概的印象，后面的内容看着就不费劲了。</p><p>如下图：</p><p><img src="`+s+`" alt="图片"></p><p>从上面的流程图可以看到<code>transform</code>函数的执行过程主要分为下面这几步：</p><ul><li>在<code>transform</code>函数中调用<code>createTransformContext</code>函数生成上下文对象。在上下文对象中存储了当前正在转换的 node 节点的信息，后面的<code>traverseNode</code>、<code>traverseChildren</code>、<code>nodeTransforms</code>数组中的转换函数、<code>directiveTransforms</code>对象中的转换函数都会依赖这个上下文对象。</li><li>然后执行<code>traverseNode</code>函数，<code>traverseNode</code>函数是一个典型的洋葱模型。第一次执行<code>traverseNode</code>函数的时候会进入洋葱模型的第一层，先将<code>nodeTransforms</code>数组中的转换函数全部执行一遍，对第一层的 node 节点进行第一次转换，将转换函数返回的回调函数存到第一层的<code>exitFns</code>数组中。经过第一次转换后 v-for 等指令已经被初次处理了。</li><li>然后执行<code>traverseChildren</code>函数，在<code>traverseChildren</code>函数中对当前 node 节点的子节点执行<code>traverseNode</code>函数。此时就会进入洋葱模型的第二层，和上一步一样会将<code>nodeTransforms</code>数组中的转换函数全部执行一遍，对第二层的 node 节点进行第一次转换，将转换函数返回的回调函数存到第二层的<code>exitFns</code>数组中。</li><li>假如第二层的 node 节点已经没有了子节点，洋葱模型就会从“进入阶段”变成“出去阶段”。将第二层的<code>exitFns</code>数组中存的回调函数全部执行一遍，对 node 节点进行第二次转换，然后出去到第一层的洋葱模型。经过第二次转换后 v-for 等指令已经被完全处理了。</li><li>同样将第一层中的<code>exitFns</code>数组中存的回调函数全部执行一遍，由于此时第二层的 node 节点已经全部处理完了，所以在<code>exitFns</code>数组中存的回调函数中就可以根据子节点的情况来处理父节点。</li><li>执行<code>nodeTransforms</code>数组中的<code>transformElement</code>转换函数，会返回一个回调函数。在回调函数中会调用<code>buildProps</code>函数，在<code>buildProps</code>函数中只有当 node 节点中有对应的指令才会执行<code>directiveTransforms</code>对象中对应的转换函数。比如当前 node 节点有 v-model 指令，才会去执行<code>transformModel</code>转换函数。v-model 等指令也就被处理了。</li></ul><h3 id="举个例子" tabindex="-1">举个例子 <a class="header-anchor" href="#举个例子" aria-label="Permalink to &quot;举个例子&quot;">​</a></h3><p>还是同样的套路，我们通过 debug 一个简单的 demo 来带你搞清楚<code>transform</code>函数内具体是如何处理 vue 内置的 v-for、v-model 等指令。demo 代码如下：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">input</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">item</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> msgList</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;标题是：{{ </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ts&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> msgList</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> title</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello word&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>在上面的代码中，我们给 input 标签使用了 v-for 和 v-model 指令，还渲染了一个 p 标签。p 标签中的内容由<code>foo</code>变量、<code>bar</code>字符串、<code>baz</code>变量拼接而来的。</p><p>我们在上一篇 <a href="https://mp.weixin.qq.com/s?__biz=MzkzMzYzNzMzMQ==&amp;mid=2247484305&amp;idx=1&amp;sn=6f228cb6b4aa2c7d2a5ae70d716d36a2&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">看不懂来打我，vue3 如何将 template 编译成 render 函数</a> 文章中已经讲过了，将 template 模版编译成<strong>模版 AST 抽象语法树</strong>的过程中不会处理 v-for、v-model 等内置指令，而是将其当做普通的 props 属性处理。</p><p>比如我们这个 demo，编译成<strong>模版 AST 抽象语法树</strong>后。input 标签对应的 node 节点中就增加了三个 props 属性，name 分别为 for、bind、model，分别对应的是 v-for、v-bind、v-model。真正处理这些 vue 内置指令是在<code>transform</code>函数中。</p><h3 id="transform函数" tabindex="-1"><code>transform</code>函数 <a class="header-anchor" href="#transform函数" aria-label="Permalink to &quot;\`transform\`函数&quot;">​</a></h3><p>本文中使用的 vue 版本为<strong>3.4.19</strong>，<code>transform</code>函数在<strong>node_modules/@vue/compiler-core/dist/compiler-core.cjs.js</strong>文件中。找到<code>transform</code>函数的代码，打上断点。</p><p>从上一篇文章我们知道了<code>transform</code>函数是在 node 端执行的，所以我们需要启动一个<code>debug</code>终端，才可以在 node 端打断点。这里以 vscode 举例，首先我们需要打开终端，然后点击终端中的<code>+</code>号旁边的下拉箭头，在下拉中点击<code>Javascript Debug Terminal</code>就可以启动一个<code>debug</code>终端。</p><p><img src="`+r+'" alt="图片"></p><p>接着在<code>debug</code>终端中执行<code>yarn dev</code>（这里是以<code>vite</code>举例）。在浏览器中访问 <a href="http://localhost:5173/%EF%BC%8C%E6%AD%A4%E6%97%B6%E6%96%AD%E7%82%B9%E5%B0%B1%E4%BC%9A%E8%B5%B0%E5%88%B0%60transform%60%E5%87%BD%E6%95%B0%E4%B8%AD%E4%BA%86%E3%80%82%E6%88%91%E4%BB%AC%E5%9C%A8" target="_blank" rel="noreferrer">http://localhost:5173/，此时断点就会走到`transform`函数中了。我们在</a> debug 终端中来看看调用<code>transform</code>函数时传入的<code>root</code>变量，如下图：</p><p><img src="'+c+`" alt="图片"></p><p>从上图中我们可以看到<code>transform</code>函数接收的第一个参数<code>root</code>变量是一个<strong>模版 AST 抽象语法树</strong>，为什么说他是<strong>模版 AST 抽象语法树</strong>呢？因为这棵树的结构和 template 模块中的结构一模一样，<code>root</code>变量也就是<strong>模版 AST 抽象语法树</strong>是对 template 模块进行描述。</p><p>根节点的 children 下面只有一个 div 子节点，对应的就是最外层的 div 标签。div 节点 children 下面有两个子节点，分别对应的是 input 标签和 p 标签。input 标签中有三个 props，分别对应 input 标签上面的 v-for 指令、key 属性、v-model 指令。从这里我们可以看出来此时 vue 内置的指令还没被处理，在执行 parse 函数生成<strong>模版 AST 抽象语法树</strong>阶段只是将其当做普通的属性处理后，再塞到 props 属性中。</p><p>p 标签中的内容由两部分组成：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;标题是：{{ title }}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时我们发现 p 标签的 children 也是有两个，分别是写死的文本和<code>title</code>变量。</p><p>我们接着来看<code>transform</code>函数，在我们这个场景中简化后的代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">root</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createTransformContext</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	traverseNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>从上面的代码中可以看到<code>transform</code>函数内主要有两部分，从名字我想你应该就能猜出他们的作用。传入<strong>模版 AST 抽象语法树</strong>和<code>options</code>，调用<code>createTransformContext</code>函数生成<code>context</code>上下文对象。传入<strong>模版 AST 抽象语法树</strong>和<code>context</code>上下文对象，调用<code>traverseNode</code>函数对树中的 node 节点进行转换。</p><h3 id="createtransformcontext函数" tabindex="-1"><code>createTransformContext</code>函数 <a class="header-anchor" href="#createtransformcontext函数" aria-label="Permalink to &quot;\`createTransformContext\`函数&quot;">​</a></h3><p>在讲<code>createTransformContext</code>函数之前我们先来了解一下什么是<strong>context（上下文）</strong>。</p><h3 id="什么是上下文" tabindex="-1">什么是上下文 <a class="header-anchor" href="#什么是上下文" aria-label="Permalink to &quot;什么是上下文&quot;">​</a></h3><p>上下文其实就是在某个范围内的“全局变量”，在这个范围内的任意地方都可以拿到这个“全局变量”。举两个例子：</p><p>在 vue 中可以通过 provied 向整颗组件树提供数据，然后在树的任意节点可以通过 inject 拿到提供的数据。比如：</p><p>根组件 App.vue，注入上下文。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">provide</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>业务组件 list.vue，读取上下文。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> inject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在 react 中，我们可以使用<code>React.createContext</code> 函数创建一个上下文对象，然后注入到组件树中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> ThemeContext</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createContext</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;light&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> App</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">theme</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setTheme</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;light&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E5C07B;">ThemeContext.Provider</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">theme</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">Page</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E5C07B;">ThemeContext.Provider</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在这颗组件树的任意层级中都能拿到上下文对象中提供的数据：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> theme</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useContext</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ThemeContext</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>树中的节点一般可以通过 children 拿到子节点，但是父节点一般不容易通过子节点拿到。在转换的过程中我们有的时候需要拿到父节点进行一些操作，比如将当前节点替换为一个新的节点，又或者直接删掉当前节点。</p><p>所以在这里会维护一个 context 上下文对象，对象中会维护一些状态和方法。比如当前正在转换的节点是哪个，当前转换的节点的父节点是哪个，当前节点在父节点中是第几个子节点，还有<code>replaceNode</code>、<code>removeNode</code>等方法。</p><h3 id="上下文中的一些属性和方法" tabindex="-1">上下文中的一些属性和方法 <a class="header-anchor" href="#上下文中的一些属性和方法" aria-label="Permalink to &quot;上下文中的一些属性和方法&quot;">​</a></h3><p>我们将断点走进<code>createTransformContext</code>函数中，简化后的代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createTransformContext</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	root</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		nodeTransforms</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [],</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		directiveTransforms</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ...省略</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 所有的node节点都会将nodeTransforms数组中的所有的转换函数全部执行一遍</span></span>
<span class="line"><span style="color:#E06C75;">		nodeTransforms</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 只执行node节点的指令在directiveTransforms对象中对应的转换函数</span></span>
<span class="line"><span style="color:#E06C75;">		directiveTransforms</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 需要转换的AST抽象语法树</span></span>
<span class="line"><span style="color:#E06C75;">		root</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 转换过程中组件内注册的组件</span></span>
<span class="line"><span style="color:#E06C75;">		components</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 转换过程中组件内注册的指令</span></span>
<span class="line"><span style="color:#E06C75;">		directives</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 当前正在转换节点的父节点，默认转换的是根节点。根节点没有父节点，所以为null。</span></span>
<span class="line"><span style="color:#E06C75;">		parent</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 当前正在转换的节点，默认为根节点</span></span>
<span class="line"><span style="color:#E06C75;">		currentNode</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 当前转换节点在父节点中的index位置</span></span>
<span class="line"><span style="color:#E06C75;">		childIndex</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		replaceNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将当前节点替换为新节点</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		removeNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 删除当前节点</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ...省略</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> context</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>从上面的代码中可以看到<code>createTransformContext</code>中的代码其实很简单，第一个参数为需要转换的<strong>模版 AST 抽象语法树</strong>，第二个参数对传入的<code>options</code>进行解构，拿到<code>options.nodeTransforms</code>数组和<code>options.directiveTransforms</code>对象。</p><p><code>nodeTransforms</code>数组中存了一堆转换函数，在树的递归遍历过程中会将<code>nodeTransforms</code>数组中的转换函数全部执行一遍。<code>directiveTransforms</code>对象中也存了一堆转换函数，和<code>nodeTransforms</code>数组的区别是，只会执行 node 节点的指令在<code>directiveTransforms</code>对象中对应的转换函数。比如 node 节点中只有 v-model 指令，那就只会执行<code>directiveTransforms</code>对象中的<code>transformModel</code>转换函数。这里将拿到的<code>nodeTransforms</code>数组和<code>directiveTransforms</code>对象都存到了<code>context</code>上下文中。</p><p>在<code>context</code>上下文中存了一些状态属性：</p><ul><li>root：需要转换的 AST 抽象语法树。</li><li>components：转换过程中组件内注册的组件。</li><li>directives：转换过程中组件内注册的指令。</li><li>parent：当前正在转换节点的父节点，默认转换的是根节点。根节点没有父节点，所以为 null。</li><li>currentNode：当前正在转换的节点，默认为根节点。</li><li>childIndex：当前转换节点在父节点中的 index 位置。</li></ul><p>在<code>context</code>上下文中存了一些方法：</p><ul><li>replaceNode：将当前节点替换为新节点。</li><li>removeNode：删除当前节点。</li></ul><h3 id="traversenode函数" tabindex="-1"><code>traverseNode</code>函数 <a class="header-anchor" href="#traversenode函数" aria-label="Permalink to &quot;\`traverseNode\`函数&quot;">​</a></h3><p>接着将断点走进<code>traverseNode</code>函数中，在我们这个场景中简化后的代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> traverseNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">currentNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">nodeTransforms</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> context</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> exitFns</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> nodeTransforms</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> onExit</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> nodeTransforms</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">onExit</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onExit</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">				exitFns</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">onExit</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				exitFns</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onExit</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">currentNode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			node</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">currentNode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	traverseChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">currentNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> exitFns</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		exitFns</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>从上面的代码中我们可以看到<code>traverseNode</code>函数接收两个参数，第一个参数为当前需要处理的 node 节点，第一次调用时传的就是树的根节点。第二个参数是上下文对象。</p><p>我们再来看<code>traverseNode</code>函数的内容，内容主要分为三部分。分别是：</p><ul><li>将<code>nodeTransforms</code>数组内的转换函数全部执行一遍，如果转换函数的执行结果是一个回调函数，那么就将回调函数 push 到<code>exitFns</code>数组中。</li><li>调用<code>traverseChildren</code>函数处理子节点。</li><li>将<code>exitFns</code>数组中存的回调函数依次从末尾取出来挨个执行。</li></ul><h3 id="traversechildren函数" tabindex="-1"><code>traverseChildren</code>函数 <a class="header-anchor" href="#traversechildren函数" aria-label="Permalink to &quot;\`traverseChildren\`函数&quot;">​</a></h3><p>我们先来看看第二部分的<code>traverseChildren</code>函数，代码很简单，简化后的代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> traverseChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">parent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> child</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">		context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> parent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">childIndex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">		traverseNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在<code>traverseChildren</code>函数中会去遍历当前节点的子节点，在遍历过程中会将<code>context.parent</code>更新为当前的节点，并且将<code>context.childIndex</code>也更新为当前子节点所在的位置。然后再调用<code>traverseNode</code>函数处理当前的子节点。</p><p>所以在<code>traverseNode</code>函数执行的过程中，<code>context.parent</code>总是指向当前节点的父节点，<code>context.childIndex</code>总是指向当前节点在父节点中的 index 位置。如下图：</p><p><img src="`+t+`" alt="图片">traverseChildren</p><h3 id="进入时执行的转换函数" tabindex="-1">进入时执行的转换函数 <a class="header-anchor" href="#进入时执行的转换函数" aria-label="Permalink to &quot;进入时执行的转换函数&quot;">​</a></h3><p>我们现在回过头来看第一部分的代码，代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> traverseNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">currentNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">nodeTransforms</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> context</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> exitFns</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> nodeTransforms</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> onExit</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> nodeTransforms</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">onExit</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onExit</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">				exitFns</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">onExit</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				exitFns</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onExit</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">currentNode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			node</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">currentNode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...省略</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>首先会将<code>context.currentNode</code>更新为当前节点，然后从 context 上下文中拿到由转换函数组成的<code>nodeTransforms</code>数组。</p><p>在 <a href="https://mp.weixin.qq.com/s?__biz=MzkzMzYzNzMzMQ==&amp;mid=2247484305&amp;idx=1&amp;sn=6f228cb6b4aa2c7d2a5ae70d716d36a2&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">看不懂来打我，vue3 如何将 template 编译成 render 函数</a> 文章中我们已经讲过了<code>nodeTransforms</code>数组中主要存了下面这些转换函数，代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> nodeTransforms</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#E06C75;">  transformOnce</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  transformIf</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  transformMemo</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  transformFor</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  transformFilter</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  trackVForSlotScopes</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  transformExpression</span></span>
<span class="line"><span style="color:#E06C75;">  transformSlotOutlet</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  transformElement</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  trackSlotScopes</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  transformText</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>很明显我们这里的 v-for 指令就会被<code>nodeTransforms</code>数组中的<code>transformFor</code>转换函数处理。</p><p>看到这里有的小伙伴就会问了，怎么没有在<code>nodeTransforms</code>数组中看到处理<code>v-model</code>指令的转换函数呢？处理<code>v-model</code>指令的转换函数是在<code>directiveTransforms</code>对象中。在<code>directiveTransforms</code>对象中主要存了下面这些转换函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> directiveTransforms</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	bind</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">transformBind</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	cloak</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">compilerCore</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">noopDirectiveTransform</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	html</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">transformVHtml</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	text</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">transformVText</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	model</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">transformModel</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	on</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">transformOn</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	show</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">transformShow</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>nodeTransforms</code>和<code>directiveTransforms</code>的区别是，在递归遍历转换 node 节点时，每次都会将<code>nodeTransforms</code>数组中的所有转换函数都全部执行一遍。比如当前转换的 node 节点中没有使用 v-if 指令，但是在转换当前 node 节点时还是会执行<code>nodeTransforms</code>数组中的<code>transformIf</code>转换函数。</p><p>而<code>directiveTransforms</code>是在递归遍历转换 node 节点时，只会执行 node 节点中存在的指令对应的转换函数。比如当前转换的 node 节点中有使用 v-model 指令，所以就会执行<code>directiveTransforms</code>对象中的<code>transformModel</code>转换函数。由于 node 节点中没有使用 v-html 指令，所以就不会执行<code>directiveTransforms</code>对象中的<code>transformVHtml</code>转换函数。</p><p>我们前面讲过了 context 上下文中存了很多属性和方法。包括当前节点的父节点是谁，当前节点在父节点中的 index 位置，替换当前节点的方法，删除当前节点的方法。这样在转换函数中就可以通过 context 上下文对当前节点进行各种操作了。</p><p>将转换函数的返回值赋值给<code>onExit</code>变量，如果<code>onExit</code>不为空，说明转换函数的返回值是一个回调函数或者由回调函数组成的数组。将这些回调函数 push 进<code>exitFns</code>数组中，在退出时会将这些回调函数倒序全部执行一遍。</p><p>执行完回调函数后会判断上下文中的<code>currentNode</code>是否为空，如果为空那么就 return 掉整个<code>traverseNode</code>函数，后面的<code>traverseChildren</code>等函数都不会执行了。如果<code>context.currentNode</code>不为空，那么就将本地的<code>node</code>变量更新成 context 上下文中的<code>currentNode</code>。</p><p>为什么需要判断 context 上下文中的<code>currentNode</code>呢？原因是经过转换函数的处理后当前节点可能会被删除了，也有可能会被替换成一个新的节点，所以在每次执行完转换函数后都会更新本地的 node 变量，保证在下一个的转换函数执行时传入的是最新的 node 节点。</p><h3 id="退出时执行的转换函数回调" tabindex="-1">退出时执行的转换函数回调 <a class="header-anchor" href="#退出时执行的转换函数回调" aria-label="Permalink to &quot;退出时执行的转换函数回调&quot;">​</a></h3><p>我们接着来看<code>traverseNode</code>函数中最后一部分，代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> traverseNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...省略</span></span>
<span class="line"><span style="color:#E5C07B;">	context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">currentNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> exitFns</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		exitFns</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>由于这段代码是在执行完<code>traverseChildren</code>函数再执行的，前面已经讲过了在<code>traverseChildren</code>函数中会将当前节点的子节点全部都处理了，所以当代码执行到这里时所有的子节点都已经处理完了。<strong>所以在转换函数返回的回调函数中我们可以根据当前节点转换后的子节点情况来决定如何处理当前节点。</strong></p><p>在处理子节点的时候我们会将<code>context.currentNode</code>更新为子节点，所以在处理完子节点后需要将<code>context.currentNode</code>更新为当前节点。这样在执行转换函数返回的回调函数时，<code>context.currentNode</code>始终就是指向的是当前的 node 节点。</p><p>请注意这里是倒序取出<code>exitFns</code>数组中存的回调函数，在进入时会按照顺序去执行<code>nodeTransforms</code>数组中的转换函数。在退出时会倒序去执行存下来的回调函数，比如在<code>nodeTransforms</code>数组中<code>transformIf</code>函数排在<code>transformFor</code>函数前面。<code>transformIf</code>用于处理 v-if 指令，<code>transformFor</code>用于处理 v-for 指令。在进入时<code>transformIf</code>函数会比<code>transformFor</code>函数先执行，所以在组件上面同时使用 v-if 和 v-for 指令，会是 v-if 指令先生效。在退出阶段时<code>transformIf</code>函数会比<code>transformFor</code>函数后执行，所以在<code>transformIf</code>回调函数中可以根据<code>transformFor</code>回调函数的执行结果来决定如何处理当前的 node 节点。</p><p><code>traverseNode</code>函数其实就是典型的<strong>洋葱模型</strong>，依次从父组件到子组件挨着调用<code>nodeTransforms</code>数组中所有的转换函数，然后从子组件到父组件倒序执行<code>nodeTransforms</code>数组中所有的转换函数返回的回调函数。<code>traverseNode</code>函数内的设计很高明，如果你还没反应过来，别着急我接下来会讲他高明在哪里。</p><h3 id="洋葱模型traversenode函数" tabindex="-1">洋葱模型<code>traverseNode</code>函数 <a class="header-anchor" href="#洋葱模型traversenode函数" aria-label="Permalink to &quot;洋葱模型\`traverseNode\`函数&quot;">​</a></h3><p>我们先来看看什么是洋葱模型，如下图：</p><p><img src="`+B+'" alt="图片"></p><p>洋葱模型就是：从外面一层层的进去，再一层层的从里面出来。</p><p>第一次进入<code>traverseNode</code>函数的时候会进入洋葱模型的第 1 层，先依次将<code>nodeTransforms</code>数组中所有的转换函数全部执行一遍，对当前的 node 节点进行第一次转换。如果转换函数的返回值是回调函数或者回调函数组成的数组，那就将这些回调函数依次 push 到第 1 层定义的<code>exitFns</code>数组中。</p><p>然后再去处理当前节点的子节点，处理子节点的<code>traverseChildren</code>函数其实也是在调用<code>traverseNode</code>函数，此时已经进入了洋葱模型的第 2 层。同理在第 2 层也会将<code>nodeTransforms</code>数组中所有的转换函数全部执行一遍，对第 2 层的 node 节点进行第一次转换，并且将返回的回调函数依次 push 到第 2 层定义的<code>exitFns</code>数组中。</p><p>同样的如果第 2 层节点也有子节点，那么就会进入洋葱模型的第 3 层。在第 3 层也会将<code>nodeTransforms</code>数组中所有的转换函数全部执行一遍，对第 3 层的 node 节点进行第一次转换，并且将返回的回调函数依次 push 到第 3 层定义的<code>exitFns</code>数组中。</p><p>请注意此时的第 3 层已经没有子节点了，那么现在就要从一层层的进去，变成一层层的出去。首先会将第 3 层<code>exitFns</code>数组中存的回调函数依次从末尾开始全部执行一遍，会对第 3 层的 node 节点进行第二次转换，此时第 3 层中的 node 节点已经被全部转换完了。</p><p>由于第 3 层的 node 节点已经被全部转换完了，所以会出去到洋葱模型的第 2 层。同样将第 2 层<code>exitFns</code>数组中存的回调函数依次从末尾开始全部执行一遍，会对第 2 层的 node 节点进行第二次转换。值得一提的是由于第 3 层的 node 节点也就是第 2 层的 children 节点已经被完全转换了，所以在执行第 2 层转换函数返回的回调函数时就可以根据子节点的情况来处理父节点。</p><p>同理将第 2 层的 node 节点全部转换完了后，会出去到洋葱模型的第 1 层。将第 1 层<code>exitFns</code>数组中存的回调函数依次从末尾开始全部执行一遍，会对第 1 层的 node 节点进行第二次转换。</p><p>当出去阶段的第 1 层全部处理完后了，<code>transform</code>函数内处理内置的 v-for 等指令也就处理完了。执行完<code>transform</code>函数后，描述 template 解构的<strong>模版 AST 抽象语法树</strong>也被处理成了描述 render 函数结构的<strong>javascript AST 抽象语法树</strong>。后续只需要执行<code>generate</code>函数，进行普通的字符串拼接就可以得到 render 函数。</p><h3 id="继续-debug" tabindex="-1">继续 debug <a class="header-anchor" href="#继续-debug" aria-label="Permalink to &quot;继续 debug&quot;">​</a></h3><p>搞清楚了<code>traverseNode</code>函数，接着来 debug 看看 demo 中的 v-for 指令和 v-model 指令是如何被处理的。</p><ul><li>v-for 指令对应的是<code>transformFor</code>转换函数。</li><li>v-model 指令对应的是<code>transformModel</code>转换函数。</li></ul><h3 id="transformfor转换函数" tabindex="-1"><code>transformFor</code>转换函数 <a class="header-anchor" href="#transformfor转换函数" aria-label="Permalink to &quot;`transformFor`转换函数&quot;">​</a></h3><p>通过前面我们知道了用于处理<code>v-for</code>指令的<code>transformFor</code>转换函数是在<code>nodeTransforms</code>数组中，每次处理 node 节点都会执行。我们给<code>transformFor</code>转换函数打 3 个断点，分别是：</p><ul><li>进入<code>transformFor</code>转换函数之前。</li><li>调用<code>transformFor</code>转换函数，第 1 次对 node 节点进行转换之后。</li><li>调用<code>transformFor</code>转换函数返回的回调函数，第 2 次对 node 节点进行转换之后。</li></ul><p>我们将代码走到第 1 个断点，看看执行<code>transformFor</code>转换函数之前 input 标签的 node 节点是什么样的，如下图：</p><p><img src="'+i+'" alt="图片"></p><p>从上图中可以看到 input 标签的 node 节点中还是有一个 v-for 的 props 属性，说明此时 v-for 指令还没被处理。</p><p>我们接着将代码走到第 2 个断点，看看调用<code>transformFor</code>转换函数第 1 次对 node 节点进行转换之后是什么样的，如下图：</p><p><img src="'+y+'" alt="图片"></p><p>从上图中可以看到原本的 input 的 node 节点已经被替换成了一个新的 node 节点，新的 node 节点的 children 才是原来的 node 节点。并且 input 节点 props 属性中的 v-for 指令也被消费了。新节点的<code>source.content</code>里存的是<code>v-for=&quot;item in msgList&quot;</code>中的<code>msgList</code>变量。新节点的<code>valueAlias.content</code>里存的是<code>v-for=&quot;item in msgList&quot;</code>中的<code>item</code>。请注意此时<code>arguments</code>数组中只有一个字段，存的是<code>msgList</code>变量。</p><p>我们接着将代码走到第 3 个断点，看看调用<code>transformFor</code>转换函数返回的回调函数，第 2 次对 node 节点进行转换之后是什么样的，如下图：</p><p><img src="'+d+'" alt="图片"></p><p>从上图可以看到<code>arguments</code>数组中多了一个字段，input 标签现在是当前节点的子节点。按照我们前面讲的洋葱模型，input 子节点现在已经被转换完成了。所以多的这个字段就是 input 标签经过<code>transform</code>函数转换后的 node 节点，将转换后的 input 子节点存到父节点上面，后面生成 render 函数时会用。</p><h3 id="transformmodel转换函数" tabindex="-1"><code>transformModel</code>转换函数 <a class="header-anchor" href="#transformmodel转换函数" aria-label="Permalink to &quot;`transformModel`转换函数&quot;">​</a></h3><p>通过前面我们知道了用于处理<code>v-model</code>指令的<code>transformModel</code>转换函数是在<code>directiveTransforms</code>对象中，只有当 node 节点中有对应的指令才会执行对应的转换函数。我们这里 input 上面有 v-model 指令，所以就会执行<code>transformModel</code>转换函数。</p><p>我们在前面的 <a href="https://mp.weixin.qq.com/s?__biz=MzkzMzYzNzMzMQ==&amp;mid=2247484305&amp;idx=1&amp;sn=6f228cb6b4aa2c7d2a5ae70d716d36a2&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">看不懂来打我，vue3 如何将 template 编译成 render 函数</a> 文章中已经讲过了处理<code>v-model</code>指令是调用的<code>@vue/compiler-dom</code>包的<code>transformModel</code>函数，很容易就可以找到<code>@vue/compiler-dom</code>包的<code>transformModel</code>函数，然后打一个断点，让断点走进<code>transformModel</code>函数中，如下图：</p><p><img src="'+b+'" alt="图片"></p><p>从上面的图中我们可以看到在<code>@vue/compiler-dom</code>包的<code>transformModel</code>函数中会调用<code>@vue/compiler-core</code>包的<code>transformModel</code>函数，拿到返回的<code>baseResult</code>对象后再一些其他操作后直接<code>return baseResult</code>。</p><p>从左边的 call stack 调用栈中我们可以看到<code>transformModel</code>函数是由一个<code>buildProps</code>函数调用的，<code>buildProps</code>函数是由<code>postTransformElement</code>函数调用的。而<code>postTransformElement</code>函数则是<code>transformElement</code>转换函数返回的回调函数，<code>transformElement</code>转换函数是在<code>nodeTransforms</code>数组中。</p><p>所以<code>directiveTransforms</code>对象中的转换函数调用其实是由<code>nodeTransforms</code>数组中的<code>transformElement</code>转换函数调用的。如下图：</p><p><img src="'+u+'" alt="图片"></p><p>看名字你应该猜到了<code>buildProps</code>函数的作用是生成 props 属性的。点击 Step Out 将断点跳出<code>transformModel</code>函数，走进<code>buildProps</code>函数中，可以看到<code>buildProps</code>函数中调用<code>transformModel</code>函数的代码如下图：</p><p><img src="'+F+'" alt="图片"></p><p>从上图中可以看到执行<code>directiveTransforms</code>对象中的转换函数不仅可以对节点进行转换，还会返回一个 props 数组。比如我们这里处理的是 v-model 指令，返回的 props 数组就是由 v-model 指令编译而来的 props 属性，这就是所谓的 v-model 语法糖。</p><p>看到这里有的小伙伴会疑惑了<code>v-model</code>指令不是会生成<code>modelValue</code>和<code>onUpdate:modelValue</code>两个属性，为什么这里只有一个<code>onUpdate:modelValue</code>属性呢？</p><p>答案是只有给自定义组件上面使用<code>v-model</code>指令才会生成<code>modelValue</code>和<code>onUpdate:modelValue</code>两个属性，对于这种原生 input 标签是不需要生成<code>modelValue</code>属性的，而且 input 标签本身是不接收名为<code>modelValue</code>属性，接收的是 value 属性。</p><h3 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>现在我们再来看看最开始讲的流程图，我想你应该已经能将整个流程串起来了。</p><p>如下图：</p><p><img src="'+s+`" alt="图片"></p><p><code>transform</code>函数的执行过程主要分为下面这几步：</p><ul><li>在<code>transform</code>函数中调用<code>createTransformContext</code>函数生成上下文对象。在上下文对象中存储了当前正在转换的 node 节点的信息，后面的<code>traverseNode</code>、<code>traverseChildren</code>、<code>nodeTransforms</code>数组中的转换函数、<code>directiveTransforms</code>对象中的转换函数都会依赖这个上下文对象。</li><li>然后执行<code>traverseNode</code>函数，<code>traverseNode</code>函数是一个典型的洋葱模型。第一次执行<code>traverseNode</code>函数的时候会进入洋葱模型的第一层，先将<code>nodeTransforms</code>数组中的转换函数全部执行一遍，对第一层的 node 节点进行第一次转换，将转换函数返回的回调函数存到第一层的<code>exitFns</code>数组中。经过第一次转换后 v-for 等指令已经被初次处理了。</li><li>然后执行<code>traverseChildren</code>函数，在<code>traverseChildren</code>函数中对当前 node 节点的子节点执行<code>traverseNode</code>函数。此时就会进入洋葱模型的第二层，和上一步一样会将<code>nodeTransforms</code>数组中的转换函数全部执行一遍，对第二层的 node 节点进行第一次转换，将转换函数返回的回调函数存到第二层的<code>exitFns</code>数组中。</li><li>假如第二层的 node 节点已经没有了子节点，洋葱模型就会从“进入阶段”变成“出去阶段”。将第二层的<code>exitFns</code>数组中存的回调函数全部执行一遍，对 node 节点进行第二次转换，然后出去到第一层的洋葱模型。经过第二次转换后 v-for 等指令已经被完全处理了。</li><li>同样将第一层中的<code>exitFns</code>数组中存的回调函数全部执行一遍，由于此时第二层的 node 节点已经全部处理完了，所以在<code>exitFns</code>数组中存的回调函数中就可以根据子节点的情况来处理父节点。</li><li>执行<code>nodeTransforms</code>数组中的<code>transformElement</code>转换函数，会返回一个回调函数。在回调函数中会调用<code>buildProps</code>函数，在<code>buildProps</code>函数中只有当 node 节点中有对应的指令才会执行<code>directiveTransforms</code>对象中对应的转换函数。比如当前 node 节点有 v-model 指令，才会去执行<code>transformModel</code>转换函数。v-model 等指令也就被处理了。</li></ul><h2 id="vue3-早已具备抛弃虚拟-dom-的能力" tabindex="-1">vue3 早已具备抛弃虚拟 DOM 的能力 <a class="header-anchor" href="#vue3-早已具备抛弃虚拟-dom-的能力" aria-label="Permalink to &quot;vue3 早已具备抛弃虚拟 DOM 的能力&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s/5VAzF5C-KceluQhUNR_25Q" target="_blank" rel="noreferrer">vue3 早已具备抛弃虚拟 DOM 的能力了 (qq.com)</a></p><h2 id="vue3-diff-算法和-vue2-的区别" tabindex="-1">Vue3 Diff 算法和 Vue2 的区别 <a class="header-anchor" href="#vue3-diff-算法和-vue2-的区别" aria-label="Permalink to &quot;Vue3 Diff 算法和 Vue2 的区别&quot;">​</a></h2><p>我们知道在数据变更触发页面重新渲染，会生成虚拟 DOM 并进行 patch 过程，这一过程在 Vue3 中的优化有如下</p><p><strong>编译阶段的优化：</strong></p><ul><li>事件缓存：将事件缓存(如: @click)，可以理解为变成静态的了</li><li>静态提升：第一次创建静态节点时保存，后续直接复用</li><li>添加静态标记：给节点添加静态标记，以优化 Diff 过程</li></ul><p>由于编译阶段的优化，除了能更快的生成虚拟 DOM 以外，还使得 Diff 时可以跳过&quot;永远不会变化的节点&quot;，</p><p><strong>Diff 优化如下</strong></p><ul><li>Vue2 是全量 Diff，Vue3 是静态标记 + 非全量 Diff</li><li>使用最长递增子序列优化了对比流程</li></ul><p>根据尤大公布的数据就是 Vue3 <code>update</code> 性能提升了 <code>1.3~2 倍</code></p><h2 id="vue3-在-diff-阶段都优化了哪些" tabindex="-1">Vue3 在 diff 阶段都优化了哪些？ <a class="header-anchor" href="#vue3-在-diff-阶段都优化了哪些" aria-label="Permalink to &quot;Vue3 在 diff 阶段都优化了哪些？&quot;">​</a></h2><p><code>Vue3</code>的 diff 算法优化点如下：</p><ul><li><code>静态提升</code>：在<code>模板编译时</code>，会将没有用到<code>动态变量</code>的<code>节点或属性(class、style这些元素属性)</code>进行<code>静态提升</code>，在进行 render 时，直接复用旧节点。而在<code>Vue2中</code>，无论元素是否使用了<code>动态变量</code>，每次更新都会<code>重新创建</code>，这也是为什么<code>Vue3</code>最好使用<code>template</code>而不是 render 函数，因为模板编译时会帮我们做优化；</li><li><code>预字符串化</code>：当编译器遇到<code>大量的静态节点时</code>，会将这一整部分变成字符串，<code>减少VNode的创建</code>，渲染为<code>静态节点</code>，而在 Vue2 中，则会将这些节点一个个变成虚拟节点；</li><li><code>缓存事件处理函数</code>：在 Vue3 中，会将 dom 元素绑定的事件进行<code>缓存</code>，在进行 patch 的时候会使用缓存中的事件处理函数；</li><li><code>Block Tree</code>：在 Vue3 中，<code>Block</code>用于提取那些<code>动态属性</code>的节点，从而在进行更新时，可以精准的比较<code>Block中的内容</code>，只更新那些使用动态节点的节点；</li><li><code>patchFlags</code>：<code>patchFlags</code>是编译器生成的<code>优化提示</code>，它标记了节点的哪些属性是<code>动态的</code>，从而在进行更新时，精确的对某些属性进行更新；</li><li><code>shapeFlags</code>：<code>shapeFlags</code>也是一个标识，它标识了当前虚拟节点的类型，从而可以在进行 diff 时能够省去<code>类型判断</code>，对不同类型做不同的更新处理。</li></ul><h2 id="vue3-性能提升主要是通过哪几方面体现的" tabindex="-1">Vue3 性能提升主要是通过哪几方面体现的？ <a class="header-anchor" href="#vue3-性能提升主要是通过哪几方面体现的" aria-label="Permalink to &quot;Vue3 性能提升主要是通过哪几方面体现的？&quot;">​</a></h2><h3 id="_1、编译阶段优化" tabindex="-1"><strong>1、编译阶段优化</strong> <a class="header-anchor" href="#_1、编译阶段优化" aria-label="Permalink to &quot;**1、编译阶段优化**&quot;">​</a></h3><p>回顾<code>Vue2</code>，我们知道每个组件实例都对应一个 <code>watcher 实例</code>，它会在组件渲染的过程中把用到的数据<code>property</code>记录为依赖，当依赖发生改变，触发<code>setter</code>，则会通知<code>watcher</code>，从而使关联的组件重新渲染。</p><p>因此，<code>Vue3</code>在编译阶段，做了进一步优化：</p><h4 id="_1-diff算法优化" tabindex="-1">① <strong><code>diff算法优化</code></strong> <a class="header-anchor" href="#_1-diff算法优化" aria-label="Permalink to &quot;① **\`diff算法优化\`**&quot;">​</a></h4><p><code>vue3</code>在<code>diff</code>算法中相比<code>vue2</code>增加了<code>静态标记</code>，其作用是为了会发生变化的地方添加一个<code>flag标记</code>，下次发生变化的时候<code>直接</code>找该地方进行比较。</p><h4 id="_2-静态提升" tabindex="-1">② <strong><code>静态提升</code></strong> <a class="header-anchor" href="#_2-静态提升" aria-label="Permalink to &quot;② **\`静态提升\`**&quot;">​</a></h4><p>Vue3 中对<code>不参与更新</code>的元素，会做静态提升，<code>只会被创建一次</code>，在渲染时直接复用。免去了重复的创建操作，优化内存。</p><p>没做静态提升之前，未参与更新的元素也在<code>render函数</code>内部，会重复<code>创建阶段</code>。 做了静态提升后，未参与更新的元素，被<code>放置在render 函数外</code>，每次渲染的时候只要<code>取出</code>即可。同时该元素会被打上<code>静态标记值为-1</code>，特殊标志是<code>负整数</code>表示永远不会用于 <code>Diff</code>。</p><h4 id="_3-事件监听缓存" tabindex="-1">③ <strong><code>事件监听缓存</code></strong> <a class="header-anchor" href="#_3-事件监听缓存" aria-label="Permalink to &quot;③ **\`事件监听缓存\`**&quot;">​</a></h4><p>默认情况下绑定事件行为会被视为动态绑定（<code>没开启事件监听器缓存</code>），所以<code>每次</code>都会去追踪它的变化。<code>开启事件侦听器缓存</code>后，没有了静态标记。也就是说下次<code>diff算法</code>的时候<code>直接使用</code>。</p><h4 id="_4-ssr优化" tabindex="-1">④ <strong><code>SSR优化</code></strong> <a class="header-anchor" href="#_4-ssr优化" aria-label="Permalink to &quot;④ **\`SSR优化\`**&quot;">​</a></h4><p>当静态内容大到一定量级时候，会用<code>createStaticVNode</code>方法在客户端去生成一个<code>static node</code>，这些<code>静态node</code>，会被直接<code>innerHtml</code>，就不需要创建对象，然后根据对象渲染。</p><h3 id="_2、源码体积" tabindex="-1"><strong>2、源码体积</strong> <a class="header-anchor" href="#_2、源码体积" aria-label="Permalink to &quot;**2、源码体积**&quot;">​</a></h3><p>相比<code>Vue2</code>，<code>Vue3</code>整体体积<code>变小</code>了，除了移出一些<code>不常用的API</code>，最重要的是<code>Tree shanking</code>。</p><p>任何一个函数，如<code>ref、reavtived、computed</code>等，仅仅在<code>用到</code>的时候才<code>打包</code>，<code>没用到</code>的模块都<code>被摇掉</code>，打包的整体体积<code>变小</code>。</p><h3 id="_3、响应式系统" tabindex="-1"><strong>3、响应式系统</strong> <a class="header-anchor" href="#_3、响应式系统" aria-label="Permalink to &quot;**3、响应式系统**&quot;">​</a></h3><p><code>vue2</code>中采用 <code>defineProperty</code>来劫持整个对象，然后进行深度遍历所有属性，给<code>每个属性</code>添加<code>getter和setter</code>，实现响应式。</p><p><code>vue3</code>采用<code>proxy</code>重写了响应式系统，因为<code>proxy</code>可以对<code>整个对象进行监听</code>，所以不需要深度遍历。</p><ul><li>可以监听动态属性的添加</li><li>可以监听到数组的索引和数组 length 属性</li><li>可以监听删除属性</li></ul><h2 id="vue3-性能提升主要是体现在哪些方面" tabindex="-1">Vue3 性能提升主要是体现在哪些方面 <a class="header-anchor" href="#vue3-性能提升主要是体现在哪些方面" aria-label="Permalink to &quot;Vue3 性能提升主要是体现在哪些方面&quot;">​</a></h2><h4 id="_1-响应式系统" tabindex="-1">1.响应式系统 <a class="header-anchor" href="#_1-响应式系统" aria-label="Permalink to &quot;1.响应式系统&quot;">​</a></h4><ul><li>Vue.js 2.x 中响应式系统的核心是 Object.defineProperty，劫持整个对象，然后进行深度遍历所有属性，给每个属性添加<code>getter</code>和<code>setter</code>，实现响应式</li><li>Vue.js 3.x 中使用 Proxy 对象重写响应式系统 <ul><li>可以监听动态新增的属性</li><li>可以监听删除的属性</li><li>可以监听数组的索引和 length 属性</li></ul></li></ul><ul><li><p>实现原理:</p><ul><li><p>通过 Proxy（代理）: 拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过 Reflect（反射）: 对源对象的属性进行操作。</p></li><li><p>MDN 文档中描述的 Proxy 与 Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxy - JavaScript | MDN</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noreferrer">Reflect - JavaScript | MDN</a></p></li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 拦截读取属性值</span></span>
<span class="line"><span style="color:#61AFEF;">  get</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 拦截设置属性值或添加新属性</span></span>
<span class="line"><span style="color:#61AFEF;">  set</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 拦截删除属性</span></span>
<span class="line"><span style="color:#61AFEF;">  deleteProperty</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">proxy</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;tom&#39;</span><span style="color:#56B6C2;">   !</span><span style="color:#ABB2BF;">[]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="_2-编译阶段" tabindex="-1">2.编译阶段 <a class="header-anchor" href="#_2-编译阶段" aria-label="Permalink to &quot;2.编译阶段&quot;">​</a></h4><ul><li>Vue.js 2.x 通过标记静态节点，优化 diff 的过程</li><li>Vue.js 3.x <ul><li>vue.js 3.x 中标记和提升所有的静态节点，diff 的时候只需要对比动态节点内容；</li><li>Fragments（升级 vetur 插件): template 中不需要唯一根节点，可以直接放文本或者同级标签</li><li>静态提升(hoistStatic),当使用 hoistStatic 时,所有静态的节点都被提升到 render 方法之外.只会在应用启动的时候被创建一次,之后使用只需要应用提取的静态节点，随着每次的渲染被不停的复用。</li><li>patch flag, 在动态标签末尾加上相应的标记,只能带 patchFlag 的节点才被认为是动态的元素,会被追踪属性的修改,能快速的找到动态节点,而不用逐个逐层遍历，提高了虚拟 dom diff 的性能。</li><li>缓存事件处理函数 cacheHandler,避免每次触发都要重新生成全新的 function 去更新之前的函数</li></ul></li></ul><h4 id="_3-源码体积" tabindex="-1">3.源码体积 <a class="header-anchor" href="#_3-源码体积" aria-label="Permalink to &quot;3.源码体积&quot;">​</a></h4><ul><li>相比 Vue2，Vue3 整体体积变小了，除了移出一些不常用的 AP</li><li>tree shanking <ul><li>任何一个函数，如 ref、reavtived、computed 等，仅仅在用到的时候才打包</li><li>通过编译阶段的静态分析，找到没有引入的模块并打上标记,将这些模块都给摇掉</li></ul></li></ul><h1 id="vue2-和-3-公共原理" tabindex="-1">Vue2 和 3 公共原理 <a class="header-anchor" href="#vue2-和-3-公共原理" aria-label="Permalink to &quot;Vue2 和 3 公共原理&quot;">​</a></h1><h2 id="声明式编程和命令式编程是什么-分别有什么优缺点-两者对比如何" tabindex="-1">声明式编程和命令式编程是什么？分别有什么优缺点？两者对比如何？ <a class="header-anchor" href="#声明式编程和命令式编程是什么-分别有什么优缺点-两者对比如何" aria-label="Permalink to &quot;声明式编程和命令式编程是什么？分别有什么优缺点？两者对比如何？&quot;">​</a></h2><p>当谈到编程范式时，<strong>声明式编程</strong>和<strong>命令式编程</strong>是两个重要的概念。让我们来详细探讨一下它们的含义、优缺点以及两者之间的对比。</p><h3 id="声明式编程-declarative-programming" tabindex="-1">声明式编程（Declarative Programming） <a class="header-anchor" href="#声明式编程-declarative-programming" aria-label="Permalink to &quot;声明式编程（Declarative Programming）&quot;">​</a></h3><p>声明式更关注的是结果。就以 vue 为例，在页面上要展示一个变量，那么就要先定义这个变量，后边通过改变这个变量，来触发页面的刷新。我们只需要结果，vue 内部去处理过程，这就是声明式编程</p><p><strong>含义</strong>：声明式编程关注的是“<strong>做什么</strong>”，而不是“<strong>怎么做</strong>”。在声明式编程中，我们描述了期望的结果，而不需要详细说明如何实现这个结果。</p><p>优点：</p><ul><li><strong>可读性高</strong>：声明式代码通常更易于理解，因为它直接表达了目标。</li><li><strong>抽象层次高</strong>：它隐藏了底层的实现细节，使代码更简洁。</li><li><strong>易于维护</strong>：由于不需要关心具体的步骤，所以在修改需求时更容易维护。</li></ul><p>缺点：</p><ul><li><strong>性能问题</strong>：某些情况下，声明式代码可能不如命令式代码高效。</li><li><strong>限制</strong>：某些复杂的操作可能无法用纯粹的声明式方式表达。</li></ul><h3 id="命令式编程-imperative-programming" tabindex="-1">命令式编程（Imperative Programming） <a class="header-anchor" href="#命令式编程-imperative-programming" aria-label="Permalink to &quot;命令式编程（Imperative Programming）&quot;">​</a></h3><p>命令式更关注的是过程。例如 jquery，想通过点击事件改变页面中的一个元素，那么首先就要获取这个元素，在给元素添加点击事件，执行事件，进而改变页面元素，这种按步骤一步一步操作的，就是命令式编程。</p><p><strong>含义</strong>：命令式编程关注的是“<strong>怎么做</strong>”，它需要明确指定每个步骤以达到目标。</p><p>优点：</p><ul><li><strong>精确控制</strong>：可以精确地控制每个操作，适用于复杂的业务逻辑。</li><li><strong>性能优化</strong>：可以针对性地优化性能。</li><li><strong>灵活性</strong>：可以根据具体需求进行定制。</li></ul><p>缺点：</p><ul><li><strong>可读性差</strong>：命令式代码通常较长，难以理解。</li><li><strong>维护困难</strong>：修改需求时，需要逐步修改每个步骤。</li><li><strong>容易出错</strong>：手动管理状态和控制流可能导致错误。</li></ul><h3 id="两者对比" tabindex="-1">两者对比 <a class="header-anchor" href="#两者对比" aria-label="Permalink to &quot;两者对比&quot;">​</a></h3><p>命令式编程更为严谨，但是步骤多，开发效率慢。声明式编程开发效率高，可读性相对较差些。</p><p>思维方式：</p><ul><li><strong>声明式</strong>：关注“<strong>做什么</strong>”。</li><li><strong>命令式</strong>：关注“<strong>怎么做</strong>”。</li></ul><p>代码示例：</p><ul><li><strong>声明式</strong>：使用高阶函数如 <code>filter</code>、<code>map</code>、<code>reduce</code>。</li><li><strong>命令式</strong>：使用循环和条件语句。</li></ul><p>适用场景：</p><ul><li><strong>声明式</strong>：适用于简单、清晰的问题，如数据转换、UI 渲染等。</li><li><strong>命令式</strong>：适用于需要精确控制、性能优化或复杂业务逻辑的问题。</li></ul><p>总之，两者都有自己的优点和适用场景。在实际开发中，根据具体需求选择合适的编程方式是很重要的。</p><h2 id="vue-为什么不直接操作-dom" tabindex="-1">Vue 为什么不直接操作 dom？ <a class="header-anchor" href="#vue-为什么不直接操作-dom" aria-label="Permalink to &quot;Vue 为什么不直接操作 dom？&quot;">​</a></h2><p>答：</p><p>因为操作 dom 对象后，会触发一些浏览器行为，比如布局（layout）和绘制（paint）。</p><p>paint 是一个耗时的过程，然而 layout 是一个更耗时的过程，我们无法确定 layout 一定是自上而下或是自下而上进行的，甚至一次 layout 会牵涉到整个文档布局的重新计算。</p><p>浏览器的 layout 是 lazy 的，也就是说：在 js 脚本执行时，是不会去更新 DOM 的，任何对 DOM 的修改都会被暂存在一个队列中，在当前 js 的执行上下文完成执行后，会根据这个队列中的修改，进行一次 layout。</p><h2 id="vue-渲染过程" tabindex="-1">Vue 渲染过程 <a class="header-anchor" href="#vue-渲染过程" aria-label="Permalink to &quot;Vue 渲染过程&quot;">​</a></h2><h3 id="模版-编译原理-流程" tabindex="-1">模版 编译原理 &amp; 流程 <a class="header-anchor" href="#模版-编译原理-流程" aria-label="Permalink to &quot;模版 编译原理 &amp; 流程&quot;">​</a></h3><p>解析 <code>template</code>模板，生成<code>ast语法树</code>，再使用<code>ast语法树</code>生成<code>render</code>函数字符串，编译流程如下：</p><ul><li>解析阶段：使用大量的<code>正则表达式</code>对<code>template</code>字符串进行解析，转化为<code>抽象语法树AST</code>。</li><li>优化阶段：遍历<code>AST</code>，找到其中的一些<code>静态节点</code>并进行标记，方便在进行<code>diff</code>比较时，直接跳过这一些静态节点，<code>优化性能</code></li><li>生成阶段： 将最终的<code>AST</code>转化为<code>render</code>函数</li></ul><h3 id="视图-渲染更新流程" tabindex="-1">视图 渲染更新流程 <a class="header-anchor" href="#视图-渲染更新流程" aria-label="Permalink to &quot;视图 渲染更新流程&quot;">​</a></h3><ul><li>监听数据的变化，当数据发生变化时，<code>Render</code> 函数执行生成 <code>vnode</code> 对象</li></ul><h2 id="vue编译的过程" tabindex="-1">Vue编译的过程 <a class="header-anchor" href="#vue编译的过程" aria-label="Permalink to &quot;Vue编译的过程&quot;">​</a></h2><ul><li>将模板解析为 AST <ul><li>最主要的事情还是通过各种各样的正则表达式去匹配模板中的内容，然后将内容提取出来做各种逻辑操作，接下来会生成一个最基本的 AST 对象</li></ul></li><li>优化 AST <ul><li>对静态节点做优化</li></ul></li><li>将 AST 转换为 render 函数</li></ul><h2 id="使用-object-defineproperty-来进行数据劫持有什么缺点" tabindex="-1">使用 Object.defineProperty() 来进行数据劫持有什么缺点？ <a class="header-anchor" href="#使用-object-defineproperty-来进行数据劫持有什么缺点" aria-label="Permalink to &quot;使用 Object.defineProperty() 来进行数据劫持有什么缺点？&quot;">​</a></h2><ul><li>在对一些属性进行操作时，使用这种方法无法拦截，比如通过下标方式修改数组数据或者给对象新增属性，这都不能触发组件的重新渲染，因为 Object.defineProperty 不能拦截到这些操作。更精确的来说，对于数组而言，大部分操作都是拦截不到的，只是 Vue 内部通过重写函数的方式解决了这个问题。</li><li>在 Vue3.0 中已经不使用这种方式了，而是通过使用 Proxy 对对象进行代理，从而实现数据劫持。使用 Proxy 的好处是它可以完美的监听到任何方式的数据改变，唯一的缺点是兼容性的问题，因为 Proxy 是 ES6 的语法。</li></ul><h2 id="谈谈-mvvm" tabindex="-1">谈谈 MVVM <a class="header-anchor" href="#谈谈-mvvm" aria-label="Permalink to &quot;谈谈 MVVM&quot;">​</a></h2><ul><li>MVVM 分为 Model、View、ViewModel：</li><li>Model 代表数据模型，数据和业务逻辑都在 Model 层中定义；</li><li>View 代表 UI 视图，负责数据的展示；</li><li>ViewModel 负责监听 Model 中数据的改变并且控制视图的更新，处理用户交互操作；</li><li>Model 和 View 并无直接关联，而是通过 ViewModel 来进行联系的，Model 和 ViewModel 之间有着双向数据绑定的联系。因此当 Model 中的数据改变时会触发 View 层的刷新，View 中由于用户交互操作而改变的数据也会在 Model 中同步。</li><li>这种模式实现了 Model 和 View 的数据自动同步，因此开发者只需要专注于数据的维护操作即可，而不需要自己操作 DOM。</li></ul><h2 id="组件化和-mvvm-数据驱动视图-模型" tabindex="-1">组件化和 MVVM(数据驱动视图)模型 <a class="header-anchor" href="#组件化和-mvvm-数据驱动视图-模型" aria-label="Permalink to &quot;组件化和 MVVM(数据驱动视图)模型&quot;">​</a></h2><h3 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h3><p>组件化可以追溯到 asp，jsp，php 的后端的模板引擎的渲染时代</p><p>传统组件，只是静态渲染，更新还要依赖于操作 DOM</p><p>数据驱动视图——Vue MVVM</p><p>数据驱动视图——React setState</p><h3 id="mvvm-模型" tabindex="-1">MVVM 模型 <a class="header-anchor" href="#mvvm-模型" aria-label="Permalink to &quot;MVVM 模型&quot;">​</a></h3><p>View 视图层 =&gt; 通过对 DOM 的监听 通知 =&gt; Model 模型层</p><p>Model 模型层操作数据更新 =&gt; 指导 =&gt; View 视图层更新数据</p><h2 id="组件渲染-更新的过程" tabindex="-1">组件渲染/更新的过程 <a class="header-anchor" href="#组件渲染-更新的过程" aria-label="Permalink to &quot;组件渲染/更新的过程&quot;">​</a></h2><ul><li>一个组件染到页面，修改 data 触发更新(数据动视图)</li><li>其背后原理是什么，需要掌握哪些要点 ?</li><li>考察对流程了解的全面程度</li></ul><p>文档：<a href="https://v2.cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noreferrer">深入响应式原理 — Vue.js (vuejs.org)</a></p><h3 id="初次渲染过程" tabindex="-1">初次渲染过程 <a class="header-anchor" href="#初次渲染过程" aria-label="Permalink to &quot;初次渲染过程&quot;">​</a></h3><ul><li>解析模板为 render 函数(或在开发环境已完成，vue-loader)</li><li>触发响应式，监听 data 属性 getter setter</li><li>执行 render 函数，生成 vnode ，patch(elem, vnode)</li></ul><h3 id="更新过程" tabindex="-1">更新过程 <a class="header-anchor" href="#更新过程" aria-label="Permalink to &quot;更新过程&quot;">​</a></h3><ul><li>修改 data，触发 setter (此前在 getter 中已被监听)</li><li>重新执行 render 函数，生成 newVnode</li><li>patch(vnode, newVnode)</li></ul><h3 id="异步渲染" tabindex="-1">异步渲染 <a class="header-anchor" href="#异步渲染" aria-label="Permalink to &quot;异步渲染&quot;">​</a></h3><ul><li>回顾 $nextTick()</li><li>汇总 data 的修改，一次性更新视图</li><li>减少 DOM 操作次数，提高性能</li></ul><hr><h3 id="总结-3" tabindex="-1">总结 <a class="header-anchor" href="#总结-3" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><p>渲染和响应式的关系</p></li><li><p>渲染和模板编译的关系</p></li><li><p>渲染和 vdom 的关系</p></li><li><p>初次渲染过程</p></li><li><p>更新过程</p></li><li><p>异步渲染</p></li></ul><h2 id="vue-实例挂载过程中发生了什么" tabindex="-1">Vue 实例挂载过程中发生了什么？ <a class="header-anchor" href="#vue-实例挂载过程中发生了什么" aria-label="Permalink to &quot;Vue 实例挂载过程中发生了什么？&quot;">​</a></h2><p>挂载过程指的是 <code>app.mount()</code>过程，这是一个初始化过程，整体上做了两件事情：<code>初始化</code>和<code>建立更新机制</code>。</p><p>初始化会创建组件实例、初始化组件状态、创建各种响应式数据。</p><p>建立更新机制这一步会立即执行一次组件的更新函数，这会首次执行组件渲染函数并执行<code>patch</code>将<code>vnode</code> 转换为 <code>dom</code>； 同时首次执行渲染函数会创建它内部响应式数据和组件更新函数之间的依赖关系，这使得以后数据发生变化时会执行对应的更新函数。</p><h2 id="vue-是如何收集依赖的" tabindex="-1">Vue 是如何收集依赖的？ <a class="header-anchor" href="#vue-是如何收集依赖的" aria-label="Permalink to &quot;Vue 是如何收集依赖的？&quot;">​</a></h2><p>依赖收集发生在<code>defineReactive()</code>方法中，在方法内<code>new Dep()</code>实例化一个<code>Dep()</code>实例，然后在<code>getter</code>中通过<code>dep.depend()</code>方法对数据依赖进行收集，然后在<code>settter</code>中通过<code>dep.notify()</code>通知更新。整个<code>Dep</code>其实就是一个观察者，吧收集的依赖存储起来，在需要的时候进行调用。在收集数据依赖的时候，会为数据创建一个<code>Watcher</code>，当数据发生改变通知每个<code>Watcher</code>，由<code>Wathcer</code>进行更新渲染。</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h2 id="vue-的-核心设计思想-原理" tabindex="-1">Vue 的 核心设计思想 原理 <a class="header-anchor" href="#vue-的-核心设计思想-原理" aria-label="Permalink to &quot;Vue 的 核心设计思想 原理&quot;">​</a></h2><p>请深入剖析 Vue 的<strong>核心设计思想</strong>，包括<strong>响应式系统</strong>、<strong>组件化开发</strong>和<strong>虚拟 DOM</strong>。请详细阐述这些设计思想背后的原理，它们如何协同工作以实现高效的应用开发，并对比传统 Web 开发模式，探讨 Vue 设计选择的优势。</p><h3 id="_1-响应式系统-1" tabindex="-1">1. 响应式系统 <a class="header-anchor" href="#_1-响应式系统-1" aria-label="Permalink to &quot;1. 响应式系统&quot;">​</a></h3><p>Vue.js 的响应式系统基于观察者模式实现，其核心在于数据驱动视图更新。具体原理如下：</p><ul><li><strong>数据代理与依赖收集</strong>：Vue 通过<code>Object.defineProperty()</code>（Vue 2）或<code>Proxy</code>（Vue 3）对数据对象进行代理，当访问或修改代理后的数据时，Vue 能够追踪到这些操作并记录对应的依赖关系。对于 Vue 2，它利用 getter/setter 捕获数据访问与修改；对于 Vue 3，<code>Proxy</code>提供了更全面、透明的拦截机制，无需转换对象属性为 getter/setter。</li><li><strong>依赖更新与视图渲染</strong>：当数据发生变化时，Vue 会触发与之关联的所有依赖（通常是组件中的计算属性、watcher 或模板表达式）的更新。这些依赖会重新计算其值，并触发视图更新。Vue 2 使用双向绑定和依赖队列来批量更新依赖；Vue 3 则使用调度器（<code>scheduler</code>）来更精细地控制更新过程，进一步提升性能。</li></ul><p>Vue 的响应式系统相较于传统 Web 开发中手动操作 DOM 更新，优势明显：</p><ul><li><strong>简化数据绑定</strong>：开发者只需声明式地在模板中使用数据，无需关心数据变化时如何手动更新 DOM。</li><li><strong>高效更新</strong>：通过依赖追踪和批量更新，Vue 只对真正受影响的部分进行 DOM 操作，避免了不必要的渲染开销。</li><li><strong>易于理解与调试</strong>：响应式系统的逻辑相对集中，开发者可以更容易地追踪数据流动和视图更新过程。</li></ul><p><strong>2. 组件化开发</strong></p><p>Vue 倡导组件化开发模式，组件是 Vue 应用的基本组成单元，具备以下特点：</p><ul><li><strong>封装性</strong>：每个组件封装了自己的视图（模板或渲染函数）、逻辑（JavaScript）和样式（CSS/Sass/Less 等），形成高内聚、低耦合的代码块。</li><li><strong>复用性</strong>：通过 props 向下传递数据，通过自定义事件向上传递消息，组件之间形成了清晰的数据和事件通信机制，易于复用。</li><li><strong>层次化与组合</strong>：组件可以嵌套形成树状结构，复杂的 UI 由简单组件通过组合与配置构建，符合“单一职责原则”。</li></ul><p>相比传统的 HTML、CSS、JavaScript 分离开发，Vue 的组件化开发具有以下优势：</p><ul><li><strong>代码组织与维护</strong>：组件化的结构使得代码更易于理解和维护，特别是对于大型应用，通过模块化划分降低了复杂度。</li><li><strong>开发效率</strong>：组件可复用性高，减少了重复编码，同时 Vue 的单文件组件（<code>.vue</code>）格式整合了视图、逻辑和样式，提供了流畅的开发体验。</li><li><strong>设计与协作</strong>：组件化有助于团队成员围绕 UI 组件进行分工合作，遵循设计系统，提升整体应用的一致性和协调性。</li></ul><p><strong>3. 虚拟 DOM</strong></p><p>Vue 采用了虚拟 DOM（VDOM）技术来提高 DOM 操作的效率。VDOM 是一种轻量级的内存数据结构，用于描述真实 DOM 树。其工作原理如下：</p><ul><li><strong>生成与更新</strong>：每当组件状态变化时，Vue 会重新计算组件的 VNode（虚拟节点），即生成新的虚拟 DOM 树。这个过程比直接操作 DOM 快得多，因为无需考虑浏览器的 DOM API 调用和布局渲染。</li><li><strong>差异比较与 patching</strong>：新旧两棵虚拟 DOM 树通过高效的 diff 算法进行比较，找出最小化的更新操作集。这些操作随后被应用于真实 DOM，只更新或替换实际有变化的部分。</li></ul><p>Vue 使用虚拟 DOM 相比直接操作 DOM 的优势：</p><ul><li><strong>性能优化</strong>：避免了不必要的 DOM 操作，尤其是在大规模数据更新时，显著提升了应用性能。</li><li><strong>跨平台能力</strong>：由于 VDOM 与具体的渲染环境解耦，Vue 可以轻松适应不同的平台（如服务器端渲染、Weex、NativeScript 等），只需提供对应的渲染器。</li></ul><h2 id="谈一谈对-vue-组件化原理的理解" tabindex="-1">谈一谈对 vue 组件化原理的理解？ <a class="header-anchor" href="#谈一谈对-vue-组件化原理的理解" aria-label="Permalink to &quot;谈一谈对 vue 组件化原理的理解？&quot;">​</a></h2><p>回答总体思路：</p><p>组件化定义、优点、使用场景和注意事项等方面展开陈述，同时要强调 vue 中组件化的一些特点。</p><p>源码分析 1：组件定义</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// 组件定义 Vue.component(&#39;comp&#39;, { template: &#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;this is a component&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&#39; })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>vue 的组件定义源码 ：<code>src\\core\\global-api\\assets.js</code></p></blockquote><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;this is a component&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>vue-loader 会编译 template 为 render 函数，最终导出的依然是组件配置对象</p></blockquote><p>源码分析 2：组件化优点</p><p><code>lifecycle.js</code> - <code>mountComponent()</code></p><p>组件、Watcher、渲染函数和更新函数之间的关系</p><p>源码分析 3：组件化实现</p><p>构造函数，<code>src\\core\\global-api\\extend.js</code></p><p>实例化及挂载，<code>src\\core\\vdom\\patch.js</code> - <code>createElm()</code></p><p>总结</p><ol><li><p>组件是独立和可复用的代码组织单元。组件系统是 Vue 核心特性之一，它使开发者使用小型、独立和通常可复用的组件构建大型应用；</p></li><li><p>组件化开发能大幅提高应用开发效率、测试性、复用性等；</p></li><li><p>组件使用按分类有：页面组件、业务组件、通用组件；</p></li><li><p>vue 的组件是基于配置的，我们通常编写的组件是组件配置而非组件，框架后续会生成其构造函数，它们基于 VueComponent，扩展于 Vue；</p></li><li><p>vue 中常见组件化技术有：属性 prop，自定义事件，插槽等，它们主要用于组件通信、扩展等；</p></li><li><p>合理的划分组件，有助于提升应用性能；</p></li><li><p>组件应该是高内聚、低耦合的；</p></li><li><p>遵循单向数据流的原则。</p></li></ol><h2 id="对响应式数据的理解" tabindex="-1">对响应式数据的理解 <a class="header-anchor" href="#对响应式数据的理解" aria-label="Permalink to &quot;对响应式数据的理解&quot;">​</a></h2><p>vue2 中的对象使用 Object.defineProperty 对数据进行劫持，给每个属性进行重写，添加 getter 和 setter 方法。</p><ul><li>① 当新增属性和删除属性时，无法监控变化，需要通过 set 和 set 和 set 和 delete 来实现。多层对象则会递归来实现劫持，数组的话会单独处理，通过重写数组的方法来实现。</li><li>② 由于遍历，性能会有些差。</li><li>③ 对于 map 和 set 的数据也不支持。</li></ul><p>vue2 的不足之处：① ② ③</p><p>vue3 则使用 proxy 来实现数据劫持。</p><h2 id="说一说-vue-响应式理解" tabindex="-1">说一说 vue 响应式理解？ <a class="header-anchor" href="#说一说-vue-响应式理解" aria-label="Permalink to &quot;说一说 vue 响应式理解？&quot;">​</a></h2><p>响应式实现：</p><ul><li>object.defineProperty</li><li>proxy(兼容性不太好)</li></ul><p><img src="`+A+`" alt="image-20240518012550476"></p><p>observer 类</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/** observer 类会附加到每一个被侦测的object上</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 一旦被附加上，observer会被object的所有属性转换为getter/setter的形式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 当属性发生变化时候及时通知依赖</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Observer 实例</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Observer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 判断是否是数组</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">walk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 劫持对象</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	walk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 将会每一个属性转换为getter/setter 形式来侦测数据变化</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> keys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> keys</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]]); </span><span style="color:#7F848E;font-style:italic;">// 数据劫持方法</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 递归属性</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			new</span><span style="color:#61AFEF;"> Obeserve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dep</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">			enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">			get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#61AFEF;">			set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">val</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#E06C75;">				val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><blockquote><p>定义了 observer 类，用来将一个正常的 object 转换成被侦测的 object 然后判断数据类型 只有 object 类型才会调用 walk 将每一个属性转换成 getter/setter 的形式来侦测变化 最后在 defineReactive 中新增 new Observer（val）来递归子属性 当 data 中的属性变化时，与这个属性对应的依赖就会接收通知</p></blockquote><p>dep 依赖收集</p><blockquote><p>getter 中收集依赖，那么这些依赖收集到那？</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Dep</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subs</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []; </span><span style="color:#7F848E;font-style:italic;">// 观察者集合</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 添加观察者</span></span>
<span class="line"><span style="color:#61AFEF;">	addSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sub</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sub</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 移除观察者</span></span>
<span class="line"><span style="color:#61AFEF;">	removeSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sub</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subs</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sub</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	depend</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 核心，如果存在 ，则进行依赖收集操作</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addDep</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	notify</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> subs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 避免污染原来的集合</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果不是异步执行，先进行排序，保证观察者执行顺序</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;production&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;"> b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> subs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> l</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			subs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 发布执行</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><blockquote><p>收集的依赖时 window.target ,他到以是什么？ 当属性变化时候我们通知谁？</p></blockquote><p>watcher</p><p>是一个中介的角色，数据发生变化时通知它，然后它再去通知其他地方</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Watcher</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">expOrFn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 组件实例对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 要观察的表达式，函数，或者字符串，只要能触发取值操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 被观察者发生变化后的回调</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> vm</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Watcher有一个 vm 属性，表明它是属于哪个组件的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 执行this.getter()及时读取数据</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> parsePath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">expOrFn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cb</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cb</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	update</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> oldValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">cb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="总结-4" tabindex="-1">总结 <a class="header-anchor" href="#总结-4" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>data 通过 Observer 转换成了 getter/setter 的形式来追踪变化 当外界通过 Watcher 读取数据的，会触发 getter 从而将 watcher 添加到依赖中</p><p>当数据变化时，会触发 setter 从而向 Dep 中的依赖（watcher）发送通知</p><p>watcher 接收通知后，会向外界发送通知，变化通知到外界后可能会触发视图更新，也有可能触发用户的某个回调函数等</p><p>什么是响应式</p><p>我们先来看个例子：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;div&gt;Price :￥{{ price }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;Total:￥{{ price * num }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;Taxes: ￥{{ totalPrice }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">changePrice</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;改变价格&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">var app = new Vue({</span></span>
<span class="line"><span style="color:#ABB2BF;">    el: &#39;#app&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">    data() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        return { price: 5.0, num: 2 };</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    computed: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        totalPrice() { return this.price * this.num * 1.03; }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    methods: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        changePrice() { this.price = 10; }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>上例中当 price 发生变化的时候， Vue 就知道自己需要做三件事情：</p><ul><li>更新页面上 price 的值</li><li>计算表达式 price num 的值，更新页面</li><li>调用 totalPrice 函数，更新页面</li></ul><p>数据发生变化后，会重新对页面渲染，这就是 Vue 响应式 ！</p><p>想完成这个过程，我们需要：</p><ul><li>侦测数据的变化</li><li>收集视图依赖了哪些数据</li><li>数据变化时，自动“通知”需要更新的视图部分，并进行更新</li></ul><p>对应专业俗语分别是：</p><ul><li>数据劫持 / 数据代理</li><li>依赖收集</li><li>发布订阅模式</li></ul><h2 id="vue-源码中使用了哪些设计模式" tabindex="-1">Vue 源码中使用了哪些设计模式？ <a class="header-anchor" href="#vue-源码中使用了哪些设计模式" aria-label="Permalink to &quot;Vue 源码中使用了哪些设计模式？&quot;">​</a></h2><ul><li>单例模式：单例模式就是整个程序有且仅有一个实例，Vuex 中的 store</li><li>工厂模式：传入参数就可以创建实例</li><li>发布订阅模式：event bus，需要手动订阅和手动触发</li><li>观察者模式：自动通知，如数据变化，页面自动更新（如：watcher 和&amp;dep）</li></ul><h2 id="说一下你对-vue-事件绑定原理的理解" tabindex="-1">说一下你对 vue 事件绑定原理的理解？ <a class="header-anchor" href="#说一下你对-vue-事件绑定原理的理解" aria-label="Permalink to &quot;说一下你对 vue 事件绑定原理的理解？&quot;">​</a></h2><p>参考答案：</p><p><em>vue</em> 中的事件绑定是有两种，一种是原生的事件绑定，另一种是组件的事件绑定。</p><p>原生的事件绑定在普通元素上是通过 <em>@click</em> 进行绑定，在组件上是通过 <em>@click.native</em> 进行绑定，组件中的 <em>nativeOn</em> 是等价于 on 的。组件的事件绑定的 @click 是 vue 中自定义的 on 方法来实现的，必须有 on 方法来实现的，必须有 on 方法来实现的，必须有 emit 才可以触发。</p><p><strong>原生事件绑定原理</strong></p><p>在 runtime 下的 patch.js 中 createPatchFunction 执行了之后再赋值给 patch。</p><p>createPatchFunction 方法有两个参数，分别是 nodeOps 存放操作 dom 节点的方法和 modules，modules 是有两个数组拼接起来的，modules 拼接完的数组中有一个元素就是 events，事件添加就发生在这里。</p><p>events 元素关联的就是 events.js 文件，在 events 中有一个 updateDOMListeners 方法，在 events 文件的结尾导出了一个对象，然后对象有一个属性叫做 create，这个属性关联的就是 updateDOMListeners 方法。</p><p>在执行 createPatchFunction 方法时，就会将这两个参数传入，在 createPatchFunction 方法中接收了一个参数 backend，在该方法中一开始进行 backend 的解构，就是上面的 nodeOps 和 modules 参数，解构完之后进入 for 循环。</p><p>在 createPatchFunction 开头定义了一个 cbs 对象。for 循环遍历一个叫 hooks 的数组。hooks 是文件一开头定义的一个数组，其中包括有 create，for 循环就是在 cbs 上定义一系列和 hooks 元素相同的属性，然后键值是一个数组，然后数组内容是 modules 里面的一些内容。这时就把 events 文件中导出来的 create 属性放在了 cbs 上。</p><p>当我们进入首次渲染的时候，会执行到 patch 函数里面的 createElm 方法，这个方法中就会调用 invokeCreateHooks 函数，用来处理事件系统，这里就是真正准备进行原生事件绑定的入口。invokeCreateHooks 方法中，遍历了 cbs.create 数组里面的内容。然后把 cbs.create 里面的函数全部都执行一次，在 cbs.create 其中一个函数就是 updateDOMListeners。</p><p>updateDOMListeners 就是用来添加事件的方法，在这方法中会根据 vnode 判断是否有定义一个点击事件。如果没有点击事件就 return。有的话就继续执行，给 on 进行赋值，然后进行一些赋值操作，将 vnode.elm 赋值给 target，elm 这个属性就是指向 vnode 所对应的真实 dom 节点，这里就是把我们要绑定事件的 dom 结点进行缓存，接下来执行 updateListeners 方法。在接下来执行 updateListeners 方法中调用了一个 add 的方法，然后在 app 方法中通过原生 addEventListener 把事件绑定到 dom 上。</p><p><strong>组件事件绑定原理</strong></p><p>在组件实例初始化会调用 initMixin 方法中的 Vue.prototype._init，在 init 函数中，会通过 initInternalComponent 方法初始化组件信息，将自定义的组件事件放到_parentListeners 上，下来就会调用 initEvents 来初始化组件事件，在 initEvents 中会实例上添加一个 _event 对象，用于保存自定义事件，然后获取到 父组件给 子组件绑定的自定义事件，也就是刚才在初始化组件信息的时候将自定义的组件事件放在了_parentListeners 上，这时候 vm.$options._parentListeners 就是自定义的事件。</p><p>最后进行判断，如果有自定义的组件事件就执行 updateComponentListeners 方法进行事件绑定，在 updateComponentListeners 方法中会调用 updateListeners 方法，并传传一个 add 方法进行执行，这个 add 方法里就是$on 方法。</p><h2 id="vue-的数据为什么频繁变化但只会更新一次" tabindex="-1">Vue 的数据为什么频繁变化但只会更新一次？ <a class="header-anchor" href="#vue-的数据为什么频繁变化但只会更新一次" aria-label="Permalink to &quot;Vue 的数据为什么频繁变化但只会更新一次？&quot;">​</a></h2><p>参考答案：</p><p>这是因为 <em>vue</em> 的 <em>DOM</em> 更新是一个异步操作，在数据更新后会首先被 <em>set</em> 钩子监听到，但是不会马上执行 <em>DOM</em> 更新，而是在下一轮循环中执行更新。</p><p>具体实现是 <em>vue</em> 中实现了一个 <em>queue</em> 队列用于存放本次事件循环中的所有 <em>watcher</em> 更新，并且同一个 <em>watcher</em> 的更新只会被推入队列一次，并在本轮事件循环的微任务执行结束后执行此更新(<em>UI Render</em> 阶段)，这就是 <em>DOM</em> 只会更新一次的原因。</p><p>这种在缓冲时去除重复数据对于避免不必要的计算和 <em>DOM</em> 操作是非常重要的。然后，在下一个的事件循环“<em>tick</em>”中，<em>vue</em> 刷新队列并执行实际 (已去重的) 工作。<em>vue</em> 在内部对异步队列尝试使用原生的 <em>Promise.then、MutationObserver</em> 和 <em>setImmediate</em>，如果执行环境不支持，则会采用 <em>setTimeout(fn, 0)</em> 代替。</p><h2 id="vue-如何检测数组的变化" tabindex="-1">Vue 如何检测数组的变化 <a class="header-anchor" href="#vue-如何检测数组的变化" aria-label="Permalink to &quot;Vue 如何检测数组的变化&quot;">​</a></h2><p>（1）数组考虑到性能原因，没有采用 Object.defineProperty 来对数组的每一项进行拦截，而是选择重写数组(push、shift、pop、unshift、splice、sort、reverse)方法</p><p>（2）数组中如何是对象数据类型也会进行递归劫持。</p><p>（3）缺点：数组的索引和长度变化时无法监控到的</p><h2 id="vue-中封装的数组方法有哪些-其如何实现页面更新-1" tabindex="-1">Vue 中封装的数组方法有哪些，其如何实现页面更新 <a class="header-anchor" href="#vue-中封装的数组方法有哪些-其如何实现页面更新-1" aria-label="Permalink to &quot;Vue 中封装的数组方法有哪些，其如何实现页面更新&quot;">​</a></h2><p>在 Vue 中，对响应式处理利用的是 Object.defineProperty 对数据进行拦截，而这个方法并不能监听到数组内部变化，数组长度变化，数组的截取变化等，所以需要对这些操作进行 hack，让 Vue 能监听到其中的变化。</p><p>vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包事过的方法包括：</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><p>那 Vue 是如何实现让这些数组方法实现元素的实时更新的呢，下面是 Vue 中对这些方法的封装：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 缓存数组类型</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arrayProto</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实现 arrayProto.__proto__ = Array.prototype</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> arrayMethods</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayProto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 需要进行功能拓展的方法</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> methodsToPatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#98C379;">	&quot;push&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;pop&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;shift&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;unshift&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;splice&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;sort&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;reverse&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Intercept mutating methods and emit events</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#E5C07B;">methodsToPatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 缓存原生数组的方法</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> original</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arrayProto</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#61AFEF;">	def</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayMethods</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> mutator</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 执行并缓存原生数组的功能</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> original</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 响应式处理</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> ob</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_ob__</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> inserted</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // push、unshift方法会新增索引，所以要手动observer</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;push&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;unshift&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">				inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // splice方法，如果传入第三个参数，也会有索引加入，所以也要手动observer</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;splice&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">				inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">inserted</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observeArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">inserted</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 获取插入的值，并设置响应监听</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// notify change</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">__DEV__</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			ob</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">TriggerOpTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ARRAY_MUTATION</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				target</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				key</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			ob</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 通知依赖更新</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 返回原生数组方法的执行结果</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><p>简单来说就是，重写了数组中的那些原生方法，首先获取到这个数组的<strong>ob</strong>，也就是它的 Observer 对象，如果有新的值，就调用 observeArray 继续对新的值观察变化（也就是通过 <code>target__proto__== arrayMethods</code> 来改变了数组实例的型），然后手动调用 notify，通知渲染 watcher，执行 update。</p><h2 id="vue-重写了哪些数组方法" tabindex="-1">Vue 重写了哪些数组方法 <a class="header-anchor" href="#vue-重写了哪些数组方法" aria-label="Permalink to &quot;Vue 重写了哪些数组方法&quot;">​</a></h2><p><code>Vue2</code>一共重写了<code>7个</code>数组原型上的方法，这些方法都会改变<code>原数组</code>。分别是<code>pop</code>、<code>push</code>、<code>unshift</code>、<code>shift</code>、<code>splice</code>、<code>sort</code>、<code>reverse</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arrayProto</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> arrayMethods</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayProto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> methodsToPatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#98C379;">	&quot;push&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;pop&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;shift&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;unshift&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;splice&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;sort&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;reverse&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Intercept mutating methods and emit events</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#E5C07B;">methodsToPatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// cache original method</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> original</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arrayProto</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#61AFEF;">	def</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayMethods</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> mutator</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> original</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> ob</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_ob__</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> inserted</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;push&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;unshift&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">				inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;splice&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">				inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">inserted</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observeArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">inserted</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// notify change</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">__DEV__</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			ob</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">TriggerOpTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ARRAY_MUTATION</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				target</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				key</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			ob</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>从源码可以看出，在调用数组这七个方法时，依旧会<code>调用原来的这些方法</code>，只是在调用完成之后会<code>触发依赖更新</code>，如果是<code>push</code>、<code>unshift</code>、<code>splice</code>这些可能会新增属性的，会将新增的属性变为响应式，然后触发依赖更新。</p><h2 id="为什么-vue-的数据更新要是异步的" tabindex="-1">为什么 Vue 的数据更新要是异步的 <a class="header-anchor" href="#为什么-vue-的数据更新要是异步的" aria-label="Permalink to &quot;为什么 Vue 的数据更新要是异步的&quot;">​</a></h2><p>我们可能在一个方法中<code>更新多次数据</code>，如果是同步执行，那么可能会有许多次更新操作，开销会很大，使用<code>异步更新</code>，能够将一次事件循环内的多次数据更改合并成一次，减少更新操作。</p><h2 id="vue-模版编译原理" tabindex="-1">Vue 模版编译原理 <a class="header-anchor" href="#vue-模版编译原理" aria-label="Permalink to &quot;Vue 模版编译原理&quot;">​</a></h2><p>vue 中的模板 template 无法被浏览器解析并渲染，因为这不属于浏览器的标准，不是正确的 HTML 语法，所有需要将 template 转化成一个 JavaScript 函数，这样浏览器就可以执行这一个函数并渲染出对应的 HTML 元素，就可以让视图跑起来了，这一个转化的过程，就成为模板编译。模板编译又分三个阶段，解析 parse，优化 optimize，生成 generate，最终生成可执行函数 render。</p><p>解析阶段：使用大量的正则表达式对 template 字符串进行解析，将标签、指令、属性等转化为抽象语法树 AST。</p><p>优化阶段：遍历 AST，找到其中的一些静态节点并进行标记，方便在页面重渲染的时候进行 diff 比较时，直接跳过这一些静态节点，优化 runtime 的性能。</p><p>生成阶段：将最终的 AST 转化为 render 函数字符串。</p><h2 id="聊聊你对-vue-js-的-template-编译的理解" tabindex="-1">聊聊你对 Vue.js 的 template 编译的理解？ <a class="header-anchor" href="#聊聊你对-vue-js-的-template-编译的理解" aria-label="Permalink to &quot;聊聊你对 Vue.js 的 template 编译的理解？&quot;">​</a></h2><p>答：简而言之，就是先转化成 AST 树，再得到的 render 函数返回 VNode（Vue 的虚拟 DOM 节点）详情步骤：</p><p>首先，通过 compile 编译器把 template 编译成 AST 语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile 是 createCompiler 的返回值，createCompiler 是用以创建编译器的。另外 compile 还负责合并 option。</p><p>然后，AST 会经过 generate（将 AST 语法树转化成 render funtion 字符串的过程）得到 render 函数，render 的返回值是 VNode，VNode 是 Vue 的虚拟 DOM 节点，里面有（标签名、子节点、文本等等）</p><h2 id="说一下-vue-complier-的实现原理是什么样的" tabindex="-1">说一下 Vue complier 的实现原理是什么样的？ <a class="header-anchor" href="#说一下-vue-complier-的实现原理是什么样的" aria-label="Permalink to &quot;说一下 Vue complier 的实现原理是什么样的？&quot;">​</a></h2><p>在使用 vue 的时候，我们有两种方式来创建我们的 HTML 页面，第一种情况，也是大多情况下，我们会使用模板 template 的方式，因为这更易读易懂也是官方推荐的方法；第二种情况是使用 render 函数来生成 HTML，它比 template 更接近最终结果。</p><p>complier 的主要作用是解析模板，生成渲染模板的 render， 而 render 的作用主要是为了生成 VNode</p><p>complier 主要分为 3 大块：</p><ul><li>parse：接受 template 原始模板，按着模板的节点和数据生成对应的 ast</li><li>optimize：遍历 ast 的每一个节点，标记静态节点，这样就知道哪部分不会变化，于是在页面需要更新时，通过 diff 减少去对比这部分 DOM，提升性能</li><li>generate 把前两步生成完善的 ast，组成 render 字符串，然后将 render 字符串通过 new Function 的方式转换成渲染函数</li></ul><h2 id="说一下-vue-模版编译的原理是什么" tabindex="-1">说一下 vue 模版编译的原理是什么 <a class="header-anchor" href="#说一下-vue-模版编译的原理是什么" aria-label="Permalink to &quot;说一下 vue 模版编译的原理是什么&quot;">​</a></h2><p>参考答案：</p><p>简单说，<em>Vue</em> 的编译过程就是将 <em>template</em> 转化为 <em>render</em> 函数的过程。会经历以下阶段：</p><ul><li>生成 AST 树</li><li>优化</li><li>codegen</li></ul><p>首先解析模版，生成 <em>AST</em> 语法树(一种用 <em>JavaScript</em> 对象的形式来描述整个模板)。 使用大量的正则表达式对模板进行解析，遇到标签、文本的时候都会执行对应的钩子进行相关处理。</p><p><em>Vue</em> 的数据是响应式的，但其实模板中并不是所有的数据都是响应式的。有一些数据首次渲染后就不会再变化，对应的 <em>DOM</em> 也不会变化。那么优化过程就是深度遍历 <em>AST</em> 树，按照相关条件对树节点进行标记。这些被标记的节点(静态节点)我们就可以跳过对它们的比对，对运行时的模板起到很大的优化作用。</p><p>编译的最后一步是将优化后的 <em>AST</em> 树转换为可执行的代码。</p><h2 id="说一下-vue-complier-的实现原理是什么样的-1" tabindex="-1">说一下 Vue complier 的实现原理是什么样的？ <a class="header-anchor" href="#说一下-vue-complier-的实现原理是什么样的-1" aria-label="Permalink to &quot;说一下 Vue complier 的实现原理是什么样的？&quot;">​</a></h2><p>参考答案：</p><p>在使用 vue 的时候，我们有两种方式来创建我们的 HTML 页面，第一种情况，也是大多情况下，我们会使用模板 template 的方式，因为这更易读易懂也是官方推荐的方法；第二种情况是使用 render 函数来生成 HTML，它比 template 更接近最终结果。</p><p>complier 的主要作用是解析模板，生成渲染模板的 render， 而 render 的作用主要是为了生成 VNode</p><p>complier 主要分为 3 大块：</p><ul><li>parse：接受 template 原始模板，按着模板的节点和数据生成对应的 ast</li><li>optimize：遍历 ast 的每一个节点，标记静态节点，这样就知道哪部分不会变化，于是在页面需要更新时，通过 diff 减少去对比这部分 DOM，提升性能</li><li>generate 把前两步生成完善的 ast，组成 render 字符串，然后将 render 字符串通过 new Function 的方式转换成渲染函数</li></ul><h2 id="vue-complier-实现" tabindex="-1">Vue complier 实现 <a class="header-anchor" href="#vue-complier-实现" aria-label="Permalink to &quot;Vue complier 实现&quot;">​</a></h2><p>模板解析这种事，本质是将数据转化为一段 html ，最开始出现在后端，经过各种处理吐给前端。随着各种 mv 的兴起，模板解析交由前端处理。</p><p>总的来说， Vue complier 是将 template 转化成一个 render 字符串。</p><p>可以简单理解成以下步骤：</p><ul><li>parse 过程，将 template 利用正则转化成 AST 抽象语法树。</li><li>optimize 过程，标记静态节点，后 diff 过程跳过静态节点，提升性能。</li><li>generate 过程，生成 render 字符串</li></ul><h2 id="如何将-template-转换成-render-函数" tabindex="-1">如何将 template 转换成 render 函数 <a class="header-anchor" href="#如何将-template-转换成-render-函数" aria-label="Permalink to &quot;如何将 template 转换成 render 函数&quot;">​</a></h2><p>vue 中含有模板编译的功能，它的主要作用就是将用户编写的 remplate 编译为 js 可以执行的 render 函数。</p><p>（1）将 template 目标转换成 ast 语法树 - parseHTML</p><p>（2）对静态语法做静态标记 - markup diff 算法来优化的 静态节点 跳过 diff 操作</p><p>（3）重新生成代码 - codeGen</p><h2 id="说说从-template-到-render-处理过程" tabindex="-1">说说从 template 到 render 处理过程 <a class="header-anchor" href="#说说从-template-到-render-处理过程" aria-label="Permalink to &quot;说说从 template 到 render 处理过程&quot;">​</a></h2><h3 id="分析-1" tabindex="-1">分析 <a class="header-anchor" href="#分析-1" aria-label="Permalink to &quot;分析&quot;">​</a></h3><p>问我们 template 到 render 过程，其实是问 vue<code>编译器</code>工作原理。</p><h3 id="思路-1" tabindex="-1">思路 <a class="header-anchor" href="#思路-1" aria-label="Permalink to &quot;思路&quot;">​</a></h3><ol><li>引入 vue 编译器概念</li><li>说明编译器的必要性</li><li>阐述编译器工作流程</li></ol><h3 id="回答范例-1" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-1" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><ol><li>Vue 中有个独特的编译器模块，称为“compiler”，它的主要作用是将用户编写的 template 编译为 js 中可执行的 render 函数。</li><li>之所以需要这个编译过程是为了便于前端程序员能高效的编写视图模板。相比而言，我们还是更愿意用 HTML 来编写视图，直观且高效。手写 render 函数不仅效率底下，而且失去了编译期的优化能力。</li><li>在 Vue 中编译器会先对 template 进行解析，这一步称为 parse，结束之后会得到一个 JS 对象，我们成为抽象语法树 AST，然后是对 AST 进行深加工的转换过程，这一步成为 transform，最后将前面得到的 AST 生成为 JS 代码，也就是 render 函数。</li></ol><h3 id="知其所以然-1" tabindex="-1">知其所以然 <a class="header-anchor" href="#知其所以然-1" aria-label="Permalink to &quot;知其所以然&quot;">​</a></h3><p>vue3 编译过程窥探：</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/compiler-core/src/compile.ts%23L61-L62" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><p>测试，test-v3.html</p><h3 id="可能的追问" tabindex="-1">可能的追问 <a class="header-anchor" href="#可能的追问" aria-label="Permalink to &quot;可能的追问&quot;">​</a></h3><ol><li>Vue 中编译器何时执行？</li><li>react 有没有编译器？</li></ol><h2 id="可以实现一个响应式吗" tabindex="-1">可以实现一个响应式吗？ <a class="header-anchor" href="#可以实现一个响应式吗" aria-label="Permalink to &quot;可以实现一个响应式吗？&quot;">​</a></h2><p>实现一个<code>简单的响应式</code>，首先我们要知道响应式其实就是通过<code>Proxy中的handler参数中的get/set来实现的（vue2是通过Object.defineProperty()）</code>，然后在<code>get中收集哪些函数使用了当前变量</code>，然后在<code>set中在变量更新时重新执行这些记录的函数</code>，让它们<code>用最新的值再次执行一遍</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 存储每个响应式对象以及对应的依赖 key: 响应式对象, value: Map()(Map中的key是响应式对象的属性,value是对应属性的依赖)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> targetDep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WeakMap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 存储当前需要被收集的依赖</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> activeEffect</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个方法，传入一个对象，返回一个该对象的代理，并且给代理对象设置get/set</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;请传入一个对象&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> objProxy</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 收集依赖</span></span>
<span class="line"><span style="color:#61AFEF;">			track</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">receiver</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newValue</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 派发依赖</span></span>
<span class="line"><span style="color:#61AFEF;">				trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> objProxy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个函数收集依赖</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> track</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">activeEffect</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> dep</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> targetDep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">dep</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		targetDep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">dep</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> propertyDep</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">propertyDep</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		propertyDep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">propertyDep</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	propertyDep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">activeEffect</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个函数派发依赖</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> dep</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> targetDep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">dep</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> propertyDep</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">propertyDep</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 在Vue中,并不会立即将函数立即执行,而是在内部维护了一个任务队列,将需要更新的任务放进任务队列,然后在微任务中统一执行,这样有两个好处,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 第一个是如果是同步执行,setter函数还没有返回值,此时对象的属性还没有更新完成,拿到的还是旧值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 第二个是如果是同步执行,如果在一个函数中多次修改同一变量时,会触发多次派发依赖。</span></span>
<span class="line"><span style="color:#E5C07B;">	propertyDep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 这里简单模拟，不添加异步队列了</span></span>
<span class="line"><span style="color:#E06C75;">		item</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> item</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个函数，接收一个函数，将接收的函数赋值给全局的activeEffect变量，用于依赖收集，然后执行一遍该函数，触发里面用到变量的一些get，最后将全局变量置空</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> effect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	activeEffect</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> fn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">	fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">	activeEffect</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// example</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">effect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`count:\`</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//count: 1, count: 2 第一次是在effect函数中执行（为了触发obj的get），打印1； 第二次是set时触发了依赖更新，打印2</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br></div></div><h2 id="vue2-x-和-vue3-x-渲染器的-diff-算法分别说一下" tabindex="-1">vue2.x 和 vue3.x 渲染器的 diff 算法分别说一下？ <a class="header-anchor" href="#vue2-x-和-vue3-x-渲染器的-diff-算法分别说一下" aria-label="Permalink to &quot;vue2.x 和 vue3.x 渲染器的 diff 算法分别说一下？&quot;">​</a></h2><p>简单来说，diff 算法有以下过程</p><ul><li>同级比较，再比较子节点</li><li>先判断一方有子节点一方没有子节点的情况(如果新的 children 没有子节点，将旧的子节点移除)</li><li>比较都有子节点的情况(核心 diff)</li><li>递归比较子节点</li></ul><p>正常 Diff 两个树的时间复杂度是<code>O(n^3)</code>，但实际情况下我们很少会进行<code>跨层级的移动DOM</code>，所以 Vue 将 Diff 进行了优化，从<code>O(n^3) -&gt; O(n)</code>，只有当新旧 children 都为多个子节点时才需要用核心的 Diff 算法进行同层级比较。</p><p>Vue2 的核心 Diff 算法采用了<code>双端比较</code>的算法，同时从新旧 children 的两端开始进行比较，借助 key 值找到可复用的节点，再进行相关操作。相比 React 的 Diff 算法，同样情况下可以减少移动节点次数，减少不必要的性能损耗，更加的优雅。</p><p>Vue3.x 借鉴了 <a href="https://localvoid/ivi" target="_blank" rel="noreferrer">ivi</a>算法和 <a href="https://infernojs/inferno" target="_blank" rel="noreferrer">inferno</a>算法</p><p>在创建 VNode 时就确定其类型，以及在<code>mount/patch</code>的过程中采用<code>位运算</code>来判断一个 VNode 的类型，在这个基础之上再配合核心的 Diff 算法，使得性能上较 Vue2.x 有了提升。(实际的实现可以结合 Vue3.x 源码看。)</p><p>该算法中还运用了<code>动态规划</code>的思想求解最长递归子序列。</p><h1 id="模板编译原理" tabindex="-1">模板编译原理 <a class="header-anchor" href="#模板编译原理" aria-label="Permalink to &quot;模板编译原理&quot;">​</a></h1><h2 id="vue-模版编译原理-1" tabindex="-1">Vue 模版编译原理 <a class="header-anchor" href="#vue-模版编译原理-1" aria-label="Permalink to &quot;Vue 模版编译原理&quot;">​</a></h2><p>模版编译主要过程：<code>template ---&gt; ast ---&gt; render</code>，分别对象三个方法</p><ul><li><code>parse</code> 函数解析 <code>template</code></li><li><code>optimize</code> 函数优化静态内容</li><li><code>generate</code> 函数创建 <code>render</code> 函数字符串</li></ul><p>调用<code>parse</code>方法，将<code>template</code>转化为<code>AST</code>（抽象语法树），<code>AST</code>定义了三种类型，一种<code>html</code>标签，一种文本，一种插值表达式，并且通过 <code>children</code> 这个字段层层嵌套形成了树状的结构。</p><p><code>optimize</code>方法对<code>AST</code>树进行静态内容优化，分析出哪些是静态节点，给其打一个标记，为后续更新渲染可以直接跳过静态节点做优化。</p><p><code>generate</code>将<code>AST</code>抽象语法树编译成 <code>render</code>字符串，最后通过<code>new Function(render)</code>生成可执行的<code>render</code>函数</p><h2 id="vue-的模版编译原理" tabindex="-1">Vue 的模版编译原理 <a class="header-anchor" href="#vue-的模版编译原理" aria-label="Permalink to &quot;Vue 的模版编译原理&quot;">​</a></h2><p>Vue 中有个独特的编译器模块，称为<code>compiler</code>，它的主要作用是将用户编写的<code>template</code>编译为 js 中可执行的<code>render</code>函数。 在 Vue 中，编译器会先对<code>template</code>进行解析，这一步称为<code>parse</code>，结束之后得到一个 JS 对象，称之为<code>抽象语法树AST</code>；然后是对<code>AST</code>进行深加工的转换过程，这一步称为<code>transform</code>，最后将前面得到的<code>AST</code>生成 JS 代码，也就是<code>render</code>函数。</p><h2 id="模板编译" tabindex="-1">模板编译 <a class="header-anchor" href="#模板编译" aria-label="Permalink to &quot;模板编译&quot;">​</a></h2><ul><li>模板是 vue 开发中最常用的部分，即与使用相关联的原理</li><li>它不是 html，有指令、插值、JS 表达式，到底是什么?</li><li>面试不会直接问，但会通过“组件渲染和更新过程”考察</li></ul><h3 id="模板编译-1" tabindex="-1">模板编译 <a class="header-anchor" href="#模板编译-1" aria-label="Permalink to &quot;模板编译&quot;">​</a></h3><ul><li>前置知识：JS 的 with 语法</li><li>使用<code>vue-template-complier</code> 库将模板编译为 render 函数</li><li>执行 render 函数生成 vnode</li></ul><h3 id="with-语法" tabindex="-1">with 语法 <a class="header-anchor" href="#with-语法" aria-label="Permalink to &quot;with 语法&quot;">​</a></h3><p>MDN 文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with" target="_blank" rel="noreferrer">with - JavaScript | MDN (mozilla.org)</a></p><ul><li>改变 {} 内自由变量的查找规则，当做 obi 属性来查找</li><li>如果找不到匹配的 obj 属性，就会报错</li><li>with 要慎用，它打破了作用域规则，易读性变差</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 普通的对象和with对比</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 with ，能改变 {} 内自由变量的查找方式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将 {} 内自由变量，当做 obj 的属性来查找</span></span>
<span class="line"><span style="color:#C678DD;">with</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 会报错 ! ! !</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="编译模板" tabindex="-1">编译模板 <a class="header-anchor" href="#编译模板" aria-label="Permalink to &quot;编译模板&quot;">​</a></h3><ul><li>模板不是 html，有指令、插值、JS 表达式，能实现判断、循环</li><li>html 是标签语言，只有 JS 才能实现判断、循环(图灵完备的)</li><li>因此，模板一定是转换为某种 JS 代码，即编译模板</li></ul><p>安装 vue-template-complier 库</p><p>示例代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> compiler</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;vue-template-compiler&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 插值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const template = \`&lt;p&gt;{{message}}&lt;/p&gt;\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// with(this){return createElement(&#39;p&#39;,[createTextVNode(toString(message))])}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// h -&gt; vnode</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// createElement -&gt; vnode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// // 表达式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const template = \`&lt;p&gt;{{flag ? message : &#39;no message found&#39;}}&lt;/p&gt;\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// // with(this){return _c(&#39;p&#39;,[_v(_s(flag ? message : &#39;no message found&#39;))])}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// // 属性和动态属性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const template = \`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     &lt;div id=&quot;div1&quot; class=&quot;container&quot;&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         &lt;img :src=&quot;imgUrl&quot;/&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     &lt;/div&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// \`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// with(this){return _c(&#39;div&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//      {staticClass:&quot;container&quot;,attrs:{&quot;id&quot;:&quot;div1&quot;}},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//      [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//          _c(&#39;img&#39;,{attrs:{&quot;src&quot;:imgUrl}})])}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// // 条件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const template = \`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     &lt;div&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         &lt;p v-if=&quot;flag === &#39;a&#39;&quot;&gt;A&lt;/p&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         &lt;p v-else&gt;B&lt;/p&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     &lt;/div&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// \`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// with(this){return _c(&#39;div&#39;,[(flag === &#39;a&#39;)?_c(&#39;p&#39;,[_v(&quot;A&quot;)]):_c(&#39;p&#39;,[_v(&quot;B&quot;)])])}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const template = \`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     &lt;ul&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;{{item.title}}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// \`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// with(this){return _c(&#39;ul&#39;,_l((list),function(item){return _c(&#39;li&#39;,{key:item.id},[_v(_s(item.title))])}),0)}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 事件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const template = \`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     &lt;button @click=&quot;clickHandler&quot;&gt;submit&lt;/button&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// \`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// with(this){return _c(&#39;button&#39;,{on:{&quot;click&quot;:clickHandler}},[_v(&quot;submit&quot;)])}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// v-model</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> template</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 主要看 input 事件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// with(this){return _c(&#39;input&#39;,{directives:[{name:&quot;model&quot;,rawName:&quot;v-model&quot;,value:(name),expression:&quot;name&quot;}],attrs:{&quot;type&quot;:&quot;text&quot;},domProps:{&quot;value&quot;:(name)},on:{&quot;input&quot;:function($event){if($event.target.composing)return;name=$event.target.value}}})}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// render 函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回 vnode</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// patch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 编译</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> compiler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">render</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ---------------分割线--------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// // 从 vue 源码中找到缩写函数的含义</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// function installRenderHelpers (target) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.o = markOnce;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.n = toNumber;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.s = toString;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.l = renderList;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.t = renderSlot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.q = looseEqual;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.i = looseIndexOf;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.m = renderStatic;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.f = resolveFilter;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.k = checkKeyCodes;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.b = bindObjectProps;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.v = createTextVNode;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.e = createEmptyVNode;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.u = resolveScopedSlots;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.g = bindObjectListeners;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.d = bindDynamicKeys;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     target.p = prependModifier;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div><ul><li>模板编译为 render 函数，执行 render 函数返回 vnode</li><li>基于 vnode 再执行 patch 和 diff</li><li>使用 webpack vue-loader，会在开发环境下编译模板(重要)</li></ul><h3 id="vue-组件中使用-render-代替-template" tabindex="-1">vue 组件中使用 render 代替 template <a class="header-anchor" href="#vue-组件中使用-render-代替-template" aria-label="Permalink to &quot;vue 组件中使用 render 代替 template&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;heading&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// template</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">createElement</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;h&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">level</span><span style="color:#ABB2BF;">, [</span></span>
<span class="line"><span style="color:#61AFEF;">			createElement</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">				&quot;a&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				{</span></span>
<span class="line"><span style="color:#E06C75;">					attrs</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">						name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;headerId&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">						href</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;headerId&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#98C379;">				&quot;this is a tag&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			),</span></span>
<span class="line"><span style="color:#ABB2BF;">		]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li>看完模板编译，再讲这个 render，就比较好理解了</li><li>在有些复杂情况中，不能用 template，可以考虑用 render</li><li>React 一直都用 render (没有模板)，和这里一样</li></ul><h1 id="响应式原理面试题" tabindex="-1">响应式原理面试题 <a class="header-anchor" href="#响应式原理面试题" aria-label="Permalink to &quot;响应式原理面试题&quot;">​</a></h1><h2 id="响应式原理" tabindex="-1">响应式原理 <a class="header-anchor" href="#响应式原理" aria-label="Permalink to &quot;响应式原理&quot;">​</a></h2><p>Vue2 响应式原理基础是 Object.defineProperty；Vue3 响应式原理基础是 Proxy。</p><ul><li>Object.defineProperty 基本用法：直接在一个对象上定义新的属性或修改现有的属性，并返回对象。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;leo&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 可枚举（是否可通过 for...in 或 Object.keys() 进行访问）</span></span>
<span class="line"><span style="color:#E06C75;">	configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 可配置（是否可使用 delete 删除，是否可再次设置属性）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// value: &#39;&#39;,   // 任意类型的值，默认undefined</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// writable: true,   // 可重写</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>Tips： <code>writable</code> 和 <code>value</code> 与 <code>getter</code> 和 <code>setter</code> 不共存。</p></blockquote><p>搬运 Vue2 核心源码，略删减。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 一 key 一个 dep</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dep</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 获取 key 的属性描述符，发现它是不可配置对象的话直接 return</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> property</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyDescriptor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">property</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> property</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">configurable</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">) { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 获取 getter 和 setter，并获取 val 值</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> getter</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> property</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> property</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">get</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> setter</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> property</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> property</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">set</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;">((</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">getter</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> setter</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) { </span><span style="color:#E06C75;">val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 递归处理，保证对象中所有 key 被观察</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> childOb</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">  Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">    enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // get 劫持 obj[key] 的 进行依赖收集</span></span>
<span class="line"><span style="color:#61AFEF;">    get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactiveGetter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> getter</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> getter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> val</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 依赖收集</span></span>
<span class="line"><span style="color:#E5C07B;">        dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">childOb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // 针对嵌套对象，依赖收集</span></span>
<span class="line"><span style="color:#E5C07B;">          childOb</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // 触发数组响应式</span></span>
<span class="line"><span style="color:#C678DD;">          if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">            dependArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    return</span><span style="color:#E06C75;"> value</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // set 派发更新 obj[key]</span></span>
<span class="line"><span style="color:#E06C75;">  set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactiveSetter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">setter</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      setter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 新值设置响应式</span></span>
<span class="line"><span style="color:#E06C75;">    childOb</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 依赖通知更新</span></span>
<span class="line"><span style="color:#E5C07B;">    dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p>那 Vue3 为何会抛弃它呢？那肯定是因为它存在某些局限性。</p><p>主要原因：无法监听对象或数组新增、删除的元素。</p><p>Vue2 相应解决方案：针对常用数组原型方法 push、pop、shift、unshift、splice、sort、reverse 进行了 hack 处理；提供 Vue.set 监听对象/数组新增属性。对象的新增/删除响应，还可以 new 个新对象，新增则合并新属性和旧对象；删除则将删除属性后的对象深拷贝给新对象。</p><ul><li>Proxy Proxy 是 ES6 新特性，通过第 2 个参数 handler 拦截目标对象的行为。相较于 Object.defineProperty 提供语言全范围的响应能力，消除了局限性。</li></ul><p>局限性：</p><p>(1)、对象/数组的新增、删除</p><p>(2)、监测 .length 修改</p><p>(3)、Map、Set、WeakMap、WeakSet 的支持</p><p>基本用法：创建对象的代理，从而实现基本操作的拦截和自定义操作。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> prop</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> obj</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">:</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;">  set</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>搬运 vue3 的源码 reactive.ts 文件。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createReactiveObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">isReadOnly</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">baseHandlers</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">collectionHandlers</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">proxyMap</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // collectionHandlers: 处理Map、Set、WeakMap、WeakSet</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // baseHandlers: 处理数组、对象</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> proxy</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">    target</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    targetType</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> TargetType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">COLLECTION</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> collectionHandlers</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> baseHandlers</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#E5C07B;">  proxyMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">proxy</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> proxy</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="vue-的响应式原理" tabindex="-1">Vue 的响应式原理 <a class="header-anchor" href="#vue-的响应式原理" aria-label="Permalink to &quot;Vue 的响应式原理&quot;">​</a></h2><p>Vue 2 中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">descriptor</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>拦截对象属性访问，当数据被访问或改变时，感知并作出反应；如果是数组，则通过覆盖数组原型的方法，扩展它的 7 个变更方法（push、pop、shift、unshift、splice、sort、reverse），使这些方法可以额外的做更新通知，从而做出响应。</p><p>缺点：</p><ul><li>初始化时的递归遍历会造成性能损失；</li><li>通知更新过程需要维护大量 <code>dep</code> 实例和 <code>watcher</code> 实例，额外占用内存较多；</li><li>新增或删除对象属性无法拦截，需要通过 <code>Vue.set</code> 及 <code>delete</code> 这样的 API 才能生效；</li><li>对于<code>ES6</code>中新产生的<code>Map</code>、<code>Set</code>这些数据结构不支持。</li></ul><p>Vue 3 中利用<code>ES6</code>的<code>Proxy</code>机制代理需要响应化的数据。可以同时支持对象和数组，动态属性增、删都可以拦截，新增数据结构均支持，对象嵌套属性运行时递归，用到时才代理，也不需要维护特别多的依赖关系，性能取得很大进步。</p><h2 id="说一说你对-vue-响应式理解" tabindex="-1">说一说你对 vue 响应式理解？ <a class="header-anchor" href="#说一说你对-vue-响应式理解" aria-label="Permalink to &quot;说一说你对 vue 响应式理解？&quot;">​</a></h2><h3 id="分析-2" tabindex="-1">分析 <a class="header-anchor" href="#分析-2" aria-label="Permalink to &quot;分析&quot;">​</a></h3><p>这是一道必问题目，但能回答到位的比较少。如果只是看看一些网文，通常没什么底气，经不住面试官推敲，但像我们这样即看过源码还造过轮子的，回答这个问题就会比较有底气啦。</p><h3 id="答题思路" tabindex="-1">答题思路： <a class="header-anchor" href="#答题思路" aria-label="Permalink to &quot;答题思路：&quot;">​</a></h3><ol><li>啥是响应式？</li><li>为什么 vue 需要响应式？</li><li>它能给我们带来什么好处？</li><li>vue 的响应式是怎么实现的？有哪些优缺点？</li><li>vue3 中的响应式的新变化</li></ol><hr><h3 id="回答范例-2" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-2" aria-label="Permalink to &quot;回答范例：&quot;">​</a></h3><ol><li>所谓数据响应式就是<strong>能够使数据变化可以被检测并对这种变化做出响应的机制</strong>。</li><li>MVVM 框架中要解决的一个核心问题是连接数据层和视图层，通过<strong>数据驱动</strong>应用，数据变化，视图更新，要做到这点的就需要对数据做响应式处理，这样一旦数据发生变化就可以立即做出更新处理。</li><li>以 vue 为例说明，通过数据响应式加上虚拟 DOM 和 patch 算法，开发人员只需要操作数据，关心业务，完全不用接触繁琐的 DOM 操作，从而大大提升开发效率，降低开发难度。</li><li>vue2 中的数据响应式会根据数据类型来做不同处理，如果是<strong>对象则采用 Object.defineProperty()的方式定义数据拦截，当数据被访问或发生变化时，我们感知并作出响应；如果是数组则通过覆盖数组对象原型的 7 个变更方法</strong>，使这些方法可以额外的做更新通知，从而作出响应。这种机制很好的解决了数据响应化的问题，但在实际使用中也存在一些缺点：比如初始化时的递归遍历会造成性能损失；新增或删除属性时需要用户使用 Vue.set/delete 这样特殊的 api 才能生效；对于 es6 中新产生的 Map、Set 这些数据结构不支持等问题。</li><li>为了解决这些问题，vue3 重新编写了这一部分的实现：利用 ES6 的 Proxy 代理要响应化的数据，它有很多好处，编程体验是一致的，不需要使用特殊 api，初始化性能和内存消耗都得到了大幅改善；另外由于响应化的实现代码抽取为独立的 reactivity 包，使得我们可以更灵活的使用它，第三方的扩展开发起来更加灵活了。</li></ol><hr><h3 id="知其所以然-2" tabindex="-1">知其所以然 <a class="header-anchor" href="#知其所以然-2" aria-label="Permalink to &quot;知其所以然&quot;">​</a></h3><p>vue2 响应式：</p><p><a href="https://github1s.com/vuejs/vue/blob/HEAD/src/core/observer/index.js%23L135-L136" target="_blank" rel="noreferrer">github1s.com/vuejs/vue/b…</a></p><p>vue3 响应式：</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/reactive.ts%23L89-L90" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/ref.ts%23L67-L68" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><h2 id="响应式原理-1" tabindex="-1">响应式原理 <a class="header-anchor" href="#响应式原理-1" aria-label="Permalink to &quot;响应式原理&quot;">​</a></h2><p>文档：<a href="https://v2.cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noreferrer">深入响应式原理 — Vue.js (vuejs.org)</a></p><ul><li>组件 data 的数据一旦变化，立刻触发视图的更新</li><li>实现数据驱动视图的第一步</li><li>考察 Vue 原理组件化和 MVVM 模型</li></ul><h3 id="核心-api-object-defineproperty" tabindex="-1">核心 API：Object.defineProperty <a class="header-anchor" href="#核心-api-object-defineproperty" aria-label="Permalink to &quot;核心 API：Object.defineProperty&quot;">​</a></h3><p>MDN 的文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">Object.defineProperty() - JavaScript | MDN (mozilla.org)</a></p><p>如何实现响应式，代码演示：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;张三&#39;</span><span style="color:#ABB2BF;">；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">    get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;get&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#61AFEF;">    set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;set&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 测试</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// get 方法</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;李四&#39;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>简易的响应式方法编写：observe.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 触发更新视图</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> updateView</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;视图更新&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 重新定义数组原型，监听数组变化：为了修改数组也能触发视图更新</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> oldArrayProperty</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建新对象，原型指向 oldArrayProperty ，再扩展新的方法不会影响原型</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arrProto</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldArrayProperty</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 数组常用方法的遍历监听：触发视图更新</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;push&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;pop&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;shift&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;unshift&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;splice&quot;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">methodName</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	arrProto</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">methodName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">		updateView</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 触发视图更新</span></span>
<span class="line"><span style="color:#E06C75;">		oldArrayProperty</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">methodName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Array.prototype.push.call(this, ...arguments)</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 重新定义属性，监听起来</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 深度监听</span></span>
<span class="line"><span style="color:#61AFEF;">	observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 核心 API</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newValue</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 深度监听</span></span>
<span class="line"><span style="color:#61AFEF;">				observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 设置新值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 注意，value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span></span>
<span class="line"><span style="color:#E06C75;">				value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 触发更新视图</span></span>
<span class="line"><span style="color:#61AFEF;">				updateView</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 监听对象属性</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 不是对象或数组</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 不能使用：因为会污染全局的 Array 原型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// Array.prototype.push = function () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//     updateView()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//     ...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">		target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_proto__</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arrProto</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 重新定义各个属性（for in 也可以遍历数组）</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 准备数据</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	info</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		address</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;北京&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 需要深度监听</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	nums</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 监听数据</span></span>
<span class="line"><span style="color:#61AFEF;">observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 测试</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// data.name = &#39;lisi&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// data.age = 21</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// // console.log(&#39;age&#39;, data.age)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// data.x = &#39;100&#39; // 新增属性，监听不到 —— 所以有 Vue.set</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// delete data.name // 删除属性，监听不到 —— 所有已 Vue.delete</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// data.info.address = &#39;上海&#39; // 深度监听</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nums</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 监听数组</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br></div></div><p>Vue 的源码里实现响应式的是这个文件：observe.js</p><h3 id="object-defineproperty-的一些缺点——-vue3-0-启用-proxy" tabindex="-1">Object.defineProperty 的一些缺点——(Vue3.0 启用 Proxy) <a class="header-anchor" href="#object-defineproperty-的一些缺点——-vue3-0-启用-proxy" aria-label="Permalink to &quot;Object.defineProperty 的一些缺点——(Vue3.0 启用 Proxy)&quot;">​</a></h3><ul><li>深度监听，需要递归到底，一次性计算量大</li><li>无法监听新增属性/删除属性，所以 Vue 单独设置了两个 API：Vue.set/Vue.delete，赋值新增和删除属性</li><li>无法监听原生数组，需要特殊处理</li></ul><h2 id="vue2-的响应式-1" tabindex="-1">Vue2 的响应式 <a class="header-anchor" href="#vue2-的响应式-1" aria-label="Permalink to &quot;Vue2 的响应式&quot;">​</a></h2><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h3><p>简单来说就一句话：</p><ul><li><code>Vue</code> 是采用数据劫持结合<code>观察者</code>（<code>发布者-订阅者</code>）模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者（<code>watcher</code>），触发相应的监听回调来更新<code>DOM</code>；</li></ul><h3 id="vue-响应式的创建、更新流程" tabindex="-1">Vue 响应式的创建、更新流程 <a class="header-anchor" href="#vue-响应式的创建、更新流程" aria-label="Permalink to &quot;Vue 响应式的创建、更新流程&quot;">​</a></h3><ul><li>当一个 <code>Vue</code> 实例创建时，<code>vue</code> 会遍历 <code>data</code> 选项的属性，用 <code>Object.defineProperty</code> 为它们设置 <code>getter/setter</code> 并且在内部追踪相关依赖，在属性被访问和修改时分别调用 <code>getter</code> 和<code>setter</code> 。</li><li>每个组件实例都有相应的 <code>watcher</code> 程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 <code>setter</code> 被调用时，会通知 <code>watcher</code> 重新计算，观察者 <code>Wacher</code> 自动触发重新 <code>render</code> 当前组件，生成新的虚拟 <code>DOM</code> 树</li><li><code>Vue</code> 框架会遍历并对比<code>新旧虚拟</code> <code>DOM</code> 树中每个节点的差别，并记录下来，最后将所有记录的不同点，局部修改到真实 <code>DOM</code> 树上。（判断新旧节点的过程在<code>vue2</code>和<code>vue3</code>也有不同）</li></ul><h3 id="vue2-响应式的缺点" tabindex="-1">Vue2 响应式的缺点 <a class="header-anchor" href="#vue2-响应式的缺点" aria-label="Permalink to &quot;Vue2 响应式的缺点&quot;">​</a></h3><p>Object.defineProperty</p><p>是可以监听通过数组下标修改数组的操作，通过遍历每个数组元素的方式</p><ul><li><p>但是 <code>Vue2</code> 无法监听，原因是性能代码和用户体验不成正比，其次即使监听了，也监听不了数组的原生方法进行操作；</p></li><li><p>出于性能考虑，<code>Vue2</code> 放弃了对数组元素的监听，改为对数组原型上的 <code>7</code> 种方法进行劫持；</p></li><li><p><code>Object.defineProperty</code> 无法检测直接通过 <code>.length</code> 改变数组长度的操作；</p></li><li><p><code>Object.defineProperty</code> 只能监听属性，所以需要对对象的每个属性进行遍历，因为如果对象的属性值还是对象，还需要深度遍历。因为这个<code>api</code>并不是劫持对象本身。</p></li><li><p>也正是因为 <code>Object.defineProperty</code> 只能监听属性而不是对象本身，所以对象新增的属性没有响应式；因此新增响应式对象的属性时，需要使用 <code>Set</code> 进行新增；</p></li><li><p>不支持 <code>Map</code>、<code>Set</code> 等数据结构</p></li></ul><h3 id="vue2-如何解决数组响应式问题" tabindex="-1">Vue2 如何解决数组响应式问题 <a class="header-anchor" href="#vue2-如何解决数组响应式问题" aria-label="Permalink to &quot;Vue2 如何解决数组响应式问题&quot;">​</a></h3><p><code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>、<code>splice</code>、<code>sort</code>、<code>reverse</code>这七个数组方法，在<code>Vue2</code>内部重写了所以可以监听到，除此之外可以使用 <code>set()</code>方法，<code>Vue.set()</code>对于数组的处理其实就是调用了<code>splice</code>方法</p><h3 id="v-model-双向绑定原理" tabindex="-1">v-model 双向绑定原理 <a class="header-anchor" href="#v-model-双向绑定原理" aria-label="Permalink to &quot;v-model 双向绑定原理&quot;">​</a></h3><p><code>v-model</code>本质上是语法糖，<code>v-model</code> 默认会解析成名为 <code>value</code>的 <code>prop</code> 和名为 <code>input</code> 的事件。这种语法糖的方式是典型的双向绑定；</p><h2 id="使用-object-defineproperty-来进行数据劫持有什么缺点-1" tabindex="-1">使用 Object.defineProperty() 来进行数据劫持有什么缺点？ <a class="header-anchor" href="#使用-object-defineproperty-来进行数据劫持有什么缺点-1" aria-label="Permalink to &quot;使用 Object.defineProperty() 来进行数据劫持有什么缺点？&quot;">​</a></h2><p>该方法只能监听到数据的修改，监听不到数据的新增和删除，从而不能触发组件更新渲染。vue2 中会对数组的新增删除方法<code>push、pop、shift、unshift、splice、sort、reserve</code>通过重写的形式，在拦截里面进行手动收集触发依赖更新。</p><h2 id="vue2-的-object-defineproperty-和-vue3-的-proxy-相比有什么区别" tabindex="-1">Vue2 的 Object.defineProperty() 和 Vue3 的 Proxy 相比有什么区别？ <a class="header-anchor" href="#vue2-的-object-defineproperty-和-vue3-的-proxy-相比有什么区别" aria-label="Permalink to &quot;Vue2 的 Object.defineProperty() 和 Vue3 的 Proxy 相比有什么区别？&quot;">​</a></h2><p><code>Vue3</code>采用了<code>Proxy</code>代理的方式，<code>Proxy</code>是 ES6 引入的一个新特性，它提供了一个用于创建代理对象的构造函数。它是对整个对象的监听和拦截，可以对对象所有操作进行处理。而<code>Object.defineProperty</code>只能监听单个属性的读写，无法监听新增、删除等操作。</p><h1 id="虚拟-dom-和diff算法面试题" tabindex="-1">虚拟 DOM 和Diff算法面试题 <a class="header-anchor" href="#虚拟-dom-和diff算法面试题" aria-label="Permalink to &quot;虚拟 DOM 和Diff算法面试题&quot;">​</a></h1><h2 id="虚拟-dom-virtual-dom-和虚拟-dom-的-diff-算法" tabindex="-1">虚拟 DOM（Virtual DOM）和虚拟 DOM 的 diff 算法 <a class="header-anchor" href="#虚拟-dom-virtual-dom-和虚拟-dom-的-diff-算法" aria-label="Permalink to &quot;虚拟 DOM（Virtual DOM）和虚拟 DOM 的 diff 算法&quot;">​</a></h2><ul><li>Virtual DOM 是实现 vue 和 React 的重要基石</li><li>diff 算法是 Virtual DOM 中最核心、最关键的部分</li><li>Virtual DOM 是一个热门话题，也是面试中的热门问题</li></ul><h3 id="为什么需要-virtual-dom" tabindex="-1">为什么需要 Virtual DOM？ <a class="header-anchor" href="#为什么需要-virtual-dom" aria-label="Permalink to &quot;为什么需要 Virtual DOM？&quot;">​</a></h3><ul><li>DOM 操作非常耗费性能</li><li>以前用 jQuery，可以自行控制 DOM 操作的时机，手动调整</li><li>Vue 和 React 是数据驱动视图，如何有效控制 DOM 操作 <ul><li>有了一定复杂度，想减少计算次数比较难</li><li>能不能把计算，更多的移为 JS 计算？因为 JS 执行速度很快</li><li>vdom-用 JS 模拟 DOM 结构，计算出最小的变更，操作 DOM</li></ul></li></ul><h3 id="使用-js-模拟-dom-结构" tabindex="-1">使用 JS 模拟 DOM 结构 <a class="header-anchor" href="#使用-js-模拟-dom-结构" aria-label="Permalink to &quot;使用 JS 模拟 DOM 结构&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;html lang=&quot;en&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;head&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;title&gt;使用 JS 模拟 DOM 结构&lt;/title&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/head&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;body&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;div id=&quot;div1&quot; class=&quot;container&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;p&gt;vdom&lt;/p&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;ul style=&quot;font-size: 20px;&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;li&gt;a&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/body&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		let dom = {</span></span>
<span class="line"><span style="color:#ABB2BF;">			tag: &quot;div&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">			props: {</span></span>
<span class="line"><span style="color:#ABB2BF;">				classNmae: &quot;container&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">				id: &quot;div1&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">			children: [</span></span>
<span class="line"><span style="color:#ABB2BF;">				{</span></span>
<span class="line"><span style="color:#ABB2BF;">					tag: &quot;p&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">					children: &quot;vdom&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">				{</span></span>
<span class="line"><span style="color:#ABB2BF;">					tag: &quot;ul&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">					props: { style: &quot;fons-size: 20px&quot; },</span></span>
<span class="line"><span style="color:#ABB2BF;">					children: [</span></span>
<span class="line"><span style="color:#ABB2BF;">						{</span></span>
<span class="line"><span style="color:#ABB2BF;">							tag: &quot;li&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">							children: &quot;a&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">						},</span></span>
<span class="line"><span style="color:#ABB2BF;">						// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">					],</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			],</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/html&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="通过-snabbdom-库学习虚拟-dom-virtual-dom" tabindex="-1">通过 snabbdom 库学习虚拟 DOM(Virtual DOM) <a class="header-anchor" href="#通过-snabbdom-库学习虚拟-dom-virtual-dom" aria-label="Permalink to &quot;通过 snabbdom 库学习虚拟 DOM(Virtual DOM)&quot;">​</a></h3><p>snabbdom 库开源地址：<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noreferrer">https://github.com/snabbdom/snabbdom</a></p><ul><li>简洁强大的 Virtual DOM 库，易学易用</li><li>Vue 参考它实现的 Virtual DOM 和 diff</li><li>Vue3.0 重写了 Virtual DOM 的代码，优化了性能</li><li>但 Virtual DOM 的基本理念不变，面试考点也不变</li><li>React Virtual DOM 具体实现和 Vue 也不同，但不妨碍统一学习</li></ul><h3 id="diff-算法" tabindex="-1">diff 算法 <a class="header-anchor" href="#diff-算法" aria-label="Permalink to &quot;diff 算法&quot;">​</a></h3><ul><li>diff 算法是 Virtual DOM 中最核心、最关键的部分</li><li>diff 算法能在日常使用 vue React 中体现出来(如 key)</li><li>diff 算法是前端热门话题，面试“宠儿”</li></ul><h4 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h4><ul><li>diff 即对比，是一个广泛的概念，如 linux diff 命令、git diff 等</li><li>两个 js 对象也可以做 diff，如：<a href="https://github.com/cujojs/jiff" target="_blank" rel="noreferrer">https://github.com/cujojs/jiff</a></li><li>两棵树做 diff，如这里的 Virtual DOM 的 diff</li></ul><h4 id="树-diff-的时间复杂度-o-n-3" tabindex="-1">树 diff 的时间复杂度 O(n^3) <a class="header-anchor" href="#树-diff-的时间复杂度-o-n-3" aria-label="Permalink to &quot;树 diff 的时间复杂度 O(n^3)&quot;">​</a></h4><ul><li>第一，遍历 tree1;第二，遍历 tree2</li><li>第三，排序</li><li>1000 个节点，要计算 1 亿次，算法不可用</li></ul><h4 id="优化时间复杂度到-o-n" tabindex="-1">优化时间复杂度到 O(n) <a class="header-anchor" href="#优化时间复杂度到-o-n" aria-label="Permalink to &quot;优化时间复杂度到 O(n)&quot;">​</a></h4><ul><li>只比较同一层级，不跨级比较</li><li>tag 不相同，则直接删掉重建，不再深度比较</li><li>tag 和 key，两者都相同，则认为是相同节点，不再深度比较</li></ul><h3 id="snabbdom-库的-源码解析" tabindex="-1">snabbdom 库的 源码解析 <a class="header-anchor" href="#snabbdom-库的-源码解析" aria-label="Permalink to &quot;snabbdom 库的 源码解析&quot;">​</a></h3><p>snabbdom 库开源地址：<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noreferrer">https://github.com/snabbdom/snabbdom</a></p><p>通过看源码页的 Example 例子使用的方法，查看源码</p><p>克隆 snabbdom 源码，查看源码的<code>src/h.ts</code> 文件，找到 h 方法，按照这个思路然后一步步往下找跳转其他方法：</p><p><code>h、vnode、patch、diff、key</code></p><h2 id="对比新旧-vnode-对象-通过diff算法-双端比较-生成真实dom" tabindex="-1">对比新旧 <code>VNode</code> 对象，通过<code>Diff算法</code>（<code>双端比较</code>）生成真实<code>DOM</code>； <a class="header-anchor" href="#对比新旧-vnode-对象-通过diff算法-双端比较-生成真实dom" aria-label="Permalink to &quot;对比新旧 \`VNode\` 对象，通过\`Diff算法\`（\`双端比较\`）生成真实\`DOM\`；&quot;">​</a></h2><h3 id="vue-runtime-compiler-与-runtime-only" tabindex="-1">Vue runtime-compiler 与 runtime-only <a class="header-anchor" href="#vue-runtime-compiler-与-runtime-only" aria-label="Permalink to &quot;Vue runtime-compiler 与 runtime-only&quot;">​</a></h3><p>(1) <code>runtime-compiler</code>的步骤</p><p><code>template</code>--&gt; <code>ast</code>--&gt; <code>render</code>函数 --&gt; <code>VDom</code>--&gt; 真实 DOM</p><p>(2) <code>runtime-only</code>的步骤</p><p><code>render</code>函数 --&gt; <code>VDom</code>--&gt; 真实 DOM</p><p>不过 <code>runtime-only</code> 版本的体积较小。但是无法使用 <code>template</code> 选项</p><h3 id="渲染流程图" tabindex="-1">渲染流程图 <a class="header-anchor" href="#渲染流程图" aria-label="Permalink to &quot;渲染流程图&quot;">​</a></h3><p><img src="`+n+`" alt="image-20240518013854544"></p><h2 id="virtualdom-diff-算法" tabindex="-1">VirtualDOM &amp; Diff 算法 <a class="header-anchor" href="#virtualdom-diff-算法" aria-label="Permalink to &quot;VirtualDOM &amp; Diff 算法&quot;">​</a></h2><h5 id="虚拟-dom-的产生和本质" tabindex="-1">虚拟 DOM 的产生和本质 <a class="header-anchor" href="#虚拟-dom-的产生和本质" aria-label="Permalink to &quot;虚拟 DOM 的产生和本质&quot;">​</a></h5><ul><li>由于在浏览器中操作<code>DOM</code>是很昂贵的。频繁的操作<code>DOM</code>，会产生一定的性能问题。使用虚拟<code>DOM</code>可以减少直接操作<code>DOM</code>的次数，减少浏览器的重绘及回流</li><li><code>Virtual DOM</code> 本质就是用一个原生的<code>JS</code>对象去描述一个<code>DOM</code>节点。是对真实<code>DOM</code>的一层抽象</li><li><code>Virtual DOM</code> 映射到真实<code>DOM</code>要经历<code>VNode</code>的<code>create</code>、<code>diff</code>、<code>patch</code>等阶段</li></ul><h5 id="虚拟-dom-的作用" tabindex="-1">虚拟 DOM 的作用 <a class="header-anchor" href="#虚拟-dom-的作用" aria-label="Permalink to &quot;虚拟 DOM 的作用&quot;">​</a></h5><ul><li>将真实元素节点抽象成 <code>VNode</code>，有效减少直接操作 <code>dom</code> 次数，从而提高程序性能</li><li>方便实现跨平台：可以使用虚拟<code>DOM</code>去针对不同平台进行渲染；</li></ul><h5 id="diff-算法-实现原理" tabindex="-1">Diff 算法 实现原理 <a class="header-anchor" href="#diff-算法-实现原理" aria-label="Permalink to &quot;Diff 算法 实现原理&quot;">​</a></h5><ul><li>首先，对比新旧节点（<code>VNode</code>）本身，判断是否为同一节点，如果不为相同节点，则删除该节点重新创建节点进行替换；</li><li>如果为相同节点，就要判断如何对该节点的子节点进行处理，这里有四种情况： <ul><li><code>旧节点</code>有<code>子节点</code>，<code>新节点</code>没有<code>子节点</code>，就直接删除<code>旧节点</code>的<code>子节点</code>；</li><li><code>旧节点</code>没有<code>子节点</code>，<code>新节点</code>有<code>子节点</code>，就将<code>新节点</code>的<code>子节点</code>添加到<code>旧节点</code>上；</li><li><code>新旧节点</code>都没有<code>子节点</code>，就判断是否有<code>文本节点</code>进行对比；</li><li><code>新旧节点</code>都有<code>子节点</code>，就进行<code>双端比较</code>；（值得一提的是）</li></ul></li></ul><h5 id="diff-算法-的执行时机" tabindex="-1">Diff 算法 的执行时机 <a class="header-anchor" href="#diff-算法-的执行时机" aria-label="Permalink to &quot;Diff 算法 的执行时机&quot;">​</a></h5><p><code>Vue</code> 中 <code>Diff算法</code> 执行的时刻是组件更新的时候，更新函数会再次执行 <code>render</code> 函数获得最新的<code>虚拟DOM</code>，然后执行<code>patch</code>函数，并传入新旧两次<code>虚拟DOM</code>，通过比对两者找到变化的地方，最后将其转化为对应的<code>DOM</code>操作。</p><h5 id="diff-算法为什么是-o-n-复杂度而不是-o-n-3" tabindex="-1">DIFF 算法为什么是 O(n) 复杂度而不是 O(n^3) <a class="header-anchor" href="#diff-算法为什么是-o-n-复杂度而不是-o-n-3" aria-label="Permalink to &quot;DIFF 算法为什么是 O(n) 复杂度而不是 O(n^3)&quot;">​</a></h5><ul><li>正常<code>Diff</code>两个树的时间复杂度是<code>O(n^3)</code>，但实际情况下我们很少会进行跨层级的移动<code>DOM</code>，所以<code>Vue</code>将<code>Diff</code>进行了优化，只对同层的子节点进行比较，放弃跨级的节点比较，使得时间复杂从<code>O(n^3)</code>降低至<code>O(n)</code>。</li></ul><h5 id="vue2-diff-算法-双端比较-原理" tabindex="-1">Vue2 Diff 算法 双端比较 原理 <a class="header-anchor" href="#vue2-diff-算法-双端比较-原理" aria-label="Permalink to &quot;Vue2 Diff 算法 双端比较 原理&quot;">​</a></h5><p>使用了四个<code>指针</code>，分别指向新旧两个 <code>VNode</code> 的头尾，它们不断的往中间移动，当处理完所有 <code>VNode</code> 时停止，每次移动都要比较 <code>头头</code>、<code>头尾</code> 排列组合共<code>4</code>次对比，来去寻找 <code>key</code> 相同的可复用的节点来进行移动复用；</p><h5 id="vue3-diff-算法-最长递增子序列" tabindex="-1">Vue3 Diff 算法 最长递增子序列 <a class="header-anchor" href="#vue3-diff-算法-最长递增子序列" aria-label="Permalink to &quot;Vue3 Diff 算法 最长递增子序列&quot;">​</a></h5><p><code>vue3</code> 为了尽可能的减少移动，采用 <code>贪心</code> + <code>二分查找</code> 去找<code>最长递增子序列</code>；</p><h2 id="diff-算法-1" tabindex="-1">Diff 算法 <a class="header-anchor" href="#diff-算法-1" aria-label="Permalink to &quot;Diff 算法&quot;">​</a></h2><ul><li>在新老虚拟 DOM 对比时：</li><li>首先，对比节点本身 <ul><li>没有新节点，直接触发旧节点的 destory 钩子</li><li>没有旧节点，说明是页面刚开始初始化的时候，此时，根本不需要比较了，直接全是新建，所以只调用 createElm</li><li>旧节点和新节点自身一样，通过 sameVnode 判断节点是否一样，一样时，直接调用 patchVnode 去处理这两个节点</li><li>旧节点和新节点自身不一样，当两个节点不一样的时候，直接创建新节点，删除旧节点</li></ul></li><li>如果为相同节点，进行 patchVnode，判断如何对该节点的子节点进行处理，先判断一方有子节点一方没有子节点的情况(如果新的 children 没有子节点，将旧的子节点移除) <ul><li>新节点是否是文本节点，如果是，则直接更新 dom 的文本内容为新节点的文本内容</li><li>新节点和旧节点如果都有子节点，则处理比较更新子节点</li><li>只有新节点有子节点，旧节点没有，那么不用比较了，所有节点都是全新的，所以直接全部新建就好了，新建是指创建出所有新 DOM，并且添加进父节点</li><li>只有旧节点有子节点而新节点没有，说明更新后的页面，旧节点全部都不见了，那么要做的，就是把所有的旧节点删除，也就是直接把 DOM 删除</li></ul></li><li>比较如果都有子节点，则进行 updateChildren，判断如何对这些新老节点的子节点进行操作（diff 核心）。 <ul><li>设置新旧 VNode 的头尾指针</li><li>新旧头尾指针进行比较，循环向中间靠拢，根据情况调用 patchVnode 进行 patch 重复流程、调用 createElem 创建一个新节点，从哈希表寻找 key 一致的 VNode 节点再分情况操作</li></ul></li><li>匹配时，找到相同的子节点，递归比较子节点</li><li>在 diff 中，只对同层的子节点进行比较，放弃跨级的节点比较，使得时间复杂从 O(n3)降低值 O(n)，也就是说，只有当新旧 children 都为多个子节点时才需要用核心的 Diff 算法进行同层级比较。</li></ul><h2 id="diff-算法-2" tabindex="-1">diff 算法 <a class="header-anchor" href="#diff-算法-2" aria-label="Permalink to &quot;diff 算法&quot;">​</a></h2><h3 id="_1-概念" tabindex="-1">1.概念： <a class="header-anchor" href="#_1-概念" aria-label="Permalink to &quot;1.概念：&quot;">​</a></h3><p><code>diff</code>算法是一种对比算法，通过对比旧的虚拟 DOM 和新的虚拟 DOM，得出是哪个虚拟节点发生了改变，找出这个虚拟节点并只更新这个虚拟节点所对应的真实节点，而不用更新其他未发生改变的节点，实现精准地更新真实 DOM，进而提高效率。</p><h3 id="_2-对比方式" tabindex="-1">2.对比方式： <a class="header-anchor" href="#_2-对比方式" aria-label="Permalink to &quot;2.对比方式：&quot;">​</a></h3><p><code>diff</code>算法的整体策略是：<code>深度优先，同层比较</code>。比较只会在同层级进行, 不会跨层级比较；比较的过程中，循环从两边向中间收拢。</p><ul><li><p>首先判断两个节点的<code>tag</code>是否相同，不同则删除该节点重新创建节点进行替换。</p></li><li><p><code>tag</code>相同时，先替换属性，然后对比子元素，分为以下几种情况：</p><ul><li>新旧节点都有子元素时，采用双指针方式进行对比。新旧头尾指针进行比较，循环向中间靠拢，根据情况调用<code>patchVnode</code>进行<code>patch</code>重复流程、调用<code>createElem</code>创建一个新节点，从哈希表寻找 <code>key</code>一致的<code>VNode</code>节点再分情况操作。</li><li>新节点有子元素，旧节点没有子元素，则将子元素虚拟节点转化成真实节点插入即可。</li><li>新节点没有子元素，旧节点有子元素，则清空子元素，并设置为新节点的文本内容。</li><li>新旧节点都没有子元素时，即都为文本节点，则直接对比文本内容，不同则更新。</li></ul></li></ul><h2 id="vue-为什么要设置-key" tabindex="-1">Vue 为什么要设置 key？ <a class="header-anchor" href="#vue-为什么要设置-key" aria-label="Permalink to &quot;Vue 为什么要设置 key？&quot;">​</a></h2><ul><li>vue 中 key 值的作用可以分为两种情况来考虑： <ul><li>第一种情况是 v-if 中使用 key。由于 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。因此当使用 v-if 来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的 input 元素，那么切换前后用户的输入不会被清除掉，这样是不符合需求的。因此可以通过使用 key 来唯一的标识一个元素，这个情况下，使用 key 的元素不会被复用。这个时候 key 的作用是用来标识一个独立的元素。</li><li>第二种情况是 v-for 中使用 key。用 v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue 跟踪元素的身份，从而高效的实现复用。这个时候 key 的作用是为了高效的更新渲染虚拟 DOM。</li></ul></li><li>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，diff 操作可以更准确、更快速 <ul><li>更准确：因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。</li><li>更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快</li></ul></li></ul><h2 id="为什么不建议用-index-作为-key" tabindex="-1">为什么不建议用 index 作为 key? <a class="header-anchor" href="#为什么不建议用-index-作为-key" aria-label="Permalink to &quot;为什么不建议用 index 作为 key?&quot;">​</a></h2><ul><li>使用 index 作为 key 和没写基本上没区别，因为不管数组的顺序怎么颠倒，index 都是 0, 1, 2...这样排列，导致 Vue 会复用错误的旧子节点，做很多额外的工作。</li></ul><h2 id="什么是虚拟-dom" tabindex="-1">什么是虚拟 DOM？ <a class="header-anchor" href="#什么是虚拟-dom" aria-label="Permalink to &quot;什么是虚拟 DOM？&quot;">​</a></h2><p>参考回答：</p><p>虚拟 dom 是相对于浏览器所渲染出来的真实 dom 的，在 react，vue 等技术出现之前，我们要改变页面展示的内容只能通过遍历查询 dom 树的方式找到需要修改的 dom 然后修改样式行为或者结构，来达到更新 ui 的目的。</p><p>这种方式相当消耗计算资源，因为每次查询 dom 几乎都需要遍历整颗 dom 树，如果建立一个与 dom 树对应的虚拟 dom 对象（ js 对象），以对象嵌套的方式来表示 dom 树，那么每次 dom 的更改就变成了 js 对象的属性的更改，这样一来就能查找 js 对象的属性变化要比查询 dom 树的性能开销小。</p><h2 id="你可以实现一个虚拟-dom-吗" tabindex="-1">你可以实现一个虚拟 DOM 吗 <a class="header-anchor" href="#你可以实现一个虚拟-dom-吗" aria-label="Permalink to &quot;你可以实现一个虚拟 DOM 吗&quot;">​</a></h2><p><strong>先看浏览器对<code>HTML</code>的理解</strong>：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;h1&gt;My title&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	Some text content</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;!-- TODO: Add tagline --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当浏览器读到这些代码时，它会建立一个 DOM 树来保持追踪所有内容，如同你会画一张家谱树来追踪家庭成员的发展一样。 上述 HTML 对应的 DOM 节点树如下图所示：</p><p><img src="`+m+`" alt="image-20240326181522954"></p><div class="language-markdown line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">每个元素都是一个节点。每段文字也是一个节点。甚至注释也都是节点。一个节点就是页面的一个部分。就像家谱树一样，每个节点都可以有孩子节点 (也就是说每个部分可以包含其它的一些部分)。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">**再看</span><span style="color:#E5C07B;">\`</span><span style="color:#98C379;">Vue</span><span style="color:#E5C07B;">\`</span><span style="color:#D19A66;">对</span><span style="color:#E5C07B;">\`</span><span style="color:#98C379;">HTML template</span><span style="color:#E5C07B;">\`</span><span style="color:#D19A66;">的理解**</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">Vue 通过建立一个</span><span style="color:#D19A66;">**虚拟 DOM**</span><span style="color:#ABB2BF;"> 来追踪自己要如何改变真实 DOM。因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，包括及其子节点的描述信息。我们把这样的节点描述为“虚拟节点 (virtual node)”，也常简写它为“</span><span style="color:#D19A66;">**VNode**</span><span style="color:#ABB2BF;">”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">简言之，浏览器对 HTML 的理解是 DOM 树，Vue 对</span><span style="color:#E5C07B;">\`</span><span style="color:#98C379;">HTML</span><span style="color:#E5C07B;">\`</span><span style="color:#ABB2BF;">的理解是虚拟 DOM，最后在</span><span style="color:#E5C07B;">\`</span><span style="color:#98C379;">patch</span><span style="color:#E5C07B;">\`</span><span style="color:#ABB2BF;">阶段通过 DOM 操作的 api 将其渲染成真实的 DOM 节点。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="如何实现虚拟-dom" tabindex="-1">如何实现虚拟 DOM <a class="header-anchor" href="#如何实现虚拟-dom" aria-label="Permalink to &quot;如何实现虚拟 DOM&quot;">​</a></h4><p>首先可以看看<code>vue</code>中<code>VNode</code>的结构</p><p>源码位置：src/core/vdom/vnode.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	tag</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VNodeData</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	children</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#E06C75;">	text</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	elm</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	ns</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// rendered in this component&#39;s scope</span></span>
<span class="line"><span style="color:#E06C75;">	functionalContext</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// only for functional component root nodes</span></span>
<span class="line"><span style="color:#E06C75;">	key</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	componentOptions</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VNodeComponentOptions</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	componentInstance</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// component instance</span></span>
<span class="line"><span style="color:#E06C75;">	parent</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// component placeholder node</span></span>
<span class="line"><span style="color:#E06C75;">	raw</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// contains raw HTML? (server only)</span></span>
<span class="line"><span style="color:#E06C75;">	isStatic</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// hoisted static node</span></span>
<span class="line"><span style="color:#E06C75;">	isRootInsert</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// necessary for enter transition check</span></span>
<span class="line"><span style="color:#E06C75;">	isComment</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// empty comment placeholder?</span></span>
<span class="line"><span style="color:#E06C75;">	isCloned</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// is a cloned node?</span></span>
<span class="line"><span style="color:#E06C75;">	isOnce</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// is a v-once node?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		tag</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		data</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VNodeData</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		children</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		text</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		elm</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		context</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		componentOptions</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VNodeComponentOptions</span></span>
<span class="line"><span style="color:#ABB2BF;">	) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*当前节点的标签名*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tag</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*当前节点的子节点，是一个数组*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> children</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*当前节点的文本*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> text</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*当前虚拟节点对应的真实dom节点*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> elm</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*当前节点的名字空间*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ns</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*编译作用域*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> context</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*函数化组件作用域*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">functionalContext</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*节点的key属性，被当作节点的标志，用以优化*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*组件的option选项*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">componentOptions</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> componentOptions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*当前节点对应的组件的实例*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">componentInstance</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*当前节点的父节点*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">raw</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*静态节点标志*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isStatic</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*是否作为跟节点插入*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRootInsert</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*是否为注释节点*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isComment</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*是否为克隆节点*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isCloned</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/*是否有v-once指令*/</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isOnce</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// DEPRECATED: alias for componentInstance for backwards compat.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/* istanbul ignore next https://github.com/answershuto/learnVue*/</span></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> child</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">componentInstance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><p>这里对<code>VNode</code>进行稍微的说明：</p><ul><li>所有对象的 <code>context</code> 选项都指向了 <code>Vue</code> 实例</li><li><code>elm</code> 属性则指向了其相对应的真实 <code>DOM</code> 节点</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">vue</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">是通过</span><span style="color:#98C379;">\`</span><span style="color:#61AFEF;"> createElement</span><span style="color:#98C379;">\`</span><span style="color:#61AFEF;">生成</span><span style="color:#98C379;">\`</span><span style="color:#61AFEF;">VNode</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>源码位置：src/core/vdom/create-element.js</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createElement</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	tag</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	children</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	normalizationType</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	alwaysNormalize</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#61AFEF;"> isPrimitive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">		normalizationType</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> children</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		children</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isTrue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">alwaysNormalize</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">		normalizationType</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ALWAYS_NORMALIZE</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> _createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">normalizationType</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>上面可以看到<code>createElement</code> 方法实际上是对 <code>_createElement</code> 方法的封装，对参数的传入进行了判断</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> _createElement</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    tag</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    data</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VNodeData</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    children</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    normalizationType</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isDef</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">)._ob__)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        process.env.NODE_ENV !== </span><span style="color:#98C379;">&#39;production&#39;</span><span style="color:#E06C75;"> &amp;&amp; warn(</span></span>
<span class="line"><span style="color:#98C379;">            \`Avoid using observed data object as vnode data: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">\`</span><span style="color:#E06C75;"> +</span></span>
<span class="line"><span style="color:#98C379;">            &#39;Always create fresh vnode data objects in each render!&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            context</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">        )</span></span>
<span class="line"><span style="color:#98C379;">        return createEmptyVNode()</span></span>
<span class="line"><span style="color:#98C379;">    }</span></span>
<span class="line"><span style="color:#98C379;">    // object syntax in v-bind</span></span>
<span class="line"><span style="color:#98C379;">    if (isDef(data) &amp;&amp; isDef(data.is)) {</span></span>
<span class="line"><span style="color:#98C379;">        tag = data.is</span></span>
<span class="line"><span style="color:#98C379;">    }</span></span>
<span class="line"><span style="color:#98C379;">    if (!tag) {</span></span>
<span class="line"><span style="color:#98C379;">        // in case of component :is set to falsy value</span></span>
<span class="line"><span style="color:#98C379;">        return createEmptyVNode()</span></span>
<span class="line"><span style="color:#98C379;">    }</span></span>
<span class="line"><span style="color:#98C379;">    ...</span></span>
<span class="line"><span style="color:#98C379;">    // support single function children as default scoped slot</span></span>
<span class="line"><span style="color:#98C379;">    if (Array.isArray(children) &amp;&amp;</span></span>
<span class="line"><span style="color:#98C379;">        typeof children[0] === &#39;function&#39;</span></span>
<span class="line"><span style="color:#98C379;">    ) {</span></span>
<span class="line"><span style="color:#98C379;">        data = data || {}</span></span>
<span class="line"><span style="color:#98C379;">        data.scopedSlots = { default: children[0] }</span></span>
<span class="line"><span style="color:#98C379;">        children.length = 0</span></span>
<span class="line"><span style="color:#98C379;">    }</span></span>
<span class="line"><span style="color:#98C379;">    if (normalizationType === ALWAYS_NORMALIZE) {</span></span>
<span class="line"><span style="color:#98C379;">        children = normalizeChildren(children)</span></span>
<span class="line"><span style="color:#98C379;">    } else if ( === SIMPLE_NORMALIZE) {</span></span>
<span class="line"><span style="color:#98C379;">        children = simpleNormalizeChildren(children)</span></span>
<span class="line"><span style="color:#98C379;">    }</span></span>
<span class="line"><span style="color:#98C379;">  	// 创建VNode</span></span>
<span class="line"><span style="color:#98C379;">    ...</span></span>
<span class="line"><span style="color:#98C379;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>可以看到<code>_createElement</code>接收 5 个参数：</p><ul><li><code>context</code> 表示 <code>VNode</code> 的上下文环境，是 <code>Component</code> 类型</li><li>tag 表示标签，它可以是一个字符串，也可以是一个 <code>Component</code></li><li><code>data</code> 表示 <code>VNode</code> 的数据，它是一个 <code>VNodeData</code> 类型</li><li><code>children</code> 表示当前 <code>VNode</code>的子节点，它是任意类型的</li><li><code>normalizationType</code> 表示子节点规范的类型，类型不同规范的方法也就不一样，主要是参考 <code>render</code> 函数是编译生成的还是用户手写的</li></ul><p>根据<code>normalizationType</code> 的类型，<code>children</code>会有不同的定义</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">if (normalizationType === ALWAYS_NORMALIZE) { children =</span></span>
<span class="line"><span style="color:#ABB2BF;">normalizeChildren(children) } else if ( === SIMPLE_NORMALIZE) { children =</span></span>
<span class="line"><span style="color:#ABB2BF;">simpleNormalizeChildren(children) }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>simpleNormalizeChildren</code>方法调用场景是 <code>render</code> 函数是编译生成的</p><p><code>normalizeChildren</code>方法调用场景分为下面两种：</p><ul><li><code>render</code> 函数是用户手写的</li><li>编译 <code>slot</code>、<code>v-for</code> 的时候会产生嵌套数组</li></ul><p>无论是<code>simpleNormalizeChildren</code>还是<code>normalizeChildren</code>都是对<code>children</code>进行规范（使<code>children</code> 变成了一个类型为 <code>VNode</code> 的 <code>Array</code>），这里就不展开说了</p><p>规范化<code>children</code>的源码位置在：src/core/vdom/helpers/normalzie-children.js</p><p>在规范化<code>children</code>后，就去创建<code>VNode</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ns</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对tag进行判断</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> tag</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;string&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> Ctor</span></span>
<span class="line"><span style="color:#E06C75;">  ns</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$vnode</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ns</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#E5C07B;"> config</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTagNamespace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReservedTag</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果是内置的节点，则直接创建一个普通VNode</span></span>
<span class="line"><span style="color:#E06C75;">    vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VNode</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">      config</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parsePlatformTagName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">      undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Ctor</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> resolveAsset</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;components&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">))) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // component</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果是component类型，则会通过createComponent创建VNode节点</span></span>
<span class="line"><span style="color:#E06C75;">    vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VNode</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">      tag</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">      undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // direct component options / constructor</span></span>
<span class="line"><span style="color:#E06C75;">  vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">createComponent</span><span style="color:#98C379;">\`同样是创建\`</span><span style="color:#E06C75;">VNode</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>源码位置：src/core/vdom/create-component.js</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createComponent</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	Ctor</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	data</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">VNodeData</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	children</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	tag</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 构建子类构造函数</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> baseCtor</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// plain options object: turn it into a constructor</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">		Ctor</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> baseCtor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// if at this stage it&#39;s not a constructor or an async component factory,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// reject.</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> Ctor</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;production&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			warn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Invalid Component definition: </span><span style="color:#C678DD;">\${</span><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// async component</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> asyncFactory</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cid</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">		asyncFactory</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> Ctor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		Ctor</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> resolveAsyncComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">asyncFactory</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">baseCtor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">Ctor</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> createAsyncPlaceholder</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">asyncFactory</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// resolve constructor options in case global mixins are applied after</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// component constructor creation</span></span>
<span class="line"><span style="color:#61AFEF;">	resolveConstructorOptions</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// transform component v-model data into props &amp; events</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">model</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">		transformModel</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// extract props</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> propsData</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> extractPropsFromVNodeData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// functional component</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isTrue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">functional</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> createFunctionalComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">propsData</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// extract listeners, since these needs to be treated as</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// child component listeners instead of DOM listeners</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> listeners</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">on</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// replace with listeners with .native modifier</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// so it gets processed during parent component patch.</span></span>
<span class="line"><span style="color:#E5C07B;">	data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">on</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nativeOn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isTrue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">abstract</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> slot</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">slot</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> slot</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 安装组件钩子函数，把钩子函数合并到data.hook中</span></span>
<span class="line"><span style="color:#61AFEF;">	installComponentHooks</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//实例化一个VNode返回。组件的VNode是没有children的</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> tag</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VNode</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		\`vue-component-</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">Ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cid</span><span style="color:#C678DD;">}\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> \`-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		context</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">Ctor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">propsData</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">listeners</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">		asyncFactory</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">__WEEX__</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> isRecyclableComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> renderRecyclableComponentTemplate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> vnode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br></div></div><p>稍微提下<code>createComponent</code>生成<code>VNode</code>的三个关键流程：</p><ul><li>构造子类构造函数<code>Ctor</code></li><li><code>installComponentHooks</code>安装组件钩子函数</li><li>实例化 <code>vnode</code></li></ul><h4 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h4><p><code>createElement</code> 创建 <code>VNode</code> 的过程，每个 <code>VNode</code> 有 <code>children</code>，<code>children</code> 每个元素也是一个<code>VNode</code>，这样就形成了一个虚拟树结构，用于描述真实的<code>DOM</code>树结构</p><h2 id="虚拟-dom" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom" aria-label="Permalink to &quot;虚拟 DOM&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念： <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念：&quot;">​</a></h3><p>虚拟 DOM，顾名思义就是虚拟的 DOM 对象，它本身就是一个 JS 对象，只不过是通过不同的属性去描述一个视图结构。</p><h3 id="虚拟-dom-的好处" tabindex="-1">虚拟 DOM 的好处： <a class="header-anchor" href="#虚拟-dom-的好处" aria-label="Permalink to &quot;虚拟 DOM 的好处：&quot;">​</a></h3><p>(1) 性能提升 直接操作 DOM 是有限制的，一个真实元素上有很多属性，如果直接对其进行操作，同时会对很多额外的属性内容进行了操作，这是没有必要的。如果将这些操作转移到 JS 对象上，就会简单很多。另外，操作 DOM 的代价是比较昂贵的，频繁的操作 DOM 容易引起页面的重绘和回流。如果通过抽象 VNode 进行中间处理，可以有效减少直接操作 DOM 次数，从而减少页面的重绘和回流。 (2) 方便跨平台实现 同一 VNode 节点可以渲染成不同平台上对应的内容，比如：渲染在浏览器是 DOM 元素节点，渲染在 Native（iOS、Android）变为对应的控件。Vue 3 中允许开发者基于 VNode 实现自定义渲染器（renderer），以便于针对不同平台进行渲染。</p><h3 id="结构" tabindex="-1">结构： <a class="header-anchor" href="#结构" aria-label="Permalink to &quot;结构：&quot;">​</a></h3><p>没有统一的标准，一般包括<code>tag</code>、<code>props</code>、<code>children</code>三项。 <code>tag</code>：必选。就是标签，也可以是组件，或者函数。 <code>props</code>：非必选。就是这个标签上的属性和方法。 <code>children</code>：非必选。就是这个标签的内容或者子节点。如果是文本节点就是字符串；如果有子节点就是数组。换句话说，如果判断<code>children</code>是字符串的话，就表示一定是文本节点，这个节点肯定没有子元素。</p><h2 id="虚拟-dom-1" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom-1" aria-label="Permalink to &quot;虚拟 DOM&quot;">​</a></h2><p>采用虚拟 DOM 的更新技术在性能这块，理论上是不可能比原生 Js 操作 DOM 高的。不过在大部分情况下，开发者很难写出绝对优化的命令式代码。所以虚拟 DOM 就是用来解决这一问题，让开发者系的代码在性能上得到保障，甚至无限接近命令式代码的性能。 通常情况下，纯 Js 层面的操作远比 DOM 操作快。虚拟 DOM 就是用 Js 来模拟出 DOM 结构，通过 diff 算法来计算出最小的变更，通过对应的渲染器，来渲染到页面上。</p><p>同时虚拟 DOM 也为跨平台开发提供了极大的便利，开发者写的同一套代码（有些需要针对不同平台做区分），通过不同的渲染规则，就可以生成不同平台的代码。</p><p>在 vue 中会通过<strong>渲染器</strong>来将虚拟 DOM 转换为对应平台的真实 DOM。如 renderer(vnode， container)，该方法会根据 vnode 描述的信息（如 tag、props、children）来创建 DOM 元素，根据规则为对应的元素添加属性和事件，处理 vnode 下的 children。</p><h2 id="虚拟-dom-的解析过程" tabindex="-1">虚拟 DOM 的解析过程 <a class="header-anchor" href="#虚拟-dom-的解析过程" aria-label="Permalink to &quot;虚拟 DOM 的解析过程&quot;">​</a></h2><p>虚拟 DOM 的解析过程：</p><p>首先对将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。</p><p>当页面的状态发生改变，需要对页面的 DOM 的结构进行调整的时候，首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。</p><p>最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。</p><h2 id="vue-中-key-的作用" tabindex="-1">Vue 中 key 的作用 <a class="header-anchor" href="#vue-中-key-的作用" aria-label="Permalink to &quot;Vue 中 key 的作用&quot;">​</a></h2><p>vue 中 key 值的作用可以分为两种情况来考虑：</p><p>第一种情况是 v-if 中使用 key。由于 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。因此当使用 v-if 来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的 input 元素，那么切换前后用户的输入不会被清除掉，这样是不符合需求的。因此可以通过使用 key 来 唯一的标识一个元素，这个情况下，使用 key 的元素不会被复用。</p><p>这个时候 key 的作用是用来标识一个独立的元素。</p><p>第二种情况是 v-for 中使用 key。用 v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue 跟踪元素的身份，从而高效的实现复用。这个时候 key 的作用是为了高效的更新渲染虚拟 DOM。</p><p>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，diff 操作可以更准确、更快速、更准确：因为带 key 就不是就地复用了，在 sameNode 函数 a.key=== b.key 对比中可以避免就地复用的情况。所以会更加准确。</p><p>更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快</p><h2 id="谈谈虚拟-dom" tabindex="-1">谈谈虚拟 DOM <a class="header-anchor" href="#谈谈虚拟-dom" aria-label="Permalink to &quot;谈谈虚拟 DOM&quot;">​</a></h2><ul><li>虚拟 DOM 把整个 DOM 树抽象成了一个 js 对象，这样开发者就可以直接操作对象，而不需要频繁的操作 DOM，提升性能。</li><li>在 vue 运行时，它将虚拟 DOM 和真实的 DOM 树同步，当数据发生变化时，Vue 会重新计算虚拟的 DOM 树，通过 diff 算法比对差异，查找和标记发生变化的节点，并将他们更新到实际 DOM 数上。</li><li>虚拟 DOM 不依赖于真实平台环境，从而可以实现跨平台。</li></ul><h3 id="补充-vdom-是如何做-diff-的" tabindex="-1">补充：VDOM 是如何做 diff 的？ <a class="header-anchor" href="#补充-vdom-是如何做-diff-的" aria-label="Permalink to &quot;补充：VDOM 是如何做 diff 的？&quot;">​</a></h3><ul><li>组件挂载结束后，会记录第一次生成的 VDOM -- oldVnode</li><li>当响应式数据发生变化时，将会引起组件重新渲染，此时就会生成新的 VDOM --newVnode</li><li>使用 oldVnode 和 newVnode 做 diff 操作，将更改的部分应到真实 DOM 上，从而转换为操作最少量的 dom，高效更新视图</li></ul><h2 id="对虚拟-dom-的理解" tabindex="-1">对虚拟 DOM 的理解 <a class="header-anchor" href="#对虚拟-dom-的理解" aria-label="Permalink to &quot;对虚拟 DOM 的理解&quot;">​</a></h2><p>虚拟 DOM 就是用 JS 对象来表述 DOM 节点，是对真实 DOM 的一层抽象。可以通过一些列操作使这个棵树映射到真实 DOM 上。</p><p>如在<code>Vue</code>中，会把代码转换为虚拟 DOM，在最终渲染到页面，在每次数据发生变化前，都会缓存一份虚拟 DOM，通过<code>diff</code>算法来对比新旧虚拟 DOM 记录到一个对象中按需更新，最后创建真实 DOM，从而提升页面渲染性能。</p><h2 id="虚拟-dom-就一定比真实-dom-更快吗" tabindex="-1">虚拟 DOM 就一定比真实 DOM 更快吗 <a class="header-anchor" href="#虚拟-dom-就一定比真实-dom-更快吗" aria-label="Permalink to &quot;虚拟 DOM 就一定比真实 DOM 更快吗&quot;">​</a></h2><p><strong>虚拟 DOM 不一定比真实 DOM 更快，而是在特定情况下可以提供更好的性能。</strong></p><p>在复杂情况下，虚拟 DOM 可以比真实 DOM 操作更快，因为它是在内存中维护一个虚拟的 DOM 树，将真实 DOM 操作转换为对虚拟 DOM 的操作，然后通过<code>diff</code>算法找出需要更新的部分，最后只变更这部分到真实 DOM 就可以。在频繁变更下，它可以批量处理这些变化从而减少对真实 DOM 的访问和操作，减少浏览器的回流重绘，提高页面渲染性能。</p><p>而在一下简单场景下，直接操作真实 DOM 可能会更快，当更新操作很少或者只是局部改变时，直接操作真实 DOM 比操作虚拟 DOM 更高效，省去了虚拟 DOM 的计算、对比开销。</p><h2 id="虚拟-dom-的解析过程-1" tabindex="-1">虚拟 DOM 的解析过程 <a class="header-anchor" href="#虚拟-dom-的解析过程-1" aria-label="Permalink to &quot;虚拟 DOM 的解析过程&quot;">​</a></h2><ul><li>首先对将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 <code>TagName</code>、<code>props</code> 和 <code>Children</code> 这些属性。然后将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。</li><li>当页面的状态发生改变，需要对页面的 DOM 的结构进行调整的时候，首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。</li><li>最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。</li></ul><h2 id="对虚拟-dom-的理解-1" tabindex="-1">对虚拟 DOM 的理解？ <a class="header-anchor" href="#对虚拟-dom-的理解-1" aria-label="Permalink to &quot;对虚拟 DOM 的理解？&quot;">​</a></h2><ul><li>从本质上来说，Virtual Dom 是一个 JavaScript 对象，通过对象的方式来表示 DOM 结构。将页面的状态抽象为 JS 对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。通过事务处理机制，将多次 DOM 修改的结果一次性的更新到页面上，从而有效的减少页面渲染的次数，减少修改 DOM 的重绘重排次数，提高渲染性能。</li><li>虚拟 DOM 是对 DOM 的抽象，这个对象是更加轻量级的对 DOM 的描述。它设计的最初目的，就是更好的跨平台，比如 Node.js 就没有 DOM，如果想实现 SSR，那么一个方式就是借助虚拟 DOM，因为虚拟 DOM 本身是 js 对象。 在代码渲染到页面之前，vue 会把代码转换成一个对象（虚拟 DOM）。以对象的形式来描述真实 DOM 结构，最终渲染到页面。在每次数据发生变化前，虚拟 DOM 都会缓存一份，变化之时，现在的虚拟 DOM 会与缓存的虚拟 DOM 进行比较。在 vue 内部封装了 diff 算法，通过这个算法来进行比较，渲染时修改改变的变化，原先没有发生改变的通过原先的数据进行渲染。</li><li>另外现代前端框架的一个基本要求就是无须手动操作 DOM，一方面是因为手动操作 DOM 无法保证程序性能，多人协作的项目中如果 review 不严格，可能会有开发者写出性能较低的代码，另一方面更重要的是省略手动 DOM 操作可以大大提高开发效率。</li></ul><h2 id="虚拟-dom-的解析过程-2" tabindex="-1">虚拟 DOM 的解析过程 <a class="header-anchor" href="#虚拟-dom-的解析过程-2" aria-label="Permalink to &quot;虚拟 DOM 的解析过程&quot;">​</a></h2><ul><li>首先对将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。</li><li>当页面的状态发生改变，需要对页面的 DOM 的结构进行调整的时候，首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。</li><li>最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。</li></ul><h2 id="既然-vue-通过数据劫持可以精准探测数据的变化-为什么还需要虚拟-dom-进行-diff-检测差异" tabindex="-1">既然 Vue 通过数据劫持可以精准探测数据的变化，为什么还需要虚拟 DOM 进行 diff 检测差异？ <a class="header-anchor" href="#既然-vue-通过数据劫持可以精准探测数据的变化-为什么还需要虚拟-dom-进行-diff-检测差异" aria-label="Permalink to &quot;既然 Vue 通过数据劫持可以精准探测数据的变化，为什么还需要虚拟 DOM 进行 diff 检测差异？&quot;">​</a></h2><p>Vue 内部设计原因导致的，vue 设计的是每个组件一个 watcher（渲染 watcher），没有采用一个属性对于一个 watcher，这样会导致大量 watcher 的产生，造成内存浪费，如果颗粒度过低也会无法精准检测变化。所以采用 diff 算法+组件级 watcher。</p><p>现代前端框架有两种方式侦测变化，一种是 pull，一种是 push。</p><p><strong>pull</strong></p><p>其代表为 <em>React</em>，我们可以回忆一下 <em>React</em> 是如何侦测到变化的。</p><p>我们通常会用 <em>setState API</em> 显式更新,然后 <em>React</em> 会进行一层层的 <em>Virtual Dom Diff</em> 操作找出差异，然后 <em>Patch</em> 到 <em>DOM</em> 上，<em>React</em> 从一开始就不知道到底是哪发生了变化,只是知道「有变化了」,然后再进行比较暴力的 <code>diff</code> 操作查找「哪发生变化了」，另外一个代表就是 <em>Angular</em> 的脏检查操作。</p><p><strong>push</strong></p><p><em>Vue</em> 的响应式系统则是 <em>push</em> 的代表，当 <em>Vue</em> 程序初始化的时候就会对数据 <em>data</em> 进行依赖的收集，一但数据发生变化，响应式系统就会立刻得知，因此 <em>Vue</em> 是一开始就知道是「在哪发生变化了」</p><p>但是这又会产生一个问题，通常绑定一个数据就需要一个 <em>Watcher</em>，一但我们的绑定细粒度过高就会产生大量的 <em>Watcher</em>，这会带来内存以及依赖追踪的开销，而细粒度过低会无法精准侦测变化，因此 <em>Vue</em> 的设计是选择中等细粒度的方案，在组件级别进行 <em>push</em> 侦测的方式，也就是那套响应式系统。</p><p>通常我们会第一时间侦测到发生变化的组件,然后在组件内部进行 <em>Virtual Dom Diff</em> 获取更加具体的差异，而 <em>Virtual Dom Diff</em> 则是 <em>pull</em> 操作，<em>Vue</em> 是 <em>push + pull</em> 结合的方式进行变化侦测的。</p><h2 id="vue-中-key-的作用-1" tabindex="-1">Vue 中 key 的作用？ <a class="header-anchor" href="#vue-中-key-的作用-1" aria-label="Permalink to &quot;Vue 中 key 的作用？&quot;">​</a></h2><p><code>key</code>的作用主要是<code>为了更加高效的更新虚拟 DOM</code>。</p><p>Vue 判断两个节点是否相同时，主要是判断两者的<code>key</code>和<code>元素类型tag</code>。因此，如果不设置<code>key</code> ，它的值就是 undefined，则可能永远认为这是两个相同的节点，只能去做更新操作，将造成大量的 DOM 更新操作。</p><p>使用 key 来给每个节点做一个唯一标识</p><p>key 的作用主要是为了高效的更新虚拟 DOM。另外 vue 中在使用相同标签名元素的过渡切换时，也会使用到 key 属性，其目的也是为了让 vue 可以区分它们，否则 vue 只会替换其内部属性而不会触发过渡效果。</p><h2 id="vue-中的-key" tabindex="-1">Vue 中的 Key <a class="header-anchor" href="#vue-中的-key" aria-label="Permalink to &quot;Vue 中的 Key&quot;">​</a></h2><h3 id="key-的作用" tabindex="-1">Key 的作用 <a class="header-anchor" href="#key-的作用" aria-label="Permalink to &quot;Key 的作用&quot;">​</a></h3><p><code>key</code>主要是为了更高效的更新虚拟 DOM：它会告诉<code>diff</code>算法，在更改前后它们是同一个 DOM 节点，这样在<code>diff</code>新旧<code>vnodes</code>时更高效。</p><ul><li><p>如果不使用 <code>key</code>，它默认使用“就地复用”的策略。而使用 <code>key</code> 时，它会基于 <code>key</code> 的变化重新排列元素顺序，并且会移除 <code>key</code> 不存在的元素。</p></li><li><p>它也可以用于强制替换元素/组件而不是重复使用它。当你遇到如下场景时它可能会很有用：</p><ul><li>完整地触发组件的生命周期钩子</li><li>触发过渡（给<code>transition</code>内的元素加上<code>key</code>，通过改变<code>key</code>来触发过度）</li></ul></li><li><p>在 <code>Vue</code> 源码的判断中，<code>Diff</code>时去判断两个节点是否相同时主要判断两者的<code>key</code>和<code>元素类型</code>（<code>tag</code>），因此如果不设置<code>key</code>，它的值就是 <code>undefined</code>；</p></li></ul><h3 id="什么是就地复用-就地更新" tabindex="-1">什么是就地复用 &amp; 就地更新 <a class="header-anchor" href="#什么是就地复用-就地更新" aria-label="Permalink to &quot;什么是就地复用 &amp; 就地更新&quot;">​</a></h3><p><a href="https://v2.cn.vuejs.org/v2/guide/list.html%23%E7%BB%B4%E6%8A%A4%E7%8A%B6%E6%80%81" target="_blank" rel="noreferrer">Vue2-就地更新</a></p><p>当 <code>Vue</code> 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用“<code>就地复用</code>”的策略。如果数据项的顺序被改变，<code>Vue</code> 将不会移动 <code>DOM</code> 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p><blockquote><p>这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。</p></blockquote><h3 id="使用-key-的注意点" tabindex="-1">使用 key 的注意点 <a class="header-anchor" href="#使用-key-的注意点" aria-label="Permalink to &quot;使用 key 的注意点&quot;">​</a></h3><ul><li>有相同父元素的子元素必须有<code>独特的key</code>。重复的 <code>key</code> 会造成渲染错误。</li><li><code>v-for</code> 循环中尽量不要使用 <code>index</code> 作为 <code>key</code> 值</li></ul><h3 id="为什么不建议使用-index-作为-key-值" tabindex="-1">为什么不建议使用 index 作为 key 值 <a class="header-anchor" href="#为什么不建议使用-index-作为-key-值" aria-label="Permalink to &quot;为什么不建议使用 index 作为 key 值&quot;">​</a></h3><p>因为在数组中<code>key</code>的值会跟随数组发生改变（比如在数组中添加或删除元素、排序），而<code>key</code>值改变，<code>diff</code>算法就无法得知在更改前后它们是同一个<code>DOM</code>节点。会出现渲染问题。</p><h3 id="用-index-作为-key-值带来问题的例子" tabindex="-1">用 index 作为 key 值带来问题的例子 <a class="header-anchor" href="#用-index-作为-key-值带来问题的例子" aria-label="Permalink to &quot;用 index 作为 key 值带来问题的例子&quot;">​</a></h3><p><code>v-for</code>渲染三个输入框，用<code>index</code>作为 key 值，删除第二项，发现在视图上显示被删除的实际上是第三项，因为原本的<code>key</code>是<code>1,2,3</code>，删除后<code>key</code>为<code>1,2</code>，所以<code>3</code>被认为删除了</p><h2 id="vue-中-key-的作用-2" tabindex="-1">Vue 中 key 的作用 <a class="header-anchor" href="#vue-中-key-的作用-2" aria-label="Permalink to &quot;Vue 中 key 的作用&quot;">​</a></h2><p><code>key</code>的作用主要是为了高效的更新虚拟 DOM，其原理是<code>vue</code>在<code>patch</code>过程中通过<code>key</code>可以精准判断两个节点是否是同一个，从而避免频繁更新不同元素，减少<code>DOM</code>操作量，提高性能。</p><h2 id="你知道-vue-中-key-的作用和工作原理吗-说说你对它的理解。" tabindex="-1">你知道 vue 中 key 的作用和工作原理吗？说说你对它的理解。 <a class="header-anchor" href="#你知道-vue-中-key-的作用和工作原理吗-说说你对它的理解。" aria-label="Permalink to &quot;你知道 vue 中 key 的作用和工作原理吗？说说你对它的理解。&quot;">​</a></h2><p>vue 源码中找答案：<code>src\\core\\vdom\\patch.js</code> - <code>updateChildren()</code></p><p>测试代码如下：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;head&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;title&gt;03-key的作用及原理?&lt;/title&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/head&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;body&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;div id=&quot;demo&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;p v-for=&quot;item in items&quot; :key=&quot;item&quot;&gt;{{ item }}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;script src=&quot;../../dist/vue.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			// 创建实例</span></span>
<span class="line"><span style="color:#ABB2BF;">			const app = new Vue({</span></span>
<span class="line"><span style="color:#ABB2BF;">				el: &quot;#demo&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">				data: { items: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;] },</span></span>
<span class="line"><span style="color:#ABB2BF;">				mounted() {</span></span>
<span class="line"><span style="color:#ABB2BF;">					setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#ABB2BF;">						this.items.splice(2, 0, &quot;f&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">					}, 2000);</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/body&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/html&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>上面案例重现的是以下过程</p><p><img src="`+C+'" alt="案例重现的是以下过程1"></p><p>不使用 key</p><p><img src="'+E+`" alt="案例重现的是以下过程2"></p><p>使用 key</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 首次循环patch A</span></span>
<span class="line"><span style="color:#E5C07B;">A</span><span style="color:#E5C07B;"> B</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"><span style="color:#E5C07B;">A</span><span style="color:#E5C07B;"> B</span><span style="color:#E5C07B;"> F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第2次循环patch B</span></span>
<span class="line"><span style="color:#E5C07B;">B</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"><span style="color:#E5C07B;">B</span><span style="color:#E5C07B;"> F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第3次循环patch E</span></span>
<span class="line"><span style="color:#E5C07B;">C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"><span style="color:#E5C07B;">F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第4次循环patch D</span></span>
<span class="line"><span style="color:#E5C07B;">C</span><span style="color:#E5C07B;"> D</span></span>
<span class="line"><span style="color:#E5C07B;">F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第5次循环patch C</span></span>
<span class="line"><span style="color:#E5C07B;">C</span></span>
<span class="line"><span style="color:#E5C07B;">F</span><span style="color:#E5C07B;"> C</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// oldCh全部处理结束，newCh中剩下的F，创建F并插入到C前面</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>结论</p><ol><li>key 的作用主要是为了高效的更新虚拟 DOM，其原理是 vue 在 patch 过程中通过 key 可以精准判断两个节点是否是同一个，从而避免频繁更新不同元素，使得整个 patch 过程更加高效，减少 DOM 操作量，提高性能。</li><li>另外，若不设置 key 还可能在列表更新时引发一些隐蔽的 bug</li><li>vue 中在使用相同标签名元素的过渡切换时，也会使用到 key 属性，其目的也是为了让 vue 可以区分它们，否则 vue 只会替换其内部属性而不会触发过渡效果。</li></ol><h2 id="vue-中-key-的作用和原理" tabindex="-1">Vue 中 key 的作用和原理 <a class="header-anchor" href="#vue-中-key-的作用和原理" aria-label="Permalink to &quot;Vue 中 key 的作用和原理&quot;">​</a></h2><p>（1）key 的概念</p><ul><li>key 的特殊 attribute 主要用在 vue 的虚拟 DOM 算法，在新旧 nodes 比对时，辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素，并且尽可能的尝试就地修改/复用相同类型元素的算法</li><li>当 Vue 正在更新使用 v-for 渲染的元素列表时，他默认使用的是“就地更新”的策略。如果数据项的顺序被修改，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保他们在每个索引位置正确渲染</li></ul><p>（2）key 的作用</p><ul><li>Vue 在 patch 过程中，通过 key 可以判断两个虚拟节点是否是相同节点(可以复用老节点)</li><li>没有 key 会导致更新的时候出现问题</li><li>尽量不要使用索引来作为 key</li></ul><h2 id="v-for-的-key-是做什么的" tabindex="-1">v-for 的 key 是做什么的 <a class="header-anchor" href="#v-for-的-key-是做什么的" aria-label="Permalink to &quot;v-for 的 key 是做什么的&quot;">​</a></h2><p><code>key</code>的作用就是标识当前<code>VNode节点</code>，一般用于<code>v-for</code>中。使用<code>key</code>进行标识的元素，在进行<code>更新</code>操作时会将<code>更新前后两个key相同的元素</code>视作同一元素，进行对比，然后进行相应的更新操作，如果没有<code>key</code>，就只能按<code>顺序</code>进行对比，在<code>合理的场景使用合理的key</code>可以提升<code>更新时的渲染性能</code>。</p><h2 id="为什么不建议使用-index-作为-v-for-的-key" tabindex="-1">为什么不建议使用 index 作为 v-for 的 key <a class="header-anchor" href="#为什么不建议使用-index-作为-v-for-的-key" aria-label="Permalink to &quot;为什么不建议使用 index 作为 v-for 的 key&quot;">​</a></h2><p>比如说有以下代码：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;wrap&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">span</span><span style="color:#C678DD;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onMounted</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">onMounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unshift</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在第一次渲染时，渲染了 5 个 span 标签，它们的 key 分别为<code>0、1、2、3、4</code>。这时 v-for 遍历的数组<code>头部</code>插入了一项新的值，页面进行<code>更新</code>，渲染了 6 个 span 标签，它们的 key 变成了<code>0、1、2、3、4、5</code>，虽然新的<code>1、2、3、4、5</code>就是之前的<code>0、1、2、3、4</code>，但是在进行更新时，会拿<code>key</code>相同的去对比，这样一来就变成了<code>旧的1和新的1（相当于旧的0）</code>、<code>旧的2和新的2（相当于旧的1）</code>......以此类推，明明本来只是<code>新增了一个节点，其它节点都不用改变</code>，但是现在却变成了<code>每个节点都需要更新</code>，影响了渲染性能。这也是为什么不提倡使用<code>索引值index</code>作为 key 的原因，因为它<code>并没有对更新时的渲染起到任何优化作用</code>。</p><h2 id="vue-中-diff-算法原理" tabindex="-1">Vue 中 diff 算法原理 <a class="header-anchor" href="#vue-中-diff-算法原理" aria-label="Permalink to &quot;Vue 中 diff 算法原理&quot;">​</a></h2><p>（1）diff 概念</p><p>vue 基于虚拟 DOM 来做更新。diff 的核心就是比较两个虚拟节点的差异，Vue 的 diff 算法是平级比较，不会考虑跨级比较的情况。内部采用深度递归的方式 + 双指针的方式进行比较。</p><p>（2）diff 比较流程</p><ol><li>先比较是否有相同节点：key 标签</li><li>相同节点比较属性，并复用老节点（将老的虚拟 dom 复用给新的虚拟节点 dom）</li><li>比较子节点，考虑老节点和新节点的子节点的情况。 <ol><li>老节点有子节点，新节点没有子节点：直接删除</li><li>老节点没有子节点，新节点有子节点：直接插入</li><li>老节点有子节点，新节点有子节点：更新子节点 updateChildren</li></ol></li><li>优化比较：头头、尾尾、头尾、尾头</li><li>对比查找进行复用</li></ol><p>vue3 中采用最长递增子序列来实现 diff 优化。</p><ul><li>最长递增子序列：在一个给定的数值序列中，找到一个子序列，使得这个子序列元素的数值依次递增，并且这个子序列的长度尽可能的大。最长递增子序列的元素在原序列中不一定是连续的。</li></ul><h2 id="怎么理解-vue-中的-diff-算法" tabindex="-1">怎么理解 vue 中的 diff 算法？ <a class="header-anchor" href="#怎么理解-vue-中的-diff-算法" aria-label="Permalink to &quot;怎么理解 vue 中的 diff 算法？&quot;">​</a></h2><p><img src="`+h+`" alt="vue中的diff算法"></p><p>源码分析 1：必要性，<code>core/instance/lifecycle.js</code> - <code>mountComponent()</code></p><ul><li>组件中可能存在很多个 data 中的 key 使用</li></ul><p>源码分析 2：执行方式，<code>core/vdom/patch.js</code> - <code>patchVnode()</code></p><ul><li>patchVnode 是 diff 发生的地方，整体策略：深度优先，同层比较</li></ul><p>源码分析 3：高效性，<code>core/vdom/patch.js</code> - <code>updateChildren()</code></p><p>测试代码：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;head&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;title&gt;Vue源码剖析&lt;/title&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;script src=&quot;../../dist/vue.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/head&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;body&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;div id=&quot;demo&quot;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;h1&gt;虚拟DOM&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;p&gt;{{ foo }}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			// 创建实例</span></span>
<span class="line"><span style="color:#ABB2BF;">			const app = new Vue({</span></span>
<span class="line"><span style="color:#ABB2BF;">				el: &quot;#demo&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">				data: { foo: &quot;foo&quot; },</span></span>
<span class="line"><span style="color:#ABB2BF;">				mounted() {</span></span>
<span class="line"><span style="color:#ABB2BF;">					setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#ABB2BF;">						this.foo = &quot;fooooo&quot;;</span></span>
<span class="line"><span style="color:#ABB2BF;">					}, 1000);</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/script&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/body&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/html&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>总结 1.diff 算法是虚拟 DOM 技术的必然产物：通过新旧虚拟 DOM 作对比（即 diff），将变化的地方更新在真实 DOM 上；另外，也需要 diff 高效的执行对比过程，从而降低时间复杂度为 O(n^3)。</p><p>2.vue 2.x 中为了降低 Watcher 粒度，每个组件只有一个 Watcher 与之对应，只有引入 diff 才能精确找到发生变化的地方。</p><p>3.vue 中 diff 执行的时刻是组件实例执行其更新函数时，它会比对上一次渲染结果 oldVnode 和新的渲染结果 newVnode，此过程称为 patch。</p><p>4.diff 过程整体遵循深度优先、同层比较的策略；两个节点之间比较会根据它们是否拥有子节点或者文本节点做不同操作；比较两组子节点是算法的重点，首先假设头尾节点可能相同做 4 次比对尝试，如果没有找到相同节点才按照通用方式遍历查找，查找结束再按情况处理剩下的节点；借助 key 通常可以非常精确找到相同节点，因此整个 patch 过程非常高效。</p><h2 id="说说你对虚拟-dom-的理解" tabindex="-1">说说你对虚拟 DOM 的理解？ <a class="header-anchor" href="#说说你对虚拟-dom-的理解" aria-label="Permalink to &quot;说说你对虚拟 DOM 的理解？&quot;">​</a></h2><h3 id="分析-3" tabindex="-1">分析 <a class="header-anchor" href="#分析-3" aria-label="Permalink to &quot;分析&quot;">​</a></h3><p>现有框架几乎都引入了虚拟 DOM 来对真实 DOM 进行抽象，也就是现在大家所熟知的 VNode 和 VDOM，那么为什么需要引入虚拟 DOM 呢？围绕这个疑问来解答即可！</p><h3 id="思路-2" tabindex="-1">思路 <a class="header-anchor" href="#思路-2" aria-label="Permalink to &quot;思路&quot;">​</a></h3><ol><li>vdom 是什么</li><li>引入 vdom 的好处</li><li>vdom 如何生成，又如何成为 dom</li><li>在后续的 diff 中的作用</li></ol><hr><h3 id="回答范例-3" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-3" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><ol><li><p>虚拟 dom 顾名思义就是虚拟的 dom 对象，它本身就是一个 <code>JavaScript</code> 对象，只不过它是通过不同的属性去描述一个视图结构。</p></li><li><p>通过引入 vdom 我们可以获得如下好处：</p><p><strong>将真实元素节点抽象成 VNode，有效减少直接操作 dom 次数，从而提高程序性能</strong></p><ul><li>直接操作 dom 是有限制的，比如：diff、clone 等操作，一个真实元素上有许多的内容，如果直接对其进行 diff 操作，会去额外 diff 一些没有必要的内容；同样的，如果需要进行 clone 那么需要将其全部内容进行复制，这也是没必要的。但是，如果将这些操作转移到 JavaScript 对象上，那么就会变得简单了。</li><li>操作 dom 是比较昂贵的操作，频繁的 dom 操作容易引起页面的重绘和回流，但是通过抽象 VNode 进行中间处理，可以有效减少直接操作 dom 的次数，从而减少页面重绘和回流。</li></ul><p><strong>方便实现跨平台</strong></p><ul><li>同一 VNode 节点可以渲染成不同平台上的对应的内容，比如：渲染在浏览器是 dom 元素节点，渲染在 Native( iOS、Android) 变为对应的控件、可以实现 SSR 、渲染到 WebGL 中等等</li><li>Vue3 中允许开发者基于 VNode 实现自定义渲染器（renderer），以便于针对不同平台进行渲染。</li></ul></li></ol><hr><ol><li><p>vdom 如何生成？在 vue 中我们常常会为组件编写模板 - template， 这个模板会被编译器 - compiler 编译为渲染函数，在接下来的挂载（mount）过程中会调用 render 函数，返回的对象就是虚拟 dom。但它们还不是真正的 dom，所以会在后续的 patch 过程中进一步转化为 dom。</p><p><img src="`+n+'" alt="image-20240518013854544"></p></li><li><p>挂载过程结束后，vue 程序进入更新流程。如果某些响应式数据发生变化，将会引起组件重新 render，此时就会生成新的 vdom，和上一次的渲染结果 diff 就能得到变化的地方，从而转换为最小量的 dom 操作，高效更新视图。</p></li></ol><hr><h3 id="知其所以然-3" tabindex="-1">知其所以然 <a class="header-anchor" href="#知其所以然-3" aria-label="Permalink to &quot;知其所以然&quot;">​</a></h3><p>vnode 定义：</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/vnode.ts%23L127-L128" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><p>观察渲染函数：21-vdom/test-render-v3.html</p><p>创建 vnode：</p><ul><li>createElementBlock:</li></ul><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/vnode.ts%23L291-L292" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><ul><li>createVnode:</li></ul><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/vnode.ts%23L486-L487" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><ul><li>首次调用时刻：</li></ul><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiCreateApp.ts%23L283-L284" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><hr><p>mount:</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L1171-L1172" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><p>调试 mount 过程：mountComponent</p><p>21-vdom/test-render-v3.html</p><hr><h2 id="你了解-diff-算法吗" tabindex="-1">你了解 diff 算法吗？ <a class="header-anchor" href="#你了解-diff-算法吗" aria-label="Permalink to &quot;你了解 diff 算法吗？&quot;">​</a></h2><h3 id="分析-4" tabindex="-1">分析 <a class="header-anchor" href="#分析-4" aria-label="Permalink to &quot;分析&quot;">​</a></h3><p>必问题目，涉及 vue 更新原理，比较考查理解深度。</p><hr><h3 id="思路-3" tabindex="-1">思路 <a class="header-anchor" href="#思路-3" aria-label="Permalink to &quot;思路&quot;">​</a></h3><ol><li>diff 算法是干什么的</li><li>它的必要性</li><li>它何时执行</li><li>具体执行方式</li><li>拔高：说一下 vue3 中的优化</li></ol><hr><h3 id="回答范例-4" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-4" aria-label="Permalink to &quot;回答范例&quot;">​</a></h3><p>1.Vue 中的 diff 算法称为 patching 算法，它由 Snabbdom 修改而来，虚拟 DOM 要想转化为真实 DOM 就需要通过 patch 方法转换。</p><p>2.最初 Vue1.x 视图中每个依赖均有更新函数对应，可以做到精准更新，因此并不需要虚拟 DOM 和 patching 算法支持，但是这样粒度过细导致 Vue1.x 无法承载较大应用；Vue 2.x 中为了降低 Watcher 粒度，每个组件只有一个 Watcher 与之对应，此时就需要引入 patching 算法才能精确找到发生变化的地方并高效更新。</p><p>3.vue 中 diff 执行的时刻是组件内响应式数据变更触发实例执行其更新函数时，更新函数会再次执行 render 函数获得最新的虚拟 DOM，然后执行 patch 函数，并传入新旧两次虚拟 DOM，通过比对两者找到变化的地方，最后将其转化为对应的 DOM 操作。</p><hr><p>4.patch 过程是一个递归过程，遵循深度优先、同层比较的策略；以 vue3 的 patch 为例：</p><ul><li>首先判断两个节点是否为相同同类节点，不同则删除重新创建</li><li>如果双方都是文本则更新文本内容</li><li>如果双方都是元素节点则递归更新子元素，同时更新元素属性</li><li>更新子节点时又分了几种情况： <ul><li>新的子节点是文本，老的子节点是数组则清空，并设置文本；</li><li>新的子节点是文本，老的子节点是文本则直接更新文本；</li><li>新的子节点是数组，老的子节点是文本则清空文本，并创建新子节点数组中的子元素；</li><li>新的子节点是数组，老的子节点也是数组，那么比较两组子节点，更新细节 blabla</li></ul></li></ul><ol><li>vue3 中引入的更新策略：编译期优化 patchFlags、block 等</li></ol><hr><h3 id="知其所以然-4" tabindex="-1">知其所以然 <a class="header-anchor" href="#知其所以然-4" aria-label="Permalink to &quot;知其所以然&quot;">​</a></h3><p>patch 关键代码</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L354-L355" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><p>调试 <a href="https://link.juejin.cn?target=text-v3.html" target="_blank" rel="noreferrer">test-v3.html</a></p><hr><h2 id="能说说-key-的作用吗" tabindex="-1">能说说 key 的作用吗？ <a class="header-anchor" href="#能说说-key-的作用吗" aria-label="Permalink to &quot;能说说 key 的作用吗？&quot;">​</a></h2><h3 id="分析-5" tabindex="-1">分析： <a class="header-anchor" href="#分析-5" aria-label="Permalink to &quot;分析：&quot;">​</a></h3><p>这是一道特别常见的问题，主要考查大家对虚拟 DOM 和 patch 细节的掌握程度，能够反映面试者理解层次。</p><hr><h3 id="思路分析" tabindex="-1">思路分析： <a class="header-anchor" href="#思路分析" aria-label="Permalink to &quot;思路分析：&quot;">​</a></h3><ol><li>给出结论，key 的作用是用于优化 patch 性能</li><li>key 的必要性</li><li>实际使用方式</li><li>总结：可从源码层面描述一下 vue 如何判断两个节点是否相同</li></ol><hr><h3 id="回答范例-5" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-5" aria-label="Permalink to &quot;回答范例：&quot;">​</a></h3><ol><li>key 的作用主要是为了更高效的更新虚拟 DOM。</li><li>vue 在 patch 过程中<strong>判断两个节点是否是相同节点是 key 是一个必要条件</strong>，渲染一组列表时，key 往往是唯一标识，所以如果不定义 key 的话，vue 只能认为比较的两个节点是同一个，哪怕它们实际上不是，这导致了频繁更新元素，使得整个 patch 过程比较低效，影响性能。</li><li>实际使用中在渲染一组列表时 key 必须设置，而且必须是唯一标识，应该避免使用数组索引作为 key，这可能导致一些隐蔽的 bug；vue 中在使用相同标签元素过渡切换时，也会使用 key 属性，其目的也是为了让 vue 可以区分它们，否则 vue 只会替换其内部属性而不会触发过渡效果。</li><li>从源码中可以知道，vue 判断两个节点是否相同时主要判断两者的 key 和元素类型等，因此如果不设置 key，它的值就是 undefined，则可能永远认为这是两个相同节点，只能去做更新操作，这造成了大量的 dom 更新操作，明显是不可取的。</li></ol><hr><h3 id="知其所以然-5" tabindex="-1">知其所以然 <a class="header-anchor" href="#知其所以然-5" aria-label="Permalink to &quot;知其所以然&quot;">​</a></h3><p>上面案例重现的是以下过程</p><p><img src="'+a+`" alt="image-20240326181612327"></p><p>如果使用 key</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 首次循环patch A</span></span>
<span class="line"><span style="color:#E5C07B;">A</span><span style="color:#E5C07B;"> B</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"><span style="color:#E5C07B;">A</span><span style="color:#E5C07B;"> B</span><span style="color:#E5C07B;"> F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第2次循环patch B</span></span>
<span class="line"><span style="color:#E5C07B;">B</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"><span style="color:#E5C07B;">B</span><span style="color:#E5C07B;"> F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第3次循环patch E</span></span>
<span class="line"><span style="color:#E5C07B;">C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"><span style="color:#E5C07B;">F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第4次循环patch D</span></span>
<span class="line"><span style="color:#E5C07B;">C</span><span style="color:#E5C07B;"> D</span></span>
<span class="line"><span style="color:#E5C07B;">F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第5次循环patch C</span></span>
<span class="line"><span style="color:#E5C07B;">C</span></span>
<span class="line"><span style="color:#E5C07B;">F</span><span style="color:#E5C07B;"> C</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// oldCh全部处理结束，newCh中剩下的F，创建F并插入到C前面</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><hr><p>源码中找答案：</p><p>判断是否为相同节点</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/vnode.ts%23L342-L343" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><p>更新时的处理</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L1752-L1753" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><hr><p>如果使用 key</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 首次循环patch A</span></span>
<span class="line"><span style="color:#E5C07B;">A</span><span style="color:#E5C07B;"> B</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"><span style="color:#E5C07B;">A</span><span style="color:#E5C07B;"> B</span><span style="color:#E5C07B;"> F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第2次循环patch B</span></span>
<span class="line"><span style="color:#E5C07B;">B</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"><span style="color:#E5C07B;">B</span><span style="color:#E5C07B;"> F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第3次循环patch E</span></span>
<span class="line"><span style="color:#E5C07B;">C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"><span style="color:#E5C07B;">F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span><span style="color:#E5C07B;"> E</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第4次循环patch D</span></span>
<span class="line"><span style="color:#E5C07B;">C</span><span style="color:#E5C07B;"> D</span></span>
<span class="line"><span style="color:#E5C07B;">F</span><span style="color:#E5C07B;"> C</span><span style="color:#E5C07B;"> D</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第5次循环patch C</span></span>
<span class="line"><span style="color:#E5C07B;">C</span></span>
<span class="line"><span style="color:#E5C07B;">F</span><span style="color:#E5C07B;"> C</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// oldCh全部处理结束，newCh中剩下的F，创建F并插入到C前面</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>源码中找答案：</p><p>判断是否为相同节点</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/vnode.ts%23L342-L343" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><p>更新时的处理</p><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts%23L1752-L1753" target="_blank" rel="noreferrer">github1s.com/vuejs/core/…</a></p><h2 id="diff-算法的原理" tabindex="-1">DIFF 算法的原理 <a class="header-anchor" href="#diff-算法的原理" aria-label="Permalink to &quot;DIFF 算法的原理&quot;">​</a></h2><p>在新老虚拟 DOM 对比时：</p><p>首先，对比节点本身，判断是否为同一节点，如果不为相同节点，则删除该节点重新创建节点进行替换</p><p>如果为相同节点，进行 patchVnode，判断如何对该节点的子节点进行处理，先判断一方有子节点一方没有子节点的情况(如果新的 children 没有子节点，将旧的子节点移除)</p><p>比较如果都有子节点，则进行 updateChildren，判断如何对这些新老节点的子节点进行操作（diff 核心）。</p><p>匹配时，找到相同的子节点，递归比较子节点</p><p>在 diff 中，只对同层的子节点进行比较，放弃跨级的节点比较，使得时间复杂从 O(n 3)降低值 O(n)，也就是说，只有当新旧 children</p><p>都为多个子节点时才需要用核心的 Diff 算法进行同层级比较。</p><h2 id="diff-算法原理" tabindex="-1">DIFF 算法原理 <a class="header-anchor" href="#diff-算法原理" aria-label="Permalink to &quot;DIFF 算法原理&quot;">​</a></h2><p><code>diff</code>的目的是找出差异，最小化的更新视图。 <code>diff</code>算法发生在视图更新阶段，当数据发生变化的时候，<code>diff</code>会对新旧虚拟 DOM 进行对比，只渲染有变化的部分。</p><ol><li><p>对比是不是同类型标签，不是同类型直接替换</p></li><li><p>如果是同类型标签，执行<code>patchVnode</code>方法，判断新旧<code>vnode</code>是否相等。如果相等，直接返回。</p></li><li><p>新旧 <code>vnode</code>不相等，需要比对新旧节点，比对原则是以新节点为主，主要分为以下几种。</p><ol><li><code>newVnode</code> 和 <code>oldVnode</code>都有文本节点，用新节点替换旧节点。</li><li><code>newVnode</code>有子节点，<code>oldVnode</code>没有，新增<code>newVnode</code>的子节点。</li><li><code>newVnode</code>没有子节点，<code>oldVnode</code>有子节点，删除<code>oldVnode</code>中的子节点。</li></ol></li><li><p><code>newVnode</code>和<code>oldVnode</code>都有子节点，通过<code>updateChildren</code>对比子节点。</p></li></ol><p><strong>双端 diff</strong></p><p><code>updateChildren</code>方法用来对比子节点是否相同，将新旧节点同级进行比对，减少比对次数。会创建 4 个指针，分别指向新旧两个节点的首尾，首和尾指针向中间移动。</p><p>每次对比下两个头指针指向的节点、两个尾指针指向的节点，头和尾指向的节点，是不是 key 是一样的，也就是可复用的。如果是重复的，直接 patch 更新一下，如果是头尾节点，需要进行移动位置，结果以新节点的为主。</p><p>如果都没有可以复用的节点，就从旧的<code>vnode</code>中查找，然后进行移动，没有找到就插入一个新节点。</p><p>当比对结束后，此时新节点还有剩余，就批量增加，如果旧节点有剩余就批量删除。</p><p><img src="`+f+'" alt="image-20240326193524381"></p><h2 id="怎么看-vue-的-diff-算法" tabindex="-1">怎么看 Vue 的 diff 算法 <a class="header-anchor" href="#怎么看-vue-的-diff-算法" aria-label="Permalink to &quot;怎么看 Vue 的 diff 算法&quot;">​</a></h2><p>diff 算法是一种通过同层的树节点进行比较的高效算法</p><p>diff 整体策略为：深度优先，同层比较</p><p>比较只会在同层级进行，不会跨层级比较</p><p>比较的过程中，循环从两边向中间收拢</p><ul><li>当数据发生改变时，订阅者 watcher 就会调用 patch 给真实的 DOM 打补丁</li><li>通过 isSameVnode 进行判断，相同则调用 patchVnode 方法</li><li>patchVnode 做了以下操作： <ul><li>找到对应的真实 dom，称为 el</li><li>如果都有都有文本节点且不相等，将 el 文本节点设置为 Vnode 的文本节点</li><li>如果 oldVnode 有子节点而 VNode 没有，则删除 el 子节点</li><li>如果 oldVnode 没有子节点而 VNode 有，则将 VNode 的子节点真实化后添加到 el</li><li>如果两者都有子节点，则执行 updateChildren 函数比较子节点</li></ul></li><li>updateChildren 主要做了以下操作： <ul><li>设置新旧 VNode 的头尾指针</li><li>新旧头尾指针进行比较，循环向中间靠拢，根据情况调用 patchVnode 进行 patch 重复流程、调用 createElem 创建一个新节点，从哈希表寻找 key 一致的 VNode 节点再分情况操作</li></ul></li></ul><h2 id="vue-的-diff-算法详细分析" tabindex="-1">Vue 的 diff 算法详细分析 <a class="header-anchor" href="#vue-的-diff-算法详细分析" aria-label="Permalink to &quot;Vue 的 diff 算法详细分析&quot;">​</a></h2><p><strong>1. 是什么</strong></p><p><code>diff</code> 算法是一种通过同层的树节点进行比较的高效算法</p><p>其有两个特点：</p><ul><li>比较只会在同层级进行, 不会跨层级比较</li><li>在 diff 比较的过程中，循环从两边向中间比较</li></ul><p><code>diff</code> 算法在很多场景下都有应用，在 <code>vue</code> 中，作用于虚拟 <code>dom</code> 渲染成真实 <code>dom</code> 的新旧 <code>VNode</code> 节点比较</p><p><strong>2. 比较方式</strong></p><p><code>diff</code>整体策略为：深度优先，同层比较</p><p>1.比较只会在同层级进行, 不会跨层级比较</p><p><img src="'+D+'" alt="image-20240326165439062"></p><p>2.比较的过程中，循环从两边向中间收拢</p><p><img src="'+v+'" alt="image-20240326165531589"></p><p>下面举个<code>vue</code>通过<code>diff</code>算法更新的例子：</p><p>新旧<code>VNode</code>节点如下图所示：</p><p><img src="'+g+'" alt="image-20240326165554937"></p><p>第一次循环后，发现旧节点 D 与新节点 D 相同，直接复用旧节点 D 作为<code>diff</code>后的第一个真实节点，同时旧节点<code>endIndex</code>移动到 C，新节点的 <code>startIndex</code> 移动到了 C</p><p><img src="'+q+'" alt="image-20240326165623340"></p><p>第二次循环后，同样是旧节点的末尾和新节点的开头(都是 C)相同，同理，<code>diff</code> 后创建了 C 的真实节点插入到第一次创建的 D 节点后面。同时旧节点的 <code>endIndex</code> 移动到了 B，新节点的 <code>startIndex</code> 移动到了 E</p><p><img src="'+k+'" alt="image-20240326165651928"></p><p>第三次循环中，发现 E 没有找到，这时候只能直接创建新的真实节点 E，插入到第二次创建的 C 节点之后。同时新节点的 <code>startIndex</code> 移动到了 A。旧节点的 <code>startIndex</code> 和 <code>endIndex</code> 都保持不动</p><p><img src="'+x+'" alt="image-20240326165720203"></p><p>第四次循环中，发现了新旧节点的开头(都是 A)相同，于是 <code>diff</code> 后创建了 A 的真实节点，插入到前一次创建的 E 节点后面。同时旧节点的 <code>startIndex</code> 移动到了 B，新节点的<code>startIndex</code> 移动到了 B</p><p><img src="'+V+'" alt="image-20240326165736015"></p><p>第五次循环中，情形同第四次循环一样，因此 <code>diff</code> 后创建了 B 真实节点 插入到前一次创建的 A 节点后面。同时旧节点的 <code>startIndex</code>移动到了 C，新节点的 startIndex 移动到了 F</p><p><img src="'+P+'" alt="image-20240326165806861"></p><p>新节点的 <code>startIndex</code> 已经大于 <code>endIndex</code> 了，需要创建 <code>newStartIdx</code> 和 <code>newEndIdx</code> 之间的所有节点，也就是节点 F，直接创建 F 节点对应的真实节点放到 B 节点后面</p><p><img src="'+O+`" alt="image-20240326165825426"></p><p><strong>3. 原理分析</strong></p><p>当数据发生改变时，<code>set</code>方法会调用<code>Dep.notify</code>通知所有订阅者<code>Watcher</code>，订阅者就会调用<code>patch</code>给真实的<code>DOM</code>打补丁，更新相应的视图</p><p>源码位置：<code>src/core/vdom/patch.js</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">hydrating</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">removeOnly</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 没有新节点，直接执行destory钩子函数</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">)) </span><span style="color:#61AFEF;">invokeDestroyHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> isInitialPatch</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> insertedVnodeQueue</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">		isInitialPatch</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">		createElm</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 没有旧节点，直接用新节点生成dom元素</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> isRealElement</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeType</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isRealElement</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 判断旧节点和新节点自身一样，一致执行patchVnode</span></span>
<span class="line"><span style="color:#61AFEF;">			patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">removeOnly</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 否则直接销毁及旧节点，根据新节点生成dom元素</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isRealElement</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeType</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasAttribute</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SSR_ATTR</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">					oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeAttribute</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SSR_ATTR</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">					hydrating</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isTrue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">hydrating</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">hydrate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">						invokeInsertHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">						return</span><span style="color:#E06C75;"> oldVnode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#E06C75;">				oldVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> emptyNodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p><code>patch</code>函数前两个参数位为<code>oldVnode</code> 和 <code>Vnode</code> ，分别代表新的节点和之前的旧节点，主要做了四个判断：</p><ul><li>没有新节点，直接触发旧节点的<code>destory</code>钩子</li><li>没有旧节点，说明是页面刚开始初始化的时候，此时，根本不需要比较了，直接全是新建，所以只调用 <code>createElm</code></li><li>旧节点和新节点自身一样，通过 <code>sameVnode</code> 判断节点是否一样，一样时，直接调用 <code>patchVnode</code>去处理这两个节点</li><li>旧节点和新节点自身不一样，当两个节点不一样的时候，直接创建新节点，删除旧节点</li></ul><p>下面主要讲的是<code>patchVnode</code>部分</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">insertedVnodeQueue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">removeOnly</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果新旧节点一致，什么都不做</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldVnode</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> vnode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 让vnode.el引用到现在的真实dom，当el修改时，vnode.el会同步变化</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> elm</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 异步占位符</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isTrue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isAsyncPlaceholder</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">asyncFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">resolved</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">			hydrate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isAsyncPlaceholder</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果新旧都是静态节点，并且具有相同的key</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 当vnode是克隆节点或是v-once指令控制的节点时，只需要把oldVnode.elm和oldVnode.child都复制到vnode上</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 也不用再有其他操作</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#61AFEF;">		isTrue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isStatic</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF;">		isTrue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isStatic</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">		vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#61AFEF;">isTrue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isCloned</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#61AFEF;"> isTrue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isOnce</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">	) {</span></span>
<span class="line"><span style="color:#E5C07B;">		vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">componentInstance</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">componentInstance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isDef</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hook</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isDef</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> i</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prepatch</span><span style="color:#ABB2BF;">))) {</span></span>
<span class="line"><span style="color:#61AFEF;">		i</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> oldCh</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> ch</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isPatchable</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> cbs</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">update</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">cbs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">update</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hook</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isDef</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> i</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">update</span><span style="color:#ABB2BF;">))) </span><span style="color:#61AFEF;">i</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果vnode不是文本节点或者注释节点</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 并且都有子节点</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ch</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 并且子节点不完全一致，则调用updateChildren</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldCh</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> ch</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">				updateChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ch</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">removeOnly</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果只有新的vnode有子节点</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ch</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">)) </span><span style="color:#E5C07B;">nodeOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setTextContent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// elm已经引用了老的dom节点，在老的dom节点上添加子节点</span></span>
<span class="line"><span style="color:#61AFEF;">			addVnodes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ch</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ch</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果新vnode没有子节点，而vnode有子节点，直接删除老的oldCh</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">			removeVnodes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldCh</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果老节点是文本节点</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">			nodeOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setTextContent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果新vnode和老vnode是文本节点或注释节点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 但是vnode.text != oldVnode.text时，只需要更新vnode.elm的文本内容就可以</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#56B6C2;"> !==</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		nodeOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setTextContent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hook</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isDef</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> i</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">postpatch</span><span style="color:#ABB2BF;">))) </span><span style="color:#61AFEF;">i</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><p><strong><code>patchVnode</code>主要做了几个判断：</strong></p><ul><li>新节点是否是文本节点，如果是，则直接更新<code>dom</code>的文本内容为新节点的文本内容</li><li>新节点和旧节点如果都有子节点，则处理比较更新子节点</li><li>只有新节点有子节点，旧节点没有，那么不用比较了，所有节点都是全新的，所以直接全部新建就好了，新建是指创建出所有新<code>DOM</code>，并且添加进父节点</li><li>只有旧节点有子节点而新节点没有，说明更新后的页面，旧节点全部都不见了，那么要做的，就是把所有的旧节点删除，也就是直接把<code>DOM</code> 删除</li></ul><p>子节点不完全一致，则调用<code>updateChildren</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> updateChildren</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">parentElm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldCh</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newCh</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">insertedVnodeQueue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">removeOnly</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> oldStartIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#7F848E;font-style:italic;"> // 旧头索引</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> newStartIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#7F848E;font-style:italic;"> // 新头索引</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> oldEndIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> oldCh</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#7F848E;font-style:italic;"> // 旧尾索引</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> newEndIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> newCh</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#7F848E;font-style:italic;"> // 新尾索引</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">// oldVnode的第一个child</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">// oldVnode的最后一个child</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">// newVnode的第一个child</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> newEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">// newVnode的最后一个child</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> oldKeyToIdx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">idxInOld</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnodeToMove</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">refElm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // removeOnly is a special flag used only by &lt;transition-group&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // to ensure removed elements stay in correct relative positions</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // during leaving transitions</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> canMove</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">removeOnly</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果oldStartVnode和oldEndVnode重合，并且新的也都重合了，证明diff完了，循环结束</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> oldEndIdx</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> newStartIdx</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> newEndIdx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 如果oldVnode的第一个child不存在</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // oldStart索引右移</span></span>
<span class="line"><span style="color:#E06C75;">        oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">// Vnode has been moved left</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 如果oldVnode的最后一个child不存在</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // oldEnd索引左移</span></span>
<span class="line"><span style="color:#E06C75;">        oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // oldStartVnode和newStartVnode是同一个节点</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // patch oldStartVnode和newStartVnode， 索引左移，继续循环</span></span>
<span class="line"><span style="color:#61AFEF;">        patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">        oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">        newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // oldEndVnode和newEndVnode是同一个节点</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newEndVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // patch oldEndVnode和newEndVnode，索引右移，继续循环</span></span>
<span class="line"><span style="color:#61AFEF;">        patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">        oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">        newEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // oldStartVnode和newEndVnode是同一个节点</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newEndVnode</span><span style="color:#ABB2BF;">)) { </span><span style="color:#7F848E;font-style:italic;">// Vnode moved right</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // patch oldStartVnode和newEndVnode</span></span>
<span class="line"><span style="color:#61AFEF;">        patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果removeOnly是false，则将oldStartVnode.eml移动到oldEndVnode.elm之后</span></span>
<span class="line"><span style="color:#E06C75;">        canMove</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> nodeOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parentElm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">nodeOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextSibling</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldEndVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // oldStart索引右移，newEnd索引左移</span></span>
<span class="line"><span style="color:#E06C75;">        oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">        newEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 如果oldEndVnode和newStartVnode是同一个节点</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">)) { </span><span style="color:#7F848E;font-style:italic;">// Vnode moved left</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // patch oldEndVnode和newStartVnode</span></span>
<span class="line"><span style="color:#61AFEF;">        patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果removeOnly是false，则将oldEndVnode.elm移动到oldStartVnode.elm之前</span></span>
<span class="line"><span style="color:#E06C75;">        canMove</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> nodeOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parentElm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldEndVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // oldEnd索引左移，newStart索引右移</span></span>
<span class="line"><span style="color:#E06C75;">        oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">        newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 如果都不匹配</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldKeyToIdx</span><span style="color:#ABB2BF;">)) </span><span style="color:#E06C75;">oldKeyToIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createKeyToOldIdx</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 尝试在oldChildren中寻找和newStartVnode的具有相同的key的Vnode</span></span>
<span class="line"><span style="color:#E06C75;">        idxInOld</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">newStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">          ?</span><span style="color:#E06C75;"> oldKeyToIdx</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">newStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">          :</span><span style="color:#61AFEF;"> findIdxInOld</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果未找到，说明newStartVnode是一个新的节点</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">idxInOld</span><span style="color:#ABB2BF;">)) { </span><span style="color:#7F848E;font-style:italic;">// New element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // 创建一个新Vnode</span></span>
<span class="line"><span style="color:#61AFEF;">          createElm</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentElm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果找到了和newStartVnodej具有相同的key的Vnode，叫vnodeToMove</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">          vnodeToMove</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">idxInOld</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          /* istanbul ignore if */</span></span>
<span class="line"><span style="color:#C678DD;">          if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;production&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">vnodeToMove</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">            warn</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">              &#39;It seems there are duplicate keys that is causing an update error. &#39;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">              &#39;Make sure each v-for item has a unique key.&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">            )</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // 比较两个具有相同的key的新节点是否是同一个节点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          //不设key，newCh和oldCh只会进行头尾两端的相互比较，设key后，除了头尾两端的比较外，还会从用key生成的对象oldKeyToIdx中查找匹配的节点，所以为节点设置key可以更高效的利用dom。</span></span>
<span class="line"><span style="color:#C678DD;">          if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnodeToMove</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // patch vnodeToMove和newStartVnode</span></span>
<span class="line"><span style="color:#61AFEF;">            patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnodeToMove</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 清除</span></span>
<span class="line"><span style="color:#E06C75;">            oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">idxInOld</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> undefined</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 如果removeOnly是false，则将找到的和newStartVnodej具有相同的key的Vnode，叫vnodeToMove.elm</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 移动到oldStartVnode.elm之前</span></span>
<span class="line"><span style="color:#E06C75;">            canMove</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> nodeOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parentElm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">vnodeToMove</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // 如果key相同，但是节点不相同，则创建一个新的节点</span></span>
<span class="line"><span style="color:#ABB2BF;">          } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // same key but different element. treat as new element</span></span>
<span class="line"><span style="color:#61AFEF;">            createElm</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">insertedVnodeQueue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentElm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 右移</span></span>
<span class="line"><span style="color:#E06C75;">        newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br></div></div><p><strong><code>while</code>循环主要处理了以下五种情景：</strong></p><ul><li>当新老 <code>VNode</code> 节点的 <code>start</code> 相同时，直接 <code>patchVnode</code> ，同时新老 <code>VNode</code> 节点的开始索引都加 1</li><li>当新老 <code>VNode</code> 节点的 <code>end</code>相同时，同样直接 <code>patchVnode</code> ，同时新老 <code>VNode</code> 节点的结束索引都减 1</li><li>当老 <code>VNode</code> 节点的 <code>start</code> 和新 <code>VNode</code> 节点的 <code>end</code> 相同时，这时候在 <code>patchVnode</code> 后，还需要将当前真实 <code>dom</code> 节点移动到 <code>oldEndVnode</code> 的后面，同时老 <code>VNode</code> 节点开始索引加 1，新 <code>VNode</code> 节点的结束索引减 1</li><li>当老 <code>VNode</code> 节点的 <code>end</code> 和新 <code>VNode</code> 节点的 <code>start</code> 相同时，这时候在 <code>patchVnode</code> 后，还需要将当前真实 <code>dom</code> 节点移动到 <code>oldStartVnode</code> 的前面，同时老 <code>VNode</code> 节点结束索引减 1，新 <code>VNode</code> 节点的开始索引加 1</li><li>如果都不满足以上四种情形，那说明没有相同的节点可以复用，则会分为以下两种情况： <ul><li>从旧的 <code>VNode</code> 为 <code>key</code> 值，对应 <code>index</code> 序列为 <code>value</code> 值的哈希表中找到与 <code>newStartVnode</code> 一致 <code>key</code> 的旧的 <code>VNode</code> 节点，再进行<code>patchVnode</code>，同时将这个真实 <code>dom</code>移动到 <code>oldStartVnode</code> 对应的真实 <code>dom</code> 的前面</li><li>调用 <code>createElm</code> 创建一个新的 <code>dom</code> 节点放到当前 <code>newStartIdx</code> 的位置</li></ul></li></ul><p><strong>小结</strong></p><ul><li><p>当数据发生改变时，订阅者<code>watcher</code>就会调用<code>patch</code>给真实的<code>DOM</code>打补丁</p></li><li><p>通过<code>isSameVnode</code>进行判断，相同则调用<code>patchVnode</code>方法</p></li><li><p><code>patchVnode</code> 做了以下操作：</p><ul><li>找到对应的真实<code>dom</code>，称为<code>el</code></li><li>如果都有都有文本节点且不相等，将<code>el</code>文本节点设置为<code>Vnode</code>的文本节点</li><li>如果<code>oldVnode</code>有子节点而<code>VNode</code>没有，则删除<code>el</code>子节点</li><li>如果<code>oldVnode</code>没有子节点而<code>VNode</code>有，则将<code>VNode</code>的子节点真实化后添加到<code>el</code></li><li>如果两者都有子节点，则执行<code>updateChildren</code>函数比较子节点</li></ul></li><li><p><code>updateChildren</code>主要做了以下操作：</p><ul><li>设置新旧<code>VNode</code>的头尾指针</li><li>新旧头尾指针进行比较，循环向中间靠拢，根据情况调用<code>patchVnode</code>进行<code>patch</code>重复流程、调用<code>createElem</code>创建一个新节点，从哈希表寻找 <code>key</code>一致的<code>VNode</code> 节点再分情况操作</li></ul></li></ul><h2 id="vue3-中-diff-算法的认识" tabindex="-1">Vue3 中 diff 算法的认识 <a class="header-anchor" href="#vue3-中-diff-算法的认识" aria-label="Permalink to &quot;Vue3 中 diff 算法的认识&quot;">​</a></h2><h4 id="vue3-diff-算法详细介绍" tabindex="-1">Vue3 Diff 算法详细介绍 <a class="header-anchor" href="#vue3-diff-算法详细介绍" aria-label="Permalink to &quot;Vue3 Diff 算法详细介绍&quot;">​</a></h4><p>Vue3 中的 Diff 算法是一种用于计算虚拟 DOM 树差异的算法，它用于在更新数据时尽可能高效地更新真实 DOM。</p><p>DIFF 算法的核心思想是<strong>最小路径更新</strong>，即只更新虚拟 dom 中受数据影响的最小部分。实现步骤：</p><ol><li><p><strong>深度优先遍历虚拟 DOM 树</strong>：从根节点开始，深度优先遍历虚拟 DOM 树，同时每个节点生成一个唯一的 Key。</p></li><li><p><strong>比较新旧虚拟 DOM 树</strong>：使用 key 匹配新旧虚拟 DOM 树中的节点，如果节点的 key 相同，则比较它们的属性和子节点。如果节点的 key 不同，则认为该节点已删除或新增。</p></li><li><p>生成更新操作列表</p><p>：根据新旧虚拟 DOM 树的差异，生成一个更新操作列表。更新操作包括：</p><ul><li>插入节点</li><li>删除节点</li><li>更新节点属性</li><li>移动节点</li></ul></li><li><p><strong>应用更新操作</strong>：根据更新操作列表，更新真实 DOM。</p></li></ol><p>Vue3 Diff 算法相比 Vue2 中的 Diff 算法有以下改进：</p><ul><li><strong>更快</strong>: 由于采用了“最小路径更新”的思想，Vue3 Diff 算法可以只更新受数据更新影响的最小部分虚拟 DOM 树，因此速度更快。</li><li><strong>更少内存使用</strong>: Vue3 Diff 算法不再使用“最小公共子序列”算法来比较两个虚拟 DOM 树，因此内存使用更少。</li><li><strong>更易于理解</strong>: Vue3 Diff 算法的实现更加简单易懂。</li></ul><h4 id="vue3-diff-算法示例" tabindex="-1">Vue3 Diff 算法示例 <a class="header-anchor" href="#vue3-diff-算法示例" aria-label="Permalink to &quot;Vue3 Diff 算法示例&quot;">​</a></h4><p>以下示例演示了 Vue3 Diff 算法如何工作：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;p&gt;{{ count }}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">const app = Vue.createApp({ data() { return { count: 0, }; }, methods: {</span></span>
<span class="line"><span style="color:#ABB2BF;">increment() { this.count++; }, }, }); app.mount(&quot;#app&quot;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>初始状态下，虚拟 DOM 树如下：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;p&gt;0&lt;/p&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;button&gt;+&lt;/button&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当用户点击按钮时，<code>count</code> 值增加 1，虚拟 DOM 树变为：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;p&gt;1&lt;/p&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;button&gt;+&lt;/button&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Vue3 Diff 算法会计算两个虚拟 DOM 树之间的差异，并生成更新操作列表。更新操作列表如下：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;update&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;node&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;app&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;attr&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;textContent&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>根据更新操作列表，Vue3 会更新真实 DOM，将文本内容更新为 “1”。</p><p>总结：Vue3 Diff 算法是一种高效的虚拟 DOM 树差异计算算法，它可以使 Vue3 在更新数据时更加高效。</p><h2 id="vue2-和-vue3-的-diff-算法有什么不同" tabindex="-1">Vue2 和 Vue3 的 diff 算法有什么不同？ <a class="header-anchor" href="#vue2-和-vue3-的-diff-算法有什么不同" aria-label="Permalink to &quot;Vue2 和 Vue3 的 diff 算法有什么不同？&quot;">​</a></h2><p><code>diff</code>算法就是比较<code>新旧虚拟节点（VNode）</code>，对旧节点进行<code>更新、删除、新增</code>操作，然后更新到真实的 DOM 上。</p><ul><li>diff 算法只会<code>同层对比</code>，不会跨层级，比如一个旧节点不会与新节点的子节点去进行对比；</li><li>diff 算法一般都是从<code>两端开始对比</code>，逐渐向中间收拢；</li></ul><h3 id="_1-vue2-的-diff-算法流程" tabindex="-1">（1）Vue2 的 diff 算法流程 <a class="header-anchor" href="#_1-vue2-的-diff-算法流程" aria-label="Permalink to &quot;（1）Vue2 的 diff 算法流程&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> oldStartIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newStartIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> oldEndIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> oldCh</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newEndIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> newCh</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> oldKeyToIdx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">idxInOld</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnodeToMove</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">refElm</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol><li>设置各种<code>变量</code>，记录当前的头尾索引值和新旧节点的信息，如<code>新旧节点的头节点、新旧节点的尾节点、新旧节点的长度</code>等；</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> oldEndIdx</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> newStartIdx</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> newEndIdx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">    oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">// Vnode has been moved left</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">    oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol><li>当<code>旧节点头部索引值 &lt;= 旧节点总长度</code>并且<code>新节点头部当前索引值 &lt;= 新节点总长度</code>时，执行以下代码，第一个判断，如果<code>当旧节点头部索引值的VNode是空</code>，那就将<code>头部的VNode变为第1项</code>（如果第一项还是空，那就变成第二项...依此类推），如果<code>当旧节点尾部索引值的VNode为空</code>，旧将<code>尾部的VNode变为前一项</code>。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">    patchVnode</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">      oldStartVnode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newStartVnode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      insertedVnodeQueue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newCh</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newStartIdx</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#E06C75;">    oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">    newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol><li>如果<code>旧节点头部节点和新节点头部节点相同</code>，那么就会执行<code>patch</code>，进行更新，然后指针变化，开始第二个节点的对比；</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newEndVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">    patchVnode</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">      oldEndVnode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newEndVnode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      insertedVnodeQueue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newCh</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newEndIdx</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#E06C75;">    oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">    newEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol><li>如果头部不同，就会判断<code>旧节点尾部节点和新节点尾部节点是否相同</code>，如果相同，就执行<code>patch</code>，然后指针前移，开始前一个节点的对比；</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newEndVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Vnode moved right</span></span>
<span class="line"><span style="color:#61AFEF;">    patchVnode</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">      oldStartVnode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newEndVnode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      insertedVnodeQueue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newCh</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newEndIdx</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#E06C75;">    canMove</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">      nodeOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">        parentElm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">        oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">        nodeOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextSibling</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldEndVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#E06C75;">    oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">    newEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ol><li>如果<code>头头、尾尾都不相同</code>，接下来就会判断<code>旧的头部和新的尾部是否相同</code>，如果相同，就会将<code>旧头和新尾进行patch</code>，并且将<code>旧的头部真实节点</code>插入到<code>旧的尾部真实节点之后</code>，然后旧节点指针后移，新节点指针前移；</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Vnode moved left</span></span>
<span class="line"><span style="color:#61AFEF;">    patchVnode</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">      oldEndVnode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newStartVnode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      insertedVnodeQueue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newCh</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      newStartIdx</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#E06C75;">    canMove</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">      nodeOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parentElm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldEndVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">    newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol><li>如果<code>旧头部和新尾部还不相同</code>，就会对比<code>旧尾部和新头部</code>，如果相同，就将<code>旧尾和新头进行patch</code>，并且将<code>旧的尾部真实节点</code>插入到<code>旧的头部真实节点之前</code>，然后旧节点指针前移，新节点指针后移。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldKeyToIdx</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E06C75;">      oldKeyToIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createKeyToOldIdx</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    idxInOld</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">newStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">      ?</span><span style="color:#E06C75;"> oldKeyToIdx</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">newStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">      :</span><span style="color:#61AFEF;"> findIdxInOld</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">idxInOld</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // New element</span></span>
<span class="line"><span style="color:#61AFEF;">      createElm</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">        newStartVnode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        insertedVnodeQueue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentElm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">        oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">        false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        newCh</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        newStartIdx</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      vnodeToMove</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">idxInOld</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnodeToMove</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">        patchVnode</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">          vnodeToMove</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          newStartVnode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          insertedVnodeQueue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          newCh</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          newStartIdx</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"><span style="color:#E06C75;">        oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">idxInOld</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> undefined</span></span>
<span class="line"><span style="color:#E06C75;">        canMove</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">          nodeOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">            parentElm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            vnodeToMove</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span></span>
<span class="line"><span style="color:#ABB2BF;">          )</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // same key but different element. treat as new element</span></span>
<span class="line"><span style="color:#61AFEF;">        createElm</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">          newStartVnode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          insertedVnodeQueue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          parentElm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">          oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">          false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          newCh</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          newStartIdx</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><ol><li>如果上述场景都不满足，就要进行<code>最复杂</code>的 diff 了，这时首先会将<code>旧的VNode列表</code>从<code>oldStartIdx到oldEndIdx</code>的数据进行遍历，然后将它们的<code>key</code>和<code>索引</code>建立<code>映射关系</code>，存到一个表中记录。然后看<code>当前新的节点的key是否在表中存在</code>，如果不存在，说明这是新增的节点，直接创建新节点。如果存在，就会去判断<code>是不是可以复用的，类型一样的节点</code>，如果是就执行<code>patch</code>，如果不是<code>就创建新节点</code>。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> oldEndIdx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	refElm</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">	addVnodes</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">		parentElm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		refElm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		newCh</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		newStartIdx</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		newEndIdx</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		insertedVnodeQueue</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> newEndIdx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	removeVnodes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ol><li><code>while循环</code>结束之后，判断<code>如果oldStartIdx &gt; oldEndIdx成立</code>说明<code>旧的VNode节点先遍历完成了</code>（遍历完成之后，最后一次++index 会让 startIdx &gt; endIdx），那么就说明<code>旧的VNode节点更少</code>，然后就把新节点多出来的节点进行创建然后添加到真实 dom 中，反之说明<code>旧的VNode节点更多</code>，需要<code>删除节点</code>，那就把旧节点多出来的从真实 dom 进行删除。至此，整个 diff 算法结束。</li></ol><h3 id="_2-vue3-的-diff-算法流程" tabindex="-1">（2）Vue3 的 diff 算法流程 <a class="header-anchor" href="#_2-vue3-的-diff-算法流程" aria-label="Permalink to &quot;（2）Vue3 的 diff 算法流程&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> c1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> n1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> n1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> prevShapeFlag</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> n1</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> n1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">shapeFlag</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> c2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> n2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">patchFlag</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">shapeFlag</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> n2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// fast path</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">patchFlag</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">patchFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> PatchFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">KEYED_FRAGMENT</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // this could be either fully-keyed or mixed (some keyed some not)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // presence of patchFlag means children are guaranteed to be arrays</span></span>
<span class="line"><span style="color:#61AFEF;">    patchKeyedChildren</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">      c1</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">[],</span></span>
<span class="line"><span style="color:#E06C75;">      c2</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNodeArrayChildren</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      anchor</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      isSVG</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      slotScopeIds</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      optimized</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#C678DD;">    return</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ol><li>首先会根据新节点的<code>patchFlag标识</code>去判断子代是否为<code>全都有key或者一部分有key</code>，patchFlag 的存在保证了<code>子代是一个数组</code>，此时执行<code>有key的diff算法</code>。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">patchFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> PatchFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">UNKEYED_FRAGMENT</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // unkeyed</span></span>
<span class="line"><span style="color:#61AFEF;">    patchUnkeyedChildren</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">      c1</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">[],</span></span>
<span class="line"><span style="color:#E06C75;">      c2</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNodeArrayChildren</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      anchor</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      isSVG</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      slotScopeIds</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      optimized</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#C678DD;">    return</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ol><li>如果子代<code>全都没有key</code>，直接进行<code>没key的diff算法</code>。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// children has 3 possibilities: text, array or no children.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// children有三种情况: 文本节点, 数组节点, 或者没有节点</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">shapeFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">TEXT_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // text children fast path</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 文本节点快速方式</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">prevShapeFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ARRAY_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    unmountChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c1</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">[], </span><span style="color:#E06C75;">parentComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentSuspense</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">c2</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> c1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    hostSetElementText</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c2</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol><li>如果<code>没有patchFlag或者patchFlag &lt;= 0</code>，那么子节点有<code>三种情况</code>，分别为<code>文本节点、数组节点、空节点</code>。第一次先会根据新节点的<code>shapeFlag标识</code>判断子节点是不是<code>文本节点</code>，如果条件满足，就会去判断旧节点的<code>shapeFlag标识</code>，判断旧节点的子节点是不是<code>数组节点</code>，如果旧的是数组，新的是文本，直接把<code>旧节点卸载</code>。如果旧节点的子节点不是数组节点，那要么是空节点，要么是文本节点，此时判断<code>新旧节点是否全等</code>，如果不等，就直接执行<code>更新或插入新的文本节点</code>。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;"> else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">prevShapeFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ARRAY_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // prev children was array</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 旧VNode的子节点是数组节点</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">shapeFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ARRAY_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // two arrays, cannot assume anything, do full diff</span></span>
<span class="line"><span style="color:#61AFEF;">      patchKeyedChildren</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">        c1</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">[],</span></span>
<span class="line"><span style="color:#E06C75;">        c2</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNodeArrayChildren</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        anchor</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        isSVG</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        slotScopeIds</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        optimized</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // no new children, just unmount old</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 没有新节点, 只是卸载掉旧节点</span></span>
<span class="line"><span style="color:#61AFEF;">      unmountChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c1</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">[], </span><span style="color:#E06C75;">parentComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentSuspense</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // prev children was text OR null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // new children is array OR null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 旧的VNode的子节点是文本节点或者空节点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 新的VNode的子节点是数组节点或者空节点</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">prevShapeFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">TEXT_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      hostSetElementText</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // mount new if array</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">shapeFlag</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E5C07B;"> ShapeFlags</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ARRAY_CHILDREN</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      mountChildren</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">        c2</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> VNodeArrayChildren</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        anchor</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        isSVG</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        slotScopeIds</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        optimized</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><ol><li><p>如果新节点的子节点<code>不是文本节点</code>，那就分情况判断，如果<code>旧节点的子节点是数组节点并且新节点的子节点也是数组节点</code>，就会直接执行<code>有key的diff方式</code>。如果<code>旧节点的子节点是数组节点，但是新节点的子节点不是数组节点</code>，说明新节点是<code>空节点</code>，直接卸载掉旧节点。</p><p>如果<code>旧节点的子节点不是数组节点</code>，那么旧节点只可能为<code>文本或空节点</code>，新节点只可能为<code>数组或空节点</code>，如果<code>旧节点为文本节点</code>，直接将文本变为空的，这时再去判断<code>新节点的子节点是不是数组节点</code>，如果是的话就<code>重新创建一个数组节点</code>，如果不是的话，旧的文本节点依旧变成空节点了也就不需要做其它操作了。</p></li><li><p>在这整个过程中，最重要的是两个方法<code>patchUnkeyedChildren</code> 和<code>patchKeyedChildren</code>，分别是<code>没key的diff算法</code>和<code>有key时的diff算法</code>。</p></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> patchUnkeyedChildren</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    c1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">[],</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    c2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VNodeArrayChildren</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    container</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RendererElement</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    anchor</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RendererNode</span><span style="color:#ABB2BF;"> | null,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    parentComponent</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ComponentInternalInstance</span><span style="color:#ABB2BF;"> | null,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    parentSuspense</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">SuspenseBoundary</span><span style="color:#ABB2BF;"> | null,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    isSVG</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    slotScopeIds</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[] | null,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    optimized</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">  ) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    c1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c1</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> EMPTY_ARR</span></span>
<span class="line"><span style="color:#E06C75;">    c2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c2</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> EMPTY_ARR</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> oldLength</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> c1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> newLength</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> c2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> commonLength</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldLength</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newLength</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> i</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> commonLength</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> nextChild</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> optimized</span></span>
<span class="line"><span style="color:#C678DD;">        ?</span><span style="color:#61AFEF;"> cloneIfMounted</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        :</span><span style="color:#61AFEF;"> normalizeVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]))</span></span>
<span class="line"><span style="color:#61AFEF;">      patch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">        c1</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">        nextChild</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">        null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        isSVG</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        slotScopeIds</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        optimized</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldLength</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> newLength</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // remove old</span></span>
<span class="line"><span style="color:#61AFEF;">      unmountChildren</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">        c1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">        true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">        false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        commonLength</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // mount new</span></span>
<span class="line"><span style="color:#61AFEF;">      mountChildren</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">        c2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        anchor</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        isSVG</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        slotScopeIds</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        optimized</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        commonLength</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><ol><li>这是<code>无key时</code>的 diff 算法，它会直接按照<code>新旧节点较小的长度</code>进行遍历，然后一项一项进行对比，其中<code>optimized</code>的作用是标识了<code>渲染时是否进行了优化</code>（比如可能某些节点做了静态提升，那么 optimized 为 true 时就会去判断当前节点是否进行了静态提升，如果有静态提升就会克隆之前的节点进行复用）。遍历对比完之后去判断<code>新旧节点的长度</code>，如果旧的更长，说明需要进行<code>删除操作</code>，如果新的更长，说明需要进行<code>新增节点的操作</code>。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> patchKeyedChildren</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    c1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">[],</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    c2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VNodeArrayChildren</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    container</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RendererElement</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    parentAnchor</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RendererNode</span><span style="color:#ABB2BF;"> | null,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    parentComponent</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ComponentInternalInstance</span><span style="color:#ABB2BF;"> | null,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    parentSuspense</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">SuspenseBoundary</span><span style="color:#ABB2BF;"> | null,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    isSVG</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    slotScopeIds</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[] | null,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    optimized</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">  ) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> l2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> c2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> e1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> c1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#7F848E;font-style:italic;"> // prev ending index</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> e2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> l2</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#7F848E;font-style:italic;"> // next ending index</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ol><li>这是<code>有key时</code>的 diff 算法，先声明了一些变量以及传入参数。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1. sync from start</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (a b) c</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (a b) d e</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> e1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> e2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> n1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c1</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> n2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> optimized</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#61AFEF;"> cloneIfMounted</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#61AFEF;"> normalizeVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]))</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isSameVNodeType</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">n2</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">    patch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">      n1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      n2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">      null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      isSVG</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      slotScopeIds</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      optimized</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    break</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  i</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ol><li><code>有key时</code>第一个判断，从<code>头部依次对比</code>，第一个不同时，指针就会向后移对比第二个，直到不满足条件退出循环。这时，每次匹配到一个<code>相同的节点</code>就会进行<code>patch</code>。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 2. sync from end</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// a (b c)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// d e (b c)</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> e1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> e2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> n1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c1</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">e1</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> n2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">e2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> optimized</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#61AFEF;"> cloneIfMounted</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">e2</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#61AFEF;"> normalizeVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">e2</span><span style="color:#ABB2BF;">]))</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isSameVNodeType</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">n2</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">    patch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">      n1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      n2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">      null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      isSVG</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      slotScopeIds</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      optimized</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    break</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  e1</span><span style="color:#56B6C2;">--</span></span>
<span class="line"><span style="color:#E06C75;">  e2</span><span style="color:#56B6C2;">--</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><ol><li><code>有key时</code>第二个判断，从<code>尾部依次对比</code>，最后一个不同时，指针就会向前移对比倒数第二个，直到不满足条件退出循环。这时，每次匹配到一个<code>相同的节点</code>就会进行<code>patch</code>。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 3. common sequence + mount</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (a b)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (a b) c</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// i = 2, e1 = 1, e2 = 2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (a b)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// c (a b)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// i = 0, e1 = -1, e2 = 0</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> e1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> e2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> nextPos</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> e2</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> anchor</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> nextPos</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> l2</span><span style="color:#C678DD;"> ?</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">nextPos</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">el</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> parentAnchor</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> e2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      patch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#D19A66;">        null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        (</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> optimized</span></span>
<span class="line"><span style="color:#C678DD;">          ?</span><span style="color:#61AFEF;"> cloneIfMounted</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">          :</span><span style="color:#61AFEF;"> normalizeVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">])),</span></span>
<span class="line"><span style="color:#E06C75;">        container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        anchor</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        isSVG</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        slotScopeIds</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        optimized</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#E06C75;">      i</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><ol><li><code>有key时</code>的第三种判断，这时根据规律，当<code>e1 &lt; i &lt;= e2</code>时，说明新旧节点<code>有公共序列并且需要新增节点</code>，这时就会把新节点多出来的去和空节点进行 patch，相当于新增了。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 4. common sequence + unmount</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (a b) c</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (a b)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// i = 2, e1 = 2, e2 = 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// a (b c)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (b c)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// i = 0, e1 = 0, e2 = -1</span></span>
<span class="line"><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> e2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> e1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    unmount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c1</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">parentComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentSuspense</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    i</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ol><li><code>有key时</code>的第四种判断，这时根据规律，当<code>e2 &lt; i</code>时，说明新旧节点<code>有公共序列并且需要删除旧节点</code>，这时就会把旧节点多出来的节点进行遍历，然后依次删除。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 5. unknown sequence</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [i ... e1 + 1]: a b [c d e] f g</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [i ... e2 + 1]: a b [e d c h] f g</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// i = 2, e1 = 4, e2 = 5</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> s1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#7F848E;font-style:italic;"> // prev starting index</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> s2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#7F848E;font-style:italic;"> // next starting index</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 5.1 build key:index map for newChildren</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 建立一个Map集合, 这个集合的key是VNode的key, value为索引值</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> keyToNewIndexMap</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">symbol</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s2</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> e2</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> nextChild</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> optimized</span></span>
<span class="line"><span style="color:#C678DD;">      ?</span><span style="color:#61AFEF;"> cloneIfMounted</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">      :</span><span style="color:#61AFEF;"> normalizeVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]))</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">nextChild</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">__DEV__</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> keyToNewIndexMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">nextChild</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">        warn</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">          \`Duplicate keys found during update:\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">          JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">nextChild</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#98C379;">          \`Make sure keys are unique.\`</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#E5C07B;">      keyToNewIndexMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">nextChild</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ol><li>当节点<code>无序时</code>，首先第一步，会建立一个<code>Map集合</code>，里面会将新节点的所有子节点的<code>key和索引</code>作为<code>key:value</code>的形式存储进该集合。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 5.2 loop through old children left to be patched and try to patch</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// matching nodes &amp; remove nodes that are no longer present</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> j</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> patched</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> toBePatched</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> e2</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> s2</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> moved</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// used to track whether any node has moved</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> maxNewIndexSoFar</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// works as Map&lt;newIndex, oldIndex&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Note that oldIndex is offset by +1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// and oldIndex = 0 is a special value indicating the new node has</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// no corresponding old node.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// used for determining longest stable subsequence</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> newIndexToOldIndexMap</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">toBePatched</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> toBePatched</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">newIndexToOldIndexMap</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> e1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> prevChild</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c1</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">patched</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#E06C75;"> toBePatched</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 已经patch过的 &gt;= 准备要patch的，说明都被patch过了，那当前节点就是多余的了，直接进行删除</span></span>
<span class="line"><span style="color:#61AFEF;">      unmount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prevChild</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentSuspense</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">      continue</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置遍历寻找新节点中该节点的索引</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> newIndex</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果旧的节点的key不为空，直接去新节点的\`key:value\`表中去查找新索引</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">prevChild</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      newIndex</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> keyToNewIndexMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">prevChild</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 旧的节点没有key，尝试去新节点中找到和旧节点类型一样的那个节点，然后拿到新的索引</span></span>
<span class="line"><span style="color:#C678DD;">      for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s2</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> e2</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;">          newIndexToOldIndexMap</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> s2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF;">          isSameVNodeType</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prevChild</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        ) {</span></span>
<span class="line"><span style="color:#E06C75;">          newIndex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> j</span></span>
<span class="line"><span style="color:#C678DD;">          break</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果新节点中没有当前节点的索引，说明新节点中当前节点已经不存在了，直接删除即可</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newIndex</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      unmount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prevChild</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentComponent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentSuspense</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 找到新索引之后，更新当前节点新索引对应的旧索引</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 比如拿官方例子来说</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // [i ... e1 + 1]: a b [c d e] f g</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // [i ... e2 + 1]: a b [e d c h] f g</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // i = 2， s1 = i s2 = i，此时第一次循环，s1 = 2， s2 = 2，i = 2，e1[i] = c</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 找到c在新节点的索引为4，那么newIndexToOldIndexMap[4-2] = 2 + 1（arr[2] = 3）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 意思就是说需要更新的这一部分列表，第二项的数据对应的是旧节点的第3个数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 很多人在这里有疑问，c不是旧节点的第二个数据吗？怎么会变成第三个？为什么要i + 1?</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 这是因为创建newIndexToOldIndexMap数组时，给每一项默认赋值了0，当前项的值为0时，说明还没有建立映射关系</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 因此使用i+1的方式建立对应关系，我们可以理解为newIndexToOldIndexMap[2] = 2，只是存储时在旧节点的索引值上加了1</span></span>
<span class="line"><span style="color:#E06C75;">      newIndexToOldIndexMap</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">newIndex</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> s2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 如果新节点的索引&gt;=maxNewIndexSoFar，就更新maxNewIndexSoFar的值，否则就需要进行移动</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 比如第一次循环，c的newIndex为4，那么maxNewIndexSoFar就会被更新成4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 第二次循环，d的newIndex为3，3 &lt; 4，说明在新节点中，d的位置在c之前，需要进行移动</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 如果说新节点的顺序也是c、d、e、h，那么第一次循环，maxNewIndexSoFar的值就是2，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 第二次循环，d的newIndex是3，3&gt;2说明d排在c之后，和旧节点情况一样，不用移动</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newIndex</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#E06C75;"> maxNewIndexSoFar</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        maxNewIndexSoFar</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newIndex</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 标记为需要移动</span></span>
<span class="line"><span style="color:#E06C75;">        moved</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#61AFEF;">      patch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">        prevChild</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">newIndex</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">        null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        isSVG</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        slotScopeIds</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        optimized</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#E06C75;">      patched</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br></div></div><ol><li>第二步，会<code>跳过那些已经patch过的节点</code>，对其它没有 patch 过的节点进行 patch，并且会<code>移除那些已经不存在的旧节点</code>。这里面首先会创建一个<code>新节点的索引和旧节点索引对照关系的一个数组</code>，用于获取<code>无序序列的最长递增子序列</code>。然后<code>遍历旧节点</code>，找到在<code>新节点中存在的节点</code>，进行复用，执行 patch，并且更新<code>索引对应关系表</code>，如果有多余的节点，就进行删除。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 5.3 move and mount</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// generate longest stable subsequence only when nodes have moved</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> increasingNewIndexSequence</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> moved</span></span>
<span class="line"><span style="color:#C678DD;">?</span><span style="color:#61AFEF;"> getSequence</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newIndexToOldIndexMap</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> EMPTY_ARR</span></span>
<span class="line"><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> increasingNewIndexSequence</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// looping backwards so that we can use last patched node as anchor</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> toBePatched</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> nextIndex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s2</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> i</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> nextChild</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">nextIndex</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> VNode</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> anchor</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E06C75;">      nextIndex</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> l2</span><span style="color:#C678DD;"> ?</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">c2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">nextIndex</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> VNode</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">el</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> parentAnchor</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newIndexToOldIndexMap</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // mount new</span></span>
<span class="line"><span style="color:#61AFEF;">      patch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#D19A66;">        null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        nextChild</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        anchor</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentComponent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        parentSuspense</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        isSVG</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        slotScopeIds</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        optimized</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">moved</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // move if:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // There is no stable subsequence (e.g. a reverse)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // OR current node is not among the stable sequence</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> increasingNewIndexSequence</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#61AFEF;">        move</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nextChild</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">anchor</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">MoveType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">REORDER</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        j</span><span style="color:#56B6C2;">--</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><ol><li>最后一步，如果<code>需要移动</code>，就会生成一个<code>最长递增子序列</code>，然后遍历<code>需要patch的序列</code>，看看序列中有没有<code>对应的旧节点索引值为0的</code>，如果有，说明这些节点在旧节点中不存在，就需要执行<code>新增节点的操作</code>。如果存在，并且<code>需要移动</code>，就会将这些节点移动到对应的位置。至此，整个 diff 算法完成。</li></ol><h3 id="_3-最长递增子序列为什么可以优化" tabindex="-1">（3）最长递增子序列为什么可以优化 <a class="header-anchor" href="#_3-最长递增子序列为什么可以优化" aria-label="Permalink to &quot;（3）最长递增子序列为什么可以优化&quot;">​</a></h3><p>加入<code>旧节点子元素列表的key</code>为[1,2,3,4,5]，经过数据变化，新的节点顺序变动，<code>key</code>变成了[1,3,5,2,4]，如果我们不进行任何优化，那么只有 1 是可复用的，我们需要把<code>2、3、4、5</code>四个节点分别移动到<code>对应位置</code>，需要移动<code>4次</code>。如果我们算出来了<code>新节点列表的最长递增子序列</code>（[1,2,4]），那么我们可以保持这三个元素<code>不做变动</code>，只将<code>3、5</code>两个元素进行移动，只需要移动<code>2次</code>。这就是为什么<code>最长递增子序列</code>可以<code>减少操作dom的次数</code>，从而达到优化的原因。</p><h3 id="_4-总结" tabindex="-1">（4）总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;（4）总结&quot;">​</a></h3><p>在 Vue2 中，diff 算法采用的是双指针进行<code>头头相比、尾尾相比、头尾相比</code>，最终通过<code>映射关系</code>来确认可复用的节点，进行更新。</p><p>在 Vue3 中，diff 算法分为<code>有key和无key和快速diff三种方式</code>，<code>快速diff</code>通过静态标记，对一些<code>文本</code>、<code>空节点</code>进行快速更新，<code>无key方式</code>简单粗暴对比每一项，判断是否可以复用节点，<code>有key的方式</code>依旧采用双指针，但是只进行<code>头头相比、尾尾相比</code>，最终会根据求取<code>无序列表的最长递增子序列</code>的方式，对能复用的节点进行 patch，需要移动的节点进行<code>移动节点</code>，最终完成 diff 更新。</p><h2 id="vue-中的-key-的作用是什么" tabindex="-1">Vue 中的 Key 的作用是什么？ <a class="header-anchor" href="#vue-中的-key-的作用是什么" aria-label="Permalink to &quot;Vue 中的 Key 的作用是什么？&quot;">​</a></h2><p>参考答案：</p><p><strong>key 的作用主要是为了高效的更新虚拟 DOM</strong>。另外 <em>vue</em> 中在使用相同标签名元素的过渡切换时，也会使用到 <em>key</em> 属性，其目的也是为了让 <em>vue</em> 可以区分它们，否则 <em>vue</em> 只会替换其内部属性而不会触发过渡效果。</p><p>解析：</p><p>其实不只是 <em>vue</em>，<em>react</em> 中在执行列表渲染时也会要求给每个组件添加上 <em>key</em> 这个属性。</p><p>要解释 <em>key</em> 的作用，不得不先介绍一下虚拟 <em>DOM</em> 的 <code>diff</code> 算法了。</p><p>我们知道，<em>vue</em> 和 <em>react</em> 都实现了一套虚拟 <em>DOM</em>，使我们可以不直接操作 <em>DOM</em> 元素，只操作数据便可以重新渲染页面。而隐藏在背后的原理便是其高效的 <code>diff</code> 算法。</p><p><em>vue</em> 和 <em>react</em> 的虚拟 <em>DOM</em> 的 <code>diff</code> 算法大致相同，其核心有以下两点：</p><blockquote><ul><li>两个相同的组件产生类似的 <em>DOM</em> 结构，不同的组件产生不同的 <em>DOM</em> 结构。</li><li>同一层级的一组节点，他们可以通过唯一的 <em>id</em> 进行区分。</li></ul></blockquote><p>基于以上这两点，使得虚拟 <em>DOM</em> 的 <code>diff</code> 算法的复杂度从 <em>O(n^3)</em> 降到了 <em>O(n)</em>。</p><p>当页面的数据发生变化时，<code>diff</code> 算法只会比较同一层级的节点：</p><blockquote><ul><li>如果节点类型不同，直接干掉前面的节点，再创建并插入新的节点，不会再比较这个节点以后的子节点了。</li><li>如果节点类型相同，则会重新设置该节点的属性，从而实现节点的更新。</li></ul></blockquote><p>当某一层有很多相同的节点时，也就是列表节点时，<code>diff</code> 算法的更新过程默认情况下也是遵循以上原则。</p><p>比如一下这个情况：</p><p><img src="`+a+'" alt="image-20240326181612327"></p><p>我们希望可以在 <em>B</em> 和 <em>C</em> 之间加一个 <em>F</em>，<code>diff</code> 算法默认执行起来是这样的：</p><p><img src="'+j+'" alt="image-20240326181632399"></p><p>即把 <em>C</em> 更新成 <em>F</em>，<em>D</em> 更新成 <em>C</em>，<em>E</em> 更新成 <em>D</em>，最后再插入 <em>E</em></p><p>是不是很没有效率？</p><p>所以我们需要使用 <em>key</em> 来给每个节点做一个唯一标识，<code>diff</code> 算法就可以正确的识别此节点，找到正确的位置区插入新的节点。</p><p><img src="'+w+`" alt="image-20240326181655153"></p><h2 id="vue2-和-vue3-定义数据变量和方法的改变" tabindex="-1">Vue2 和 Vue3 定义数据变量和方法的改变 <a class="header-anchor" href="#vue2-和-vue3-定义数据变量和方法的改变" aria-label="Permalink to &quot;Vue2 和 Vue3 定义数据变量和方法的改变&quot;">​</a></h2><ul><li><code>vue2</code>：定义数据变量是<code>data(){}</code>，创建的方法要在<code>methods:{}</code>中。</li><li><code>vue3</code>：直接在<code>setup(){}</code>中，在这里面定义的变量和方法因为最终要在模板中使用，所以最后都得 <code>return</code>。</li></ul><h2 id="vue2-和-vue3-生命周期钩子函数的不同" tabindex="-1">Vue2 和 Vue3 生命周期钩子函数的不同 <a class="header-anchor" href="#vue2-和-vue3-生命周期钩子函数的不同" aria-label="Permalink to &quot;Vue2 和 Vue3 生命周期钩子函数的不同&quot;">​</a></h2><p><code>vue2</code>中的生命周期</p><ul><li><code>beforeCreate</code> 组件创建之前</li><li><code>created</code> 组件创建之后</li><li><code>beforeMount</code> 组价挂载到页面之前执行</li><li><code>mounted</code> 组件挂载到页面之后执行</li><li><code>beforeUpdate</code> 组件更新之前</li><li><code>updated</code> 组件更新之后</li></ul><p><code>vue3</code>中的生命周期</p><ul><li><code>setup</code> 开始创建组件</li><li><code>onBeforeMount</code> 组价挂载到页面之前执行</li><li><code>onMounted</code> 组件挂载到页面之后执行</li><li><code>onBeforeUpdate</code> 组件更新之前</li><li><code>onUpdated</code> 组件更新之后 而且<code>Vue3.x</code> 生命周期在调用前需要先进行引入。</li></ul><h1 id="双向数据绑定" tabindex="-1">双向数据绑定 <a class="header-anchor" href="#双向数据绑定" aria-label="Permalink to &quot;双向数据绑定&quot;">​</a></h1><h2 id="响应式双向绑定" tabindex="-1">响应式双向绑定 <a class="header-anchor" href="#响应式双向绑定" aria-label="Permalink to &quot;响应式双向绑定&quot;">​</a></h2><p>Vue的响应式系统和双向绑定虽然紧密相关，但它们是两个不同的概念。</p><ol><li><strong>响应式系统</strong>： 响应式是 Vue 的核心特性之一，它使得 Vue.js 能够知道何时需要更新视图。这是一个单向的过程，即数据的变化会驱动 DOM 视图的更新。在 Vue 2 中，这是通过 <code>Object.defineProperty</code> 实现的，而在 Vue 3 中，使用了 <code>Proxy</code> 对象来实现更强大的响应式系统。</li><li><strong>双向绑定</strong>： 双向绑定则是指数据和视图之间的相互通信。当视图中的输入值发生变化时，绑定的数据也会更新；反之，数据的变化也会反映在视图上。在 Vue 中，这通常是通过 <code>v-model</code> 指令来实现的，它是一个语法糖，背后是对 <code>input</code> 事件的监听和 <code>value</code> 属性的动态绑定。</li></ol><p>总结来说，响应式系统关注的是如何将数据的变化反映到视图上，而双向绑定则是在此基础上实现了视图到数据的反向更新。</p><p>这两者共同协作，为 Vue 应用提供了强大的数据流管理能力。</p><h2 id="你对双向绑定的理解以及它实现的原理" tabindex="-1">你对双向绑定的理解以及它实现的原理 <a class="header-anchor" href="#你对双向绑定的理解以及它实现的原理" aria-label="Permalink to &quot;你对双向绑定的理解以及它实现的原理&quot;">​</a></h2><p>Vue 中双向绑定靠的是 v-model 指令，可以将一个动态值绑定到视图上，修改视图上的值，数据对于的值也会同步改变。</p><p>组件上的 v-model 就是 value+input 事件的语法糖（vue3 中为 <code>modalValue</code> 和 <code>update:modalValue</code> 的语法糖）</p><p>表单上 v-model：文本为 <code>value+input</code>；复选框为 <code>checked+change</code></p><p>问题：如果有多个属性想做双向绑定，怎么办？</p><p>vue2 不支持。</p><p>vue3 可以通过如下（通过：改名字）：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// v-model 等同于 v-model:modalValue</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">my-com</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">value1</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">a</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">valueA</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">b</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">valueB</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">my-com</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="能说一说双向绑定使用和原理吗" tabindex="-1">能说一说双向绑定使用和原理吗？ <a class="header-anchor" href="#能说一说双向绑定使用和原理吗" aria-label="Permalink to &quot;能说一说双向绑定使用和原理吗？&quot;">​</a></h2><h3 id="题目分析" tabindex="-1">题目分析： <a class="header-anchor" href="#题目分析" aria-label="Permalink to &quot;题目分析：&quot;">​</a></h3><p>双向绑定是<code>vue</code>的特色之一，开发中必然会用到的知识点，然而此题还问了实现原理，升级为深度考查。</p><hr><h3 id="思路分析-1" tabindex="-1">思路分析： <a class="header-anchor" href="#思路分析-1" aria-label="Permalink to &quot;思路分析：&quot;">​</a></h3><ol><li>给出双绑定义</li><li>双绑带来的好处</li><li>在哪使用双绑</li><li>使用方式、使用细节、vue3 变化</li><li>原理实现描述</li></ol><hr><h3 id="回答范例-6" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-6" aria-label="Permalink to &quot;回答范例：&quot;">​</a></h3><ol><li>vue 中双向绑定是一个指令<code>v-model</code>，可以绑定一个响应式数据到视图，同时视图中变化能改变该值。</li><li><code>v-model</code>是语法糖，默认情况下相当于<code>:value</code>和<code>@input</code>。使用<code>v-model</code>可以减少大量繁琐的事件处理代码，提高开发效率。</li><li>通常在表单项上使用<code>v-model</code>，还可以在自定义组件上使用，表示某个值的输入和输出控制。</li><li>通过<code>&lt;input v-model=&quot;xxx&quot;&gt;</code>的方式将 xxx 的值绑定到表单元素 value 上；对于 checkbox，可以使用<code>true-value</code>和 false-value 指定特殊的值，对于 radio 可以使用 value 指定特殊的值；对于 select 可以通过 options 元素的 value 设置特殊的值；还可以结合.lazy,.number,.trim 对 v-mode 的行为做进一步限定；<code>v-model</code>用在自定义组件上时又会有很大不同，vue3 中它类似于<code>sync</code>修饰符，最终展开的结果是 modelValue 属性和 update:modelValue 事件；vue3 中我们甚至可以用参数形式指定多个不同的绑定，例如 v-model:foo 和 v-model:bar，非常强大！</li><li><code>v-model</code>是一个指令，它的神奇魔法实际上是 vue 的编译器完成的。我做过测试，包含<code>v-model</code>的模板，转换为渲染函数之后，实际上还是是 value 属性的绑定以及 input 事件监听，事件回调函数中会做相应变量更新操作。编译器根据表单元素的不同会展开不同的 DOM 属性和事件对，比如 text 类型的 input 和 textarea 会展开为 value 和 input 事件；checkbox 和 radio 类型的 input 会展开为 checked 和 change 事件；select 用 value 作为属性，用 change 作为事件。</li></ol><hr><h3 id="可能的追问-1" tabindex="-1">可能的追问： <a class="header-anchor" href="#可能的追问-1" aria-label="Permalink to &quot;可能的追问：&quot;">​</a></h3><ol><li><code>v-model</code>和<code>sync</code>修饰符有什么区别</li><li>自定义组件使用<code>v-model</code>如果想要改变事件名或者属性名应该怎么做</li></ol><hr><h3 id="知其所以然-6" tabindex="-1">知其所以然： <a class="header-anchor" href="#知其所以然-6" aria-label="Permalink to &quot;知其所以然：&quot;">​</a></h3><p>测试代码，<a href="https://link.juejin.cn?target=./test.html" target="_blank" rel="noreferrer">test.html</a></p><p>观察输出的渲染函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// &lt;input type=&quot;text&quot; v-model=&quot;foo&quot;&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">_c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;input&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	directives</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;model&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">rawName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;v-model&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">expression</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#E06C75;">	attrs</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">	domProps</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">	on</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		input</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">$event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">$event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">composing</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			foo</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> $event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><hr><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// &lt;input type=&quot;checkbox&quot; v-model=&quot;bar&quot;&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">_c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;input&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	directives</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;model&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">rawName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;v-model&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">expression</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#E06C75;">	attrs</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;checkbox&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">	domProps</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		checked</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#61AFEF;"> _i</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> bar</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	on</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		change</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">$event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> $$a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> bar</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				$$el</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> $event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				$$c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> $$el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">checked</span><span style="color:#C678DD;"> ?</span><span style="color:#D19A66;"> true</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$$a</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> $$v</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					$$i</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> _i</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$$a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">$$v</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">$$el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">checked</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">					$$i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">bar</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> $$a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">$$v</span><span style="color:#ABB2BF;">]));</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">					$$i</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">bar</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> $$a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">$$i</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">$$a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$$i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				bar</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> $$c</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><hr><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// &lt;select v-model=&quot;baz&quot;&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     &lt;option value=&quot;vue&quot;&gt;vue&lt;/option&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     &lt;option value=&quot;react&quot;&gt;react&lt;/option&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &lt;/select&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">_c</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	&quot;select&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		directives</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">			{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;model&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">rawName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;v-model&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">baz</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">expression</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;baz&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">		],</span></span>
<span class="line"><span style="color:#E06C75;">		on</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">			change</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">$event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> $$selectedVal</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">filter</span></span>
<span class="line"><span style="color:#ABB2BF;">					.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">$event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">o</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">						return</span><span style="color:#E5C07B;"> o</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">selected</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					})</span></span>
<span class="line"><span style="color:#ABB2BF;">					.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">o</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">						var</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;_value&quot;</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> o</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> o</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> o</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">						return</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					});</span></span>
<span class="line"><span style="color:#E06C75;">				baz</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> $event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">multiple</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> $$selectedVal</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> $$selectedVal</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span></span>
<span class="line"><span style="color:#61AFEF;">		_c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;option&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">attrs</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;"> } }, [</span><span style="color:#61AFEF;">_v</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;">)]),</span></span>
<span class="line"><span style="color:#61AFEF;">		_v</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">		_c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;option&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">attrs</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;react&quot;</span><span style="color:#ABB2BF;"> } }, [</span><span style="color:#61AFEF;">_v</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;react&quot;</span><span style="color:#ABB2BF;">)]),</span></span>
<span class="line"><span style="color:#ABB2BF;">	]</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="能说一说双向绑定使用和原理吗-1" tabindex="-1">能说一说双向绑定使用和原理吗？ <a class="header-anchor" href="#能说一说双向绑定使用和原理吗-1" aria-label="Permalink to &quot;能说一说双向绑定使用和原理吗？&quot;">​</a></h2><p><strong>题目分析：</strong></p><blockquote><p>双向绑定是 vue 的特色之一，开发中必然会用到的知识点，然而此题还问了实现原理，升级为深度考查。 思路分析：</p></blockquote><ul><li>给出双绑定义</li><li>双绑带来的好处</li><li>在哪使用双绑</li><li>使用方式、使用细节、vue3 变化</li><li>原理实现描述</li></ul><p>回答范例：</p><ol><li>vue 中双向绑定是一个指令 v-model，可以绑定一个响应式数据到视图，同时视图中变化能改变该值。</li><li>v-model 是语法糖，默认情况下相当于:value 和@input。使用 v-model 可以减少大量繁琐的事件处理代码，提高开发效率。</li><li>通常在表单项上使用 v-model，还可以在自定义组件上使用，表示某个值的输入和输出控制。</li><li>通过<code>&lt;input v-model=&quot;xxx&quot;&gt;</code>的方式将 xxx 的值绑定到表单元素 value 上； <ol><li>对于 checkbox，可以使用 true-value 和 false-value 指定特殊的值，对于 radio 可以使用 value 指定特殊的值；</li><li>对于 select 可以通过 options 元素的 value 设置特殊的值；</li><li>还可以结合.lazy,.number,.trim 对 v-mode 的行为做进一步限定；</li><li>v-model 用在自定义组件上时又会有很大不同，vue3 中它类似于 sync 修饰符，最终展开的结果是 modelValue 属性和 update:modelValue 事件；</li><li>vue3 中我们甚至可以用参数形式指定多个不同的绑定，例如 v-model:foo 和 v-model:bar，非常强大！</li></ol></li><li>v-model 是一个指令，它的神奇魔法实际上是 vue 的编译器完成的。我做过测试，包含 v-model 的模板，转换为渲染函数之后，实际上还是是 value 属性的绑定以及 input 事件监听，事件回调函数中会做相应变量更新操作。编译器根据表单元素的不同会展开不同的 DOM 属性和事件对，比如 text 类型的 input 和 textarea 会展开为 value 和 input 事件；checkbox 和 radio 类型的 input 会展开为 checked 和 change 事件；select 用 value 作为属性，用 change 作为事件。</li></ol><h2 id="v-model-的原理是什么" tabindex="-1">v-model 的原理是什么 <a class="header-anchor" href="#v-model-的原理是什么" aria-label="Permalink to &quot;v-model 的原理是什么&quot;">​</a></h2><p><code>v-model</code>就是<code>v-bind:xxx</code>和<code>@xxx</code>的语法糖，默认为<code>v-bind:value</code>和<code>@input</code>，在 input 标签上使用<code>v-model</code>时，类似于这样：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;wrap&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 等价于 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;wrap&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">value</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">input</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">changeVal</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		changeVal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h3 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;Vue2&quot;">​</a></h3><p>在 Vue2 中，如果我们想改变<code>v-model</code>绑定的值和事件，可以给组件添加<code>model配置项</code>，比如这样：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;wrap&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">value</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">input</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">changeName</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	model</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		prop</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		event</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;changeName&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		changeName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;changeName&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}, </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;App&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		HelloWorld</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Lee&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h3 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h3><p>在 Vue3 中，移除了<code>.sync</code>修饰符，使用<code>v-model</code>来替代。此时在自定义组件中<code>v-model</code>代表的含义为<code>v-model:moduleValue</code>，也就相当于<code>:module-value=&quot;xxx&quot; &amp;&amp; @update:module-value=&quot;newValue =&gt; xxx = newValue&quot;</code>。并且在 Vue3 中，v-model 可以<code>传参</code>，默认参数就是<code>moduleValue</code>，我们也可以改为<code>v-model:a</code>，这时就代表我们给<code>子组件的一个名为a的props属性传参</code>，并且接收了一个<code>@update:a的回调</code>。</p><h2 id="vue-的双向数据绑定原理是什么" tabindex="-1">Vue 的双向数据绑定原理是什么？ <a class="header-anchor" href="#vue-的双向数据绑定原理是什么" aria-label="Permalink to &quot;Vue 的双向数据绑定原理是什么？&quot;">​</a></h2><p>vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的 setter ， getter ，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p>具体步骤：</p><ul><li>第一步：需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter 和 getter 这样的话，给这个对象的某个值赋值，就会触发 setter ，那么就能监听到了数据变化</li><li>第二步：compile 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</li><li>第三步：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁，主要做的事情是： <ul><li>1、在自身实例化时往属性订阅器(dep)里面添加自己</li><li>2、自身必须有一个 update()方法</li><li>3、待属性变动 dep.notice()通知时，能调用自身的 update()方法，并触发 Compile 中绑定的回调，则功成身退。</li></ul></li><li>第四步：MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据 model 变更的双向绑定效果。</li></ul><p><img src="`+M+'" alt="image-20240518014213907"></p><p>ps：16 题答案同样适合”vue data 是怎么实现的？”此面试题。</p><h2 id="你知道-vue-双向数据绑定的原理吗" tabindex="-1">你知道 vue 双向数据绑定的原理吗? <a class="header-anchor" href="#你知道-vue-双向数据绑定的原理吗" aria-label="Permalink to &quot;你知道 vue 双向数据绑定的原理吗?&quot;">​</a></h2><h3 id="什么是双向数据绑定" tabindex="-1">什么是双向数据绑定？ <a class="header-anchor" href="#什么是双向数据绑定" aria-label="Permalink to &quot;什么是双向数据绑定？&quot;">​</a></h3><p>数据变化更新视图，视图变化更新数据</p><p><img src="'+S+`" alt="vue双向数据绑定的原理"></p><p>输入框内容变化时，data 中的数据同步变化 view =&gt; model</p><p>data 中的数据变化时，文本节点的内容同步变化 model =&gt; view</p><h3 id="设计思想-观察者模式" tabindex="-1">设计思想：观察者模式 <a class="header-anchor" href="#设计思想-观察者模式" aria-label="Permalink to &quot;设计思想：观察者模式&quot;">​</a></h3><p>Vue 的双向数据绑定的设计思想为观察者模式。</p><p><strong>Dep 对象</strong>：Dependency 依赖的简写，包含有三个主要属性 id, subs, target 和四个主要函数 addSub,removeSub, depend, notify，是观察者的依赖集合，负责在数据发生改变时，使用 notify()触发保存在 subs 下的订阅列表，依次更新数据和 DOM。</p><p><strong>Observer 对象</strong>：即观察者，包含两个主要属性 value, dep。做法是使用 getter/setter 方法覆盖默认的取值和赋值操作，将对象封装为响应式对象，每一次调用时更新依赖列表，更新值时触发订阅者。绑定在对象的* ob *原型链属性上。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#app&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    	count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>初始化函数 initMixin：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#61AFEF;">    initLifecycle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    initEvents</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    initRender</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;beforeCreate&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里就是我们接下来要跟进的初始化Vue参数</span></span>
<span class="line"><span style="color:#61AFEF;">    initState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    initInjections</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    callHook</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;created&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>初始化参数 initState：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> initState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">watchers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> opts</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		initProps</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		initMethods</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 我们的count在这里初始化</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		initData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		observe</span><span style="color:#ABB2BF;">((</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}), </span><span style="color:#D19A66;">true</span><span style="color:#7F848E;font-style:italic;"> /* asRootData */</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		initComputed</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		initWatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>initData：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> initData</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;function&#39;</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isPlainObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">    	data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// observe data</span></span>
<span class="line"><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#7F848E;font-style:italic;"> /* asRootData */</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>将 data 参数设置为响应式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Attempt to create an observer instance for a value,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * returns the new observer if successfully observed,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * or the existing observer if the value already has one.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">asRootData</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> ob</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">hasOwn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;__ob__&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_ob__</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Observer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		ob</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_ob__</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* 为了防止value不是单纯的对象而是Regexp或者函数之类的，或者是vm实例再或者是不可扩展的 */</span></span>
<span class="line"><span style="color:#E5C07B;">		observerState</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">shouldConvert</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#56B6C2;">		!</span><span style="color:#61AFEF;">isServerRendering</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#61AFEF;"> isPlainObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isExtensible</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#56B6C2;">		!</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isVue</span></span>
<span class="line"><span style="color:#ABB2BF;">	) {</span></span>
<span class="line"><span style="color:#E06C75;">		ob</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">asRootData</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> ob</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		ob</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vmCount</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> ob</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>Observer 类：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* Observer class that are attached to each observed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* object. Once attached, the observer converts target</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* object&#39;s property keys into getter/setters that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* collect dependencies and dispatches updates.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> Observer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> Observer</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dep</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vmCount</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // def函数是defineProperty的简单封装</span></span>
<span class="line"><span style="color:#61AFEF;">    def</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;__ob__&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 在es5及更低版本的js里，无法完美继承数组，这里检测并选取合适的函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // protoAugment函数使用原型链继承，copyAugment函数使用原型链定义（即对每个数组</span></span>
<span class="line"><span style="color:#E06C75;">        defineProperty</span><span style="color:#ABB2BF;">）</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> augment</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> hasProto</span></span>
<span class="line"><span style="color:#C678DD;">        ?</span><span style="color:#E06C75;"> protoAugment</span></span>
<span class="line"><span style="color:#C678DD;">        :</span><span style="color:#E06C75;"> copyAugment</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        augment</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">arrayMethods</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">arrayKeys</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observeArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">walk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>observerArray：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Observe a list of Array items.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#E5C07B;">Observer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observeArray</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> observeArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">items</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> l</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Dep 类：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * A dep is an observable that can have multiple</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * directives subscribing to it.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> Dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> Dep</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> uid$1</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subs</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>walk 函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Walk through each property and convert them into</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * getter/setters. This method should only be called when</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * value type is Object.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#E5C07B;">Observer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">walk</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> walk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> keys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> keys</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		defineReactive$$1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>defineReactive：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Define a reactive property on an Object.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> defineReactive$$1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">customSetter</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dep</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> property</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyDescriptor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">property</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> property</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">configurable</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// cater for pre-defined getter/setters</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> getter</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> property</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> property</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">get</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> setter</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> property</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> property</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">set</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> childOb</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactiveGetter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> getter</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> getter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">childOb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					childOb</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">					dependArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactiveSetter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> getter</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> getter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 脏检查，排除了NaN !== NaN的影响</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newVal</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newVal</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> newVal</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">setter</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				setter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E06C75;">			childOb</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>Dep.target&amp;depend()：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// the current target watcher being evaluated.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// this is globally unique because there could be only one</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// watcher being evaluated at any time.</span></span>
<span class="line"><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> depend</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addDep</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> notify</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// stablize the subscriber list first</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> subs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> subs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> l</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		subs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>addDep()：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Add a dependency to this directive.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#E5C07B;">Watcher</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addDep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> addDep</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dep</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> id</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">newDepIds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">newDepIds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">newDeps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dep</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">depIds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 使用push()方法添加一个订阅者</span></span>
<span class="line"><span style="color:#E5C07B;">			dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>dependArray()：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Collect dependencies on array elements when the array is touched, since</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * we cannot intercept array element access like property getters.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> dependArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> void</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> l</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		e</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">		e</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_ob__</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_ob_</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">			dependArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>数组的更新检测：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * not type checking this file because flow doesn&#39;t play well with</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * dynamically accessing methods on Array prototype</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> arrayProto</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> arrayMethods</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayProto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;push&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;pop&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;shift&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;unshift&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;splice&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;sort&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;reverse&quot;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// cache original method</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> original</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arrayProto</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#61AFEF;">		def</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayMethods</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> mutator</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> arguments$1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// avoid leaking arguments:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// http://jsperf.com/closure-with-arguments</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> args</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				args</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> arguments$1</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> original</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> ob</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_ob__</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> inserted</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				case</span><span style="color:#98C379;"> &quot;push&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">					inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				case</span><span style="color:#98C379;"> &quot;unshift&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">					inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				case</span><span style="color:#98C379;"> &quot;splice&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">					inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">					break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">inserted</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observeArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">inserted</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// notify change</span></span>
<span class="line"><span style="color:#E5C07B;">			ob</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>总结： 从上面的代码中我们可以一步步由深到浅的看到 Vue 是如何设计出双向数据绑定的，最主要的两点：</p><ul><li>使用 getter/setter 代理值的读取和赋值，使得我们可以控制数据的流向。</li><li>使用观察者模式设计，实现了指令和数据的依赖关系以及触发更新。</li></ul><h2 id="vue-实现双向数据绑定原理是什么" tabindex="-1">Vue 实现双向数据绑定原理是什么？ <a class="header-anchor" href="#vue-实现双向数据绑定原理是什么" aria-label="Permalink to &quot;Vue 实现双向数据绑定原理是什么？&quot;">​</a></h2><p>参考答案：</p><p>Vue2.x 采用数据劫持结合发布订阅模式（PubSub 模式）的方式，通过 Object.defineProperty 来劫持各个属性的 setter、getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p>当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。</p><p>Vue 的数据双向绑定整合了 Observer，Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 的数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化-&gt;视图更新，视图交互变化（例如 input 操作）-&gt;数据 model 变更的双向绑定效果。</p><p>Vue3.x 放弃了 Object.defineProperty ，使用 ES6 原生的 Proxy，来解决以前使用 Object.defineProperty 所存在的一些问题。</p><h2 id="v-model-双向绑定的原理是什么" tabindex="-1">v-model 双向绑定的原理是什么？ <a class="header-anchor" href="#v-model-双向绑定的原理是什么" aria-label="Permalink to &quot;v-model 双向绑定的原理是什么？&quot;">​</a></h2><p>参考答案：</p><p>v-model 本质就是 :value + input 方法的语法糖。可以通过 model 属性的 prop 和 event 属性来进行自定义。原生的 v-model，会根据标签的不同生成不同的事件和属性。</p><p>例如：</p><ol><li>text 和 textarea 元素使用 value 属性和 input 事件</li><li>checkbox 和 radio 使用 checked 属性和 change 事件</li><li>select 字段将 value 作为 prop 并将 change 作为事件</li></ol><p>以输入框为例，当用户在输入框输入内容时，会触发 input 事件，从而更新 value。而 value 的改变同样会更新视图，这就是 vue 中的双向绑定。双向绑定的原理，其实现思路如下：</p><p>首先要对数据进行劫持监听，所以我们需要设置一个监听器 Observer，用来监听所有属性。如果属性发上变化了，就需要告诉订阅者 Watcher 看是否需要更新。</p><p>因为订阅者是有很多个，所以我们需要有一个消息订阅器 Dep 来专门收集这些订阅者，然后在监听器 Observer 和订阅者 Watcher 之间进行统一管理的。</p><p>接着，我们还需要有一个指令解析器 Compile，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者 Watcher，并替换模板数据或者绑定相应的函数，此时当订阅者 Watcher 接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。</p><p>因此接下去我们执行以下 3 个步骤，实现数据的双向绑定：</p><ol><li>实现一个监听器 Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。</li><li>实现一个订阅者 Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。</li><li>实现一个解析器 Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。</li></ol><h2 id="如何理解双向数据绑定" tabindex="-1">如何理解双向数据绑定 <a class="header-anchor" href="#如何理解双向数据绑定" aria-label="Permalink to &quot;如何理解双向数据绑定&quot;">​</a></h2><p>我们都知道 Vue 是数据双向绑定的框架，双向绑定由三个重要部分构成</p><ul><li>数据层（Model）：应用的数据及业务逻辑</li><li>视图层（View）：应用的展示效果，各类 UI 组件</li><li>业务逻辑层（ViewModel）：框架封装的核心，它负责将数据与视图关联起来</li></ul><p>而上面的这个分层的架构方案，可以用一个专业术语进行称呼：MVVM 这里的控制层的核心功能便是 “数据双向绑定” 。自然，我们只需弄懂它是什么，便可以进一步了解数据绑定的原理</p><h4 id="理解-viewmodel" tabindex="-1">理解 ViewModel <a class="header-anchor" href="#理解-viewmodel" aria-label="Permalink to &quot;理解 ViewModel&quot;">​</a></h4><p>它的主要职责就是：</p><ul><li>数据变化后更新视图</li><li>视图变化后更新数据</li></ul><p>当然，它还有两个主要部分组成</p><ul><li>监听器（Observer）：对所有数据的属性进行监听</li><li>解析器（Compiler）：对每个元素节点的指令进行扫描跟解析,根据指令模板替换数据,以及绑定相应的更新函数</li></ul><h2 id="v-model-双向绑定的原理是什么-1" tabindex="-1">v-model 双向绑定的原理是什么？ <a class="header-anchor" href="#v-model-双向绑定的原理是什么-1" aria-label="Permalink to &quot;v-model 双向绑定的原理是什么？&quot;">​</a></h2><p><code>v-model</code>本质就是一个语法糖，可以看成是<code>value + input</code>方法的语法糖。 可以通过 model 属性的<code>prop</code>和<code>event</code>属性来进行自定义。原生的 v-model，会根据标签的不同生成不同的事件和属性 。</p><h2 id="双向数据绑定-v-model-的实现原理" tabindex="-1">双向数据绑定 v-model 的实现原理 <a class="header-anchor" href="#双向数据绑定-v-model-的实现原理" aria-label="Permalink to &quot;双向数据绑定 v-model 的实现原理&quot;">​</a></h2><ul><li>input 元素的动态绑定属性 :value = this.name</li><li>绑定@input 事件：<code>this.name = $event.target.value</code></li><li>data 更新触发 re-render</li></ul><p>在 input 标签的基础上自定义<code>v-model</code></p><p>input 组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">input</span></span>
<span class="line"><span style="color:#D19A66;">			type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			:</span><span style="color:#D19A66;">value</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			@</span><span style="color:#D19A66;">input</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;change&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">$event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	&lt;!-- </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		1.上面的 input 使用了 :value 而不是 v-model</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		2.上面的 change 和 model.event 要对应起来</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		3.text 属性对应起来</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    model</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        prop</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;text&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 对应的 props text</span></span>
<span class="line"><span style="color:#E06C75;">        event</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;change&#39;</span><span style="color:#7F848E;font-style:italic;"> // 触发事件</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        text</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">        default</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#98C379;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>父组件</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">CustomVModel</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="说一下-vue-双向数据绑定的原理" tabindex="-1">说一下 vue 双向数据绑定的原理 <a class="header-anchor" href="#说一下-vue-双向数据绑定的原理" aria-label="Permalink to &quot;说一下 vue 双向数据绑定的原理&quot;">​</a></h2><p>答：核心主要利用 ES5 中的 Object.defineProperty 实现的，然后利用里面的 getter 和 setter 来实现双向数据绑定的，大致就这些，其实要实现起来比这个要复杂一些，不过我大致了解过。</p><h2 id="请简单实现双向数据绑定-mvvm" tabindex="-1">请简单实现双向数据绑定 mvvm <a class="header-anchor" href="#请简单实现双向数据绑定-mvvm" aria-label="Permalink to &quot;请简单实现双向数据绑定 mvvm&quot;">​</a></h2><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;input&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">const data = {}; const input = dhocument.getElementById(&quot;input&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">Object.defineProperty(data, &quot;text&quot;, { set(value) { input.value = value;</span></span>
<span class="line"><span style="color:#ABB2BF;">this.value = value; }, }); input.onChange = function (e) { data.text =</span></span>
<span class="line"><span style="color:#ABB2BF;">e.target.value; };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="vue-双向绑定原理" tabindex="-1">Vue 双向绑定原理 <a class="header-anchor" href="#vue-双向绑定原理" aria-label="Permalink to &quot;Vue 双向绑定原理&quot;">​</a></h2><p>Vue 数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)。</p><h2 id="双向数据绑定的原理" tabindex="-1">双向数据绑定的原理 <a class="header-anchor" href="#双向数据绑定的原理" aria-label="Permalink to &quot;双向数据绑定的原理&quot;">​</a></h2><p>采用<strong>数据劫持</strong>结合<strong>发布者-订阅者模式</strong>的方式，<code>data</code>数据在初始化的时候，会实例化一个<code>Observe</code>类，在它会将<code>data</code>数据进行递归遍历，并通过<code>Object.defineProperty</code>方法，给每个值添加上一个<code>getter</code>和一个<code>setter</code>。在数据读取的时候会触发<code>getter</code>进行依赖（Watcher）收集，当数据改变时，会触发<code>setter</code>，对刚刚收集的依赖进行触发，并且更新<code>watcher</code>通知视图进行渲染。</p><h3 id="响应式原理双向绑定原理" tabindex="-1">响应式原理双向绑定原理 <a class="header-anchor" href="#响应式原理双向绑定原理" aria-label="Permalink to &quot;响应式原理双向绑定原理&quot;">​</a></h3><ul><li>Object.defineProperty（vue） ：劫持数据的 getter 和 setter</li><li>脏值检测（ angularjs ）：通过特定事件进行轮循 发布/订阅模式：通过消息发布并将消息进行订阅</li></ul><p>Vue 内部使用了 Object.defineProperty() 来实现数据响应式，通过这个函数可以监听到 set 和 get 的事件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;poetries&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// -&gt; get value</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;yyy&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// -&gt; change value</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断类型</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">obj</span><span style="color:#56B6C2;"> ||</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 递归子属性</span></span>
<span class="line"><span style="color:#61AFEF;">	observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 可枚举</span></span>
<span class="line"><span style="color:#E06C75;">		enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 可配置</span></span>
<span class="line"><span style="color:#E06C75;">		configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 自定义函数</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactiveGetter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get value&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactiveSetter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;change value&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>以上代码简单的实现了如何监听数据的 set 和 get 的事件，但是仅仅如此是不够的，因为自定义的函数一开始是不会执行的。只有先执行了依赖收集，从能在属性更新的时候派发更新，所以接下来我们需要先触发依赖收集</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;{{name}}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在解析如上模板代码时，遇到 就会进行依赖收集。</p><p>接下来我们先来实现一个 Dep 类，用于解耦属性的依赖收集和派发更新操作</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 通过 Dep 解耦属性的依赖和更新操作</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Dep</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subs</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 添加依赖</span></span>
<span class="line"><span style="color:#61AFEF;">	addSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sub</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sub</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 更新</span></span>
<span class="line"><span style="color:#61AFEF;">	notify</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">sub</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			sub</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 全局属性，通过该属性配置 Watcher</span></span>
<span class="line"><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>以上的代码实现很简单，当需要依赖收集的时候调用 addSub ，当需要派发更新的时候调用 notify 。</p><p>接下来我们先来简单的了解下 Vue 组件挂载时添加响应式的过程。在组件挂 载时，会先对所有需要的属性调用 Object.defineProperty() ，然后实例化 Watcher ，传入组件更新的回调。在实例化过程中，会对模板中的属性进行求值，触发依赖收集。</p><p>因为这一小节主要目的是学习响应式原理的细节，所以接下来的代码会<strong>简略的表达触发依赖收集时的操作</strong>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Watcher</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 将 Dep.target 指向自己</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 然后触发属性的 getter 添加监听</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 最后将 Dep.target 置空</span></span>
<span class="line"><span style="color:#E5C07B;">		Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cb</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cb</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">obj</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">		Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	update</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 获得新值</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用 update 方法更新 Dom</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cb</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>以上就是 Watcher 的简单实现，在执行构造函数的时候将 Dep.target 指向自身，从而使得收集到了对应的 Watcher ，在派发更新的时候取出对应的 Watcher 然后执行 update 函数。</p><p>接下来，需要对 defineReactive 函数进行改造，在自定义函数中添加依赖收集和派发更新相关的代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 递归子属性</span></span>
<span class="line"><span style="color:#61AFEF;">	observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> dp</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dep</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactiveGetter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get value&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将 Watcher 添加到订阅</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				dp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactiveSetter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;change value&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 执行 watcher 的 update 方法</span></span>
<span class="line"><span style="color:#E5C07B;">			dp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>以上所有代码实现了一个简易的数据响应式，核⼼思路就是手动触发一次属性 的 getter 来实现依赖收集。</p><p>现在我们就来测试下代码的效果，只需要把所有的代码复制到浏览器中执行，就会发现页面的内容全部被替换了</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;poetries&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 模拟解析到 \`{{name}}\` 触发的操作</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Watcher</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">update</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// update Dom innerText</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;yyy&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="object-defineproperty-的缺陷" tabindex="-1">Object.defineProperty 的缺陷 <a class="header-anchor" href="#object-defineproperty-的缺陷" aria-label="Permalink to &quot;Object.defineProperty 的缺陷&quot;">​</a></h4><ul><li>以上已经分析完了 Vue 的响应式原理，接下来说一点 Object.defineProperty 中的缺陷。</li><li>如果通过下标方式修改数组数据或者给对象新增属性并不会触发组件的重新渲染，因为 Object.defineProperty 不能拦截到这些操作，更精确的来说，对于数组而⾔，大部分操作都是拦截不到的，只是 Vue 内部通过重写函数的方式解决了这个问题。</li><li>对于第一个问题， Vue 提供了一个 API 解决</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;"> &lt; </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;"> &gt; | </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断是否为数组且下标是否有效</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isValidArrayIndex</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用 splice 函数触发派发更新</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 该函数已被重写</span></span>
<span class="line"><span style="color:#E5C07B;">		target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">		target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> val</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断 key 是否已经存在</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">		target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> val</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> val</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#61AFEF;"> ob</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">)._ob__</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果对象不是响应式对象，就赋值返回</span></span>
<span class="line"><span style="color:#ABB2BF;">	if (!</span><span style="color:#E06C75;font-style:italic;">ob</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">		target[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span><span style="color:#E06C75;"> = val</span></span>
<span class="line"><span style="color:#E06C75;">		return val</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 进行双向绑定</span></span>
<span class="line"><span style="color:#E06C75;">	defineReactive(ob.value, key, val)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 手动派发更新</span></span>
<span class="line"><span style="color:#E06C75;">	ob.dep.notify()</span></span>
<span class="line"><span style="color:#E06C75;">	return val</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>对于数组而⾔， Vue 内部重写了以下函数实现派发更新</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获得数组原型</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arrayProto</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> arrayMethods</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayProto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 重写以下函数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> methodsToPatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#98C379;">	&quot;push&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;pop&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;shift&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;unshift&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;splice&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;sort&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;reverse&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">methodsToPatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 缓存原生函数</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> original</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arrayProto</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 重写函数</span></span>
<span class="line"><span style="color:#61AFEF;">	def</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayMethods</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> mutator</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 先调用原生函数获得结果</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> original</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> ob</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_ob__</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> inserted</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用以下几个函数时，监听新数据</span></span>
<span class="line"><span style="color:#C678DD;">		switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;push&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;unshift&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">				inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;splice&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">				inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">inserted</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observeArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">inserted</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 手动派发更新</span></span>
<span class="line"><span style="color:#E5C07B;">		ob</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h4 id="_2-编译过程" tabindex="-1">2 编译过程 <a class="header-anchor" href="#_2-编译过程" aria-label="Permalink to &quot;2 编译过程&quot;">​</a></h4><p>想必大家在使用 Vue 开发的过程中，基本都是使用模板的方式。那么你有过「模板是怎么在浏览器中运行的」这种疑虑嘛？</p><p>首先直接把模板丢到浏览器中肯定是不能运行的，模板只是为了方便开发者进行开发。Vue 会通过编译器将模板通过几个阶段最终编译为 render 函数，然后通过执行 render 函数生成 Virtual DOM 最终映射为真实 DOM 。</p><p>接下来我们就来学习这个编译的过程，了解这个过程中大概发生了什么事情。这个过程其中⼜分为三个阶段，分别为：</p><ul><li>将模板解析为 AST</li><li>优化 AST</li><li>将 AST 转换为 render 函数</li></ul><p>在第一个阶段中，最主要的事情还是通过各种各样的正则表达式去匹配模板中的内容，然后将内容提取出来做各种逻辑操作，接下来会生成一个最基本的 AST 对象</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // 类型</span></span>
<span class="line"><span style="color:#FFFFFF;"> type</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // 标签</span></span>
<span class="line"><span style="color:#FFFFFF;"> tag,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // 属性列表</span></span>
<span class="line"><span style="color:#FFFFFF;"> attrsList</span><span style="color:#ABB2BF;">: </span><span style="color:#FFFFFF;">attrs</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // 属性映射</span></span>
<span class="line"><span style="color:#FFFFFF;"> attrsMap</span><span style="color:#ABB2BF;">: </span><span style="color:#FFFFFF;">makeAttrsMap(attrs)</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // 父节点</span></span>
<span class="line"><span style="color:#FFFFFF;"> parent,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // 子节点</span></span>
<span class="line"><span style="color:#FFFFFF;"> children</span><span style="color:#ABB2BF;">: []</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>然后会根据这个最基本的 AST 对象中的属性，进一步扩展 AST 。</li><li>当然在这一阶段中，还会进行其他的一些判断逻辑。比如说对比前后开闭标签是否一致，判断根组件是否只存在一个，判断是否符合 HTML5 Content Model 规范等等问题。</li><li>接下来就是优化 AST 的阶段。在当前版本下， Vue 进行的优化内容其实还是不多的。只是对节点进行了静态内容提取，也就是将永远不会变动的节点提取了出来，实现复用 Virtual DOM ，跳过对比算法的功能。在下一个大版本中， Vue 会在优化 AST 的阶段继续发⼒，实现更多的优化功能，尽可能的在编译阶段压榨更多的性能，比如说提取静态的属性等等优化行为。</li><li>最后一个阶段就是通过 AST 生成 render 函数了。其实这一阶段虽然分支有很多，但是最主要的目的就是遍历整个 AST ，根据不同的条件生成不同的代码罢了。</li></ul><h2 id="双向数据绑定的原理-1" tabindex="-1">双向数据绑定的原理 <a class="header-anchor" href="#双向数据绑定的原理-1" aria-label="Permalink to &quot;双向数据绑定的原理&quot;">​</a></h2><ul><li>Vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。主要分为以下几个步骤：</li><li>需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter 和 getter 这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化</li><li>compile 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</li><li>Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁，主要做的事情是: <ul><li>① 在自身实例化时往属性订阅器(dep)里面添加自己</li><li>② 自身必须有一个 update()方法</li><li>③ 待属性变动 dep.notice()通知时，能调用自身的 update()方法，并触发 Compile 中绑定的回调，则功成身退。</li></ul></li><li>MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据 model 变更的双向绑定效果。</li></ul><h2 id="vue2-和-vue3-双向数据绑定原理发生了改变" tabindex="-1">Vue2 和 Vue3 双向数据绑定原理发生了改变 <a class="header-anchor" href="#vue2-和-vue3-双向数据绑定原理发生了改变" aria-label="Permalink to &quot;Vue2 和 Vue3 双向数据绑定原理发生了改变&quot;">​</a></h2><h3 id="_1-vue2-object-defineproperty" tabindex="-1">1. Vue2: <code>object.defineProperty()</code> <a class="header-anchor" href="#_1-vue2-object-defineproperty" aria-label="Permalink to &quot;1. Vue2: \`object.defineProperty()\`&quot;">​</a></h3><p>vue2 数据双向绑定是由数据劫持结合发布-订阅的模式实现的，通过<code>object.defineProperty()</code>来劫持对象属性的<code>getter</code>和<code>setter</code>操作，在数据变动时发布消息给订阅者，触发响应的监听回调。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> resultGetter</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> resultSetter</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>observer</code>：数据监听器，监听数据对象进行遍历，包括子属性对象的属性都加上<code>getter</code>和<code>setter</code>。</li><li><code>compile</code>：解析模板指令，将模板中的遍历替换成数据，然后初始化渲染页面视图，并将每个指令对应节点绑定更新函数，添加监听数据的订阅者，一旦数据又变化，收到通知，更新视图。</li><li><code>watcher</code>：订阅者是<code>observer</code>和 c<code>ompile</code>之间的通信桥梁，在自身实例化时往消息订阅器 dep 里添加自己，自身必须有个<code>updata()</code>方法，待属性变动<code>dep.notice()</code>通知时，能调用自身的<code>updata()</code>方法，并触发<code>compiler</code>中绑定的回调。</li><li><code>depend</code>: 消息订阅器，当有多个订阅者的时候，需要有一个统一维护者。<code>depend</code>用来收集订阅者，内部维护了一个数组。</li></ul><h3 id="_2-vue3-proxy" tabindex="-1">2. Vue3: <code>Proxy</code> <a class="header-anchor" href="#_2-vue3-proxy" aria-label="Permalink to &quot;2. Vue3: \`Proxy\`&quot;">​</a></h3><p><code>vue3</code>中使用了<code>ES6</code>的<code>Proxy</code> API 对数据代理。</p><p>相比<code>vue2.x</code>，使用<code>proxy</code>的优势如下：</p><ul><li><code>defineProperty</code>只能监听某个属性，不能对全对象监听</li><li>可以省去<code>for in</code>，闭包等内容来提升效率(直接绑定整个对象即可)</li><li>可以监听数组，不用再去单独的对数组做特异性操作<code>vue3.x</code>可以检测到数组内部数据的变化。</li></ul>`,1698),N=[T];function _(R,L,z,$,H,W){return e(),p("div",null,N)}const Q=l(I,[["render",_]]);export{J as __pageData,Q as default};
