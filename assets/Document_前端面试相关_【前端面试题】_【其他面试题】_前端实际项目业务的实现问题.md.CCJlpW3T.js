import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.DVTrgelf.js";const e="/FrontEndInterviewQuestion/assets/744b30e248dd4ad98b12ce130f29ff8atplv-k3u1fbpfcp-jj-mark3024000q75.CwHbLVVf.webp",p="/FrontEndInterviewQuestion/assets/image-20240401183045402.DB9R5PCM.png",m=JSON.parse('{"title":"前端实际项目业务的实现问题","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端面试相关/【前端面试题】/【其他面试题】/前端实际项目业务的实现问题.md","filePath":"Document/前端面试相关/【前端面试题】/【其他面试题】/前端实际项目业务的实现问题.md","lastUpdated":1716655893000}'),o={name:"Document/前端面试相关/【前端面试题】/【其他面试题】/前端实际项目业务的实现问题.md"},t=l('<h1 id="前端实际项目业务的实现问题" tabindex="-1">前端实际项目业务的实现问题 <a class="header-anchor" href="#前端实际项目业务的实现问题" aria-label="Permalink to &quot;前端实际项目业务的实现问题&quot;">​</a></h1><p>这里主要是一些生产中真实存在的问题</p><h2 id="关于模块化" tabindex="-1">关于模块化 <a class="header-anchor" href="#关于模块化" aria-label="Permalink to &quot;关于模块化&quot;">​</a></h2><p>首先模块化的目的是将程序划分为一个个小的结构。在这些结构中编写自己的逻辑代码，有自己的作用域，不会影响到其他的结构。</p><p>同时这些结构可以将自己希望暴露的函数、变量、对象等导出给其他结构使用，也可通过某种方式，将另外结构中的函数、变量、对象等导入使用。</p><h2 id="微前端" tabindex="-1">微前端 <a class="header-anchor" href="#微前端" aria-label="Permalink to &quot;微前端&quot;">​</a></h2><p>随着项目的开发，会出现一个前端项目模块巨多的情况，不利于开发和维护。微前端就能帮助我们解决这个问题，帮我们实现了前端复杂项目的解耦，同时能做到跨团队和跨部门协同开发。 对于微前端，它与技术栈无关（主框架不限制介入应用的技术栈，微应用具有完全的自主权），各个微应用间仓库独立，每个微应用之间状态隔离，运行时状态不共享。 常见的微前端实现方案：</p><ul><li>基于 iframe 的完全隔离，iframe 是浏览器自带的功能，使用简单，隔离完美，不过它无法保持路由状态，页面一刷新状态就丢失，同时 iframe 中的状态无法突破对应的应用，同时整个应用是全量加载，速度慢。</li><li>基于 single-spa 路由劫持的方案。qiankun 就是基于这种方案实现的，通过对 single-spa 做一层封装，根据执行环境的修改，来解析微应用的资源，实现了 JS 沙箱、样式隔离等特性。</li><li>借鉴 WebComponent 思想的 micro-app，通过 CustomElement 结合自定义的 ShadowDom，将微前端封装成一个类 Web Component 组件。</li></ul><h2 id="前端低代码的认识" tabindex="-1">前端低代码的认识 <a class="header-anchor" href="#前端低代码的认识" aria-label="Permalink to &quot;前端低代码的认识&quot;">​</a></h2><p>低代码平台一般提供一个可视化的编辑页面，供知晓低代码开发规则的人员进行编程，是一种声明式编程。 常见的低代码工作流程如图：</p><p><img src="'+e+'" alt="image.png"></p><p>低代码的好处：</p><ul><li>门槛低，所见即所得，上手容易</li><li>基于现成组件库开发，开发速度快</li></ul><p>低代码的缺点：</p><ul><li>灵活性差，只适合某些特定领域</li><li>调试困难，对使用者来说是个黑盒</li><li>对运行环境有一定要求，兼容性不好，低代码开发的兼容性完全取决于低代码平台的支持</li></ul><h2 id="前端权限设计思路" tabindex="-1">前端权限设计思路 <a class="header-anchor" href="#前端权限设计思路" aria-label="Permalink to &quot;前端权限设计思路&quot;">​</a></h2><p>项目中，尤其是管理后台必不可少的一个环节就是权限设计。</p><p>通常一个系统下的不同用户会对应不同的角色，不同角色会对应不同的组织。</p><p>在进入到管理里后台的时候会去请求对应的权限接口，这个接口里有和后台约定好的权限标识内容，如果权限管理不是很复杂，可以将当前用户的所有权限标识一次性返回，前端进行一个持久化存储，之后根据规则处理即可。</p><p>如果是个极为复杂的权限管理，甚至存在不同操作导致同一用户对应后续流程权限变化的情况，这里就建议用户首次登录管理后台时，获取的是最高一层权限，即可以看到的页面权限，之后在用户每次做了不同操作，切换页面的时候，根据约定好的规则，在页面路由切换的时候去请求下一个页面对应的权限（可以精确到每个交互动作），这样能更加精确的管理权限。</p><h2 id="对-web-标准、可用性、可访问性的理解" tabindex="-1">对 web 标准、可用性、可访问性的理解 <a class="header-anchor" href="#对-web-标准、可用性、可访问性的理解" aria-label="Permalink to &quot;对 web 标准、可用性、可访问性的理解&quot;">​</a></h2><ul><li>可用性(Usability)：产品是否容易上手，用户能否完成任务，效率如何，以及这过程中用户的主观感受可好，是从用户的角度来看产品的质量。可用性好意味着产品质量高，是企业的核⼼竞争⼒</li><li>可访问性(Accessibility)：Web 内容对于残障用户的可阅读和可理解性</li><li>可维护性(Maintainability)：一般包含两个层次，一是当系统出现问题时，快速定位并解决问题的成本，成本低则可维护性好。二是代码是否容易被⼈理解，是否容易修改和增强功能。</li></ul><h2 id="taro-是如何将-react-代码转换成对应的小程序代码或其他平台代码" tabindex="-1">taro 是如何将 react 代码转换成对应的小程序代码或其他平台代码 <a class="header-anchor" href="#taro-是如何将-react-代码转换成对应的小程序代码或其他平台代码" aria-label="Permalink to &quot;taro 是如何将 react 代码转换成对应的小程序代码或其他平台代码&quot;">​</a></h2><p>平时使用 React JSX 进行开发时，要知道 React 将其核心功能分成了三部分：React Core（负责处理核心 API、与终端平台和渲染解耦，提供了 createElement、createClass、Component、Children 等方法）、React Renderer（渲染器，定义了 React Tree 如何构建以接轨不同平台，有 React-dom、React-Natvie 等）、React Reconciler（调和器，负责 diff 算法，接驳 patch 行为。为渲染器提供基础计算能力，主要有 16 版本之前的 Stack Reconciler 和 16 及其之后的 Fiber Reconciler）。</p><p>React 团队将 Reconciler 作为一个单独的包发布，任何平台的渲染器函数只要在 HostConfig（宿主配置）内置基本方法，就可以构造自己的渲染逻辑。</p><p>有了 react-reconciler 的支持。Taro 团队就是提供了 taro-react（实现了 HostConfig）包来连接 react-reconciler 和 taro-runtime。</p><p>开发者写的 React 代码，Taro 通过 CLI 将代码进行 webpack 打包，taro 实现了一套完整的 DOM 和 BOM API 在各个平台的适配，打包完之后，就可以将程序渲染到对应的平台上。 核心就在于对输入的源代码的语法分析，语法树构建，随后对语法树进行转换操作再解析生成目标代码的过程。</p><h2 id="token-可以放在-cookie-里吗" tabindex="-1">token 可以放在 cookie 里吗？ <a class="header-anchor" href="#token-可以放在-cookie-里吗" aria-label="Permalink to &quot;token 可以放在 cookie 里吗？&quot;">​</a></h2><p>当被问这个问题的时候，第一时间要想到安全问题。通常回答不可以，因为存在 CSRF（跨站请求伪造）风险，攻击者可以冒用 Cookie 中的信息来发送恶意请求。解决 CSRF 问题，可以设置同源检测（Origin 和 Referer 认证），也可以设置 Samesite 为 Strict。最好嘛，就是不把 token 放在 cookie 里咯。</p><h2 id="前端埋点的实现-说说看思路" tabindex="-1">前端埋点的实现，说说看思路 <a class="header-anchor" href="#前端埋点的实现-说说看思路" aria-label="Permalink to &quot;前端埋点的实现，说说看思路&quot;">​</a></h2><p>对于埋点方案：一般分为手动埋点（侵入性强，和业务强关联，用于需要精确搜集并分析数据，不过该方式耗时耗力，且容易出现误差，后续要调整，成本较高）、可视化埋点（提供一个可视化的埋点控制台，只能在可视化平台已支持的页面进行埋点）、无埋点（就是全埋点，监控页面发生的一切行为，优点是前端只需要处理一次埋点脚本，不过数据量过大会产生大量的脏数据，需要后端进行数据清洗）。</p><p>埋点通常传采用 img 方式来上传，首先所有浏览器都支持 Image 对象，并且记录的过程很少出错，同时不存在跨域问题，请求 Image 也不会阻塞页面的渲染。建议使用 1*1 像素的 GIF，其体积小。</p><p>现在的浏览器如果支持 Navigator.sendBeacon(url, data)方法，优先使用该方法来实现，它的主要作用就是用于统计数据发送到 web 服务器。当然如果不支持的话就继续使用图片的方式来上传数据。</p><h2 id="说说封装组件的思路" tabindex="-1">说说封装组件的思路 <a class="header-anchor" href="#说说封装组件的思路" aria-label="Permalink to &quot;说说封装组件的思路&quot;">​</a></h2><p>要考虑组件的灵活性、易用性、复用性。 常见的封装思路是，对于视图层面，如相似度高的视图，进行一个封装，提供部分参数方便使用者修改。对于业务复用度较高的，提取出业务组件。</p><h2 id="项目开发阶段" tabindex="-1">项目开发阶段 <a class="header-anchor" href="#项目开发阶段" aria-label="Permalink to &quot;项目开发阶段&quot;">​</a></h2><p><img src="'+p+`" alt="image-20240401183045402"></p><h2 id="一个-feed-流-有哪些展现方式-如果当前页面可视区有-5-个格子-而你有-20-条信息需要展示-请问有哪些自动展示的算法" tabindex="-1">一个 feed 流，有哪些展现方式？如果当前页面可视区有 5 个格子，而你有 20 条信息需要展示，请问有哪些自动展示的算法？ <a class="header-anchor" href="#一个-feed-流-有哪些展现方式-如果当前页面可视区有-5-个格子-而你有-20-条信息需要展示-请问有哪些自动展示的算法" aria-label="Permalink to &quot;一个 feed 流，有哪些展现方式？如果当前页面可视区有 5 个格子，而你有 20 条信息需要展示，请问有哪些自动展示的算法？&quot;">​</a></h2><p>Feed 流的展现方式有多种，主要包括以下几种：</p><ol><li><strong>时间线（Timeline）</strong>：按照内容更新的时间顺序展示，用户可以看到最新发布的内容。</li><li><strong>权重排序（Rank）</strong>：根据算法计算内容的权重，决定内容展示的先后顺序。</li><li><strong>卡片式布局</strong>：以卡片的形式展示内容，适合轻量级和个性化的信息展示。</li><li><strong>瀑布流</strong>：多列布局，适合图片和视觉内容的展示。</li><li><strong>全屏流</strong>：通常用于视频内容，提供沉浸式体验。</li></ol><p>对于一个页面可视区只有 5 个格子，而需要展示 20 条信息的情况，可以采用以下自动展示算法：</p><ol><li><strong>分页显示</strong>：将 20 条信息分成多个页面，每个页面显示 5 条，用户可以通过翻页查看更多内容。</li><li><strong>无限滚动</strong>：当用户滚动到页面底部时，自动加载并展示下一批内容。</li><li><strong>轮播</strong>：在可视区域内自动轮播展示信息，每隔一定时间切换到下一组内容。</li><li><strong>懒加载</strong>：只加载进入或即将进入可视区域的内容，当用户滚动页面时，逐步加载其他信息。</li></ol><p>这些方法可以有效地管理和展示大量信息，同时保持用户界面的清晰和用户体验的流畅。根据具体的应用场景和用户需求，可以选择最合适的展示方式和算法。</p><h2 id="移动端的缓存机制有哪几种" tabindex="-1">移动端的缓存机制有哪几种？ <a class="header-anchor" href="#移动端的缓存机制有哪几种" aria-label="Permalink to &quot;移动端的缓存机制有哪几种？&quot;">​</a></h2><p>移动端的缓存机制在优化应用性能和用户体验方面非常重要。以下是几种常见的移动端缓存策略：</p><ol><li><strong>Service Worker Cache</strong>： <ul><li>使用 Service Worker 来缓存资源文件，使应用可以在离线状态下访问。</li><li>需要在 HTTPS 协议中应用。</li></ul></li><li><strong>HTML5 离线应用缓存</strong>： <ul><li>使用 Application Cache（AppCache）来定义哪些文件应该缓存，以便在离线时访问。</li><li>通过在 HTML 标签中添加 <code>manifest</code> 属性来启用应用缓存。</li></ul></li><li><strong>LocalStorage 本地缓存</strong>： <ul><li>将从网络获取的数据缓存在浏览器的 LocalStorage 中。</li><li>适用于轻量级数据，如图片缓存。</li></ul></li></ol><p>这些缓存机制可以有效地提高应用性能，减少网络请求，同时根据具体需求选择合适的缓存策略。</p><h2 id="小程序如何与-native-通信" tabindex="-1">小程序如何与 native 通信？ <a class="header-anchor" href="#小程序如何与-native-通信" aria-label="Permalink to &quot;小程序如何与 native 通信？&quot;">​</a></h2><p>在微信小程序中，与原生（native）通信通常涉及两个方向：从小程序到原生，以及从原生到小程序。这种通信可以通过以下方式实现：</p><h3 id="_1-小程序向原生通信" tabindex="-1">1.小程序向原生通信： <a class="header-anchor" href="#_1-小程序向原生通信" aria-label="Permalink to &quot;1.小程序向原生通信：&quot;">​</a></h3><ul><li><strong>Webview PostMessage</strong>：小程序内嵌的 Webview 可以使用 <code>postMessage</code> 方法向原生发送消息。原生端需要监听 Webview 的消息事件，然后根据消息内容执行相应的操作。这是一种实时的双向通信方式，适用于小程序内嵌 H5 页面与原生之间的交互.</li><li><strong>URL Schema</strong>：小程序可以通过 URL Schema 向原生发送请求，原生端监听特定的 URL Schema，解析请求参数并执行相应的操作。这种方式适用于一些简单的场景，如启动原生页面或执行特定功能。</li></ul><h3 id="_2-原生向小程序通信" tabindex="-1">2.原生向小程序通信： <a class="header-anchor" href="#_2-原生向小程序通信" aria-label="Permalink to &quot;2.原生向小程序通信：&quot;">​</a></h3><ul><li><strong>Webview PostMessage</strong>：原生端可以通过 Webview 的 <code>postMessage</code> 方法向小程序发送消息。小程序需要在页面中监听 Webview 的消息事件，然后根据消息内容执行相应的操作。这也是一种实时的双向通信方式。</li><li><strong>URL Schema</strong>：原生端可以通过 URL Schema 向小程序发送请求，小程序监听特定的 URL Schema，解析请求参数并执行相应的操作。</li></ul><p>总之，小程序与原生之间的通信可以通过 Webview 的 <code>postMessage</code> 或 URL Schema 实现。具体选择哪种方式取决于场景和需求。</p><h2 id="jsbridge-如何实现" tabindex="-1">jsbridge 如何实现？ <a class="header-anchor" href="#jsbridge-如何实现" aria-label="Permalink to &quot;jsbridge 如何实现？&quot;">​</a></h2><p><a href="https://juejin.cn/post/7355117271213899776" target="_blank" rel="noreferrer">JSBridge 原理 - 前端 H5 与客户端 Native 交互 - 掘金 (juejin.cn)</a></p><p>JSBridge 是一种在混合开发中常用的技术，它允许 Web 端和 Native 端进行双向通信。</p><p>实现 JSBridge 主要涉及以下几个步骤：</p><ol><li><strong>Native 到 Web 的通信</strong>： <ul><li>在 Android 中，可以使用 <code>WebView</code> 的 <code>evaluateJavascript</code> 方法来执行 JavaScript 代码。</li><li>在 iOS 中，可以使用 <code>WKWebView</code> 的 <code>evaluateJavaScript</code> 方法。</li></ul></li><li><strong>Web 到 Native 的通信</strong>： <ul><li><strong>拦截 URL 请求</strong>：自定义一个 URL Schema，然后在 Native 端拦截所有 WebView 发出的请求。如果请求匹配自定义的 Schema，则 Native 端解析参数并执行相应操作。</li><li><strong>注入 JS API</strong>：在 WebView 中注入 JavaScript 代码，这样 Web 端就可以直接调用这些注入的方法来与 Native 端通信。</li></ul></li><li><strong>双向通信</strong>： <ul><li>通过在一端调用时加入 <code>callbackId</code> 来标记对应的回调，另一端接收到调用请求后执行操作，并带有 <code>callbackId</code> 进行回调，从而实现双向通信。</li></ul></li></ol><p>这些方法允许 Web 端调用 Native 功能，如访问设备硬件，同时也允许 Native 端执行 Web 端的 JavaScript 代码</p><h2 id="过万条数据如何加载和渲染" tabindex="-1">过万条数据如何加载和渲染？ <a class="header-anchor" href="#过万条数据如何加载和渲染" aria-label="Permalink to &quot;过万条数据如何加载和渲染？&quot;">​</a></h2><p>处理和渲染 Web 前端的过万条数据时，可以采用以下策略：</p><p><strong>虚拟滚动</strong>：</p><ul><li>只渲染可视区域内的数据，当用户滚动时，动态加载和卸载数据</li></ul><p><strong>分批渲染</strong>：</p><ul><li>将数据分批次渲染，例如每批渲染 100 条，使用<code>setTimeout</code>或<code>requestAnimationFrame</code>来控制渲染节奏</li></ul><p><strong>分页加载</strong>：</p><ul><li>将数据分页，每次只加载和渲染一页数据，用户可以通过翻页查看更多内容</li></ul><p><strong>懒加载</strong>：</p><ul><li>只加载进入或即将进入可视区域的内容，当用户滚动页面时，逐步加载其他信息</li></ul><p>这些方法可以有效地管理和展示大量信息，同时保持用户界面的清晰和用户体验的流畅。根据具体的应用场景和用户需求，可以选择最合适的展示方式和算法。</p><h2 id="如何在前端解析二进制-流媒体、图片二进制数据怎样渲染到页面上" tabindex="-1">如何在前端解析二进制，流媒体、图片二进制数据怎样渲染到页面上？ <a class="header-anchor" href="#如何在前端解析二进制-流媒体、图片二进制数据怎样渲染到页面上" aria-label="Permalink to &quot;如何在前端解析二进制，流媒体、图片二进制数据怎样渲染到页面上？&quot;">​</a></h2><p>MDN 文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest_API/Sending_and_Receiving_Binary_Data" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest_API/Sending_and_Receiving_Binary_Data</a></p><p>在前端解析二进制数据，特别是流媒体和图片，通常涉及以下步骤：</p><ol><li><strong>二进制数据的获取</strong>： <ul><li>使用 <code>XMLHttpRequest</code> 或 <code>fetch</code> API 从服务器获取二进制数据。设置 <code>responseType</code> 为 <code>&#39;arraybuffer&#39;</code> 或 <code>&#39;blob&#39;</code> 来接收二进制数据.</li></ul></li><li><strong>流媒体的渲染</strong>： <ul><li>对于视频流，可以使用 <code>MediaSource</code> API 和 <code>URL.createObjectURL</code> 方法来处理二进制视频流，并将其渲染到 <code>&lt;video&gt;</code> 标签中</li><li>通过分段请求视频数据并逐步添加到 <code>MediaSource</code> 对象中，可以实现流式播放。</li></ul></li><li><strong>图片二进制数据的渲染</strong>： <ul><li>将二进制数据转换为 <code>Blob</code> 对象，然后使用 <code>URL.createObjectURL</code> 创建一个临时的 URL，并将其赋值给 <code>&lt;img&gt;</code> 标签的 <code>src</code> 属性来显示图片</li><li>另一种方法是将二进制数据转换为 <code>Base64</code> 编码字符串，然后将其作为 <code>data URL</code> 赋值给 <code>&lt;img&gt;</code> 的 <code>src</code> 属性</li></ul></li></ol><p>这些方法允许前端应用直接处理和渲染来自服务器的二进制数据，无论是流媒体还是图片。根据具体的应用场景和性能要求，可以选择最合适的方法来实现。</p><h2 id="web-前端如何解析二进制音频、视频" tabindex="-1">web 前端如何解析二进制音频、视频？ <a class="header-anchor" href="#web-前端如何解析二进制音频、视频" aria-label="Permalink to &quot;web 前端如何解析二进制音频、视频？&quot;">​</a></h2><p>在前端解析二进制音频和视频时，我们可以使用不同的技术和 API 来处理流媒体数据。以下是一些方法：</p><ol><li><strong>音频解析</strong>： <ul><li>对于音频，我们可以使用<code>AudioContext</code> API 来解析二进制音频数据。这允许我们创建音频源、添加效果、控制音量等。</li><li>使用<code>fetch</code>或<code>XMLHttpRequest</code>获取音频数据，然后将其解码为<code>AudioBuffer</code>，并使用<code>AudioContext</code>播放。</li></ul></li><li><strong>视频解析</strong>： <ul><li>对于视频，我们可以使用<code>&lt;video&gt;</code>标签来渲染二进制视频数据。设置<code>src</code>属性为<code>blob</code> URL，然后使用浏览器内置的视频解码器进行播放。</li><li>使用<code>MediaSource</code> API 来动态生成视频流，然后将其添加到<code>&lt;video&gt;</code>标签中。</li></ul></li><li><strong>流式加载</strong>： <ul><li>对于流式加载，我们可以使用<code>MediaSource</code> API，将视频流分段加载并添加到<code>MediaSource</code>对象中，从而实现流式播放。</li></ul></li><li><strong>格式支持</strong>： <ul><li>不同浏览器支持不同的音频和视频格式。我们需要根据浏览器的支持情况选择合适的格式，如 WebM、MP4、Ogg 等。</li></ul></li></ol><p>下面是一个示例，演示如何使用<code>MediaSource</code> API 来流式加载和播放二进制视频数据：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">video</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myVideo&quot;</span><span style="color:#D19A66;"> controls</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">video</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> videoUrl</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;https://example.com/my-video.mp4&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 替换为你的视频URL</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> videoElement</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;myVideo&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> mediaSource</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MediaSource</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	videoElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> URL</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mediaSource</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	mediaSource</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sourceopen&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> sourceBuffer</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> mediaSource</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addSourceBuffer</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&#39;video/mp4; codecs=&quot;avc1.42E01E, mp4a.40.2&quot;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">videoUrl</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> videoData</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arrayBuffer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		sourceBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendBuffer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">videoData</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>这样，我们就可以使用<code>MediaSource</code> API 来流式加载和播放二进制视频数据了。</p><h2 id="web-前端文件如何显示上传百分比" tabindex="-1">web 前端文件如何显示上传百分比？ <a class="header-anchor" href="#web-前端文件如何显示上传百分比" aria-label="Permalink to &quot;web 前端文件如何显示上传百分比？&quot;">​</a></h2><p>在 Web 前端显示文件上传百分比，通常涉及以下步骤：</p><ol><li>使用 <code>XMLHttpRequest</code> 或 <code>fetch</code> API 发起文件上传请求。</li><li>监听上传过程中的 <code>progress</code> 事件来获取已上传的数据量和总数据量。</li><li>计算上传百分比并更新进度条或其他 UI 组件。</li></ol><p>以下是一个使用 <code>XMLHttpRequest</code> 的示例代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> uploadFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">file</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> formData</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FormData</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	formData</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;file&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 监听上传进度事件</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">upload</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&quot;progress&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">lengthComputable</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> percentComplete</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">round</span><span style="color:#ABB2BF;">((</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">loaded</span><span style="color:#56B6C2;"> /</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">total</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 更新进度条或显示上传百分比</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">percentComplete</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;% uploaded&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#D19A66;">		false</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置请求完成后的回调函数</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&quot;load&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Upload complete!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#D19A66;">		false</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置请求失败后的回调函数</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&quot;error&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Upload failed.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#D19A66;">		false</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置请求被用户取消后的回调函数</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&quot;abort&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Upload cancelled.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#D19A66;">		false</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 发送文件数据</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;POST&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;your-upload-url-here&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">formData</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p>在这个示例中，我们创建了一个 <code>uploadFile</code> 函数，它接受一个文件对象作为参数。我们使用 <code>FormData</code> 对象来构建一个表单数据集，然后将文件添加到这个集合中。通过监听 <code>xhr.upload</code> 的 <code>progress</code> 事件，我们可以获取上传进度，并计算出上传百分比。然后，我们可以使用这个百分比来更新进度条或在控制台中打印出来。</p><p>请注意，你需要将 <code>&#39;your-upload-url-here&#39;</code> 替换为实际的文件上传处理 URL。此外，根据实际情况，你可能需要添加额外的错误处理和用户反馈机制。</p><h2 id="web-前端如何制作一个富文本-需要考虑哪些结构" tabindex="-1">web 前端如何制作一个富文本，需要考虑哪些结构？ <a class="header-anchor" href="#web-前端如何制作一个富文本-需要考虑哪些结构" aria-label="Permalink to &quot;web 前端如何制作一个富文本，需要考虑哪些结构？&quot;">​</a></h2><p>富文本编辑器是一种可内嵌于浏览器、所见即所得的文本编辑器，通常提供类似于 Microsoft Word 的编辑功能，使用户可以对文本进行格式化、插入图片和链接、调整字体样式等操作。在前端开发中，我们可以使用 JavaScript、HTML 和 CSS 来实现富文本编辑器。</p><p>以下是制作富文本编辑器时需要考虑的一些结构和步骤：</p><ol><li><strong>HTML 元素</strong>： <ul><li>首先，我们需要一个用于输入和展示文本内容的 HTML 元素，比如一个 <code>&lt;div&gt;</code> 标签。这个元素将作为富文本编辑器的容器。</li></ul></li><li><strong>JavaScript 逻辑</strong>： <ul><li>使用 JavaScript 来处理用户的输入和编辑操作。</li><li>监听用户的键盘事件、鼠标事件等，以便实现各种编辑功能。</li><li>根据用户的操作，更新 HTML 元素的内容。</li></ul></li><li><strong>CSS 样式</strong>： <ul><li>使用 CSS 来美化富文本编辑器的界面。</li><li>设计工具栏、菜单栏、按钮等界面元素的样式。</li><li>考虑不同浏览器之间的差异，确保样式在各个浏览器中一致。</li></ul></li><li><strong>数据结构</strong>： <ul><li>考虑如何维护富文本编辑器的数据结构，以便在用户编辑时保存和处理文本内容。</li><li>可以使用 JSON 或其他数据结构来表示富文本内容，方便后续的序列化和反序列化。</li></ul></li><li><strong>光标和选区管理</strong>： <ul><li>实现光标的移动、选区的选择和修改。</li><li>使用浏览器提供的 Selection 和 Range 对象来处理光标和选区。</li></ul></li><li><strong>图片和链接插入</strong>： <ul><li>考虑如何让用户插入图片和链接。</li><li>实现图片上传、链接输入和展示。</li></ul></li><li><strong>撤销和重做功能</strong>： <ul><li>考虑如何实现撤销和重做功能，以便用户可以回退和恢复编辑操作。</li></ul></li><li><strong>性能优化</strong>： <ul><li>如果文本内容很大，需要考虑性能问题，比如如何快速渲染和处理大量文本。</li></ul></li></ol><p>总之，制作一个富文本编辑器需要综合考虑 HTML 结构、JavaScript 逻辑、CSS 样式、数据结构和用户体验，以便实现一个功能完善、易用且美观的编辑器。</p><h2 id="html5-的播放器怎么做-视频直播如何在浏览器里面实现-hls-、-rtmp" tabindex="-1">html5 的播放器怎么做？视频直播如何在浏览器里面实现？ HLS 、 RTMP <a class="header-anchor" href="#html5-的播放器怎么做-视频直播如何在浏览器里面实现-hls-、-rtmp" aria-label="Permalink to &quot;html5 的播放器怎么做？视频直播如何在浏览器里面实现？ HLS 、 RTMP&quot;">​</a></h2><p>要在浏览器中实现 HTML5 视频播放器和视频直播，您可以遵循以下步骤：</p><ol><li><strong>HTML5 视频播放器</strong>： <ul><li>使用 <code>&lt;video&gt;</code> 标签创建播放器的基本结构。</li><li>为播放器添加必要的控件，如播放/暂停按钮、音量控制、进度条等。</li><li>可以使用开源库如 Video.js 来快速实现一个功能丰富的视频播放器：<a href="https://videojs.com/%E3%80%82" target="_blank" rel="noreferrer">https://videojs.com/。</a></li></ul></li><li><strong>视频直播</strong>： <ul><li>对于 HLS（HTTP Live Streaming）直播，您可以直接在 <code>&lt;video&gt;</code> 标签中指定 HLS 流的 URL。大多数现代浏览器支持 HLS，但如果需要额外的兼容性，可以使用如 hls.js 的库来在不支持的浏览器中播放 HLS 流。</li><li>对于 RTMP（Real-Time Messaging Protocol）直播，由于现代浏览器不直接支持 RTMP，您可能需要将 RTMP 流转换为 HLS 或其他支持的格式。这通常需要服务器端的转码服务，例如使用 Nginx 和 FFmpeg 来实现：<a href="https://www.codewithfaraz.com/content/342/build-your-own-html5-video-player-with-html-css-and-javascript%E3%80%82" target="_blank" rel="noreferrer">https://www.codewithfaraz.com/content/342/build-your-own-html5-video-player-with-html-css-and-javascript。</a></li></ul></li></ol><p>以下是一个简单的 HTML5 视频播放器示例：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">video</span><span style="color:#D19A66;"> width</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;500&quot;</span><span style="color:#D19A66;"> controls</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">source</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;path-to-your-video.mp4&quot;</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;video/mp4&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">video</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对于视频直播，您可以使用类似的结构，但是 <code>src</code> 属性应该指向您的直播流地址。</p><p>请注意，实现视频直播还涉及到服务器端的配置和流媒体协议的选择。</p><p>可能需要根据具体的应用场景和需求来选择合适的技术和工具。</p><p>如果您需要更详细的指导或示例代码，可以参考相关的开源项目和文档。：<a href="https://techstacker.com/how-to-embed-mp4-video-html5-with-controls/" target="_blank" rel="noreferrer">https://techstacker.com/how-to-embed-mp4-video-html5-with-controls/</a></p><h2 id="如何在浏览器里面裁剪图片-如何裁剪视频-对视频做逐帧分析" tabindex="-1">如何在浏览器里面裁剪图片？如何裁剪视频，对视频做逐帧分析？ <a class="header-anchor" href="#如何在浏览器里面裁剪图片-如何裁剪视频-对视频做逐帧分析" aria-label="Permalink to &quot;如何在浏览器里面裁剪图片？如何裁剪视频，对视频做逐帧分析？&quot;">​</a></h2><p>在浏览器中裁剪图片和对视频进行逐帧分析可以使用不同的技术和 API。让我为您详细介绍一下这些方法。</p><h2 id="图片裁剪" tabindex="-1">图片裁剪 <a class="header-anchor" href="#图片裁剪" aria-label="Permalink to &quot;图片裁剪&quot;">​</a></h2><h3 id="使用-css-属性进行图片裁剪" tabindex="-1">使用 CSS 属性进行图片裁剪 <a class="header-anchor" href="#使用-css-属性进行图片裁剪" aria-label="Permalink to &quot;使用 CSS 属性进行图片裁剪&quot;">​</a></h3><ol><li><strong>使用<code>width</code>、<code>height</code>和<code>overflow</code>属性</strong>： <ul><li>将图片包裹在一个<code>&lt;div&gt;</code>元素中，设置指定的宽度和高度，并将<code>overflow</code>设置为<code>hidden</code>。这样可以裁剪图片，只显示指定区域内的部分。</li></ul></li><li><strong>使用<code>object-fit</code>和<code>object-position</code>属性</strong>： <ul><li><code>object-fit</code>属性定义了如何调整图片以适应其容器。</li><li><code>object-position</code>属性定义了图片在容器中的位置。</li></ul></li></ol><p>以下是一个使用<code>object-fit</code>的示例代码：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">img</span></span>
<span class="line"><span style="color:#D19A66;">	src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;path-to-your-image.jpg&quot;</span></span>
<span class="line"><span style="color:#D19A66;">	style</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width: 300px; height: 200px; object-fit: cover;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="视频逐帧分析" tabindex="-1">视频逐帧分析 <a class="header-anchor" href="#视频逐帧分析" aria-label="Permalink to &quot;视频逐帧分析&quot;">​</a></h2><p>MDN 文档：<a href="https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/requestVideoFrameCallback" target="_blank" rel="noreferrer">https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/requestVideoFrameCallback</a></p><p>参考文章：<a href="https://web.dev/articles/requestvideoframecallback-rvfc?hl=zh-cn" target="_blank" rel="noreferrer">使用 requestVideoFrameCallback() 对视频执行高效的每视频帧操作 | Articles | web.dev</a></p><h3 id="使用requestvideoframecallback-方法" tabindex="-1">使用<code>requestVideoFrameCallback()</code>方法 <a class="header-anchor" href="#使用requestvideoframecallback-方法" aria-label="Permalink to &quot;使用\`requestVideoFrameCallback()\`方法&quot;">​</a></h3><ul><li><code>requestVideoFrameCallback()</code>方法允许您在每个视频帧发送到合成器时注册一个回调函数。</li><li>这样可以执行有效的逐帧操作，例如视频处理、绘制到画布、视频分析或与外部音频源同步。</li></ul><p>以下是使用<code>requestVideoFrameCallback()</code>的示例代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> video</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;video&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> doSomethingWithTheFrame</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">now</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">metadata</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 在这里处理视频帧</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">now</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">metadata</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 重新注册回调以获取下一帧</span></span>
<span class="line"><span style="color:#E5C07B;">	video</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">requestVideoFrameCallback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">doSomethingWithTheFrame</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 最初注册回调以获取第一帧</span></span>
<span class="line"><span style="color:#E5C07B;">video</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">requestVideoFrameCallback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">doSomethingWithTheFrame</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在回调中，<code>now</code>是一个<code>DOMHighResTimeStamp</code>，<code>metadata</code>是一个包含以下属性的<code>VideoFrameMetadata</code>字典：</p><ul><li><code>presentationTime</code>：用户代理提交帧进行合成的时间。</li></ul><p>请注意，<code>requestVideoFrameCallback()</code>的回调速率与实际视频帧率绑定，但在某些情况下可能受到浏览器帧率的限制。</p><h2 id="如何实现一个具有引导功能的组件库" tabindex="-1">如何实现一个具有引导功能的组件库？ <a class="header-anchor" href="#如何实现一个具有引导功能的组件库" aria-label="Permalink to &quot;如何实现一个具有引导功能的组件库？&quot;">​</a></h2><p>在前端开发中，实现一个具有引导功能的组件库可以帮助用户更好地了解和使用您的应用程序。这样的组件库通常包含一些用于展示步骤、提示、高亮元素等的组件，以便引导用户完成特定任务或浏览应用程序的不同部分。</p><p>以下是一些步骤和技术，可以帮助您实现这样的组件库：</p><ol><li><strong>设计引导流程</strong>： <ul><li>首先，您需要明确您的引导流程。考虑用户在应用程序中的第一次访问时需要了解哪些内容，以及哪些步骤可以帮助他们更好地使用应用程序。</li></ul></li><li><strong>创建组件</strong>： <ul><li>开始创建用于引导的组件，例如步骤提示、高亮元素、模态框等。</li><li>这些组件可以是 React、Vue 或其他前端框架中的自定义组件。</li></ul></li><li><strong>定义步骤和内容</strong>： <ul><li>为每个引导步骤定义所需的内容，例如标题、描述、目标元素等。</li><li>您可以将这些步骤定义为对象，每个对象包含步骤的详细信息。</li></ul></li><li><strong>控制显示和隐藏</strong>： <ul><li>实现逻辑，根据用户的操作或应用程序状态来显示或隐藏引导组件。</li><li>您可以使用状态管理库（如 Redux 或 Vuex）来管理引导状态。</li></ul></li><li><strong>添加动画和样式</strong>： <ul><li>为引导组件添加过渡效果和样式，以便它们在屏幕上出现和消失时具有平滑的过渡。</li></ul></li><li><strong>处理用户操作</strong>： <ul><li>考虑用户在引导过程中的操作，例如点击“下一步”按钮、关闭引导等。</li><li>实现相应的事件处理逻辑。</li></ul></li><li><strong>测试和优化</strong>： <ul><li>在不同的应用场景下测试您的引导组件，确保它们在各种情况下都能正常工作。</li><li>根据用户反馈和数据分析，优化引导流程和组件。</li></ul></li></ol><p>一些现有的 React 引导库，例如 React Tour 和 React Joyride，可以帮助您快速实现引导功能。您可以根据您的需求选择合适的库，或者根据您的设计和交互需求自定义实现</p><p>如果您希望自定义实现，您可以创建一个 React 组件库，其中包含用于引导的组件，然后在您的应用程序中使用这些组件来实现引导功能。</p><h2 id="如何封装一个-form-和-formitem-使其能够跟-input-、-select-、-checkbox-、radio-等组件进行-数据存储、数据校验-自定义逻辑-、校验反馈" tabindex="-1">如何封装一个 Form 和 FormItem ，使其能够跟 input 、 select 、 checkbox 、radio 等组件进行 数据存储、数据校验（自定义逻辑）、校验反馈？ <a class="header-anchor" href="#如何封装一个-form-和-formitem-使其能够跟-input-、-select-、-checkbox-、radio-等组件进行-数据存储、数据校验-自定义逻辑-、校验反馈" aria-label="Permalink to &quot;如何封装一个 Form 和 FormItem ，使其能够跟 input 、 select 、 checkbox 、radio 等组件进行 数据存储、数据校验（自定义逻辑）、校验反馈？&quot;">​</a></h2><p>封装一个 <code>Form</code> 和 <code>FormItem</code> 组件，使其能够与 <code>input</code>、<code>select</code>、<code>checkbox</code>、<code>radio</code> 等组件进行数据存储、数据校验和校验反馈，通常涉及以下几个关键步骤：</p><ol><li><strong>定义 <code>Form</code> 组件</strong>： <ul><li><code>Form</code> 组件应该能够接收一个 <code>model</code> 对象，该对象包含表单的数据。</li><li><code>Form</code> 组件还应该能够接收一个 <code>rules</code> 对象，用于定义各字段的校验规则。</li></ul></li><li><strong>定义 <code>FormItem</code> 组件</strong>： <ul><li><code>FormItem</code> 组件应该能够接收一个 <code>label</code> 属性，用于显示字段的标签。</li><li><code>FormItem</code> 组件还应该接收一个 <code>prop</code> 属性，用于指定其对应 <code>Form</code> 组件 <code>model</code> 中的字段。</li></ul></li><li><strong>数据存储</strong>： <ul><li>使用 <code>v-model</code> 或类似的双向绑定机制，将 <code>input</code>、<code>select</code>、<code>checkbox</code>、<code>radio</code> 等组件的值绑定到 <code>Form</code> 组件的 <code>model</code> 对象中的相应字段。</li></ul></li><li><strong>数据校验</strong>： <ul><li>实现一个校验方法，该方法根据 <code>rules</code> 对象中定义的规则对 <code>model</code> 中的数据进行校验。</li><li>校验方法可以是同步的也可以是异步的，以支持复杂的校验逻辑。</li></ul></li><li><strong>校验反馈</strong>： <ul><li>在 <code>FormItem</code> 组件中显示校验结果，如果校验失败，应该显示错误信息。</li><li>可以使用插槽（slot）来自定义错误信息的显示方式。</li></ul></li><li><strong>事件处理</strong>： <ul><li><code>Form</code> 组件应该提供 <code>submit</code> 事件，当表单提交时触发。</li><li><code>Form</code> 组件还应该提供 <code>validate</code> 方法，允许手动触发校验。</li></ul></li></ol><p>以下是一个简单的示例代码，展示了如何封装 <code>Form</code> 和 <code>FormItem</code> 组件：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">// Form.vue</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">form</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">submit</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">prevent</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">handleSubmit</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 用于插入 FormItem 组件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">form</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Form&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		model</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Object</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		rules</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Object</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		validate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 实现校验逻辑</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		handleSubmit</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;submit&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">model</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">// FormItem.vue</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">slot</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 用于插入 input/select/checkbox/radio 等 --&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 显示校验错误信息 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">span</span><span style="color:#C678DD;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{ </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;"> }}&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;FormItem&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		label</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		prop</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			error</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 用于存储校验错误信息</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;Form&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 从父组件 Form 注入</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 注册校验逻辑</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Form</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">registerValidation</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">validate</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		validate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 实现具体的校验逻辑</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div><p>在这个示例中，<code>Form</code> 组件提供了一个 <code>validate</code> 方法来执行校验，并在提交表单时触发。<code>FormItem</code> 组件则负责显示每个字段的标签和校验错误信息。请注意，这只是一个基本的示例，您可能需要根据实际需求添加更多功能，如异步校验、自定义校验规则等。</p><h2 id="像-echart-这类图像库的实现原理" tabindex="-1">像 echart 这类图像库的实现原理？ <a class="header-anchor" href="#像-echart-这类图像库的实现原理" aria-label="Permalink to &quot;像 echart 这类图像库的实现原理？&quot;">​</a></h2><p><a href="https://echarts.apache.org/en/index.html" target="_blank" rel="noreferrer">Apache ECharts</a> 是一个基于 JavaScript 的开源数据可视化图表库，用于创建直观、生动、可交互且可个性化定制的数据可视化图表。它提供了丰富的图表类型、强大的渲染引擎和灵活的配置选项。</p><p>以下是 Apache ECharts 的一些实现原理和特点：</p><ol><li><strong>图表绘制</strong>： <ul><li>ECharts 使用 Canvas 或 SVG 渲染引擎来绘制图表。</li><li>Canvas 可以处理大量数据的渲染，而 SVG 支持更丰富的图形效果。</li></ul></li><li><strong>数据处理</strong>： <ul><li>ECharts 使用数据集（datasets）来管理数据。</li><li>数据集支持数据转换，如过滤、聚类和回归，以帮助分析多维数据。</li></ul></li><li><strong>配置选项</strong>： <ul><li>ECharts 提供丰富的配置选项，允许用户自定义图表的样式、布局和交互行为。</li><li>用户可以通过设置 <code>option</code> 对象来定义图表的外观和数据。</li></ul></li><li><strong>交互性</strong>： <ul><li>ECharts 支持交互式操作，如缩放、拖拽、提示框和数据筛选。</li><li>用户可以通过鼠标或触摸屏与图表进行交互。</li></ul></li><li><strong>图表类型</strong>： <ul><li>ECharts 提供了 20 多种图表类型，包括折线图、柱状图、饼图、散点图、雷达图等。</li><li>用户可以根据需求选择合适的图表类型。</li></ul></li><li><strong>响应式设计</strong>： <ul><li>ECharts 支持响应式设计，可以根据不同的屏幕大小和设备自动调整图表布局。</li></ul></li></ol><p>总之，Apache ECharts 的实现原理涵盖了图表绘制、数据处理、配置选项、交互性和图表类型。它的灵活性和丰富的功能使其成为一个流行的数据可视化库。</p><h2 id="i18n-的国际化方案在-vue、react、jquery-等框架柱应该是怎样实现" tabindex="-1">i18n 的国际化方案在 vue、react、JQuery 等框架柱应该是怎样实现？ <a class="header-anchor" href="#i18n-的国际化方案在-vue、react、jquery-等框架柱应该是怎样实现" aria-label="Permalink to &quot;i18n 的国际化方案在 vue、react、JQuery 等框架柱应该是怎样实现？&quot;">​</a></h2><p>在不同前端框架（如 Vue、React 和 jQuery）中实现国际化（i18n）方案有不同的方法。让我为您详细介绍一下每个框架的实现方式：</p><h3 id="_1-vue-js-中的国际化-vue-i18n" tabindex="-1">1. Vue.js 中的国际化（Vue I18n）： <a class="header-anchor" href="#_1-vue-js-中的国际化-vue-i18n" aria-label="Permalink to &quot;1. Vue.js 中的国际化（Vue I18n）：&quot;">​</a></h3><ul><li>Vue I18n 是 Vue.js 的官方国际化插件。</li><li>它允许您在 Vue.js 应用程序中轻松添加多语言支持。</li><li>使用 Vue I18n，您可以定义翻译文件、切换语言、格式化日期和数字等。</li></ul><h4 id="实现步骤" tabindex="-1">实现步骤： <a class="header-anchor" href="#实现步骤" aria-label="Permalink to &quot;实现步骤：&quot;">​</a></h4><ol><li><p><strong>安装 Vue I18n</strong>：</p><ul><li>使用 npm 或 yarn 安装 Vue I18n：<code>npm install vue-i18n</code> 或 <code>yarn add vue-i18n</code>。</li></ul></li><li><p><strong>创建翻译文件</strong>：</p><ul><li>在项目中创建一个 <code>locales</code> 文件夹，其中包含不同语言的 JSON 文件（例如 <code>en.json</code>、<code>fr.json</code>）。</li><li>在这些文件中定义每个语言的翻译内容。</li></ul></li><li><p><strong>初始化 Vue I18n</strong>：</p><ul><li>在 Vue 应用程序的入口文件中初始化 Vue I18n。</li><li>设置默认语言和加载翻译文件。</li></ul></li><li><p><strong>在组件中使用翻译</strong>：</p><ul><li><p>使用 <code>$t</code> 方法来获取翻译后的文本。</p></li><li><p>在模板中使用 。</p></li><li><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">{{ $t(&#39;key&#39;) }}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p><strong>切换语言</strong>：</p><ul><li>创建一个语言切换按钮或下拉菜单，以便用户可以切换应用程序的语言。</li></ul></li></ol><h3 id="_2-react-中的国际化-i18next" tabindex="-1">2. React 中的国际化（i18next）： <a class="header-anchor" href="#_2-react-中的国际化-i18next" aria-label="Permalink to &quot;2. React 中的国际化（i18next）：&quot;">​</a></h3><ul><li><a href="https://www.i18next.com/" target="_blank" rel="noreferrer">i18next</a> 是一个通用的国际化框架，可以与 React 集成。</li><li>它支持多种前端框架和环境。</li></ul><h4 id="实现步骤-1" tabindex="-1">实现步骤： <a class="header-anchor" href="#实现步骤-1" aria-label="Permalink to &quot;实现步骤：&quot;">​</a></h4><ol><li><strong>安装 i18next</strong>： <ul><li>使用 npm 或 yarn 安装 i18next：<code>npm install i18next</code> 或 <code>yarn add i18next</code>。</li></ul></li><li><strong>创建翻译文件</strong>： <ul><li>在项目中创建一个 <code>locales</code> 文件夹，其中包含不同语言的 JSON 文件（例如 <code>en.json</code>、<code>fr.json</code>）。</li><li>在这些文件中定义每个语言的翻译内容。</li></ul></li><li><strong>初始化 i18next</strong>： <ul><li>在应用程序的入口文件中初始化 i18next。</li><li>设置默认语言和加载翻译文件。</li></ul></li><li><strong>在组件中使用翻译</strong>： <ul><li>使用 <code>useTranslation</code> 钩子来获取翻译后的文本。</li><li>在组件中使用 <code>t(&#39;key&#39;)</code>。</li></ul></li><li><strong>切换语言</strong>： <ul><li>创建一个语言切换按钮或下拉菜单，以便用户可以切换应用程序的语言。</li></ul></li></ol><h3 id="_3-jquery-中的国际化-i18next" tabindex="-1">3. <strong>jQuery 中的国际化（i18next）</strong>： <a class="header-anchor" href="#_3-jquery-中的国际化-i18next" aria-label="Permalink to &quot;3. **jQuery 中的国际化（i18next）**：&quot;">​</a></h3><ul><li><a href="https://www.i18next.com/" target="_blank" rel="noreferrer">i18next</a> 也可以与 jQuery 集成，提供国际化支持。</li></ul><h4 id="实现步骤-2" tabindex="-1">实现步骤： <a class="header-anchor" href="#实现步骤-2" aria-label="Permalink to &quot;实现步骤：&quot;">​</a></h4><ol><li><strong>安装 i18next</strong>： <ul><li>使用 npm 或 yarn 安装 i18next：<code>npm install i18next</code> 或 <code>yarn add i18next</code>。</li></ul></li><li><strong>创建翻译文件</strong>： <ul><li>在项目中创建一个 <code>locales</code> 文件夹，其中包含不同语言的 JSON 文件（例如 <code>en.json</code>、<code>fr.json</code>）。</li><li>在这些文件中定义每个语言的翻译内容。</li></ul></li><li><strong>初始化 i18next</strong>： <ul><li>在应用程序的入口文件中初始化 i18next。</li><li>设置默认语言和加载翻译文件。</li></ul></li><li><strong>在页面中使用翻译</strong>： <ul><li>使用 <code>i18next.t(&#39;key&#39;)</code> 来获取翻译后的文本。</li></ul></li></ol><p>总之，不论您使用哪个前端框架，i18next 都可以支持集成</p><h2 id="数据埋点的意义是什么-应当针对哪些数据进行埋点-如何构建一个埋点系统" tabindex="-1">数据埋点的意义是什么？应当针对哪些数据进行埋点？如何构建一个埋点系统？ <a class="header-anchor" href="#数据埋点的意义是什么-应当针对哪些数据进行埋点-如何构建一个埋点系统" aria-label="Permalink to &quot;数据埋点的意义是什么？应当针对哪些数据进行埋点？如何构建一个埋点系统？&quot;">​</a></h2><p>数据埋点在现代应用程序和网站中具有重要意义。它是一种系统性的数据收集方法，用于跟踪用户行为、应用程序性能和其他关键指标。以下是关于数据埋点的一些重要信息：</p><h3 id="_1-数据埋点的意义" tabindex="-1">1.数据埋点的意义： <a class="header-anchor" href="#_1-数据埋点的意义" aria-label="Permalink to &quot;1.数据埋点的意义：&quot;">​</a></h3><ul><li><strong>决策支持</strong>：数据埋点提供了实时、准确的数据，帮助企业和团队做出明智的决策。这些决策可以涉及产品改进、市场营销策略、用户体验优化等。</li><li><strong>性能监控</strong>：通过埋点，您可以监控应用程序的性能指标，例如加载时间、响应时间和错误率。这有助于快速识别和解决问题。</li><li><strong>用户行为分析</strong>：数据埋点允许您跟踪用户在应用程序中的行为，例如页面浏览、按钮点击、转化率等。这有助于了解用户需求和行为模式。</li><li><strong>产品优化</strong>：通过分析埋点数据，您可以发现用户痛点、流失点和机会，从而优化产品功能和用户体验。</li></ul><h3 id="_2-应当针对哪些数据进行埋点" tabindex="-1">2.应当针对哪些数据进行埋点： <a class="header-anchor" href="#_2-应当针对哪些数据进行埋点" aria-label="Permalink to &quot;2.应当针对哪些数据进行埋点：&quot;">​</a></h3><ul><li><strong>关键业务指标</strong>：埋点应该关注与业务目标直接相关的指标，例如注册、购买、订阅等。</li><li><strong>用户行为</strong>：跟踪用户在应用程序中的行为，例如页面浏览、搜索、点击、滚动等。</li><li><strong>应用程序性能</strong>：监控应用程序的性能指标，例如加载时间、响应时间、错误率等。</li><li><strong>特定事件</strong>：埋点特定事件，例如广告点击、视频播放、表单提交等。</li></ul><h3 id="_3-构建一个埋点系统的步骤" tabindex="-1">3.构建一个埋点系统的步骤： <a class="header-anchor" href="#_3-构建一个埋点系统的步骤" aria-label="Permalink to &quot;3.构建一个埋点系统的步骤：&quot;">​</a></h3><ul><li><strong>明确目标</strong>：定义您希望通过埋点系统实现的目标和指标。</li><li><strong>选择工具</strong>：选择适合您应用程序的数据埋点工具，例如 Google Analytics、Mixpanel、Amplitude 等。</li><li><strong>设计事件</strong>：确定要跟踪的事件，例如页面浏览、按钮点击、转化等。</li><li><strong>实施埋点代码</strong>：在应用程序中插入埋点代码，以便在用户执行特定操作时触发事件。</li><li><strong>数据存储和分析</strong>：将埋点数据存储在数据库或数据仓库中，并使用分析工具进行数据挖掘和可视化。</li><li><strong>持续优化</strong>：根据数据分析结果，优化埋点策略和事件定义。</li></ul><p>总之，数据埋点是一种关键的数据收集方法，有助于支持决策、优化产品和改进用户体验。</p><h2 id="小程序的实现原理是什么" tabindex="-1">小程序的实现原理是什么？ <a class="header-anchor" href="#小程序的实现原理是什么" aria-label="Permalink to &quot;小程序的实现原理是什么？&quot;">​</a></h2><p>小程序的实现原理涉及到渲染层和逻辑层之间的交互，以及整体的架构。让我详细解释一下小程序的运行原理。</p><h3 id="小程序的运行环境" tabindex="-1">小程序的运行环境 <a class="header-anchor" href="#小程序的运行环境" aria-label="Permalink to &quot;小程序的运行环境&quot;">​</a></h3><ol><li><strong>渲染层</strong>：小程序的界面使用了 <strong>WebView</strong> 进行渲染。在 iOS 上，逻辑层的 JavaScript 代码运行在 <strong>JavaScriptCore</strong> 中，视图层由 <strong>WKWebView</strong> 渲染；在 Android 上，逻辑层的 JavaScript 代码运行在 <strong>V8</strong> 中，视图层由自研的 <strong>XWeb 引擎</strong>基于 <strong>Mobile Chrome</strong> 内核渲染。</li><li><strong>逻辑层</strong>：逻辑层采用 <strong>JsCore 线程</strong>运行 JS 脚本，负责逻辑处理、数据请求和接口调用。逻辑层和渲染层之间通过系统层的 <strong>JSBridge</strong> 进行通信。</li></ol><h3 id="通信模型" tabindex="-1">通信模型 <a class="header-anchor" href="#通信模型" aria-label="Permalink to &quot;通信模型&quot;">​</a></h3><p>小程序采用了一种合适的技术方案，实现渲染层和逻辑层分别由两个线程管理：</p><ul><li>渲染层的界面使用 <strong>WebView</strong> 进行渲染。</li><li>逻辑层采用 <strong>JsCore 线程</strong>运行 JS 脚本。</li></ul><p>当一个小程序存在多个界面时，渲染层就会存在多个 <strong>WebView</strong> 线程。这两个线程之间的通信会经由微信客户端来做中转。逻辑层发送的网络请求也经由 Native 转发。</p><h3 id="小程序的核心基础库文件" tabindex="-1">小程序的核心基础库文件 <a class="header-anchor" href="#小程序的核心基础库文件" aria-label="Permalink to &quot;小程序的核心基础库文件&quot;">​</a></h3><ul><li><strong>WAservice.js</strong>：提供逻辑层基础的 API 能力，包括消息通信封装、日志组件、全局方法（如 <code>App</code>、<code>Page</code>、<code>getApp</code> 等）。</li><li><strong>WAWebview.js</strong>：提供视图层基础的 API 能力，包括消息通信封装、日志组件、UI 相关的方法、小程序组件实现和注册、Virtual DOM、Diff 和 Render UI 实现。</li><li><strong>app-config.json</strong>：小程序完整的配置，包含通过 <code>app.json</code> 配置的所有信息。</li><li><strong>app-service.js</strong>：自己的 JS 代码，全部打包到这个文件。</li></ul><h3 id="小程序的架构" tabindex="-1">小程序的架构 <a class="header-anchor" href="#小程序的架构" aria-label="Permalink to &quot;小程序的架构&quot;">​</a></h3><ul><li><strong>AppView</strong>：视图层，负责 UI 渲染，使用 WebView 进行渲染。加载 WXML 和 WXSS 生成界面并展示给用户。</li><li><strong>AppService</strong>：逻辑层，采用 JsCore 线程运行 JS 脚本，处理逻辑、数据请求和接口调用。整个小程序只有一个逻辑层，但存在多个界面。</li></ul><p>总之，小程序的实现原理涉及到渲染层和逻辑层之间的协作，以及整体的架构设计。</p><h2 id="前端的项目如何进行优化-移动端呢" tabindex="-1">前端的项目如何进行优化，移动端呢 <a class="header-anchor" href="#前端的项目如何进行优化-移动端呢" aria-label="Permalink to &quot;前端的项目如何进行优化，移动端呢&quot;">​</a></h2><p><strong>考察点：性能优化</strong></p><details class="details custom-block"><summary>查看参考回答</summary><p>前端性能优化有七大手段：减少请求数量，减少资源大小，优化网络连接，优化资源加载，</p><ul><li>减少重绘回流，使用性能更好的 API 和构建优化</li><li>减少请求数量：通过减少重定向，使用缓存，不适用 CSS@import，避免使用空的 src 和 href 等手段</li><li>减少资源大小：通过压缩 HTML，CSS，JS，图片，此外在安卓下可以使用 webp 格式的图片，它具有更优的图像数据压缩算法，能带来更小的图片体积，还可以开启 gzip,gzip 编码是以后总用来改进 web 应用程序性能的技术，</li><li>优化网络连接：使用 CDN，使用 DNS 预解析，并行连接，</li><li>优化资源加载，通过优化资源加载位置和时机，使用资源预加载 preload 和资源预读取 prefetch</li></ul><p>减少重绘回流：</p><ul><li>1：避免使用层级较深的 CSS 选择器，以提高 CSS 渲染效率</li><li>2、避免使用 CSS 表达式</li><li>3、给元素适当的定义高度或最小高度，否则元素的动态内容载入时，会出现页面晃动，造成回流</li><li>4、不要使用 table 布局</li><li>5、能用 CSS 实现的效果，尽量使用 CSS 而不用 JS 实现</li><li>6、使用性能更好的 api</li></ul></details><h2 id="作为前端开发-如果遇到资源无法加载-会是什么问题-如何解决" tabindex="-1">作为前端开发，如果遇到资源无法加载，会是什么问题，如何解决 <a class="header-anchor" href="#作为前端开发-如果遇到资源无法加载-会是什么问题-如何解决" aria-label="Permalink to &quot;作为前端开发，如果遇到资源无法加载，会是什么问题，如何解决&quot;">​</a></h2><p><strong>考察点：情景题</strong></p><details class="details custom-block"><summary>查看参考回答</summary><p>我遇到这种网页打不开的情况下首先会打开开发者工具看报错情况，根据 http 状态码来确认是服务器还是客户端的错误，然后再具体问题来分析。</p></details><h2 id="说一下有什么方法可以保持前后端实时通信" tabindex="-1">说一下有什么方法可以保持前后端实时通信？ <a class="header-anchor" href="#说一下有什么方法可以保持前后端实时通信" aria-label="Permalink to &quot;说一下有什么方法可以保持前后端实时通信？&quot;">​</a></h2><ol><li><strong><code>轮询</code></strong>：客户端设置定时器，每隔一段时间向服务端发送请求，通过频繁请求达到实时效果。但这种方式会消耗较多流量和 CPU 利用率，且轮询间隔不好控制。</li><li><strong><code>长轮询</code></strong>：客户端和服务端保持一条长连接，服务端有新数据时主动发送给客户端。这种方式对服务器的高并发能力有要求。</li><li><strong><code>WebSocket</code></strong>：一种全双工通信协议，客户端和服务端处于相同地位，可以实时双向通信。</li><li><strong><code>SSE（Server-Sent Event）</code></strong>：服务端与客户端建立的单向通道，只能由服务端传输特定形式的数据给客户端。</li><li><strong><code>iframe 流</code></strong>：在页面中插入一个隐藏的 iframe，利用其 src 属性在服务器和客户端之间创建一条长连接，服务器向 iframe 传输数据来实时更新页面。</li></ol><h2 id="说一说服务端渲染及优势" tabindex="-1">说一说服务端渲染及优势？ <a class="header-anchor" href="#说一说服务端渲染及优势" aria-label="Permalink to &quot;说一说服务端渲染及优势？&quot;">​</a></h2><p>在 JavaScript 中，服务端渲染（Server-Side Rendering，简称 SSR）是一种页面渲染技术，指在服务端（即服务器）完成页面的渲染工作，生成完整的 HTML 页面，然后将这个渲染好的页面直接发送给客户端（即用户的浏览器）。</p><p><strong>优点：</strong></p><ol><li><strong><code>搜索引擎优化（SEO）</code></strong>：搜索引擎爬虫能够直接解析和理解服务端渲染的 HTML 内容。由于爬虫通常只能抓取到页面的静态内容，而无法执行 JavaScript 代码，因此服务端渲染的页面更易于被搜索引擎识别和索引，从而提高网站在搜索结果中的排名。</li><li><strong><code>首屏加载性能</code></strong>：在客户端渲染中，浏览器需要先下载并执行 JavaScript 代码，然后才能生成和渲染页面内容。而服务端渲染可以直接在服务器端生成完整的 HTML 响应，减少了客户端的处理时间，因此可以更快地提供页面内容给用户，提高了首屏加载的速度。</li><li><strong><code>改善了用户体验</code></strong>：由于服务端渲染可以更快地提供内容，用户等待时间变短，页面白屏时间减少，从而改善了用户体验。此外，由于服务端已经生成了页面的初始状态，用户可以立即与页面进行交互，而无需等待 JavaScript 的下载和执行。</li><li><strong><code>分担客户端压力</code></strong>：在客户端渲染中，大量的计算和渲染工作需要在用户的设备上完成，这可能对设备性能造成一定的压力。而服务端渲染将这些工作转移到服务器上，从而减轻了客户端设备的负担。</li></ol><p><strong>缺点：</strong></p><ol><li>增加了服务端的资源消耗和维护成本；</li><li>同时不利于前后端分离，需要前端来维护一个模板层</li></ol><h2 id="前端如何无感刷新-token-token-还没有刷新完成时-发送了其他请求需要如何处理" tabindex="-1">前端如何无感刷新 token；token 还没有刷新完成时，发送了其他请求需要如何处理 <a class="header-anchor" href="#前端如何无感刷新-token-token-还没有刷新完成时-发送了其他请求需要如何处理" aria-label="Permalink to &quot;前端如何无感刷新 token；token 还没有刷新完成时，发送了其他请求需要如何处理&quot;">​</a></h2><p>在前端开发中，实现无感刷新 token 通常是为了保持用户的登录状态，并确保其访问权限的有效性。下面将介绍如何实现无感刷新 token 的原理以及给出一个示例。</p><h3 id="前端如何无感刷新-token-实现原理" tabindex="-1">前端如何无感刷新 token 实现原理 <a class="header-anchor" href="#前端如何无感刷新-token-实现原理" aria-label="Permalink to &quot;前端如何无感刷新 token 实现原理&quot;">​</a></h3><p>无感刷新 token 的实现通常基于以下几个步骤：</p><ol><li><strong>Token 有效期</strong>：首先，服务器会为每个 token 设置一个有效期，例如 30 分钟或 1 小时。在这个有效期内，用户可以使用 token 访问受保护的资源。</li><li><strong>定期检查</strong>：前端应用会在用户活动期间定期检查 token 的有效期。通常通过轮询或心跳机制实现，即在一定时间间隔后发送请求到服务器，检查 token 是否仍然有效。</li><li><strong>刷新 Token</strong>：如果服务器返回 token 已失效的信息，前端应用会立即发起一个新的请求到认证服务器，使用 refreshToken 这个 token（<strong><em>后端一般会返回一个长 token 和一个短 token，长短指的是过期时间，refreshToken 作为长 token 存在 localstorage 中用来向后端携带这个 token 去请求短 token，accessToken 作为短 token 也是存在 localstorage 中用这个 token 去请求受保护的请求放到请求头 headers 中</em></strong>）来获取新的访问 token。</li><li><strong>无缝切换</strong>：在获取到新 token 后，前端应用会立即更新本地存储的 token，并使用新 token 继续之前的操作，从而实现了无缝的用户体验。</li></ol><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>下面是一个简单的示例，展示了如何在前端实现无感刷新 token：</p><ol><li><strong>设置 Token 有效期</strong>：假设服务器为每个 token 设置了 30 分钟的有效期。</li><li><strong>定期检查</strong>：前端应用每 5 分钟向服务器发送一个请求，检查当前 token 是否仍然有效。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 setInterval 定时发送心跳请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	checkTokenValidity</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">5</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 60</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 5 分钟</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol><li><strong>检查 Token 有效性</strong>：前端应用发送心跳请求到服务器，服务器返回 token 是否有效的信息。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> checkTokenValidity</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/heartbeat&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">			headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				Authorization</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`Bearer </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;token&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ok</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// Token 失效，需要刷新</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">			refreshToken</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 处理错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error checking token validity:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ol><li><strong>刷新 Token</strong>：如果 token 失效，前端应用会发送一个请求到认证服务器，获取新的访问 token。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> refreshToken</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/auth/refresh&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">			method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;POST&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">			headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">				&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;application/json&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">			body</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				refreshToken</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;refreshToken&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">			}),</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ok</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 更新本地存储的 token</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;accessToken&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">accessToken</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 处理刷新 token 失败的情况，例如提示用户重新登录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Failed to refresh token:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 处理错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error refreshing token:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>在这个示例中，前端应用通过定期检查 token 的有效性，并在 token 失效时无缝刷新 token，从而保持了用户的登录状态，并提供了无缝的用户体验。需要注意的是，为了安全起见，刷新 token 也应该有一定的有效期，并在过期后要求用户重新登录。</p><h3 id="token-还没有刷新完成时-发送了其他请求需要如何处理" tabindex="-1">token 还没有刷新完成时，发送了其他请求需要如何处理 <a class="header-anchor" href="#token-还没有刷新完成时-发送了其他请求需要如何处理" aria-label="Permalink to &quot;token 还没有刷新完成时，发送了其他请求需要如何处理&quot;">​</a></h3><p>如果刷新的 token 还没有返回，但是你已经使用旧的 token 发送了其他三个请求到服务端，那么可能会遇到以下几种情况：</p><p><strong>请求被拒绝</strong>：如果服务端检查到 token 已经过期，它可能会返回一个 401 Unauthorized 或者类似的错误状态码。在这种情况下，你需要捕获这些错误，并在捕获到错误后尝试使用新的 token 重新发送这些请求。</p><p>为了处理这些情况，你可以采取以下策略：</p><ul><li><strong>错误处理</strong>：确保你的应用能够捕获和处理 401 Unauthorized 或其他相关错误。当捕获到这些错误时，你可以尝试使用新的 token 重新发送请求。</li><li><strong>请求重试机制</strong>：实现一个请求重试机制，当请求失败时，可以自动或手动触发重试，并使用新的 token。你可以使用指数退避策略来避免频繁重试对服务端造成压力。</li><li><strong>状态管理</strong>：在 token 刷新期间，你可以将应用的状态设置为“正在刷新 token”，并禁止发送新的请求，直到获取到新的 token。这样可以避免使用无效的 token 发送更多请求。</li><li><strong>队列请求</strong>：在 token 过期后，而不是立即发送请求，你可以将请求放入队列中，等待新的 token 获取后再依次发送。这可以通过使用 Promise.all 或者其他异步处理技术来实现。</li><li><strong>前端提示</strong>：在 token 过期后，你可以在前端显示一个提示，告知用户正在刷新 token，并可能需要等待一段时间或者重新登录。 下面是一个简化的示例代码，</li></ul><h3 id="在捕获到-401-错误后使用新-token-重新发送请求" tabindex="-1">在捕获到 401 错误后使用新 token 重新发送请求： <a class="header-anchor" href="#在捕获到-401-错误后使用新-token-重新发送请求" aria-label="Permalink to &quot;在捕获到 401 错误后使用新 token 重新发送请求：&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 假设这是你的 API 请求函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> apiRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">token</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">			headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				Authorization</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`Bearer </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">token</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ok</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Request failed with status </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">message</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;401&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> newToken</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 尝试使用新 token 重新发送请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> apiRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newToken</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		throw</span><span style="color:#E06C75;"> error</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 假设这是你的 token 刷新函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newToken</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 存储新 token 的变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> refreshToken</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/auth/refresh&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// ... 发送刷新请求的代码 ...</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ok</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">			newToken</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 处理错误</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 当 token 过期时调用此函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> handleTokenExpiration</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 尝试刷新 token</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#61AFEF;"> refreshToken</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 假设这是之前因为 token 过期而失败的请求数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> failedRequests</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			/* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">		];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 使用新 token 重新发送请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> request</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> failedRequests</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> apiRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newToken</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 处理响应或更新应用状态</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 处理重新发送请求时的错误</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 处理刷新 token 或重新发送请求时的错误</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><p>在这个示例中，<code>apiRequest</code> 函数会在遇到 401 错误时检查是否有新的 token 可用，并尝试使用新 token 重新发送请求。<code>handleTokenExpiration</code> 函数则负责在 token 过期时刷新 token，并重新发送之前失败的请求。</p><h2 id="vue3-table-性能优化-减少-85-渲染耗时" tabindex="-1">vue3 table 性能优化，减少 85% 渲染耗时 <a class="header-anchor" href="#vue3-table-性能优化-减少-85-渲染耗时" aria-label="Permalink to &quot;vue3 table 性能优化，减少 85% 渲染耗时&quot;">​</a></h2><p><a href="https://juejin.cn/post/7194516447932973112" target="_blank" rel="noreferrer">vue3 table 性能优化，减少 85% 渲染耗时 - 掘金 (juejin.cn)</a></p><h2 id="队列请求" tabindex="-1">队列请求 <a class="header-anchor" href="#队列请求" aria-label="Permalink to &quot;队列请求&quot;">​</a></h2><p>队列请求的实现主要是利用队列这种数据结构来管理待处理的请求。当某个请求因为某些原因（比如 token 过期）需要延迟处理时，我们可以将这个请求放入队列中，等待条件满足（比如获取到新的 token）后再从队列中取出请求进行处理。</p><p>下面是一个简单的例子来说明队列请求的实现：</p><h3 id="_1-创建请求队列" tabindex="-1">1. 创建请求队列 <a class="header-anchor" href="#_1-创建请求队列" aria-label="Permalink to &quot;1. 创建请求队列&quot;">​</a></h3><p>首先，我们需要一个队列来存储待处理的请求。这个队列可以是内存中的一个数组、链表，或者使用一些现成的队列库（如 JavaScript 中的<code>Array.prototype.queue</code>或<code>queue-promise</code>库）。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> requestQueue</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []; </span><span style="color:#7F848E;font-style:italic;">// 使用数组作为简单的队列实现</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-入队操作" tabindex="-1">2. 入队操作 <a class="header-anchor" href="#_2-入队操作" aria-label="Permalink to &quot;2. 入队操作&quot;">​</a></h3><p>当需要延迟处理一个请求时，我们将这个请求添加到队列的末尾。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> enqueueRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	requestQueue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-出队操作" tabindex="-1">3. 出队操作 <a class="header-anchor" href="#_3-出队操作" aria-label="Permalink to &quot;3. 出队操作&quot;">​</a></h3><p>当条件满足（比如获取到新的 token）时，我们从队列的头部取出一个请求进行处理，并重复这个过程直到队列为空。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> dequeueAndProcessRequests</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">requestQueue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> request</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> requestQueue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 从队列头部取出一个请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> processRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 处理请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 处理响应或更新应用状态</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 处理请求处理过程中的错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error processing request:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_4-处理请求" tabindex="-1">4. 处理请求 <a class="header-anchor" href="#_4-处理请求" aria-label="Permalink to &quot;4. 处理请求&quot;">​</a></h3><p><code>processRequest</code>函数负责实际处理请求的逻辑。在这个函数中，你可以发送 HTTP 请求、更新 UI 等。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> processRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里是处理请求的逻辑，比如发送HTTP请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			Authorization</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`Bearer </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">newToken</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 使用新的token</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 返回处理结果</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_5-使用示例" tabindex="-1">5. 使用示例 <a class="header-anchor" href="#_5-使用示例" aria-label="Permalink to &quot;5. 使用示例&quot;">​</a></h3><p>当 token 过期时，我们可以将需要延迟处理的请求加入队列，然后尝试刷新 token。一旦获取到新的 token，我们从队列中取出请求并处理它们。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 假设这是因为token过期而需要延迟处理的请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> delayedRequest</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/api/data&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将请求加入队列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">enqueueRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">delayedRequest</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 尝试刷新token</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#61AFEF;"> refreshToken</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理队列中的请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#61AFEF;"> dequeueAndProcessRequests</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li><strong>队列大小管理</strong>：如果请求队列变得非常大，可能会消耗大量内存。你可能需要实现一些策略来限制队列的大小，比如设置最大长度、淘汰最旧的请求等。</li><li><strong>错误处理</strong>：在处理请求和响应时，务必进行适当的错误处理，以避免应用崩溃或产生不可预期的行为。</li><li><strong>并发控制</strong>：如果你的应用需要处理大量并发请求，你可能需要实现一些机制来控制并发数，比如使用 Promise.all 限制同时处理的请求数量。</li></ul><h2 id="网站项目线上崩了-说说你是怎么排查线上问题的" tabindex="-1">网站项目线上崩了，说说你是怎么排查线上问题的？ <a class="header-anchor" href="#网站项目线上崩了-说说你是怎么排查线上问题的" aria-label="Permalink to &quot;网站项目线上崩了，说说你是怎么排查线上问题的？&quot;">​</a></h2><p>当线上出现问题时，排查和解决问题是至关重要的。</p><p>以下是一些排查线上问题的常用方法和步骤：</p><ol><li><strong>明确问题</strong>： 首先，需要明确线上出现了什么问题。了解问题的具体表现、发生的时间、影响的范围等。通过收集用户反馈、查看监控系统告警等方式，收集问题相关信息。</li><li><strong>收集信息</strong>： 收集与问题相关的各种信息，如日志、指标、用户反馈等。这些信息是排查问题的关键，可以帮助我们了解问题的来龙去脉。</li><li><strong>分析问题</strong>： 根据收集到的信息，对问题进行深入分析。这包括分析日志、指标等数据，找出异常点，进一步定位问题原因。</li><li><strong>解决问题</strong>： 在定位问题原因后，采取相应的解决措施。这可能涉及到修改代码、调整配置、优化系统架构等。</li><li><strong>验证效果</strong>： 在解决问题后，需要验证解决方案的效果。这包括观察系统运行状态、收集用户反馈等，确保问题得到彻底解决。</li></ol><p>此外，还有一些具体的排查方法和工具，例如：</p><ul><li><strong>监控告警</strong>：设置监控系统，及早发现问题。</li><li><strong>日志埋点</strong>：记录关键指标，帮助了解用户行为和系统性能。</li><li><strong>分析内存快照</strong>：抓取内存快照，使用工具分析内存泄漏等问题。</li><li><strong>定位 CPU 使用率最高的进程</strong>：使用 <code>top</code> 命令或其他工具查看 CPU 使用率最高的进程。</li><li><strong>分析 GC 日志</strong>：了解垃圾回收情况，优化内存使用。</li></ul><p>总之，排查线上问题需要综合运用不同的方法和工具，根据具体情况灵活选择，以便快速定位和解决问题。</p><h2 id="项目研发流程" tabindex="-1">项目研发流程 <a class="header-anchor" href="#项目研发流程" aria-label="Permalink to &quot;项目研发流程&quot;">​</a></h2><ul><li>主要阶段 <ul><li>需求分析</li><li>技术方案设计</li><li>开发</li><li>联调</li><li>测试</li><li>上线（和回滚）</li><li>项目总结</li></ul></li><li>各个阶段的常见问题和解答</li></ul><h2 id="web-应用从服务器主动推送-data-到客户端有那些方式" tabindex="-1">WEB 应用从服务器主动推送 Data 到客户端有那些方式？ <a class="header-anchor" href="#web-应用从服务器主动推送-data-到客户端有那些方式" aria-label="Permalink to &quot;WEB 应用从服务器主动推送 Data 到客户端有那些方式？&quot;">​</a></h2><p>html5 websoket</p><p>WebSocket 通过 Flash</p><p>XHR 长时间连接</p><p>XHR Multipart Streaming</p><p>不可见的 Iframe</p><p><code>&lt;script&gt;</code>标签的长时间连接(可跨域)</p><h2 id="前端下载超大文件的完整方案" tabindex="-1">前端下载超大文件的完整方案 <a class="header-anchor" href="#前端下载超大文件的完整方案" aria-label="Permalink to &quot;前端下载超大文件的完整方案&quot;">​</a></h2><p><a href="https://juejin.cn/post/7346430066152407040" target="_blank" rel="noreferrer">前端下载超大文件的完整方案 - 掘金 (juejin.cn)</a></p><h2 id="_10-个-ajax-同时发起请求-全部返回展示结果-并且至多允许三次失败-说出设计思路" tabindex="-1">10 个 Ajax 同时发起请求，全部返回展示结果，并且至多允许三次失败，说出设计思路 <a class="header-anchor" href="#_10-个-ajax-同时发起请求-全部返回展示结果-并且至多允许三次失败-说出设计思路" aria-label="Permalink to &quot;10 个 Ajax 同时发起请求，全部返回展示结果，并且至多允许三次失败，说出设计思路&quot;">​</a></h2><p>这个问题相信很多人会第一时间想到 <code>Promise.all</code> ，但是这个函数有一个局限在于如果失败一次就返回了，直接这样实现会有点问题，需要变通下。以下是两种实现思路</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 以下是不完整代码，着重于思路 非 Promise 写法</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> successCount</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> errorCount</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> datas</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">     if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">         success</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#C678DD;">         if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">success</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> errorCount</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">             console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">datas</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">         } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">             datas</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;">     } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">         errorCount</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#C678DD;">         if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">errorCount</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 失败次数大于3次就应该报错了</span></span>
<span class="line"><span style="color:#C678DD;">             throw</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;失败三次&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Promise 写法</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> errorCount</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">         resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">     } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">         errorCount</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#C678DD;">         if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">errorCount</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 失败次数大于3次就应该报错了</span></span>
<span class="line"><span style="color:#61AFEF;">            reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">         } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">             resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">]).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="基于-localstorage-设计一个-1m-的缓存系统-需要实现缓存淘汰机制" tabindex="-1">基于 Localstorage 设计一个 1M 的缓存系统，需要实现缓存淘汰机制 <a class="header-anchor" href="#基于-localstorage-设计一个-1m-的缓存系统-需要实现缓存淘汰机制" aria-label="Permalink to &quot;基于 Localstorage 设计一个 1M 的缓存系统，需要实现缓存淘汰机制&quot;">​</a></h2><p>设计思路如下：</p><ul><li>存储的每个对象需要添加两个属性：分别是过期时间和存储时间。</li><li>利用一个属性保存系统中目前所占空间大小，每次存储都增加该属性。当该属性值大于 1M 时，需要按照时间排序系统中的数据，删除一定量的数据保证能够存储下目前需要存储的数据。</li><li>每次取数据时，需要判断该缓存数据是否过期，如果过期就删除。</li></ul><p>以下是代码实现，实现了思路，但是可能会存在 Bug，但是这种设计题一般是给出设计思路和部分代码，不会需要写出一个无问题的代码</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;cache&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      store</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        maxSize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1024</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 1024</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        size</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> store</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">expire</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      date</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">      expire</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      value</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> size</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sizeOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]))</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">maxSize</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> size</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">size</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;超了-----------&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">      var</span><span style="color:#E06C75;"> keys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 时间排序</span></span>
<span class="line"><span style="color:#E06C75;">      keys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> keys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> item1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">item2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> item2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">date</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;"> item1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">date</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      });</span></span>
<span class="line"><span style="color:#C678DD;">      while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">size</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">size</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">maxSize</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> keys</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">keys</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">size</span><span style="color:#56B6C2;"> -=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sizeOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">]))</span></span>
<span class="line"><span style="color:#C678DD;">        delete</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">size</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> size</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;cache&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;找不到该属性&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">      return</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">expire</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">now</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;过期删除&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">      delete</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;">      localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;cache&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> d</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  sizeOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">charset</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> total</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      charCode</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      i</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      len</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    charset</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> charset</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> charset</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">charset</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;utf-16&#39;</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> charset</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;utf16&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">len</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> len</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        charCode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">charCode</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0xffff</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">          total</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">          total</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">len</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> len</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        charCode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">charCode</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0x007f</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">          total</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">charCode</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0x07ff</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">          total</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">charCode</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0xffff</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">          total</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">          total</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> total</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><h2 id="有一个游戏叫做-flappy-bird-就是一只小鸟在飞-前面是无尽的沙漠-上下不断有钢管生成-你要躲避钢管" tabindex="-1">有一个游戏叫做 Flappy Bird，就是一只小鸟在飞，前面是无尽的沙漠，上下不断有钢管生成，你要躲避钢管 <a class="header-anchor" href="#有一个游戏叫做-flappy-bird-就是一只小鸟在飞-前面是无尽的沙漠-上下不断有钢管生成-你要躲避钢管" aria-label="Permalink to &quot;有一个游戏叫做 Flappy Bird，就是一只小鸟在飞，前面是无尽的沙漠，上下不断有钢管生成，你要躲避钢管&quot;">​</a></h2><p><strong>然后小明在玩这个游戏时候老是卡顿甚至崩溃，说出原因(3-5 个)以及解决办法(3-5 个)</strong></p><p><strong>考察点：性能优化</strong></p><details class="details custom-block"><summary>查看参考回答</summary><h5 id="原因可能是" tabindex="-1">原因可能是 <a class="header-anchor" href="#原因可能是" aria-label="Permalink to &quot;原因可能是&quot;">​</a></h5><p>1、内存溢出问题。</p><p>2、资源过大问题。</p><p>3、资源加载问题。</p><p>4、canvas 绘制频率问题</p><h5 id="解决办法" tabindex="-1">解决办法 <a class="header-anchor" href="#解决办法" aria-label="Permalink to &quot;解决办法&quot;">​</a></h5><p>1、针对内存溢出问题，我们应该在钢管离开可视区域后，销毁钢管，让垃圾收集器回收钢管，因为不断生成的钢管不及时清理容易导致内存溢出游戏崩溃。</p><p>2、针对资源过大问题，我们应该选择图片文件大小更小的图片格式，比如使用 webp、png 格式的图片，因为绘制图片需要较大计算量。</p><p>3、针对资源加载问题，我们应该在可视区域之前就预加载好资源，如果在可视区域生成钢管的话，用户的体验就认为钢管是卡顿后才生成的，不流畅。</p><p>4、针对 canvas 绘制频率问题，我们应该需要知道大部分显示器刷新频率为 60 次/s,因此游戏的每一帧绘制间隔时间需要小于 1000/60=16、7ms，才能让用户觉得不卡顿。(注意因为这是单机游戏，所以回答与网络无关)</p></details><h2 id="页面编码和被请求的资源编码如果不一致如何处理" tabindex="-1">页面编码和被请求的资源编码如果不一致如何处理？ <a class="header-anchor" href="#页面编码和被请求的资源编码如果不一致如何处理" aria-label="Permalink to &quot;页面编码和被请求的资源编码如果不一致如何处理？&quot;">​</a></h2><p>若请求的资源编码，如外引 js 文件编码与页面编码不同。可根据外引资源编码方式定义为 charset=&quot;utf-8&quot;或&quot;gbk&quot;。</p><p>比如：<a href="http://www.yyy.com/a.html" target="_blank" rel="noreferrer">http://www.yyy.com/a.html</a> 中嵌入了一个<a href="http://www.xxx.com/test.js" target="_blank" rel="noreferrer">http://www.xxx.com/test.js</a> a.html 的编码是 gbk 或 gb2312 的。 而引入的 js 编码为 utf-8 的 ，那就需要在引入的时候</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.xxx.com/test.js&amp;quot&quot;</span><span style="color:#D19A66;"> ;</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;utf-8&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案" tabindex="-1">需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？ <a class="header-anchor" href="#需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案" aria-label="Permalink to &quot;需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？&quot;">​</a></h2><p>通过使用 pushState + ajax 实现浏览器无刷新前进后退，当一次 ajax 调用成功后我们将一条 state 记录加入到 history 对象中。</p><p>一条 state 记录包含了 url、title 和 content 属性，在 popstate 事件中可以获取到这个 state 对象，我们可以使用 content 来传递数据。最后我们通过对 window.onpopstate 事件监听来响应浏览器的前进后退操作。</p><p>使用 pushState 来实现有两个问题，一个是打开首页时没有记录，我们可以使用 replaceState 来将首页的记录替换，另一个问题是当一个页面刷新的时候，仍然会向服务器端请求数据，因此如果请求的 url 需要后端的配合将其重定向到一个页面。</p><h1 id="前后端协作" tabindex="-1">前后端协作 <a class="header-anchor" href="#前后端协作" aria-label="Permalink to &quot;前后端协作&quot;">​</a></h1><h2 id="跨域问题" tabindex="-1">跨域问题 <a class="header-anchor" href="#跨域问题" aria-label="Permalink to &quot;跨域问题&quot;">​</a></h2><ul><li>你了解什么是跨域吗？如何解决跨域问题？</li><li>谈谈 JSONP 的原理和使用场景。</li></ul><h2 id="前后端数据交互" tabindex="-1">前后端数据交互 <a class="header-anchor" href="#前后端数据交互" aria-label="Permalink to &quot;前后端数据交互&quot;">​</a></h2><ul><li>你知道 RESTful API 吗？它有什么特点？</li><li>在前端和后端之间传递数据时，你通常使用哪些数据格式？</li></ul><h2 id="开发流程和职业规划" tabindex="-1">开发流程和职业规划 <a class="header-anchor" href="#开发流程和职业规划" aria-label="Permalink to &quot;开发流程和职业规划&quot;">​</a></h2><ul><li>你在开发流程中的角色是什么？如何与后端开发人员协作？</li><li>谈谈你的职业规划，你对前端和后端的发展有什么看法？</li></ul><h2 id="项目中遇到的难题" tabindex="-1">项目中遇到的难题 <a class="header-anchor" href="#项目中遇到的难题" aria-label="Permalink to &quot;项目中遇到的难题&quot;">​</a></h2><ul><li>你在项目中遇到过哪些前后端协作方面的难题？如何解决的？</li></ul><h2 id="千万访问量的项目-前端需要注意些什么" tabindex="-1">千万访问量的项目，前端需要注意些什么？ <a class="header-anchor" href="#千万访问量的项目-前端需要注意些什么" aria-label="Permalink to &quot;千万访问量的项目，前端需要注意些什么？&quot;">​</a></h2><h1 id="websocket-面试题" tabindex="-1">webSocket 面试题 <a class="header-anchor" href="#websocket-面试题" aria-label="Permalink to &quot;webSocket 面试题&quot;">​</a></h1><h2 id="websocket-协议是什么-能简述一下吗" tabindex="-1">webSocket 协议是什么，能简述一下吗？ <a class="header-anchor" href="#websocket-协议是什么-能简述一下吗" aria-label="Permalink to &quot;webSocket 协议是什么，能简述一下吗？&quot;">​</a></h2><p>参考答案：</p><p>websocket 协议 HTML5 带来的新协议，相对于 http，它是一个持久连接的协议，它利用 http 协议完成握手，然后通过 TCP 连接通道发送消息，使用 websocket 协议可以实现服务器主动推送消息。</p><p>首先，客户端若要发起 websocket 连接，首先必须向服务器发送 http 请求以完成握手，请求行中的 path 需要使用 ws:开头的地址，请求头中要分别加入 upgrade、connection、Sec-WebSocket-Key、Sec-WebSocket-Version 标记</p><p>然后，服务器收到请求后，发现这是一个 websocket 协议的握手请求，于是响应行中包含 Switching Protocols，同时响应头中包含 upgrade、connection、Sec-WebSocket-Accept 标记</p><p>当客户端收到响应后即可完成握手，随后使用建立的 TCP 连接直接发送和接收消息。</p><h2 id="websocket-与传统的-http-有什么优势" tabindex="-1">webSocket 与传统的 http 有什么优势 <a class="header-anchor" href="#websocket-与传统的-http-有什么优势" aria-label="Permalink to &quot;webSocket 与传统的 http 有什么优势&quot;">​</a></h2><p>参考答案：</p><p>当页面中需要观察实时数据的变化（比如聊天、k 线图）时，过去我们往往使用两种方式完成:</p><p>第一种是短轮询，即客户端每隔一段时间就向服务器发送消息，询问有没有新的数据</p><p>第二种是长轮询，发起一次请求询问服务器，服务器可以将该请求挂起，等到有新消息时再进行响应。响应后，客户端立即又发起一次请求，重复整个流程。</p><p>无论是哪一种方式，都暴露了 http 协议的弱点，即响应必须在请求之后发生，服务器是被动的，无法主动推送消息。而让客户端不断的发起请求又白白的占用了资源。</p><p>websocket 的出现就是为了解决这个问题，它利用 http 协议完成握手之后，就可以与服务器建立持久的连接，服务器可以在任何需要的时候，主动推送消息给客户端，这样占用的资源最少，同时实时性也最高。</p><h2 id="了解-websocket-嘛" tabindex="-1">了解 WebSocket 嘛？ <a class="header-anchor" href="#了解-websocket-嘛" aria-label="Permalink to &quot;了解 WebSocket 嘛？&quot;">​</a></h2><p>长轮询和短轮询，WebSocket 是长轮询。</p><p>具体比如在一个电商场景，商品的库存可能会变化，所以需要及时反映给用户，所以客户端会不停的发请求，然后服务器端会不停的去查变化，不管变不变，都返回，这个是短轮询。</p><p>而长轮询则表现为如果没有变，就不返回，而是等待变或者超时（一般是十几秒）才返回，如果没有返回，客户端也不需要一直发请求，所以减少了双方的压力。</p><h2 id="websocket-与-ajax-的区别" tabindex="-1">WebSocket 与 Ajax 的区别 <a class="header-anchor" href="#websocket-与-ajax-的区别" aria-label="Permalink to &quot;WebSocket 与 Ajax 的区别&quot;">​</a></h2><h4 id="本质不同" tabindex="-1">本质不同 <a class="header-anchor" href="#本质不同" aria-label="Permalink to &quot;本质不同&quot;">​</a></h4><p>Ajax 即异步 JavaScript 和 XML，是一种创建交互式网页的应用的网页开发技术</p><p>websocket 是 HTML5 的一种新协议，实现了浏览器和服务器的实时通信</p><h4 id="生命周期不同" tabindex="-1">生命周期不同 <a class="header-anchor" href="#生命周期不同" aria-label="Permalink to &quot;生命周期不同&quot;">​</a></h4><ul><li>websocket 是长连接，会话一直保持</li><li>ajax 发送接收之后就会断开</li></ul><h4 id="适用范围" tabindex="-1">适用范围 <a class="header-anchor" href="#适用范围" aria-label="Permalink to &quot;适用范围&quot;">​</a></h4><ul><li>websocket 用于前后端实时交互数据</li><li>ajax 非实时</li></ul><h4 id="发起人" tabindex="-1">发起人 <a class="header-anchor" href="#发起人" aria-label="Permalink to &quot;发起人&quot;">​</a></h4><ul><li>AJAX 客户端发起</li><li>WebSocket 服务器端和客户端相互推送</li></ul><h2 id="了解-websocket-嘛-1" tabindex="-1">了解 WebSocket 嘛？ <a class="header-anchor" href="#了解-websocket-嘛-1" aria-label="Permalink to &quot;了解 WebSocket 嘛？&quot;">​</a></h2><p>长轮询和短轮询，WebSocket 是长轮询。</p><p>具体比如在一个电商场景，商品的库存可能会变化，所以需要及时反映给用户，所以客户端会不停的发请求，然后服务器端会不停的去查变化，不管变不变，都返回，这个是短轮询。</p><p>而长轮询则表现为如果没有变，就不返回，而是等待变或者超时（一般是十几秒）才返回，如果没有返回，客户端也不需要一直发请求，所以减少了双方的压力。</p><h2 id="前端如何实现即时通讯" tabindex="-1">前端如何实现即时通讯？ <a class="header-anchor" href="#前端如何实现即时通讯" aria-label="Permalink to &quot;前端如何实现即时通讯？&quot;">​</a></h2><p>参考答案：</p><ul><li>短轮询。即客户端每隔一段时间就向服务器发送消息，询问有没有新的数据</li><li>长轮询，发起一次请求询问服务器，服务器可以将该请求挂起，等到有新消息时再进行响应。响应后，客户端立即又发起一次请求，重复整个流程。</li><li>websocket，握手完毕后会建立持久性的连接通道，随后服务器可以在任何时候推送新消息给客户端</li></ul><h2 id="websocket-的实现和应用" tabindex="-1">WebSocket 的实现和应用 <a class="header-anchor" href="#websocket-的实现和应用" aria-label="Permalink to &quot;WebSocket 的实现和应用&quot;">​</a></h2><details class="details custom-block"><summary>查看参考回答</summary><p>参考回答：</p><h3 id="_1-什么是-websocket" tabindex="-1">(1)什么是 WebSocket? <a class="header-anchor" href="#_1-什么是-websocket" aria-label="Permalink to &quot;(1)什么是 WebSocket?&quot;">​</a></h3><p>WebSocket 是 HTML5 中的协议，支持持久连续，http 协议不支持持久性连接。</p><p>Http1.0 和 HTTP1.1 都不支持持久性的链接，HTTP1.1 中的 keep-alive，将多个 http 请求合并为 1 个</p><h3 id="_2-websocket-是什么样的协议-具体有什么优点" tabindex="-1">(2)WebSocket 是什么样的协议，具体有什么优点？ <a class="header-anchor" href="#_2-websocket-是什么样的协议-具体有什么优点" aria-label="Permalink to &quot;(2)WebSocket 是什么样的协议，具体有什么优点？&quot;">​</a></h3><p>HTTP 的生命周期通过 Request 来界定，也就是 Request 一个 Response，那么在 Http1.0 协议中，这次 Http 请求就结束了。在 Http1.1 中进行了改进，是的有一个 connection：Keep-alive，也就是说，在一个 Http 连接中，可以发送多个 Request，接收多个 Response。但是必须记住，在 Http 中一个 Request 只能对应有一个 Response，而且这个 Response 是被动的，不能主动发起。</p><p>WebSocket 是基于 Http 协议的，或者说借用了 Http 协议来完成一部分握手，在握手阶段与 Http 是相同的。我们来看一个 websocket 握手协议的实现，基本是 2 个属性，upgrade，connection。</p><p>基本请求如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> /chat</span><span style="color:#98C379;"> HTTP/1.1</span></span>
<span class="line"><span style="color:#61AFEF;">Host:</span><span style="color:#98C379;"> server.example.com</span></span>
<span class="line"><span style="color:#61AFEF;">Upgrade:</span><span style="color:#98C379;"> websocket</span></span>
<span class="line"><span style="color:#61AFEF;">Connection:</span><span style="color:#98C379;"> Upgrade</span></span>
<span class="line"><span style="color:#61AFEF;">Sec-WebSocket-Key:</span><span style="color:#98C379;"> x3JJHMbDL1EzLkh9GBhXDw==</span></span>
<span class="line"><span style="color:#61AFEF;">Sec-WebSocket-Protocol:</span><span style="color:#98C379;"> chat,</span><span style="color:#98C379;"> superchat</span></span>
<span class="line"><span style="color:#61AFEF;">Sec-WebSocket-Version:</span><span style="color:#D19A66;"> 13</span></span>
<span class="line"><span style="color:#61AFEF;">Origin:</span><span style="color:#98C379;"> http://example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>多了下面 2 个属性：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">Upgrade:webSocket</span></span>
<span class="line"><span style="color:#61AFEF;">Connection:Upgrade</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>告诉服务器发送的是 websocket</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">Sec-WebSocket-Key:</span><span style="color:#98C379;"> x3JJHMbDL1EzLkh9GBhXDw==</span></span>
<span class="line"><span style="color:#61AFEF;">Sec-WebSocket-Protocol:</span><span style="color:#98C379;"> chat,</span><span style="color:#98C379;"> superchat</span></span>
<span class="line"><span style="color:#61AFEF;">Sec-WebSocket-Version:</span><span style="color:#D19A66;"> 13</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></details><h1 id="数据处理" tabindex="-1">数据处理 <a class="header-anchor" href="#数据处理" aria-label="Permalink to &quot;数据处理&quot;">​</a></h1><ul><li><a href="https://juejin.im/post/5b0284ac51882542ad774c45" target="_blank" rel="noreferrer">解锁多种 JavaScript 数组去重姿势</a></li><li><a href="https://juejin.im/post/5d2ee123e51d4577614761f8#heading-6" target="_blank" rel="noreferrer">20 道 JS 原理题助你面试一臂之力！</a></li><li><a href="https://juejin.im/post/5cef46226fb9a07eaf2b7516" target="_blank" rel="noreferrer">一个合格的中级前端工程师需要掌握的 28 个 JavaScript 技巧</a></li></ul><h1 id="html5-web-worker" tabindex="-1">HTML5 Web Worker <a class="header-anchor" href="#html5-web-worker" aria-label="Permalink to &quot;HTML5 Web Worker&quot;">​</a></h1><ul><li><a href="https://juejin.im/post/59c1b3645188250ea1502e46#heading-0" target="_blank" rel="noreferrer">浅谈 HTML5 Web Worker</a></li><li><a href="https://juejin.im/post/5c10e5a9f265da611c26d634" target="_blank" rel="noreferrer">JavaScript 性能利器 —— Web Worker</a></li></ul><h1 id="service-worker" tabindex="-1">Service Worker <a class="header-anchor" href="#service-worker" aria-label="Permalink to &quot;Service Worker&quot;">​</a></h1><ul><li><a href="https://www.zhangxinxu.com/wordpress/2017/07/service-worker-cachestorage-offline-develop/" target="_blank" rel="noreferrer">借助 Service Worker 和 cacheStorage 缓存及离线开发</a></li><li><a href="https://github.com/qq449245884/xiaozhi/issues/8" target="_blank" rel="noreferrer">JavaScript 是如何工作的：Service Worker 的生命周期及使用场景</a></li><li><a href="https://juejin.im/post/5e26aa785188254c257c462d#heading-24" target="_blank" rel="noreferrer">面试官：请你实现一个 PWA 我：</a></li></ul>`,323),r=[t];function c(i,B,y,b,u,d){return a(),n("div",null,r)}const A=s(o,[["render",c]]);export{m as __pageData,A as default};
