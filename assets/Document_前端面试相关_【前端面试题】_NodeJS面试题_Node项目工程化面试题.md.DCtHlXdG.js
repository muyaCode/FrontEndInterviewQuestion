import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.DVTrgelf.js";const C=JSON.parse('{"title":"Node 项目工程化面试题","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端面试相关/【前端面试题】/NodeJS面试题/Node项目工程化面试题.md","filePath":"Document/前端面试相关/【前端面试题】/NodeJS面试题/Node项目工程化面试题.md","lastUpdated":1716655893000}'),p={name:"Document/前端面试相关/【前端面试题】/NodeJS面试题/Node项目工程化面试题.md"},e=l(`<h1 id="node-项目工程化面试题" tabindex="-1">Node 项目工程化面试题 <a class="header-anchor" href="#node-项目工程化面试题" aria-label="Permalink to &quot;Node 项目工程化面试题&quot;">​</a></h1><h2 id="待定面试" tabindex="-1">待定面试 <a class="header-anchor" href="#待定面试" aria-label="Permalink to &quot;待定面试&quot;">​</a></h2><p>1.使用 NodeJS 编写代码实现遍历文件夹及所有文件名</p><p>2.Node 如何做版本的升级?为什么要使用 nvm?</p><p>3.模块化的差异，AMD，CMD，COMMONJS，ESMODULE</p><p>4.图片上传到服务器的过程(FileReader.readAsDataURL)</p><p>5.token 存在 localstorage 里，过期怎么处理?</p><p>6.node 框架中的 mvc</p><p>7.mongle 与 mysql 的优势</p><p>8.Less(js)，sass(ruby) ，stylus，css，命名空间与 css module</p><p>9.工程化上的按需加载</p><p>10.git 上的冲突怎么解决</p><p>11.设计模式</p><p>12.Node 中的 npm 与版本管理 (package.lock，yarnlock)</p><p>13.Webpack</p><p>14.后端环境的搭建</p><p>15.typescript</p><h2 id="简单实现node的events模块" tabindex="-1">简单实现Node的Events模块 <a class="header-anchor" href="#简单实现node的events模块" aria-label="Permalink to &quot;简单实现Node的Events模块&quot;">​</a></h2><p>简介：观察者模式或者说订阅模式，它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。</p><p>node中的Events模块就是通过观察者模式来实现的：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> events</span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;events&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> eventEmitter</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> events</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">EventEmitter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">eventEmitter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;say&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Hello&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">eventEmitter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;say&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;Jony yu&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这样，eventEmitter发出say事件，通过On接收，并且输出结果，这就是一个订阅模式的实现，下面我们来简单的实现一个Events模块的EventEmitter。</p><p>1.实现简单的Event模块的emit和on方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Events</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">callBack</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{};</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">]){</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">]</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callBack</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">]){</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">o</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">                this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">][</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>2.这样我们就定义了Events，现在我们可以开始来调用：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> events</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Events</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">events</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;say&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Hello&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">nama</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//结果就是通过emit调用之后，输出了Jony yu</span></span>
<span class="line"><span style="color:#E5C07B;">events</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;say&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;Jony yu&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>3.每个对象是独立的</p><p>因为是通过new的方式，每次生成的对象都是不相同的，因此：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> event1</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Events</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> event2</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Events</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">event1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;say&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Jony event1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">event2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;say&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Jony event2&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//event1、event2之间的事件监听互相不影响</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//输出结果为&#39;Jony event1&#39; &#39;Jony event2&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">event1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;say&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">event2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;say&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,29),o=[e];function t(c,r,B,y,i,F){return a(),n("div",null,o)}const b=s(p,[["render",t]]);export{C as __pageData,b as default};
