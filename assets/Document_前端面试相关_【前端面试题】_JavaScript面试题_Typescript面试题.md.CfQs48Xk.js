import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.DVTrgelf.js";const p="/FrontEndInterviewQuestion/assets/49e51ed60ae145ee916b2ca490a293eftplv-k3u1fbpfcp-zoom-in-crop-mark1512000.TcyjJ6fi.webp",e="/FrontEndInterviewQuestion/assets/dea2d0e6d6254dbe8da2c4f9dc8850a5tplv-k3u1fbpfcp-jj-mark3024000q75.Bauj_N5A.webp",o="/FrontEndInterviewQuestion/assets/237464ba46bc4fa29e335e1dde6ff70btplv-k3u1fbpfcp-jj-mark3024000q75.DjjkyGIU.webp",r="/FrontEndInterviewQuestion/assets/3d5dd3396ab04fd8995305cbbc6a8ea2tplv-k3u1fbpfcp-jj-mark3024000q75.BgKRSst2.webp",A=JSON.parse('{"title":"Typescript面试题","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端面试相关/【前端面试题】/JavaScript面试题/Typescript面试题.md","filePath":"Document/前端面试相关/【前端面试题】/JavaScript面试题/Typescript面试题.md","lastUpdated":1716655893000}'),t={name:"Document/前端面试相关/【前端面试题】/JavaScript面试题/Typescript面试题.md"},c=l(`<h1 id="typescript面试题" tabindex="-1">Typescript面试题 <a class="header-anchor" href="#typescript面试题" aria-label="Permalink to &quot;Typescript面试题&quot;">​</a></h1><p>待定面试题：<a href="https://www.geeksforgeeks.org/typescript-interview-questions/?ref=lbp" target="_blank" rel="noreferrer">50+ TypeScript 面试问答 （2024） - GeeksforGeeks</a></p><h1 id="typescript知识点" tabindex="-1">Typescript知识点 <a class="header-anchor" href="#typescript知识点" aria-label="Permalink to &quot;Typescript知识点&quot;">​</a></h1><p>面试题涉及了 TypeScript 语言的各个方面，包括<code>基本语法</code>、<code>类型系统</code>、<code>函数</code>、<code>类</code>、<code>模块化</code>、<code>泛型</code>、<code>装饰器</code>等。在面试中，常见的 TypeScript 面试题主要围绕以下几个方面展开：</p><ul><li><p><strong>类型系统</strong>：考察对 TypeScript 类型系统的理解，包括基本类型、联合类型、交叉类型、接口、类型别名、类型推断、类型守卫等。</p></li><li><p><strong>函数和类</strong>：涉及函数参数类型、返回值类型、箭头函数、函数重载、类的定义、继承、访问修饰符等概念。</p></li><li><p><strong>泛型</strong>：考察在函数、类和接口中如何使用泛型来增加代码的灵活性和复用性。</p></li><li><p><strong>模块化</strong>：问题可能涉及 ES6 模块化的语法、导入导出方式以及模块解析等内容。</p></li><li><p><strong>装饰器</strong>：了解对装饰器的使用，包括类装饰器、方法装饰器、属性装饰器以及参数装饰器的定义和应用。</p></li><li><p><strong>编译配置</strong>：熟悉 tsconfig.json 中的配置选项，包括编译目标、模块系统、严格模式等。</p></li><li><p><strong>工程化实践</strong>：了解 TypeScript 在项目中的实际应用，如与 JavaScript 的混用、第三方库的声明文件使用、类型声明等。</p></li></ul><h2 id="什么是-typescript" tabindex="-1">什么是 TypeScript？ <a class="header-anchor" href="#什么是-typescript" aria-label="Permalink to &quot;什么是 TypeScript？&quot;">​</a></h2><p>TypeScript 是带有类型的 JavaScript。它是 Microsoft 创建的 JavaScript 超集。</p><p>TypeScript 将可选类型、类、async/await 等类型添加到纯 JavaScript 中。</p><p>这是 TypeScript 函数的一个简单示例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> greet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> &quot;Hello, &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">greet</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Michael&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="typescript的基本数据类型有哪些" tabindex="-1">TypeScript的基本数据类型有哪些？ <a class="header-anchor" href="#typescript的基本数据类型有哪些" aria-label="Permalink to &quot;TypeScript的基本数据类型有哪些？&quot;">​</a></h2><p>TypeScript有三种常用的基本数据类型：<code>string</code>、<code>number</code>和<code>boolean</code>。</p><p>它们与JavaScript中的同名类型相对应。</p><h2 id="在typescript中-如何声明数组" tabindex="-1">在TypeScript中，如何声明数组？ <a class="header-anchor" href="#在typescript中-如何声明数组" aria-label="Permalink to &quot;在TypeScript中，如何声明数组？&quot;">​</a></h2><p>在TypeScript中，可以使用以下方式声明数组：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myArray</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="typescript中的可选链如何工作" tabindex="-1">TypeScript中的可选链如何工作？ <a class="header-anchor" href="#typescript中的可选链如何工作" aria-label="Permalink to &quot;TypeScript中的可选链如何工作？&quot;">​</a></h2><p>可选链（Optional Chaining）允许您在访问对象属性或方法时避免出现null或undefined的错误。例如：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Alice&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  address</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Wonderland&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cityName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> user</span><span style="color:#ABB2BF;">?.</span><span style="color:#E5C07B;">address</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;Wonderland&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="typescript中如何创建函数重载" tabindex="-1">TypeScript中如何创建函数重载？ <a class="header-anchor" href="#typescript中如何创建函数重载" aria-label="Permalink to &quot;TypeScript中如何创建函数重载？&quot;">​</a></h2><p>函数重载允许您为同一个函数提供多个不同的参数类型和返回类型。例如：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> greet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> greet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> greet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> arg</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;string&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> \`Hello, </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">arg</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> \`You are </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">arg</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> years old.\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="什么是类型推断" tabindex="-1">什么是类型推断？ <a class="header-anchor" href="#什么是类型推断" aria-label="Permalink to &quot;什么是类型推断？&quot;">​</a></h2><p>类型推断是指TypeScript根据变量的值自动推断出其类型。例如：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> message</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;Hello, TypeScript&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// TypeScript推断message为string类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="什么是上下文类型" tabindex="-1">什么是上下文类型？ <a class="header-anchor" href="#什么是上下文类型" aria-label="Permalink to &quot;什么是上下文类型？&quot;">​</a></h2><p>上下文类型是指TypeScript根据上下文环境来推断表达式的类型。例如：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> numbers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// TypeScript推断numbers为number[]类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="如何设计-class-的声明" tabindex="-1">如何设计 Class 的声明？ <a class="header-anchor" href="#如何设计-class-的声明" aria-label="Permalink to &quot;如何设计 Class 的声明？&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Greeter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	greeting</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">greeting</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> message</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	greet</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;Hello, &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">greeting</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> greeter</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Greeter</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;world&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在声明类的时候，一般类中都会包含，构造函数、对构造函数中的属性进行类型声明、类中的方法。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="如何联合枚举类型的-key" tabindex="-1">如何联合枚举类型的 Key？ <a class="header-anchor" href="#如何联合枚举类型的-key" aria-label="Permalink to &quot;如何联合枚举类型的 Key？&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	A</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	B</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	C</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> strUnion</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> keyof</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> str</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;A&#39; | &#39;B&#39; | &#39;C&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="、-、-、-、、-等符号的含义" tabindex="-1">?.、??、!、!.、_、 等符号的含义？ <a class="header-anchor" href="#、-、-、-、、-等符号的含义" aria-label="Permalink to &quot;?.、??、!、!.、\\_、 等符号的含义？&quot;">​</a></h2><p><code>?. 可选链</code> 遇到 null 和 undefined 可以立即停止表达式的运行。</p><p><code>?? 空值合并运算符</code> 当左侧操作数为 null 或 undefined 时，其返回右侧的操作数，否则返回左侧的操作数。</p><p><code>! 非空断言运算符</code> x! 将从 x 值域中排除 null 和 undefined</p><p><code>!. </code> 在变量名后添加，可以断言排除 undefined 和 null 类型</p><p><code>_ 数字分割符</code> 分隔符不会改变数值字面量的值，使人更容易读懂数字 .e.g 1_101_324。</p><p><code>** </code>求幂</p><h2 id="简单介绍一下-typescript-模块的加载机制" tabindex="-1">简单介绍一下 TypeScript 模块的加载机制？ <a class="header-anchor" href="#简单介绍一下-typescript-模块的加载机制" aria-label="Permalink to &quot;简单介绍一下 TypeScript 模块的加载机制？&quot;">​</a></h2><p>假设有一个导入语句 <code>import { a } from &quot;moduleA&quot;</code>;</p><ol><li>首先，编译器会尝试定位需要导入的模块文件，通过绝对或者相对的路径查找方式；</li><li>如果上面的解析失败了，没有查找到对应的模块，编译器会尝试定位一个<code>外部模块声明</code>（.d.ts）；</li><li>最后，如果编译器还是不能解析这个模块，则会抛出一个错误 <code>error TS2307: Cannot find module &#39;moduleA&#39;.</code></li></ol><h2 id="简单聊聊你对-typescript-类型兼容性的理解" tabindex="-1">简单聊聊你对 TypeScript 类型兼容性的理解？ <a class="header-anchor" href="#简单聊聊你对-typescript-类型兼容性的理解" aria-label="Permalink to &quot;简单聊聊你对 TypeScript 类型兼容性的理解？&quot;">​</a></h2><p><code>ts 类型兼容：</code> 当一个类型 Y 可以赋值给另一个类型 X 时， 我们就可以说类型 X 兼容类型 Y。也就是说两者在结构上是一致的，而不一定非得通过 extends 的方式继承而来</p><p><code>接口的兼容性：X = Y </code>只要目标类型 X 中声明的属性变量在源类型 Y 中都存在就是兼容的（ Y 中的类型可以比 X 中的多，但是不能少）</p><p><code>函数的兼容性：X = Y </code> Y 的每个参数必须能在 X 里找到对应类型的参数，参数的名字相同与否无所谓，只看它们的类型（参数可以少但是不能多。与接口的兼容性有区别，原因参考下面《协变、逆变、双变和抗变的理解》）</p><h2 id="协变、逆变、双变和抗变的理解" tabindex="-1">协变、逆变、双变和抗变的理解？ <a class="header-anchor" href="#协变、逆变、双变和抗变的理解" aria-label="Permalink to &quot;协变、逆变、双变和抗变的理解？&quot;">​</a></h2><p><code>协变：X = Y </code>Y 类型可以赋值给 X 类型的情况就叫做协变，也可以说是 X 类型兼容 Y 类型</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> X</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Y</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	hobbies</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">X</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xiaoming&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Y</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xiaohong&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hobbies</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;eat&quot;</span><span style="color:#ABB2BF;">] };</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>逆变：printY = printX</code> 函数 X 类型可以赋值给函数 Y 类型，因为函数 Y 在调用的时候参数是按照 Y 类型进行约束的，但是用到的是函数 X 的 X 的属性和方法，ts 检查结果是类型安全的。这种特性就叫做逆变，函数的参数有逆变的性质。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> printY</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Y</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">printY</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">y</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hobbies</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> printX</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">X</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">printX</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E06C75;">printY</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> printX</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>双变（双向协变）：X = Y；Y = X</code>父类型可以赋值给子类型，子类型可以赋值给父类型，既逆变又协变，叫做“双向协变”（ts2.x 之前支持这种赋值，之后 ts 加了一个编译选项 strictFunctionTypes，设置为 true 就只支持函数参数的逆变，设置为 false 则支持双向协变）</p><p><code>抗变（不变）：</code>非父子类型之间不会发生型变，只要类型不一样就会报错</p><h2 id="typescript-中对象展开会有什么副作用吗" tabindex="-1">TypeScript 中对象展开会有什么副作用吗？ <a class="header-anchor" href="#typescript-中对象展开会有什么副作用吗" aria-label="Permalink to &quot;TypeScript 中对象展开会有什么副作用吗？&quot;">​</a></h2><ol><li>展开对象后面的属性会覆盖前面的属性；</li><li>仅包含对象自身的可枚举属性，不可枚举的属性将会丢失。</li></ol><h2 id="类型的全局声明和局部声明" tabindex="-1">类型的全局声明和局部声明 <a class="header-anchor" href="#类型的全局声明和局部声明" aria-label="Permalink to &quot;类型的全局声明和局部声明&quot;">​</a></h2><p>如果声明文件内不包含<code>import、export</code>，那么这个文件声明的类型就会变成全局声明。反之，若是这个文件包含了<code>import、export</code>，那么这个文件包含的类型声明则会是局部声明，不会影响到全局声明。</p><h2 id="typescript-中同名的-interface-或者同名的-interface-和-class-可以合并吗" tabindex="-1">TypeScript 中同名的 interface 或者同名的 interface 和 class 可以合并吗？ <a class="header-anchor" href="#typescript-中同名的-interface-或者同名的-interface-和-class-可以合并吗" aria-label="Permalink to &quot;TypeScript 中同名的 interface 或者同名的 interface 和 class 可以合并吗？&quot;">​</a></h2><p>同名的 interface 会自动合并，同名的 interface 和 class 会自动聚合。</p><h2 id="如何使-typescript-项目引入并识别编译为-javascript-的-npm-库包" tabindex="-1">如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？ <a class="header-anchor" href="#如何使-typescript-项目引入并识别编译为-javascript-的-npm-库包" aria-label="Permalink to &quot;如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？&quot;">​</a></h2><ol><li>选择安装 ts 版本，<code>npm install @types/包名 --save</code>；</li><li>对于没有类型的 js 库，需要编写同名的.d.ts 文件</li></ol><h2 id="typescript-的-tsconfig-json-中有哪些配置项信息" tabindex="-1">TypeScript 的 tsconfig.json 中有哪些配置项信息？ <a class="header-anchor" href="#typescript-的-tsconfig-json-中有哪些配置项信息" aria-label="Permalink to &quot;TypeScript 的 tsconfig.json 中有哪些配置项信息？&quot;">​</a></h2><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">&quot;files&quot;</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">&quot;include&quot;</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">&quot;exclude&quot;</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">&quot;compileOnSave&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">&quot;extends&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">&quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">: { </span><span style="color:#FFFFFF;">...</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>files</code> 是一个数组列表，里面包含指定文件的相对或绝对路径，用来指定待编译文件，编译器在编译的时候只会编译包含在 files 中列出的文件。 <code>include &amp; exclude</code> 指定编译某些文件，或者指定排除某些文件。 <code>compileOnSave：true</code> 让 IDE 在保存文件的时候根据 tsconfig.json 重新生成文件。 <code>extends</code> 可以通过指定一个其他的 tsconfig.json 文件路径，来继承这个配置文件里的配置。 <code>compilerOptions</code> 编译配置项，如何对具体的 ts 文件进行编译</p><h2 id="typescript-中如何设置模块导入的路径别名" tabindex="-1">TypeScript 中如何设置模块导入的路径别名？ <a class="header-anchor" href="#typescript-中如何设置模块导入的路径别名" aria-label="Permalink to &quot;TypeScript 中如何设置模块导入的路径别名？&quot;">​</a></h2><blockquote><p>通过 tsconfig.json 中的 paths 项来配置:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;baseUrl&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;paths&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">         &quot;@helper/*&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;src/helper/*&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">         &quot;@utils/*&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;src/utils/*&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#FFFFFF;">         ...</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></blockquote><h2 id="declare-declare-global-是什么" tabindex="-1">declare，declare global 是什么？ <a class="header-anchor" href="#declare-declare-global-是什么" aria-label="Permalink to &quot;declare，declare global 是什么？&quot;">​</a></h2><blockquote><p><code>declare</code> 是用来定义全局变量、全局函数、全局命名空间、js modules、class 等 <code>declare global</code> 为全局对象 <code>window</code> 增加新的属性</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#E06C75;"> global</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	interface</span><span style="color:#E5C07B;"> Window</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		csrf</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote><h2 id="对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解" tabindex="-1">对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？ <a class="header-anchor" href="#对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解" aria-label="Permalink to &quot;对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？&quot;">​</a></h2><blockquote><p><code>public</code>: 成员都默认为<code>public</code>，被此限定符修饰的成员是可以被外部访问； <code>private</code>: 被此限定符修饰的成员是只可以被类的内部访问； <code>protected</code>: 被此限定符修饰的成员是只可以被类的内部以及类的子类访问; <code>readonly</code>: 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p></blockquote><h2 id="keyof-和-typeof-关键字的作用" tabindex="-1">keyof 和 typeof 关键字的作用？ <a class="header-anchor" href="#keyof-和-typeof-关键字的作用" aria-label="Permalink to &quot;keyof 和 typeof 关键字的作用？&quot;">​</a></h2><blockquote><p><code>keyof 索引类型查询操作符</code> 获取索引类型的属性名，构成联合类型。 <code>typeof</code> 获取一个变量或对象的类型。</p></blockquote><h2 id="简述工具类型-exclude、omit、merge、intersection、overwrite的作用" tabindex="-1">简述工具类型 <code>Exclude</code>、<code>Omit</code>、<code>Merge</code>、<code>Intersection</code>、<code>Overwrite</code>的作用 <a class="header-anchor" href="#简述工具类型-exclude、omit、merge、intersection、overwrite的作用" aria-label="Permalink to &quot;简述工具类型 \`Exclude\`、\`Omit\`、\`Merge\`、\`Intersection\`、\`Overwrite\`的作用&quot;">​</a></h2><ul><li><code>Exclude&lt;T, U&gt;</code> 从 <code>T</code> 中排除出可分配给 <code>U</code>的元素。</li><li><code>Omit&lt;T, K&gt;</code> 的作用是忽略<code>T</code>中的某些属性。</li><li><code>Merge&lt;O1, O2&gt;</code> 是将两个对象的属性合并。</li><li><code>Compute&lt;A &amp; B&gt;</code> 是将交叉类型合并</li><li><code>Intersection&lt;T, U&gt;</code>的作用是取<code>T</code>的属性,此属性同样也存在与<code>U</code>。</li><li><code>Overwrite&lt;T, U&gt;</code> 是用<code>U</code>的属性覆盖<code>T</code>的相同属性。</li></ul><h2 id="数组定义的两种方式" tabindex="-1">数组定义的两种方式 <a class="header-anchor" href="#数组定义的两种方式" aria-label="Permalink to &quot;数组定义的两种方式&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Foo</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Bar</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	baz</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> }&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Foo</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Bar</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	baz</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> }[];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_1-为什么推荐使用-typescript" tabindex="-1">1. 为什么推荐使用 TypeScript？ <a class="header-anchor" href="#_1-为什么推荐使用-typescript" aria-label="Permalink to &quot;1. 为什么推荐使用 TypeScript？&quot;">​</a></h2><p>TypeScript 是微软公司开发和维护的一种面向对象的编程语言。它是 JavaScript 的超集，包含其所有元素。</p><p>其中，强类型和弱类型、静态类型和动态类型是两组不同的概念。</p><p>类型强弱是针对类型转换是否显示来区分，静态和动态类型是针对类型检查的时机来区分。</p><p>TS 对 JS 的改进主要是静态类型检查，静态类型检查有何意义？标准答案是“静态类型更有利于构建大型应用”。</p><p>推荐使用 TypeScript 的原因有：</p><ul><li>TypeScript 是开源的。</li><li>TypeScript 为 JavaScript ide 和实践（如静态检查）提供了高效的开发工具。</li><li>TypeScript 使代码更易于阅读和理解。</li><li>使用 TypeScript，我们可以大大改进普通的 JavaScript。</li><li>TypeScript 为我们提供了 ES6（ECMAScript 6）的所有优点，以及更高的生产率。</li><li>TypeScript 通过对代码进行类型检查，可以帮助我们避免在编写 JavaScript 时经常遇到的令人痛苦的错误。</li><li>强大的类型系统，包括泛型。</li><li>TypeScript 只不过是带有一些附加功能的 JavaScript。</li><li>TypeScript 代码可以按照 ES5 和 ES6 标准编译，以支持最新的浏览器。</li><li>与 ECMAScript 对齐以实现兼容性。</li><li>以 JavaScript 开始和结束。</li><li>支持静态类型。</li><li>TypeScript 将节省开发人员的时间。</li><li>TypeScript 是 ES3、ES5 和 ES6 的超集。</li></ul><h2 id="_2-说说-typescript-中命名空间与模块的理解和区别" tabindex="-1">2. 说说 TypeScript 中命名空间与模块的理解和区别 <a class="header-anchor" href="#_2-说说-typescript-中命名空间与模块的理解和区别" aria-label="Permalink to &quot;2. 说说 TypeScript 中命名空间与模块的理解和区别&quot;">​</a></h2><p><strong>命名空间</strong>：命名空间一个最明确的目的就是解决重名问题</p><p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的</p><p>这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中</p><p><strong>模块</strong>：<code>TypeScript</code> 与<code> ECMAScript</code> 2015 一样，任何包含顶级 <code>import</code> 或者 <code>export</code> 的文件都被当成一个模块</p><p>相反地，如果一个文件不带有顶级的<code>import</code>或者<code>export</code>声明，那么它的内容被视为全局可见的</p><p><strong>它们之间的区别</strong>：</p><ul><li>命名空间是位于全局命名空间下的一个普通的带有名字的 JavaScript 对象，使用起来十分容易。但就像其它的全局命名空间污染一样，它很难去识别组件之间的依赖关系，尤其是在大型的应用中</li><li>像命名空间一样，模块可以包含代码和声明。 不同的是模块可以声明它的依赖</li><li>在正常的 TS 项目开发过程中并不建议用命名空间，但通常在通过 d.ts 文件标记 js 库类型的时候使用命名空间，主要作用是给编译器编写代码的时候参考使用</li></ul><h2 id="_3-typescript-支持的访问修饰符有哪些" tabindex="-1">3. TypeScript 支持的访问修饰符有哪些？ <a class="header-anchor" href="#_3-typescript-支持的访问修饰符有哪些" aria-label="Permalink to &quot;3. TypeScript 支持的访问修饰符有哪些？&quot;">​</a></h2><p>TypeScript 支持访问修饰符 public，private 和 protected，它们决定了类成员的可访问性。</p><ul><li>公共（public），类的所有成员，其子类以及该类的实例都可以访问。</li><li>受保护（protected），该类及其子类的所有成员都可以访问它们。 但是该类的实例无法访问。</li><li>私有（private），只有类的成员可以访问它们。</li></ul><p>如果未指定访问修饰符，则它是隐式公共的，因为它符合 JavaScript 的便利性。</p><h2 id="_4-typescript-中有哪些声明变量的方式" tabindex="-1">4. TypeScript 中有哪些声明变量的方式？ <a class="header-anchor" href="#_4-typescript-中有哪些声明变量的方式" aria-label="Permalink to &quot;4. TypeScript 中有哪些声明变量的方式？&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 声明类型和值，Declaring type and value in a single statement</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">identifier</span><span style="color:#ABB2BF;">] : [</span><span style="color:#E5C07B;">type</span><span style="color:#ABB2BF;">-</span><span style="color:#E5C07B;">annotation</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 只声明类型，Declaring type without value</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">identifier</span><span style="color:#ABB2BF;">] : [</span><span style="color:#E5C07B;">type</span><span style="color:#ABB2BF;">-</span><span style="color:#E5C07B;">annotation</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 只声明值，Declaring its value without type</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">identifier</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 声明变量无类型和值，Declaring without value and type</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">identifier</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_5-typescript-和-javascript-的区别是什么" tabindex="-1">5. TypeScript 和 JavaScript 的区别是什么？ <a class="header-anchor" href="#_5-typescript-和-javascript-的区别是什么" aria-label="Permalink to &quot;5. TypeScript 和 JavaScript 的区别是什么？&quot;">​</a></h2><p>Typescript 是 JavaScript 的超集，可以被编译成 JavaScript 代码。用 JavaScript 编写的代码，在 TypeScript 中依然有效。Typescript 是纯面向对象的编程语言，包含类和接口的概念。 程序员可以用它来编写面向对象的服务端或客户端程序，并将它们编译成 JavaScript 代码。</p><h2 id="_6-typescript-中的-declare-关键字有什么作用" tabindex="-1">6. TypeScript 中的 Declare 关键字有什么作用？ <a class="header-anchor" href="#_6-typescript-中的-declare-关键字有什么作用" aria-label="Permalink to &quot;6. TypeScript 中的 Declare 关键字有什么作用？&quot;">​</a></h2><p>我们知道所有的 JavaScript 库/框架都没有 TypeScript 声明文件，但是我们希望在 TypeScript 文件中使用它们时不会出现编译错误。为此，我们使用 declare 关键字。在我们希望定义可能存在于其他地方的变量的环境声明和方法中，可以使用 declare 关键字。</p><p>例如，假设我们有一个名为 myLibrary 的库，它没有 TypeScript 声明文件，在全局命名空间中有一个名为 myLibrary 的命名空间。如果我们想在 TypeScript 代码中使用这个库，我们可以使用以下代码:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> myLibrary</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>TypeScript 运行时将把 myLibrary 变量赋值为任意类型(any)。这是一个问题，我们不会得到智能感知在设计时，但我们将能够使用库在我们的代码。</p><h2 id="_7-解释一下-typescript-中的枚举" tabindex="-1">7. 解释一下 TypeScript 中的枚举 <a class="header-anchor" href="#_7-解释一下-typescript-中的枚举" aria-label="Permalink to &quot;7. 解释一下 TypeScript 中的枚举&quot;">​</a></h2><p>枚举是 TypeScipt 数据类型，它允许我们定义一组命名常量。 使用枚举去创建一组不同的案例变得更加容易。 它是相关值的集合，可以是数字值或字符串值。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Gender</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Male</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Female</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Other</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Gender</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Male</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Output: 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//We can also access an enum value by it&#39;s number value.</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Gender</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// Output: Female</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_8-typescript-中什么是装饰器" tabindex="-1">8. TypeScript 中什么是装饰器？ <a class="header-anchor" href="#_8-typescript-中什么是装饰器" aria-label="Permalink to &quot;8. TypeScript 中什么是装饰器？&quot;">​</a></h2><p>装饰器是一种特殊类型的声明，它能过被附加到类声明，方法，属性或者参数上，可以修改类的行为</p><p>通俗的来说就是一个方法，可以注入到类，方法，属性参数上来扩展类，属性，方法，参数的功能</p><p><strong>装饰器的分类</strong>: 类装饰器、属性装饰器、方法装饰器、参数装饰器</p><h2 id="_9-typescript-中的模块是什么" tabindex="-1">9. TypeScript 中的模块是什么？ <a class="header-anchor" href="#_9-typescript-中的模块是什么" aria-label="Permalink to &quot;9. TypeScript 中的模块是什么？&quot;">​</a></h2><p>TypeScript 中的模块是相关变量、函数、类和接口的集合。 你可以将模块视为包含执行任务所需的一切的容器。可以导入模块以轻松地在项目之间共享代码。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">module</span><span style="color:#E5C07B;"> module_name</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	class</span><span style="color:#E5C07B;"> xyz</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		sum</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_10-typescript-的内置数据类型有哪些" tabindex="-1">10. TypeScript 的内置数据类型有哪些？ <a class="header-anchor" href="#_10-typescript-的内置数据类型有哪些" aria-label="Permalink to &quot;10. TypeScript 的内置数据类型有哪些？&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 数字类型：用于表示数字类型的值。TypeScript 中的所有数字都存储为浮点值。</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> num</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 字符类型： 用于表示字符串类型的值</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> str</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;CoderBin&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 布尔类型：一个逻辑二进制开关，包含true或false</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> flag</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// void 类型：分配给没有返回值的方法的类型。</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> unusable</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">void</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_11-typescript-的主要特点是什么" tabindex="-1">11. TypeScript 的主要特点是什么？ <a class="header-anchor" href="#_11-typescript-的主要特点是什么" aria-label="Permalink to &quot;11. TypeScript 的主要特点是什么？&quot;">​</a></h2><ul><li><strong>跨平台</strong>：TypeScript 编译器可以安装在任何操作系统上，包括 Windows、macOS 和 Linux。</li><li><strong>ES6 特性</strong>：TypeScript 包含计划中的 ECMAScript 2015 (ES6) 的大部分特性，例如箭头函数。</li><li><strong>面向对象的语言</strong>：TypeScript 提供所有标准的 OOP 功能，如类、接口和模块。</li><li><strong>静态类型检查</strong>：TypeScript 使用静态类型并帮助在编译时进行类型检查。因此，你可以在编写代码时发现编译时错误，而无需运行脚本。</li><li><strong>可选的静态类型</strong>：如果你习惯了 JavaScript 的动态类型，TypeScript 还允许可选的静态类型。</li></ul><h2 id="_12-typescript-中-never-和-void-的区别" tabindex="-1">12. TypeScript 中 never 和 void 的区别？ <a class="header-anchor" href="#_12-typescript-中-never-和-void-的区别" aria-label="Permalink to &quot;12. TypeScript 中 never 和 void 的区别？&quot;">​</a></h2><ul><li>void 表示没有任何类型（可以被赋值为 null 和 undefined）。</li><li>never 表示一个不包含值的类型，即表示永远不存在的值。</li><li>拥有 void 返回值类型的函数能正常运行。拥有 never 返回值类型的函数无法正常返回，无法终止，或会抛出异常。</li></ul><h2 id="_13-typescript-中的类型断言是什么" tabindex="-1">13. TypeScript 中的类型断言是什么？ <a class="header-anchor" href="#_13-typescript-中的类型断言是什么" aria-label="Permalink to &quot;13. TypeScript 中的类型断言是什么？&quot;">​</a></h2><p>类型断言可以用来手动指定一个值具体的类型，即允许变量从一种类型更改为另一种类型。</p><p>当你比 TS 更了解某个值的类型，并且需要指定更具体的类型时，我们可以使用<strong>类型断言</strong>。</p><h2 id="_14-ts-中-any-和-unknown-有什么区别" tabindex="-1">14. TS 中 any 和 unknown 有什么区别？ <a class="header-anchor" href="#_14-ts-中-any-和-unknown-有什么区别" aria-label="Permalink to &quot;14. TS 中 any 和 unknown 有什么区别？&quot;">​</a></h2><p>unknown 和 any 的主要区别是 unknown 类型会更加严格：在对 unknown 类型的值执行大多数操作之前，我们必须进行某种形式的检查。而在对 any 类型的值执行操作之前，我们不必进行任何检查。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">foo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 符合TS的语法</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a_value1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> foo</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a_value2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> foo</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a_value3</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> foo</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> bar</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 222</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">bar</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Error</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> k_value1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> bar</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> K_value2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> bar</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> K_value3</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> bar</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>因为 bar 是一个未知类型(任何类型的数据都可以赋给 <code>unknown</code> 类型)，所以不能确定是否有 msg 属性。不能通过 TS 语法检测；而 unknown 类型的值也不能将值赋给 any 和 unknown 之外的类型变量</p><p><strong>总结</strong>: any 和 unknown 都是顶级类型，但是 unknown 更加严格，不像 any 那样不做类型检查，反而 unknown 因为未知性质，不允许访问属性，不允许赋值给其他有明确类型的变量。</p><h2 id="_15-使用-ts-实现一个判断传入参数是否是数组类型的方法" tabindex="-1">15. 使用 TS 实现一个判断传入参数是否是数组类型的方法？ <a class="header-anchor" href="#_15-使用-ts-实现一个判断传入参数是否是数组类型的方法" aria-label="Permalink to &quot;15. 使用 TS 实现一个判断传入参数是否是数组类型的方法？&quot;">​</a></h2><p>unknown 用于变量类型不确定，但肯定可以确定的情形下，比如下面这个示例中，参数总归会有个值，根据这个值的类型进行不同的处理，这里使用 unknown 替代 any 则会更加类型安全。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_16-tsconfig-json-有什么作用" tabindex="-1">16. tsconfig.json 有什么作用？ <a class="header-anchor" href="#_16-tsconfig-json-有什么作用" aria-label="Permalink to &quot;16. tsconfig.json 有什么作用？&quot;">​</a></h2><p>tsconfig.json 文件是 JSON 格式的文件。</p><p>在 tsconfig.json 文件中，可以指定不同的选项来告诉编译器如何编译当前项目。</p><p>目录中包含 tsconfig.json 文件，表明该目录是 TypeScript 项目的根目录。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 常用配置</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      tsconfig.json是ts编译器的配置文件，ts可以根据它的信息来对待吗进行编译 可以再tsconfig中写注释</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      include : 用来指定哪些文件需要被编译</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      exclude : 用来指定哪些文件不需要被编译 ：默认node_module</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      extends : 用来指定继承的配置文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      files   : 用来指定被编译的文件列表，只有编译少量文件才使用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      compilerOptions : 编译器的选项是配置文件中非常重要也是非常复杂的配置选项</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  */</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;include&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ** : 任意目录 ， * : 任意文件</span></span>
<span class="line"><span style="color:#98C379;">		&quot;./src/**/*&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;exclude&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;./src/hello/**/*&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// &quot;extends&quot;: &quot;./configs/base&quot;,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;files&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">		&quot;1.ts&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// &quot;2.ts&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 用来指定 ES 版本 ESNext : 最新版。 &#39;ES3&#39;, &#39;ES5&#39;, &#39;ES6&#39;/&#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, &#39;ES2018&#39;, &#39;ES2019&#39;, &#39;ES2020&#39;, &#39;ESNext&#39;</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;target&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ES2020&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 指定要使用模块化的规范 : &#39;None&#39;, &#39;CommonJS&#39;, &#39;AMD&#39;, &#39;System&#39;, &#39;UMD&#39;, &#39;ES6&#39;/&#39;ES2015&#39;, &#39;ES2020&#39; or &#39;ESNext&#39;</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;module&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ESNext&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 用来指定项目中要使用的库 &#39;ES5&#39;, &#39;ES6&#39;, &#39;ES2015&#39;, &#39;ES7&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, &#39;ES2018&#39;, &#39;ESNext&#39;, &#39;DOM&#39;, &#39;DOM.Iterable&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//                          &#39;WebWorker&#39;, &#39;ScriptHost&#39;, &#39;ES2015.Core&#39;, &#39;ES2015.Collection&#39;, &#39;ES2015.Generator&#39;, &#39;ES2015.Iterable&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//                          &#39;ES2015.Promise&#39;, &#39;ES2015.Proxy&#39;, &#39;ES2015.Reflect&#39;, &#39;ES2015.Symbol&#39;, &#39;ES2015.Symbol.WellKnown&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//                          &#39;ES2016.Array.Include&#39;, &#39;ES2017.object&#39;, &#39;ES2017.Intl&#39;, &#39;ES2017.SharedMemory&#39;, &#39;ES2017.String&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//                          &#39;ES2017.TypedArrays&#39;, &#39;ES2018.Intl&#39;, &#39;ES2018.Promise&#39;, &#39;ES2018.RegExp&#39;, &#39;ESNext.AsyncIterable&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//                          &#39;ESNext.Array&#39;, &#39;ESNext.Intl&#39;, &#39;ESNext.Symbol&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 运行在浏览器中不用设置，运行在node或其他中才需要设置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// &quot;lib&quot;:[]，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 用来指定编译后文件的存放位置</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;outDir&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./dist&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 将代码合并为一个文件,设置之后所有的全局作用域中的代码会合并到同一个文件中 但是只能在  &#39;amd&#39; and &#39;system&#39; 中才能使用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// &quot;outFile&quot;: &quot;./dist/app.js&quot;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否对js文件进行编译，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;allowJs&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否检查js代码是否符合语法规范，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;checkJs&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否移除注释，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;removeComments&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否不生成编译后文件，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;noEmit&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 当有错误时是否生成文件，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;noEmitOnError&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否生成sourceMap，默认false  这个文件里保存的，是转换后代码的位置，和对应的转换前的位置。有了它，出错的时候，通过断点工具可以直接显示原始代码，而不是转换后的代码。</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;sourceMap&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 所有的严格检查的总开关，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;strict&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 编译后的文件是否开启严格模式，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;alwaysStrict&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 不允许隐式的any，默认false(允许)</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;noImplicitAny&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 不允许隐式的this，默认false(允许)</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;noImplicitThis&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否严格的检查空值，默认false 检查有可能为null的地方</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;strictNullChecks&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否严格检查bind、call和apply的参数列表，默认false  检查是否有多余参数</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;strictBindCallApply&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否严格检查函数的类型，</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;strictFunctionTypes&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否严格检查属性是否初始化，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;strictPropertyInitialization&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否检查switch语句包含正确的break，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;noFallthroughCasesInSwitch&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 检查函数没有隐式的返回值，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;noImplicitReturns&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否检查检查未使用的局部变量，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;noUnusedLocals&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否检查未使用的参数，默认false</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;noUnusedParameters&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 是否检查不可达代码报错，默认false   true，忽略不可达代码 false，不可达代码将引起错误</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;allowUnreachableCode&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br></div></div><h2 id="_17-typescript-中什么是类类型接口" tabindex="-1">17. TypeScript 中什么是类类型接口？ <a class="header-anchor" href="#_17-typescript-中什么是类类型接口" aria-label="Permalink to &quot;17. TypeScript 中什么是类类型接口？&quot;">​</a></h2><ul><li>如果接口用于一个类的话，那么接口会表示“行为的抽象”</li><li>对类的约束，让类去实现接口，类可以实现多个接口</li><li>接口只能约束类的公有成员（实例属性/方法），无法约束私有成员、构造函数、静态属性/方法</li></ul><h2 id="_18-ts-中什么是方法重载" tabindex="-1">18. TS 中什么是方法重载？ <a class="header-anchor" href="#_18-ts-中什么是方法重载" aria-label="Permalink to &quot;18. TS 中什么是方法重载？&quot;">​</a></h2><p>方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。 基本上，它在派生类或子类中重新定义了基类方法。</p><p>方法覆盖规则：</p><ul><li>该方法必须与父类中的名称相同。</li><li>它必须具有与父类相同的参数。</li><li>必须存在 IS-A 关系或继承。</li></ul><h2 id="_19-ts-中的类是什么-如何定义" tabindex="-1">19. TS 中的类是什么，如何定义？ <a class="header-anchor" href="#_19-ts-中的类是什么-如何定义" aria-label="Permalink to &quot;19. TS 中的类是什么，如何定义？&quot;">​</a></h2><p>类表示一组相关对象的共享行为和属性。</p><p>例如，我们的类可能是 Student，其所有对象都具有该 attendClass 方法。另一方面，John 是一个单独的 type 实例，Student 可能有额外的独特行为，比如 attendExtracurricular.</p><p>你使用关键字声明类 class：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Student</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	studCode</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	studName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">studName</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">studCode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> code</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_20-如何在-ts-中实现继承" tabindex="-1">20. 如何在 TS 中实现继承？ <a class="header-anchor" href="#_20-如何在-ts-中实现继承" aria-label="Permalink to &quot;20. 如何在 TS 中实现继承？&quot;">​</a></h2><p>继承是一种从另一个类获取一个类的属性和行为的机制。它是面向对象编程的一个重要方面，并且具有从现有类创建新类的能力，继承成员的类称为基类，继承这些成员的类称为派生类。</p><p>继承可以通过使用 extend 关键字来实现。我们可以通过下面的例子来理解它。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Shape</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Area</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">area</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Area</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> area</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Circle</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Shape</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	display</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;圆的面积: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Area</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Circle</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">320</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">display</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_21-ts-中的泛型是什么" tabindex="-1">21. TS 中的泛型是什么？ <a class="header-anchor" href="#_21-ts-中的泛型是什么" aria-label="Permalink to &quot;21. TS 中的泛型是什么？&quot;">​</a></h2><p>TypeScript Generics 是提供创建可重用组件的方法的工具。 它能够创建可以使用多种数据类型而不是单一数据类型的组件。 而且，它在不影响性能或生产率的情况下提供了类型安全性。 泛型允许我们创建泛型类，泛型函数，泛型方法和泛型接口。</p><p>在泛型中，类型参数写在左括号（&lt;）和右括号（&gt;）之间，这使它成为强类型集合。 它使用一种特殊的类型变量来表示类型</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> identity</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> arg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> output1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> identity</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&quot;CoderBin&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> output2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> identity</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">117</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">output1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">output2</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_22-说说-ts-中的类及其特性" tabindex="-1">22. 说说 TS 中的类及其特性 <a class="header-anchor" href="#_22-说说-ts-中的类及其特性" aria-label="Permalink to &quot;22. 说说 TS 中的类及其特性&quot;">​</a></h2><p>TypeScript 引入了类，以便它们可以利用诸如封装和抽象之类的面向对象技术的好处。</p><p>TypeScript 编译器将 TypeScript 中的类编译为普通的 JavaScript 函数，以跨平台和浏览器工作。</p><p>一个类包括以下内容：</p><ul><li>构造器（Constructor）</li><li>属性（Properties）</li><li>方法（Methods）</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Employee</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	empID</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	empName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ID</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">empName</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">empID</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ID</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	getSalary</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> 40000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>类的其他特性有：</p><ul><li>继承（Inheritance）</li><li>封装（Encapsulation）</li><li>多态（Polymorphism）</li><li>抽象（Abstraction）</li></ul><h2 id="_23-解释如何使用-typescript-mixin" tabindex="-1">23. 解释如何使用 TypeScript mixin <a class="header-anchor" href="#_23-解释如何使用-typescript-mixin" aria-label="Permalink to &quot;23. 解释如何使用 TypeScript mixin&quot;">​</a></h2><p>Mixin 本质上是在相反方向上工作的继承。Mixins 允许你通过组合以前类中更简单的部分类来设置构建新类。</p><p>相反，类 A 继承类 B 来获得它的功能，类 B 从类 A 需要返回一个新类的附加功能。</p><h2 id="_24-什么是-typescript-映射文件" tabindex="-1">24. 什么是 TypeScript 映射文件？ <a class="header-anchor" href="#_24-什么是-typescript-映射文件" aria-label="Permalink to &quot;24. 什么是 TypeScript 映射文件？&quot;">​</a></h2><ul><li>TypeScript Map 文件是一个源映射文件，其中包含有关我们原始文件的信息。</li><li>.map 文件是源映射文件，可让工具在发出的 JavaScript 代码和创建它的 TypeScript 源文件之间进行映射。</li><li>许多调试器可以使用这些文件，因此我们可以调试 TypeScript 文件而不是 JavaScript 文件。</li></ul><h2 id="_25-ts-中的类型有哪些" tabindex="-1">25. TS 中的类型有哪些？ <a class="header-anchor" href="#_25-ts-中的类型有哪些" aria-label="Permalink to &quot;25. TS 中的类型有哪些？&quot;">​</a></h2><p>类型系统表示语言支持的不同类型的值。它在程序存储或操作所提供的值之前检查其有效性。</p><p>它可以分为两种类型，</p><ul><li>内置：包括数字(number)，字符串(string)，布尔值(boolean)，无效(void)，空值(null)和未定义(undefined)。</li><li>用户定义的：它包括枚举(enums)，类(classes)，接口(interfaces)，数组(arrays)和元组(tuple)。</li></ul><h2 id="_26-ts-中的-interface-和-type-有什么区别" tabindex="-1">26. TS 中的 interface 和 type 有什么区别？ <a class="header-anchor" href="#_26-ts-中的-interface-和-type-有什么区别" aria-label="Permalink to &quot;26. TS 中的 interface 和 type 有什么区别？&quot;">​</a></h2><p><strong>相同点：</strong></p><ol><li>都可以描述一个对象或者函数</li></ol><p><strong>interface</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> SetUser</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>type</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> User</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> SetUser</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol><li>都允许拓展（extends）</li></ol><p>interface 和 type 都可以拓展，并且两者并不是相互独立的，也就是说 interface 可以 extends type, type 也可以 extends interface 。 虽然效果差不多，但是两者语法不同。</p><p><strong>不同点</strong></p><ul><li>type 可以而 interface 不行</li></ul><p><strong>type 可以声明基本类型别名，联合类型，元组等类型</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 基本类型别名</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 联合类型</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Dog</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	wong</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Cat</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	miao</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Pet</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Dog</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Cat</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 具体定义数组每个位置的类型</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> PetList</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">Dog</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Pet</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>type 语句中还可以使用 typeof 获取实例的类型进行赋值</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 当你想获取一个变量的类型时，使用 typeof</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> div</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> B</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> div</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>其他骚操作</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> StringOrNumber</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Text</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;"> | { </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> NameLookup</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Dictionary</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Callback</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Pair</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Coordinates</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Pair</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Tree</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;"> | { </span><span style="color:#E06C75;">left</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Tree</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#E06C75;">right</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Tree</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>interface 可以而 type 不行</li></ul><p><strong>interface 能够声明合并</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	sex</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">User 接口为 {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  name: string</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  age: number</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  sex: string </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>一般来说，如果不清楚什么时候用 interface/type，能用 interface 实现，就用 interface , 如果不能就用 type 。</p><h2 id="_27-ts-中的-getter-setter-是什么-你如何使用它们" tabindex="-1">27. TS 中的 getter/setter 是什么？你如何使用它们？ <a class="header-anchor" href="#_27-ts-中的-getter-setter-是什么-你如何使用它们" aria-label="Permalink to &quot;27. TS 中的 getter/setter 是什么？你如何使用它们？&quot;">​</a></h2><p>Getter 和 setter 是特殊类型的方法，可帮助你根据程序的需要委派对私有变量的不同级别的访问。</p><p>Getters 允许你引用一个值但不能编辑它。Setter 允许你更改变量的值，但不能查看其当前值。这些对于实现封装是必不可少的。</p><p>例如，新雇主可能能够了解 get 公司的员工人数，但无权 set 了解员工人数。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fullNameMaxLength</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Employee</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E06C75;"> _fullName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	get</span><span style="color:#61AFEF;"> fullName</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_fullName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	set</span><span style="color:#61AFEF;"> fullName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newName</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> newName</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> fullNameMaxLength</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fullName has a max length of &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> fullNameMaxLength</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_fullName</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> employee</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Employee</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">employee</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullName</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Bin Coder&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">employee</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">employee</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fullName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="_28-如何检查-ts-中的-null-和-undefiend" tabindex="-1">28. 如何检查 TS 中的 null 和 undefiend？ <a class="header-anchor" href="#_28-如何检查-ts-中的-null-和-undefiend" aria-label="Permalink to &quot;28. 如何检查 TS 中的 null 和 undefiend？&quot;">​</a></h2><p>通过使用一个缓冲检查，我们可以检查空和未定义:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果我们使用严格的检查，它将总是对设置为 null 的值为真，而对未定义的变量不为真。</p><p>例子</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> check</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot; == null&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot; === null&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot; is undefined&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>输出</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#98C379;">&quot;a == null&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#98C379;">&quot;a is undefined&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#98C379;">&quot;b == null&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#98C379;">&quot;b === null&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_29-typescript-中-const-和-readonly-的区别是什么" tabindex="-1">29. TypeScript 中 const 和 readonly 的区别是什么？ <a class="header-anchor" href="#_29-typescript-中-const-和-readonly-的区别是什么" aria-label="Permalink to &quot;29. TypeScript 中 const 和 readonly 的区别是什么？&quot;">​</a></h2><ul><li>const 用于变量，readonly 用于属性</li><li>const 在运行时检查，readonly 在编译时检查</li><li>使用 const 变量保存的数组，可以使用 push，pop 等方法。但是如果使用 Readonly Array 声明的数组不能使用 push，pop 等方法</li></ul><h2 id="_30-omit-类型有什么作用" tabindex="-1">30. Omit 类型有什么作用 <a class="header-anchor" href="#_30-omit-类型有什么作用" aria-label="Permalink to &quot;30. Omit 类型有什么作用&quot;">​</a></h2><p>Omit 以一个类型为基础支持剔除某些属性，然后返回一个新类型。 语法如下</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">Omit</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">Type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Keys</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用示例</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Todo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	description</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	completed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	createdAt</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TodoPreview</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Omit</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;description&quot;</span><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="private-protected-public-type-interface-类型和接口联合类型-交叉类型" tabindex="-1">private, protected, public type, interface 类型和接口联合类型，交叉类型 <a class="header-anchor" href="#private-protected-public-type-interface-类型和接口联合类型-交叉类型" aria-label="Permalink to &quot;private, protected, public type, interface 类型和接口联合类型，交叉类型&quot;">​</a></h3><h3 id="泛型" tabindex="-1">泛型 <a class="header-anchor" href="#泛型" aria-label="Permalink to &quot;泛型&quot;">​</a></h3><h3 id="keyof-typeof-的使用" tabindex="-1">keyof, typeof 的使用 <a class="header-anchor" href="#keyof-typeof-的使用" aria-label="Permalink to &quot;keyof, typeof 的使用&quot;">​</a></h3><h3 id="utility-type-的实现原理" tabindex="-1">Utility Type 的实现原理 <a class="header-anchor" href="#utility-type-的实现原理" aria-label="Permalink to &quot;Utility Type 的实现原理&quot;">​</a></h3><h2 id="type-和-interface-的区别" tabindex="-1">type 和 interface 的区别 <a class="header-anchor" href="#type-和-interface-的区别" aria-label="Permalink to &quot;type 和 interface 的区别&quot;">​</a></h2><p>相同点：</p><ol><li>都可以描述 &#39;对象&#39; 或者 &#39;函数&#39;</li><li>都允许拓展(extends)</li></ol><p>不同点：</p><ol><li>type 可以声明基本类型，联合类型，元组</li><li>type 可以使用 typeof 获取实例的类型进行赋值</li><li>多个相同的 interface 声明可以自动合并</li></ol><p>使用 interface 描述‘数据结构’，使用 type 描述‘类型关系’</p><p>interface 可以重复声明，type 不行，继承方式不一样，type 使用交叉类型方式，interface 使用 extends 实现。</p><p>在对象扩展的情况下，使用接口继承要比交叉类型的性能更好。建议使用 interface 来描述对象对外暴露的借口，使用 type 将一组类型重命名（或对类型进行复杂编程）。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> iMan</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 接口可以进行声明合并</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> iMan</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	hobby</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> tMan</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type不能重复定义</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type tMan = {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 继承方式不同,接口继承使用extends</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> iManPlus</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> iMan</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	height</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type继承使用&amp;，又称交叉类型</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> tManPlus</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">height</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> } &amp; </span><span style="color:#E5C07B;">tMan</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> aMan</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">iManPlus</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;aa&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	height</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;175cm&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	hobby</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;eat&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> bMan</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">tManPlus</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bb&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	height</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;150cm&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="any、unkonwn、never" tabindex="-1">any、unkonwn、never <a class="header-anchor" href="#any、unkonwn、never" aria-label="Permalink to &quot;any、unkonwn、never&quot;">​</a></h2><p>any 和 unkonwn 在 TS 类型中属于最顶层的 Top Type，即所有的类型都是它俩的子类型。而 never 则相反，它作为 Bottom Type 是所有类型的子类型。</p><h2 id="_1-什么是-typescript" tabindex="-1">1. 什么是 TypeScript <a class="header-anchor" href="#_1-什么是-typescript" aria-label="Permalink to &quot;1. 什么是 TypeScript&quot;">​</a></h2><p><code>TypeScript</code>是一种由微软开发的开源编程语言，它是 强类型的 JavaScript 的<code>超集</code>。</p><p>TypeScript 通过添加<code>静态类型</code>、<code>类</code>、<code>接口</code>和<code>模块</code>等功能，使得在大型应用程序中更容易进行维护和扩展。它可以被编译为纯 JavaScript，从而能够在任何支持 JavaScript 的地方运行。使用 TypeScript 可以帮助开发人员在编码过程中避免一些常见的错误，并提供更好的代码编辑功能和工具支持。</p><p>TypeScript 支持面向对象编程的概念，如类、接口、继承、泛型等。Typescript 并不直接在浏览器上运行，需要编译器编译成纯 Javascript 来运行。</p><h2 id="_2-为什么要使用-typescript-typescript-相对于-javascript-的优势是什么" tabindex="-1">2. 为什么要使用 TypeScript ? TypeScript 相对于 JavaScript 的优势是什么？ <a class="header-anchor" href="#_2-为什么要使用-typescript-typescript-相对于-javascript-的优势是什么" aria-label="Permalink to &quot;2. 为什么要使用 TypeScript ? TypeScript 相对于 JavaScript 的优势是什么？&quot;">​</a></h2><p>增加了静态类型，可以在开发人员编写脚本时检测错误，使得代码质量更好，更健壮。</p><p>优势:</p><ol><li>杜绝手误导致的变量名写错;</li><li>类型可以一定程度上充当文档;</li><li>IDE 自动填充，自动联想;</li></ol><h2 id="_2-类型声明和类型推断的区别-并举例应用" tabindex="-1">2. 类型声明和类型推断的区别，并举例应用 <a class="header-anchor" href="#_2-类型声明和类型推断的区别-并举例应用" aria-label="Permalink to &quot;2. 类型声明和类型推断的区别，并举例应用&quot;">​</a></h2><p>类型声明是显式地为变量或函数指定类型，而类型推断是 TypeScript 根据赋值语句右侧的值自动推断变量的类型。例如：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 类型声明</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 类型推断</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// TypeScript会自动推断y的类型为number</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="使用-string、number、boolean、symbol、object-等给类型做声明" tabindex="-1">使用 String、Number、Boolean、Symbol、Object 等给类型做声明 <a class="header-anchor" href="#使用-string、number、boolean、symbol、object-等给类型做声明" aria-label="Permalink to &quot;使用 String、Number、Boolean、Symbol、Object 等给类型做声明&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;bob&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> decLiteral</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> isDone</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> sym</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">symbol</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_3-什么是接口-interface-它的作用-接口的使用场景。接口和类型别名-type-alias-的区别" tabindex="-1">3. 什么是接口（interface），它的作用，接口的使用场景。接口和类型别名（Type Alias）的区别 <a class="header-anchor" href="#_3-什么是接口-interface-它的作用-接口的使用场景。接口和类型别名-type-alias-的区别" aria-label="Permalink to &quot;3. 什么是接口（interface），它的作用，接口的使用场景。接口和类型别名（Type Alias）的区别&quot;">​</a></h2><p>接口是用于描述对象的形状的结构化类型。它定义了对象应该包含哪些属性和方法。在 TypeScript 中，接口可以用来约束对象的结构，以提高代码的可读性和维护性。例如：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> greet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">person</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> \`Hello, </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>接口</code>和<code>类型别名</code>的区别：</p><ul><li><code>接口</code>定义了一个契约，描述了对象的形状（属性和方法），以便在多个地方共享。它可以被类、对象和函数实现。</li><li><code>类型别名</code>给一个类型起了一个新名字，便于在多处使用。它可以用于原始值、联合类型、交叉类型等。与接口不同，类型别名可以用于原始类型、联合类型、交叉类型等，而且还可以为任意类型指定名字。</li></ul><h2 id="_4-什么是泛型-generic-如何创建泛型函数和泛型类-实际用途" tabindex="-1">4. 什么是泛型（generic），如何创建泛型函数和泛型类，实际用途 <a class="header-anchor" href="#_4-什么是泛型-generic-如何创建泛型函数和泛型类-实际用途" aria-label="Permalink to &quot;4. 什么是泛型（generic），如何创建泛型函数和泛型类，实际用途&quot;">​</a></h2><p><code>泛型</code>是一种在定义函数、类或接口时使用类型参数的方式，以增加代码的灵活性和重用性。在 TypeScript 中，可以使用来创建泛型。例如：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> identity</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> arg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用泛型函数</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> output</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> identity</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_5-枚举-enum-是什么-它的优势-应用案例。枚举和常量枚举的区别" tabindex="-1">5. 枚举（enum）是什么，它的优势，应用案例。枚举和常量枚举的区别 <a class="header-anchor" href="#_5-枚举-enum-是什么-它的优势-应用案例。枚举和常量枚举的区别" aria-label="Permalink to &quot;5. 枚举（enum）是什么，它的优势，应用案例。枚举和常量枚举的区别&quot;">​</a></h2><p>枚举是一种对数字值集合进行命名的方式。它们可以增加代码的可读性，并提供一种便捷的方式来使用一组有意义的常量。例如：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Red</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Green</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Blue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> selectedColor</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Color</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Red</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>枚举和常量枚举的区别:</p><ul><li><code>枚举</code>可以包含计算得出的值，而常量枚举则在编译阶段被删除，并且不能包含计算得出的值，它只能包含常量成员。</li><li><code>常量枚举</code>在编译后会被删除，而普通枚举会生成真实的对象。</li></ul><h2 id="_6-如何处理可空类型-nullable-types-和-undefined-类型-如何正确处理这些类型以避免潜在错误" tabindex="-1">6. 如何处理可空类型（nullable types）和 undefined 类型，如何正确处理这些类型以避免潜在错误 <a class="header-anchor" href="#_6-如何处理可空类型-nullable-types-和-undefined-类型-如何正确处理这些类型以避免潜在错误" aria-label="Permalink to &quot;6. 如何处理可空类型（nullable types）和 undefined 类型，如何正确处理这些类型以避免潜在错误&quot;">​</a></h2><p>在 TypeScript 中，可空类型是指一个变量可以存储特定类型的值，也可以存储<code>null</code>或<code>undefined</code>。（通过使用可空类型，开发者可以明确表达一个变量可能包含特定类型的值，也可能不包含值（即为<code>null</code>或<code>undefined</code>）。这有助于提高代码的可读性，并使得变量的可能取值范围更加清晰明了）。</p><p>为了声明一个可空类型，可以使用联合类型（Union Types），例如 <code>number | null</code> 或 <code>string | undefined</code>。 例如：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> numberOrNull</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">null</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">numberOrNull</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 可以赋值为null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> stringOrUndefined</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">stringOrUndefined</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 可以赋值为undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="使用-union-types-时有哪些注意事项" tabindex="-1">使用 Union Types 时有哪些注意事项？ <a class="header-anchor" href="#使用-union-types-时有哪些注意事项" aria-label="Permalink to &quot;使用 Union Types 时有哪些注意事项？&quot;">​</a></h2><blockquote><p><strong>属性或方法访问</strong>: 当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getLength</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">something</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> something</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// index.ts(2,22): error TS2339: Property &#39;length&#39; does not exist on type &gt;&#39;string | number&#39;.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   Property &#39;length&#39; does not exist on type &#39;number&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">something</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> something</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 公共方法和属性可以访问</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></blockquote><h2 id="_7-什么是联合类型和交叉类型" tabindex="-1">7. 什么是联合类型和交叉类型 <a class="header-anchor" href="#_7-什么是联合类型和交叉类型" aria-label="Permalink to &quot;7. 什么是联合类型和交叉类型&quot;">​</a></h2><p><code>联合类型</code>表示一个值可以是多种类型中的一种，而<code>交叉类型</code>表示一个新类型，它包含了多个类型的特性。</p><ul><li>联合类型示例：</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// typescript</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myVar</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">myVar</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 合法</span></span>
<span class="line"><span style="color:#E06C75;">myVar</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 合法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>交叉类型示例：</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> A</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	a</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> B</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	b</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> C</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> A</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 表示同时具备 A 和 B 的特性</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_8-什么是-typescript-中的声明文件-declaration-files" tabindex="-1">8. 什么是 TypeScript 中的声明文件（Declaration Files） <a class="header-anchor" href="#_8-什么是-typescript-中的声明文件-declaration-files" aria-label="Permalink to &quot;8. 什么是 TypeScript 中的声明文件（Declaration Files）&quot;">​</a></h2><p>声明文件（通常以 <code>.d.ts</code> 扩展名结尾）用于描述已有 JavaScript 代码库的类型信息。它们提供了类型定义和元数据，以便在 TypeScript 项目中使用这些库时获得智能感知和类型安全。</p><h2 id="_9-什么是命名空间-namespace-和模块-module" tabindex="-1">9. 什么是命名空间（Namespace）和模块（Module） <a class="header-anchor" href="#_9-什么是命名空间-namespace-和模块-module" aria-label="Permalink to &quot;9. 什么是命名空间（Namespace）和模块（Module）&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>模块</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>在一个大型项目中，可以将相关的代码组织到单独的文件，并使用模块来导入和导出这些文件中的功能。</li><li>在一个 Node.js 项目中，可以使用 import 和 export 关键字来创建模块，从而更好地组织代码并管理依赖关系。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>命名空间</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>在面向对象的编程中，命名空间可以用于将具有相似功能或属性的类、接口等进行分组，以避免全局命名冲突。</li><li>这在大型的 JavaScript 或 TypeScript 应用程序中特别有用，可以确保代码结构清晰，并且不会意外地重复定义相同的名称。</li></ul><p><code>模块</code>提供了一种组织代码的方式，使得我们可以轻松地在多个文件中共享代码，</p><p><code>命名空间</code>则提供了一种在全局范围内组织代码的方式，防止命名冲突。</p><p>模块示例:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// greeter.ts</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> \`Hello, </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// app.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">sayHello</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./greeter&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>命名空间示例:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// greeter.ts</span></span>
<span class="line"><span style="color:#C678DD;">namespace</span><span style="color:#E5C07B;"> Greetings</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> \`Hello, </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// app.ts</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">reference</span><span style="color:#E06C75;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;greeter.ts&quot;</span><span style="color:#56B6C2;"> /&gt;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Greetings</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在上面的示例中：</p><ul><li>使用模块时，我们可以使用 <code>export</code> 和 <code>import</code> 关键字来定义和引入模块中的函数或变量。</li><li>而在命名空间中，我们使用 namespace 来创建命名空间，并且需要在使用之前使用 <code>&lt;reference path=&quot;file.ts&quot; /&gt;</code>来引入命名空间。</li></ul><h2 id="_10-什么是类型断言-type-assertion" tabindex="-1">10. 什么是类型断言（Type Assertion） <a class="header-anchor" href="#_10-什么是类型断言-type-assertion" aria-label="Permalink to &quot;10. 什么是类型断言（Type Assertion）&quot;">​</a></h2><p>类型断言允许程序员手动指定一个值的类型。这在需要明确告诉编译器某个值的类型时非常有用。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> someValue</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;this is a string&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> strLength</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">someValue</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_11-typescript-中的可选参数和默认参数是什么" tabindex="-1">11. TypeScript 中的可选参数和默认参数是什么 <a class="header-anchor" href="#_11-typescript-中的可选参数和默认参数是什么" aria-label="Permalink to &quot;11. TypeScript 中的可选参数和默认参数是什么&quot;">​</a></h2><ul><li>可选参数允许函数中的某些参数不传值，在参数后面加上问号<code>?</code>表示可选。</li><li>默认参数允许在声明函数时为参数指定<code>默认值</code>，这样如果调用时未提供参数值，则会使用默认值。</li></ul><p>可选参数示例：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> greet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">greeting</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">greeting</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">greeting</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">, </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> \`Hello, </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>默认参数示例：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> greet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">greeting</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">greeting</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">, </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_12-类型守卫-type-guards-是什么" tabindex="-1">12. 类型守卫（Type Guards）是什么 <a class="header-anchor" href="#_12-类型守卫-type-guards-是什么" aria-label="Permalink to &quot;12. 类型守卫（Type Guards）是什么&quot;">​</a></h2><p>类型守卫是一种用于在运行时检查类型的技术，它允许开发人员在特定的作用域内缩小变量的范围，以确保正确推断类型。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> isString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">test</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E06C75;font-style:italic;">test</span><span style="color:#C678DD;"> is</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> test</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// input 在此代码块中被收窄为 string 类型</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_13-索引类型-index-types-是什么-好处有什么" tabindex="-1">13. 索引类型（Index Types）是什么，好处有什么 <a class="header-anchor" href="#_13-索引类型-index-types-是什么-好处有什么" aria-label="Permalink to &quot;13. 索引类型（Index Types）是什么，好处有什么&quot;">​</a></h2><p>索引类型允许我们在 TypeScript 中创建具有动态属性名称的对象，并且能够根据已知的键来获取相应的属性类型。 好处：</p><p><strong>1.动态属性访问</strong></p><blockquote><p>在处理动态属性名的对象时，可以使用索引类型来实现类型安全的属性访问。例如，当从服务器返回的 JSON 数据中提取属性时，可以利用索引类型来确保属性名存在并获取其对应的类型。</p></blockquote><p><strong>2.代码重用</strong></p><blockquote><p>当需要创建通用函数来操作对象属性时，索引类型可以帮助我们实现更加通用和灵活的代码。例如，一个通用的函数可能需要根据传入的属性名称获取属性值，并进行特定的处理。</p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> ServerData</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 可能还有其他动态属性</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getPropertyValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ServerData</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> ServerData</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">\\[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// 确保 obj\\[key] 的类型是正确的 // 这里可以直接使用索引类型来获取属性值</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>3.动态扩展对象</strong></p><blockquote><p>当需要处理来自外部来源（比如 API 响应或数据库查询）的动态数据时，索引类型可以让我们轻松地处理这种情况，而不必为每个可能的属性手动定义类型。</p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> DynamicObject</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 允许任意属性名，但属性值必须为 number 或 string 类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> processDynamicData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">DynamicObject</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">\\[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// 对任意属性进行处理</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>4.类型安全性</strong></p><blockquote><p>索引类型可以增强代码的类型安全性，因为它们可以捕获可能的属性名拼写错误或键不存在的情况。</p></blockquote><p><strong>5.映射类型</strong></p><blockquote><p>TypeScript 还提供了映射类型（Mapped Types）的概念，它们利用索引类型可以根据现有类型自动生成新类型。这在创建新类型时非常有用，特别是当需要在现有类型的基础上添加或修改属性时。</p></blockquote><h2 id="_14-const-和-readonly-的区别" tabindex="-1">14. const 和 readonly 的区别 <a class="header-anchor" href="#_14-const-和-readonly-的区别" aria-label="Permalink to &quot;14. const 和 readonly 的区别&quot;">​</a></h2><p>当在 TypeScript 中使用<code>const</code>和<code>readonly</code>时，它们的行为有一些显著的区别：</p><ul><li><strong>const：</strong><ul><li><code>const</code>用于声明常量值。一旦被赋值后，其值将不能被重新赋值或修改。</li><li>常量必须在声明时就被赋值，并且该值不可改变。</li><li>常量通常用于存储不会发生变化的值，例如数学常数或固定的配置值。</li></ul></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> PI</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3.14</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">PI</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3.14159</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Error: 无法重新分配常量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>readonly：</strong><ul><li><code>readonly</code>关键字用于标记类的属性，表明该属性只能在类的构造函数或声明时被赋值，并且不能再次被修改。</li><li><code>readonly</code>属性可以在声明时或构造函数中被赋值，但之后不能再被修改。</li><li><code>readonly</code>属性通常用于表示对象的某些属性是只读的，防止外部代码修改这些属性的值。</li></ul></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	readonly</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 可以在构造函数中赋值</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> person</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Alice&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Bob&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Error: 无法分配到&quot;name&quot;，因为它是只读属性</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>总结来说，<code>const</code>主要用于声明常量值，而<code>readonly</code>则用于标记类的属性使其只读。</p><h2 id="typescript-中-const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别" tabindex="-1">TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？ <a class="header-anchor" href="#typescript-中-const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别" aria-label="Permalink to &quot;TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？&quot;">​</a></h2><p><code>const 和 readonly</code>: const 可以防止变量的值被修改，readonly 可以防止变量的属性被修改。</p><p><code>枚举和常量枚举</code>: 常量枚举只能使用常量枚举表达式，并且不同于常规的枚举，它们在编译阶段会被删除。 常量枚举成员在使用的地方会被内联进来。 之所以可以这么做是因为，常量枚举不允许包含计算成员。</p><p><code>接口和类型别名</code>: 两者都可以用来描述对象或函数的类型。与接口不同，类型别名还可以用于其他类型，如基本类型（原始值）、联合类型、元组。</p><h2 id="_15-typescript-中-any-类型的作用是什么-滥用会有什么后果" tabindex="-1">15. TypeScript 中 any 类型的作用是什么，滥用会有什么后果 <a class="header-anchor" href="#_15-typescript-中-any-类型的作用是什么-滥用会有什么后果" aria-label="Permalink to &quot;15. TypeScript 中 any 类型的作用是什么，滥用会有什么后果&quot;">​</a></h2><p>在 TypeScript 中，<code>any</code>类型的作用是允许我们在编写代码时不指定具体的类型，从而可以接受任何类型的值，这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。</p><p>使用<code>any</code>类型相当于放弃了对该值的静态类型检查，使得代码在编译阶段不会对这些值进行类型检查。</p><p>主要情况下，<code>any</code>类型的使用包括以下几点：</p><ul><li>当我们不确定一个变量或表达式的具体类型时，可以使用 any 类型来暂时绕过类型检查。</li><li>在需要与动态类型的 JavaScript 代码交互时，可以使用 any 类型来处理这些动态类型的值。</li><li>有时候某些操作难以明确地定义其类型，或者需要较复杂的类型推导时，也可以使用 any 类型。</li></ul><p><strong>滥用的后果：</strong></p><p>尽管 any 类型提供了灵活性，但由于它会放弃 TypeScript 的静态类型检查，因此滥用 any 类型可能会降低代码的健壮性和可维护性。当滥用<code>any</code>类型时，可能会导致以下后果：</p><p><strong>1.代码可读性下降：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 代码中的使用方式</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">someUnknownMethod</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 在编译阶段不会报错，但实际上可能是一个错误</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>2.潜在的运行时错误：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myVariable</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">myVariable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 在编译阶段不会报错，但在运行时会引发错误</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>3.类型安全受损：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 编译器无法推断返回值的具体类型</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>滥用<code>any</code>类型会导致代码失去了 TypeScript 强大的类型检查功能，带来了如下问题：</p><ul><li>可能引入未知的运行时行为和错误。</li><li>降低了代码的可维护性和可读性，因为难以理解某些变量或参数的具体类型。</li></ul><p>因此，在实际开发中，应尽量避免过度使用<code>any</code>类型。可以通过合适的类型声明、接口定义和联合类型等方式，提高代码的健壮性和可维护性。</p><h2 id="_5-typescript-中-any、never、unknown、null-undefined-和-void-有什么区别" tabindex="-1">5. TypeScript 中 any、never、unknown、null &amp; undefined 和 void 有什么区别？ <a class="header-anchor" href="#_5-typescript-中-any、never、unknown、null-undefined-和-void-有什么区别" aria-label="Permalink to &quot;5. TypeScript 中 any、never、unknown、null &amp; undefined 和 void 有什么区别？&quot;">​</a></h2><p><code>any</code>: 动态的变量类型（失去了类型检查的作用）。</p><p><code>never</code>: 永不存在的值的类型。例如：never 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。</p><p><code>unknown</code>: 任何类型的值都可以赋给 unknown 类型，但是 unknown 类型的值只能赋给 unknown 本身和 any 类型。</p><p><code>null &amp; undefined</code>: 默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给 number 类型的变量。当你指定了 --strictNullChecks 标记，null 和 undefined 只能赋值给 void 和它们各自。</p><p><code>void</code>: 没有任何类型。例如：一个函数如果没有返回值，那么返回值可以定义为 void。</p><h2 id="_16-typescript-中的-this-有什么需要注意的" tabindex="-1">16. TypeScript 中的 this 有什么需要注意的 <a class="header-anchor" href="#_16-typescript-中的-this-有什么需要注意的" aria-label="Permalink to &quot;16. TypeScript 中的 this 有什么需要注意的&quot;">​</a></h2><p>在 TypeScript 中，与 JavaScript 相比，<code>this</code>的行为基本上是一致的。然而，TypeScript 提供了类型注解和类型检查，可以帮助开发者更容易地理解和处理<code>this</code>关键字的使用。</p><blockquote><p>在 noImplicitThis 为 true 的情况下，必须声明 this 的类型，才能在函数或者对象中使用 this。</p><p>Typescript 中箭头函数的 this 和 ES6 中箭头函数中的 this 是一致的。</p></blockquote><p>在 TypeScript 中，当将<code>noImplicitThis</code>设置为<code>true</code>时，意味着在函数或对象中使用 this 时，必须显式声明<code>this</code>的类型。这一设置可以帮助开发者更明确地指定 this 的类型，以避免因为隐式的<code>this</code>引用而导致的潜在问题。</p><p>具体来说，如果将<code>noImplicitThis</code>设置为<code>true</code>，则在下列情况下必须显式声明 this 的类型：</p><ul><li>在函数内部使用 this 时，需要使用箭头函数或显示绑定 this。</li><li>在某些类方法或对象方法中，需要明确定义 this 的类型。</li></ul><p>示例代码如下所示：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> MyClass</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 42</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#61AFEF;"> myMethod</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">this</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">MyClass</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#61AFEF;"> myMethod2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyClass</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">myMethod</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 此处必须传入合适的 this 类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>通过将<code>noImplicitThis</code>设置为<code>true</code>，TypeScript 要求我们在使用<code>this</code>时明确指定其类型，从而在编译阶段进行更严格的类型检查，帮助避免一些可能出现的错误和不确定性。</p><p>注：<code>noImplicitThis</code>是 TypeScript 编译器的一个配置选项，用于控制在函数或对象方法中使用<code>this</code>时的严格性。当将<code>noImplicitThis</code>设置为<code>true</code>时，意味着必须显式声明<code>this</code>的类型，否则会触发编译错误。</p><h2 id="typescript-中的-this-和-javascript-中的-this-有什么差异" tabindex="-1">TypeScript 中的 this 和 JavaScript 中的 this 有什么差异？ <a class="header-anchor" href="#typescript-中的-this-和-javascript-中的-this-有什么差异" aria-label="Permalink to &quot;TypeScript 中的 this 和 JavaScript 中的 this 有什么差异？&quot;">​</a></h2><ol><li>TypeScript：noImplicitThis: true 的情况下，必须去声明 this 的类型，才能在函数或者对象中使用 this。</li><li>Typescript 中箭头函数的 this 和 ES6 中箭头函数中的 this 是一致的。</li></ol><h2 id="_17-typescript-数据类型" tabindex="-1">17. TypeScript 数据类型 <a class="header-anchor" href="#_17-typescript-数据类型" aria-label="Permalink to &quot;17. TypeScript 数据类型&quot;">​</a></h2><p>在 TypeScript 中，常见的数据类型包括以下几种：</p><ul><li><strong>基本类型</strong>： <ul><li><code>number</code>: 表示数字，包括整数和浮点数。</li><li><code>string</code>: 表示文本字符串。</li><li><code>boolean</code>: 表示布尔值，即<code>true</code>或<code>false</code>。</li><li><code>null</code>、<code>undefined</code>: 分别表示 null 和 undefined。</li><li><code>symbol</code>: 表示唯一的、不可变的值。</li></ul></li><li><strong>复合类型</strong>： <ul><li><code>array</code>: 表示数组，可以使用<code>number[]</code>或<code>Array&lt;number&gt;</code>来声明其中元素的类型。</li><li><code>tuple</code>: 表示元组，用于表示固定数量和类型的数组。</li><li><code>enum</code>: 表示枚举类型，用于定义具名常量集合。</li></ul></li><li><strong>对象类型</strong>： <ul><li><code>object</code>: 表示非原始类型，即除 number、string、boolean、symbol、null 或 undefined 之外的类型。</li><li><code>interface</code>: 用于描述对象的结构，并且可以重复使用。</li></ul></li><li><strong>函数类型</strong>： <ul><li><code>function</code>: 表示函数类型。</li><li><code>void</code>: 表示函数没有返回值。</li><li><code>any</code>: 表示任意类型。</li></ul></li><li><strong>高级类型</strong>： <ul><li><code>union types</code>: 表示一个值可以是几种类型之一。</li><li><code>intersection types</code>: 表示一个值同时拥有多种类型的特性。</li></ul></li></ul><h2 id="_18-interface-可以给-function-array-class-indexable-做声明吗" tabindex="-1">18. interface 可以给 Function/Array/Class（Indexable)做声明吗 <a class="header-anchor" href="#_18-interface-可以给-function-array-class-indexable-做声明吗" aria-label="Permalink to &quot;18. interface 可以给 Function/Array/Class（Indexable)做声明吗&quot;">​</a></h2><p>在 TypeScript 中，<code>interface</code>可以用来声明函数、数组和类（具有索引签名的类）。下面是一些示例代码：</p><p><strong>1. Interface 声明函数</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> MyFunc</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> myAdd</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">MyFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Say</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">viod</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> say</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Say</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">viod</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在上述示例中，<code>MyFunc</code>接口描述了一个函数类型，该函数接受两个参数并返回一个数字。</p><p><strong>2. Interface 声明数组</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> StringArray</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myArray</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">StringArray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">myArray</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;Bob&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Alice&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> NumberArray</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> fibonacci</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">NumberArray</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上面的示例中，<code>StringArray</code>接口描述了一个具有数字索引签名的字符串数组。意味着我们可以通过数字索引来访问数组元素。</p><p><strong>3. Interface 声明类（Indexable）</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> StringDictionary</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myDict</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">StringDictionary</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;30&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> PersonalIntl</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#61AFEF;">    sayHi</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在这个例子中，<code>StringDictionary</code>接口用于描述具有字符串索引签名的类或对象。这使得我们可以像操作字典一样使用对象的属性。</p><p>综上：TypeScript 中的<code>interface</code>可以被用来声明函数、数组和具有索引签名的类，从而帮助我们定义和限定这些数据结构的形式和行为。</p><h2 id="_19-typescript-中的协变、逆变、双变和抗变是什么" tabindex="-1">19. TypeScript 中的协变、逆变、双变和抗变是什么 <a class="header-anchor" href="#_19-typescript-中的协变、逆变、双变和抗变是什么" aria-label="Permalink to &quot;19. TypeScript 中的协变、逆变、双变和抗变是什么&quot;">​</a></h2><p>在 TypeScript 中，<code>协变（Covariance）</code>、<code>逆变（Contravariance）</code>、<code>双变（Bivariance）</code>和<code>抗变（Invariance</code> 是与类型相关的概念，涉及到参数类型的子类型关系。下面对这些概念进行解释，并提供示例代码。</p><p><strong>协变（Covariance）</strong></p><ul><li><strong>区别</strong>：协变意味着子类型可以赋值给父类型。</li><li><strong>应用场景</strong>：数组类型是协变的，因此可以将子类型的数组赋值给父类型的数组。</li></ul><p><code>协变</code>表示类型 T 的子类型可以赋值给类型 U，当且仅当 T 是 U 的子类型。在 TypeScript 中，<code>数组</code>是协变的，这意味着可以将子类型的数组赋值给父类型的数组。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> subtypes</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;world&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> supertype</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> subtypes</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 数组是协变的，这是合法的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>逆变（Contravariance）</strong></p><ul><li><strong>区别</strong>：逆变意味着超类型可以赋值给子类型。</li><li><strong>应用场景</strong>：函数参数类型是逆变的，因此可以将超类型的函数赋值给子类型的函数。</li></ul><p><code>逆变</code>表示类型 T 的超类型可以赋值给类型 U，当且仅当 T 是 U 的子类型。在 TypeScript 中，<code>函数参数</code>是逆变的，这意味着可以将超类型的函数赋值给子类型的函数。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Logger</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> logNumber</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Logger</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> logAny</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Logger</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> logNumber</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 函数参数是逆变的，这是合法的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>双变（Bivariance）</strong></p><ul><li><strong>区别</strong>：双变允许参数类型既是协变又是逆变的。</li><li><strong>应用场景</strong>：对象类型是双变的，这意味着可以将子类型的对象赋值给父类型的对象，同时也可以将超类型的对象赋值给子类型的对象。</li></ul><p><code>双变</code>允许参数类型既是<code>协变</code>又是<code>逆变</code>的。在 TypeScript 中，<code>普通对象类型</code>是双变的，这意味着可以将子类型的对象赋值给父类型的对象，并且可以将超类型的对象赋值给子类型的对象。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Dog</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	breed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> animal</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Animal&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> dog</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Dog</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Dog&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">breed</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Labrador&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">animal</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> dog</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 对象类型是双变的，这是合法的</span></span>
<span class="line"><span style="color:#E06C75;">dog</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> animal</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 对象类型是双变的，这也是合法的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>抗变（Invariance）</strong></p><ul><li><strong>区别</strong>：抗变表示不允许类型之间的任何赋值关系。</li><li><strong>应用场景</strong>：通常情况下，基本类型和类类型是抗变的。</li></ul><p><code>抗变</code>表示不允许类型 T 和 U 之间的任何赋值关系，即 T 既不是 U 的子类型，也不是 U 的超类型。在 TypeScript 中，一般情况下，<code>基本类型</code>和<code>类类型</code>是抗变的。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hello&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 这是合法的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Animal&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 这也是合法的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_20-typescript-中的静态类型和动态类型有什么区别" tabindex="-1">20. TypeScript 中的静态类型和动态类型有什么区别 <a class="header-anchor" href="#_20-typescript-中的静态类型和动态类型有什么区别" aria-label="Permalink to &quot;20. TypeScript 中的静态类型和动态类型有什么区别&quot;">​</a></h2><ul><li><code>静态类型</code>是在 <strong>编译期间</strong> 进行类型检查，可以在编辑器或 IDE 中发现大部分类型错误。</li><li><code>动态类型</code>是在 <strong>运行时</strong> 才确定变量的类型，通常与动态语言相关联。</li></ul><p><strong>静态类型（Static Typing）</strong></p><ul><li><strong>定义</strong>：静态类型是指在编译阶段进行类型检查的类型系统，通过类型注解或推断来确定变量、参数和返回值的类型。</li><li><strong>特点</strong>：静态类型能够在编码阶段就发现大部分类型错误，提供了更好的代码健壮性和可维护性。</li><li><strong>优势</strong>：可以在编辑器或 IDE 中实现代码提示、自动补全和类型检查，帮助开发者减少错误并提高代码质量。</li></ul><p><strong>动态类型（Dynamic Typing）</strong></p><ul><li><strong>定义</strong>：动态类型是指在运行时才确定变量的类型，通常与动态语言相关联，允许同一个变量在不同时间引用不同类型的值。</li><li><strong>特点</strong>：动态类型使得变量的类型灵活多变，在运行时可以根据上下文或条件动态地改变变量的类型。</li><li><strong>优势</strong>：动态类型可以带来更大的灵活性，适用于一些需要频繁变化类型的场景。</li></ul><p><strong>区别总结</strong></p><ul><li><strong>时机差异</strong>：静态类型在编译期间进行类型检查，而动态类型是在运行时才确定变量的类型。</li><li><strong>代码稳定性</strong>：静态类型有助于在编码阶段发现大部分类型错误，提高代码稳定性；动态类型对类型的要求较为灵活，但可能增加了代码的不确定性。</li><li><strong>使用场景</strong>：静态类型适合于大型项目和团队，能够提供更强的类型安全性；动态类型适用于快速原型开发和灵活多变的场景，能够更快地迭代和测试代码。</li></ul><h2 id="_21-介绍-typescript-中的可选属性、只读属性和类型断言" tabindex="-1">21. 介绍 TypeScript 中的可选属性、只读属性和类型断言 <a class="header-anchor" href="#_21-介绍-typescript-中的可选属性、只读属性和类型断言" aria-label="Permalink to &quot;21. 介绍 TypeScript 中的可选属性、只读属性和类型断言&quot;">​</a></h2><ul><li><strong>可选属性</strong> 使用 <code>?</code> 来标记一个属性可以存在，也可以不存在。</li><li><strong>只读属性</strong> 使用 <code>readonly</code> 关键字来标记一个属性是只读的。</li><li><strong>类型断言</strong> 允许将一个实体强制指定为特定的类型，使用 <code>&lt;Type&gt;</code> 或 <code>value as Type</code>。</li></ul><p><strong>代码示例：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 可选属性</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 可选属性</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 只读属性</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	readonly</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	readonly</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Point</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Error: 只读属性无法重新赋值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 类型断言</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> someValue</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hello&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> strLength</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">someValue</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="_22-typescript-中的模块化是如何工作的-举例说明" tabindex="-1">22. TypeScript 中的模块化是如何工作的，举例说明 <a class="header-anchor" href="#_22-typescript-中的模块化是如何工作的-举例说明" aria-label="Permalink to &quot;22. TypeScript 中的模块化是如何工作的，举例说明&quot;">​</a></h2><p><strong>答案：</strong></p><ul><li>TypeScript 中使用 ES6 模块系统，可以使用 <code>import</code> 和 <code>export</code> 关键字来导入和导出模块。</li><li>可以通过 <code>export default</code> 导出默认模块，在导入时可以使用 <code>import moduleName from &#39;modulePath&#39;</code>。</li></ul><p><strong>代码示例：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// math.ts</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> sum</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> subtract</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// app.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">sum</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">subtract</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./math&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// 输出 8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h1 id="_3-typescript-的类型" tabindex="-1">3.TypeScript 的类型 <a class="header-anchor" href="#_3-typescript-的类型" aria-label="Permalink to &quot;3.TypeScript 的类型&quot;">​</a></h1><h2 id="_1、-基础类型" tabindex="-1">①、 基础类型 <a class="header-anchor" href="#_1、-基础类型" aria-label="Permalink to &quot;①、 基础类型&quot;">​</a></h2><h3 id="_1-1-boolean-、number-、string-、symbol" tabindex="-1">1.1 Boolean 、Number 、String 、Symbol <a class="header-anchor" href="#_1-1-boolean-、number-、string-、symbol" aria-label="Permalink to &quot;1.1 Boolean 、Number 、String 、Symbol&quot;">​</a></h3><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">let isDone: boolean = false; // ES5：var isDone = false; let count: number = 10;</span></span>
<span class="line"><span style="color:#ABB2BF;">// ES5：var count = 10; let name: string = &quot;semliker&quot;; // ES5：var name =</span></span>
<span class="line"><span style="color:#ABB2BF;">&#39;semlinker&#39;; const sym = Symbol(); let obj = { [sym]: &quot;semlinker&quot;, };</span></span>
<span class="line"><span style="color:#ABB2BF;">console.log(obj[sym]); // semlinker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_1-2-array、tuple-元组" tabindex="-1">1.2 Array、Tuple (元组) <a class="header-anchor" href="#_1-2-array、tuple-元组" aria-label="Permalink to &quot;1.2 Array、Tuple (元组)&quot;">​</a></h3><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">let list: number[] = [1, 2, 3]; // ES5：var list = [1,2,3]; let list:</span></span>
<span class="line"><span style="color:#ABB2BF;">Array&lt;</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	= [1, 2, 3]; // Array&lt;</span><span style="color:#E06C75;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">		&gt;泛型语法 // ES5：var list = [1,2,3];</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>Tuple</strong></p><p><strong>数组一般由同种类型的值组成，但有时我们需要在单个变量中存储不同类型的值，这时候我们就可以使用元组</strong>。在 JavaScript 中是没有元组的，元组是 TypeScript 中特有的类型，其工作方式类似于数组。</p><p>元组可用于定义具有有限数量的未命名属性的类型。每个属性都有一个关联的类型。使用元组时，必须提供每个属性的值。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">39.5427</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">116.2317</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-3-undefined-、-null" tabindex="-1">1.3 undefined 、 null <a class="header-anchor" href="#_1-3-undefined-、-null" aria-label="Permalink to &quot;1.3 undefined 、 null&quot;">​</a></h3><p>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给 number 类型的变量。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> realName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_1-4-any、unknown-、never" tabindex="-1">1.4 any、unknown 、never <a class="header-anchor" href="#_1-4-any、unknown-、never" aria-label="Permalink to &quot;1.4 any、unknown 、never&quot;">​</a></h3><p><strong>any</strong></p><p>在 TypeScript 中，任何类型都可以被归为 <code>any</code> 类型。这让<code>any</code>类型成为了类型系统的顶级类型（也被称作全局超级类型）。但是不建议使用 any，不然就丧失了 TS 提供的保护机制，失去了使用 TS 的意义。</p><p><strong>unknown</strong></p><p>所有类型也都可以赋值给 <code>unknown</code>。这使得 <code>unknown</code> 成为 TypeScript 类型系统的另一种顶级类型（另一种是 <code>any</code>）。它的定义和 <code>any</code> 定义很像，但是它是一个安全类型，使用 <code>unknown</code> 做任何事情都是不合法的。</p><p><strong>never</strong></p><p><code>never</code>类型表示的是那些永不存在的值的类型。</p><p>有些情况下值会永不存在，比如，</p><ul><li><p>如果一个函数执行时抛出了异常，那么这个函数永远不存在返回值，因为抛出异常会直接中断程序运行。</p></li><li><p>函数中执行无限循环的代码，使得程序永远无法运行到函数返回值那一步。</p><p>never 类型是任何类型的子类型，也可以赋值给任何类型。</p><p><strong>没有类型是 never 的子类型</strong>，没有类型可以赋值给 never 类型（除了 never 本身之外）。 即使 <code>any</code>也不可以赋值给 never 。</p></li></ul><h2 id="_2、-函数类型" tabindex="-1">②、 函数类型 <a class="header-anchor" href="#_2、-函数类型" aria-label="Permalink to &quot;②、 函数类型&quot;">​</a></h2><ul><li>函数的类型实际上指的是：<code>函数参数</code>和<code>返回值</code>的类型</li><li>为函数指定类型的两种方式： <ol><li>单独指定参数、返回值的类型</li><li>同时指定参数、返回值的类型</li></ol></li></ul><p><strong>单独指定参数、返回值的类型</strong>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 函数声明</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">num1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">num2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> num1</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> num2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 箭头函数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> add</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">num1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">num2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> num1</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> num2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>同时指定参数、返回值的类型:</strong></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> AddFn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">num1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">num2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AddFn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">num1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">num2</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> num1</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> num2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-2-void-类型" tabindex="-1">2.2 void 类型 <a class="header-anchor" href="#_2-2-void-类型" aria-label="Permalink to &quot;2.2 void 类型&quot;">​</a></h3><p>如果函数没有返回值，那么，函数返回值类型为：<code>void</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> greet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意：</p><ul><li>如果一个函数没有返回值，此时，在 TS 的类型中，应该使用 <code>void</code> 类型</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 如果什么都不写，此时，add 函数的返回值类型为： void</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> add</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这种写法是明确指定函数返回值类型为 void，与上面不指定返回值类型相同</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> add</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (): </span><span style="color:#E5C07B;">void</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 但，如果指定 返回值类型为 undefined，此时，函数体中必须显示的 return undefined 才可以</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> add</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (): undefined </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 此处，返回的 undefined 是 JS 中的一个值</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_2-3-可选参数" tabindex="-1"><strong>2.3 可选参数</strong> <a class="header-anchor" href="#_2-3-可选参数" aria-label="Permalink to &quot;**2.3 可选参数**&quot;">​</a></h3><ul><li>使用函数实现某个功能时，参数可以传也可以不传。这种情况下，在给函数参数指定类型时，就用到<strong>可选参数</strong>了</li><li>比如，数组的 slice 方法，可以 <code>slice()</code> 也可以 <code>slice(1)</code> 还可以 <code>slice(1, 3)</code></li></ul><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> mySlice(</span><span style="color:#C678DD;">start</span><span style="color:#ABB2BF;">?: </span><span style="color:#C678DD;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">end</span><span style="color:#ABB2BF;">?: </span><span style="color:#C678DD;">number</span><span style="color:#ABB2BF;">): void {</span></span>
<span class="line"><span style="color:#D19A66;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;起始索引：&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">start</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;结束索引：&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">end</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>可选参数：在可传可不传的参数名称后面添加 <code>?</code>（问号）</li><li>注意：<strong>可选参数只能出现在参数列表的最后</strong>，也就是说可选参数后面不能再出现必选参数</li></ul><h3 id="_2-4-默认参数" tabindex="-1">2.4 默认参数 <a class="header-anchor" href="#_2-4-默认参数" aria-label="Permalink to &quot;2.4 默认参数&quot;">​</a></h3><p>跟 JS 的写法一样，在入参里定义初始值。</p><p>和可选参数不同的是，默认参数可以不放在函数入参的最后面</p><h3 id="_2-5-函数重载" tabindex="-1">2.5 函数重载 <a class="header-anchor" href="#_2-5-函数重载" aria-label="Permalink to &quot;2.5 函数重载&quot;">​</a></h3><p>函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力。</p><p>不必太纠结函数重载，知道有这个概念即可，平时一般用泛型来解决类似问题。</p><h2 id="_3、-对象类型" tabindex="-1">③、 对象类型 <a class="header-anchor" href="#_3、-对象类型" aria-label="Permalink to &quot;③、 对象类型&quot;">​</a></h2><p>JS 中的对象是由属性和方法构成的，而 <strong>TS 对象的类型就是在描述对象的结构</strong>（有什么类型的属性和方法）</p><p>对象类型的写法:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 空对象</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> person</span><span style="color:#ABB2BF;">: {} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 有属性的对象</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> person</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;同学&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 既有属性又有方法的对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在一行代码中指定对象的多个属性类型时，使用 \`;\`（分号）来分隔</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> person</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">sayHi</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;jack&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">  sayHi</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对象中如果有多个类型，可以换行写：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过换行来分隔多个属性类型，可以去掉 \`;\`</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> person</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#61AFEF;">  sayHi</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;jack&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">  sayHi</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方法的类型也可以使用箭头函数形式</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">    greet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">):</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    greet</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="_3-2-对象可选属性" tabindex="-1">3.2 对象可选属性 <a class="header-anchor" href="#_3-2-对象可选属性" aria-label="Permalink to &quot;3.2 对象可选属性&quot;">​</a></h3><ul><li>对象的属性或方法，也可以是可选的，此时就用到<strong>可选属性</strong>了</li><li>比如，我们在使用 <code>axios({ ... })</code> 时，如果发送 GET 请求，method 属性就可以省略</li><li>可选属性的语法与函数可选参数的语法一致，都使用 <code>?</code> 来表示</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Config</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  url</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">  method</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> myAxios</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Config</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_4、-interface-接口类型" tabindex="-1">④、 interface 接口类型 <a class="header-anchor" href="#_4、-interface-接口类型" aria-label="Permalink to &quot;④、 interface 接口类型&quot;">​</a></h2><p>当一个对象类型被多次使用时，一般会使用接口（<code>interface</code>）来描述对象的类型，达到复用的目的</p><ul><li>解释： <ol><li>使用 <code>interface</code> 关键字来声明接口</li><li>接口名称(比如，此处的 IPerson)，可以是任意合法的变量名称，推荐以 <code>I</code> 开头</li><li>声明接口后，直接使用接口名称作为变量的类型</li><li>因为每一行只有一个属性类型，因此，属性类型后没有 ;(分号)</li></ol></li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> IPerson</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">	sayHi</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> person</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">IPerson</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;jack&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">19</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	sayHi</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_4-2-接口继承" tabindex="-1">4.2 接口继承 <a class="header-anchor" href="#_4-2-接口继承" aria-label="Permalink to &quot;4.2 接口继承&quot;">​</a></h3><ul><li>如果两个接口之间有相同的属性或方法，可以将<strong>公共的属性或方法抽离出来，通过继承来实现复用</strong></li><li>比如，这两个接口都有 x、y 两个属性，重复写两次，可以，但很繁琐</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Point2D</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 继承 Point2D</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Point3D</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Point2D</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	z</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_4-3-interface-和-type-的区别" tabindex="-1">4.3 interface 和 type 的区别 <a class="header-anchor" href="#_4-3-interface-和-type-的区别" aria-label="Permalink to &quot;4.3 interface 和 type 的区别&quot;">​</a></h3><ul><li>interface（接口）和 type（类型别名）的对比：</li><li>相同点：都可以给对象指定类型</li><li>不同点: <ul><li><strong>interface</strong> ： <ul><li>只能为对象指定类型</li><li>可以使用 extends 继承</li><li>多个同名的 interface 会合并</li></ul></li><li><strong>type</strong>： <ul><li>不仅可以为对象指定类型，实际上可以为任意类型指定别名</li><li>可以使用&amp;运算符实现继承效果</li><li>多个同名的 type 会报错</li></ul></li></ul></li></ul><h2 id="_5、-联合类型" tabindex="-1">⑤、 联合类型 <a class="header-anchor" href="#_5、-联合类型" aria-label="Permalink to &quot;⑤、 联合类型&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">: (</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">)[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>解释：<code>|</code>（竖线）在 TS 中叫做<strong>联合类型</strong>，即：由两个或多个其他类型组成的类型，表示可以是这些类型中的任意一种</li><li>注意：这是 TS 中联合类型的语法，只有一根竖线，不要与 JS 中的或（|| 或）混淆了</li></ul><h2 id="_6、字面量类型、枚举-enum-类型" tabindex="-1">⑥、字面量类型、枚举(enum)类型 <a class="header-anchor" href="#_6、字面量类型、枚举-enum-类型" aria-label="Permalink to &quot;⑥、字面量类型、枚举(enum)类型&quot;">​</a></h2><p><strong>字面量类型</strong></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">const str = &#39;Hello TS&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>str 是一个常量(const)，它的值不能变化只能是 &#39;Hello TS&#39;，所以，它的类型为:&#39;Hello TS&#39;</p><ul><li>注意：此处的 &#39;Hello TS&#39;，就是一个<strong>字面量类型</strong>，也就是说某个特定的字符串也可以作为 TS 中的类型</li><li>任意的 JS 字面量（比如，对象、数字等）都可以作为类型使用 <ul><li>字面量：<code>{ name: &#39;jack&#39; }</code> <code>[]</code> <code>18</code> <code>20</code> <code>&#39;abc&#39;</code> <code>false</code> <code>function() {}</code></li></ul></li></ul><p><strong>枚举类型</strong></p><p>在任何项目开发中，我们都会遇到定义常量的情况，常量就是指不会被改变的值。</p><p>TS 中我们使用 <code>const</code> 来声明常量，但是有些取值是在一定范围内的一系列常量，比如一周有七天，比如方向分为上下左右四个方向。</p><p>这时就可以使用枚举（Enum）来定义。</p><div class="language-scss line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">s</span><span style="color:#7F848E;font-style:italic;">// 创建枚举</span></span>
<span class="line"><span style="color:#ABB2BF;">enum Direction { Up, Down, Left, Right }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用枚举类型</span></span>
<span class="line"><span style="color:#ABB2BF;">function changeDirection(direction: Direction) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  console.log(direction)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用函数时，需要应该传入：枚举 Direction 成员的任意一个</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 类似于 JS 中的对象，直接通过 点（.）语法 访问枚举的成员</span></span>
<span class="line"><span style="color:#ABB2BF;">changeDirection(Direction</span><span style="color:#D19A66;">.Up</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>枚举实现原理</strong></p><ul><li>枚举是 TS 为数不多的非 JavaScript 类型级扩展(不仅仅是类型)的特性之一</li><li>因为：其他类型仅仅被当做类型，而枚举不仅用作类型，还提供值(枚举成员都是有值的)</li><li>也就是说，其他的类型会在编译为 JS 代码时自动移除。但是，<strong>枚举类型会被编译为 JS 代码</strong></li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">enum Direction</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  Up = &#39;UP&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">  Down = &#39;DOWN&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">  Left = &#39;LEFT&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">  Right = &#39;RIGHT&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">// </span><span style="color:#C678DD;">会被编译为以下 JS 代码：</span></span>
<span class="line"><span style="color:#E06C75;">var</span><span style="color:#C678DD;"> Direction;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">(function (Direction</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  Direction[&#39;Up&#39;] = &#39;UP&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  Direction[&#39;Down&#39;] = &#39;DOWN&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  Direction[&#39;Left&#39;] = &#39;LEFT&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  Direction[&#39;Right&#39;] = &#39;RIGHT&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">})(</span><span style="color:#C678DD;">Direction || Direction =</span><span style="color:#ABB2BF;"> {})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>说明：枚举与前面讲到的字面量类型+联合类型组合的功能类似，都用来表示一组明确的可选值列表</li><li>一般情况下，<strong>推荐使用字面量类型+联合类型组合的方式</strong>，因为相比枚举，这种方式更加直观、简洁、高效</li></ul><h1 id="_4-ts-中的-class-类的关键字" tabindex="-1">4. TS 中的 class 类的关键字 <a class="header-anchor" href="#_4-ts-中的-class-类的关键字" aria-label="Permalink to &quot;4. TS 中的 class 类的关键字&quot;">​</a></h1><p><strong>extends</strong></p><p>在 TypeScript 中，我们可以通过 <code>extends</code> 关键字来实现继承</p><p><strong>super</strong></p><p>子类没有定义自己的属性，可以不写 super ，但是如果子类有自己的属性，就要用到 super 关键字来把父类的属性继承过来。</p><p><strong>public</strong></p><p><code>public</code>，公有的，一个类里默认所有的方法和属性都是 public。</p><p><strong>private</strong></p><p><code>private</code>，私有的，只属于这个类自己，它的实例和继承它的子类都访问不到。</p><p><strong>protected</strong></p><p><code>protected</code> 受保护的，继承它的子类可以访问，实例不能访问。</p><p><strong>static</strong></p><p><code>static</code> 是静态属性，可以理解为是类上的一些常量，实例不能访问。</p><p><strong>abstract</strong></p><p><code>abstract</code> 关键字来定义抽象类和抽象方法</p><p>抽象类，是指<strong>只能被继承，但不能被实例化的类</strong>，就这么简单。</p><p>抽象类有两个特点：</p><ul><li>抽象类不允许被实例化</li><li>抽象类中的抽象方法必须被子类实现</li></ul><p><strong># （私有字段）</strong></p><p>私有字段与常规属性（甚至使用 <code>private</code> 修饰符声明的属性）不同，私有字段要牢记以下规则：</p><ul><li>私有字段以 <code>#</code> 字符开头，有时我们称之为私有名称；</li><li>每个私有字段名称都唯一地限定于其包含的类；</li><li>不能在私有字段上使用 TypeScript 可访问性修饰符（如 public 或 private）；</li><li>私有字段不能在包含的类之外访问，甚至不能被检测到。</li></ul><h1 id="_5-类型推断、类型断言、非空断言" tabindex="-1">5. 类型推断、类型断言、非空断言 <a class="header-anchor" href="#_5-类型推断、类型断言、非空断言" aria-label="Permalink to &quot;5. 类型推断、类型断言、非空断言&quot;">​</a></h1><h2 id="_5-1-类型推断" tabindex="-1">5.1 <strong>类型推断</strong> <a class="header-anchor" href="#_5-1-类型推断" aria-label="Permalink to &quot;5.1 **类型推断**&quot;">​</a></h2><p>在 TS 中，某些没有明确指出类型的地方，<strong>TS 的类型推论机制会帮助提供类型</strong> 换句话说：由于类型推论的存在，有些场合下的类型注解可以省略不写</p><p>发生类型推论的 2 种常见场景:</p><ol><li>声明变量并初始化时</li><li>决定函数返回值时</li></ol><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 变量 age 的类型被自动推断为：number</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 18</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 函数返回值的类型被自动推断为：number</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">num1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">num2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> num1</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> num2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_5-2-类型断言" tabindex="-1">5.2 <strong>类型断言</strong> <a class="header-anchor" href="#_5-2-类型断言" aria-label="Permalink to &quot;5.2 **类型断言**&quot;">​</a></h2><p>有时候你会比 TS 更加明确一个值的类型，此时，可以使用类型断言来指定<strong>更具体</strong>的类型。</p><p>类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> aLink</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;link&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> HTMLAnchorElement</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>另一种语法，使用 <code>&lt;&gt;</code> 语法，这种语法形式不常用，知道即可:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 尖括号语法，知道即可：</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> aLink</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">HTMLAnchorElement</span><span style="color:#ABB2BF;">&gt;document.getElementById(&#39;link&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_5-3-非空断言" tabindex="-1">5.3 <strong>非空断言</strong> <a class="header-anchor" href="#_5-3-非空断言" aria-label="Permalink to &quot;5.3 **非空断言**&quot;">​</a></h2><p>在上下文中当类型检查器无法断定类型时，一个新的后缀表达式操作符 <code>!</code> 可以用于断言操作对象是非 null 和非 undefined 类型。<strong>具体而言，x! 将从 x 值域中排除 null 和 undefined 。</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> aLink</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;link&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">!</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> //如果没有非空断言，使用aLink时会报错，因为页面可能没有link这个标签，得到的就是undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="_6-泛型" tabindex="-1">6. 泛型 <a class="header-anchor" href="#_6-泛型" aria-label="Permalink to &quot;6. 泛型&quot;">​</a></h1><h2 id="_6-1-泛型-基本介绍" tabindex="-1">6.1 泛型-基本介绍 <a class="header-anchor" href="#_6-1-泛型-基本介绍" aria-label="Permalink to &quot;6.1 泛型-基本介绍&quot;">​</a></h2><ul><li><strong>泛型是可以在保证类型安全前提下，让函数等与多种类型一起工作，从而实现复用</strong>，常用于：函数、接口、class 中</li><li>需求：创建一个 id 函数，传入什么数据就返回该数据本身(也就是说，参数和返回值类型相同)</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> id</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>比如，id(10) 调用以上函数就会直接返回 10 本身。但是，该函数只接收数值类型，无法用于其他类型</li><li>为了能让函数能够接受任意类型，可以将参数类型修改为 any。但是，这样就失去了 TS 的类型保护，类型不安全</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> id</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><strong>泛型在保证类型安全(不丢失类型信息)的同时，可以让函数等与多种不同的类型一起工作，灵活可复用</strong></li><li>实际上，在 C# 和 Java 等编程语言中，泛型都是用来实现可复用组件功能的主要工具之一</li></ul><h2 id="_6-2-泛型函数" tabindex="-1">6.2 泛型函数 <a class="header-anchor" href="#_6-2-泛型函数" aria-label="Permalink to &quot;6.2 泛型函数&quot;">​</a></h2><p>定义泛型函数</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">function </span><span style="color:#56B6C2;">id&lt;</span><span style="color:#ABB2BF;">Type</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">(value: Type): Type { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> value }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">function </span><span style="color:#56B6C2;">id&lt;</span><span style="color:#ABB2BF;">T</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">(value: T): T { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> value }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>解释: <ol><li>语法：在函数名称的后面添加 <code>&lt;&gt;</code>(尖括号)，<strong>尖括号中添加类型变量</strong>，比如此处的 Type</li><li><strong>类型变量 Type，是一种特殊类型的变量，它处理类型而不是值</strong></li><li><strong>该类型变量相当于一个类型容器</strong>，能够捕获用户提供的类型(具体是什么类型由用户调用该函数时指定)</li><li>因为 Type 是类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值具有相同的类型</li><li>类型变量 Type，可以是任意合法的变量名称</li></ol></li></ul><p>调用泛型函数</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">const num = id&lt;</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">&gt;(10) const str = id</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;">(&#39;a&#39;)</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>解释： <ol><li>语法：在函数名称的后面添加 <code>&lt;&gt;</code>(尖括号)，<strong>尖括号中指定具体的类型</strong>，比如，此处的 number</li><li>当传入类型 number 后，这个类型就会被函数声明时指定的类型变量 Type 捕获到</li><li>此时，Type 的类型就是 number，所以，函数 id 参数和返回值的类型也都是 number</li></ol></li><li>同样，如果传入类型 string，函数 id 参数和返回值的类型就都是 string</li><li>这样，通过泛型就做到了让 id 函数与多种不同的类型一起工作，<strong>实现了复用的同时保证了类型安全</strong></li></ul><p><strong>简化泛型函数调用</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">//</span><span style="color:#98C379;"> 省略</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">numbe</span><span style="color:#ABB2BF;">r&gt; </span><span style="color:#98C379;">调用函数</span></span>
<span class="line"><span style="color:#56B6C2;">let</span><span style="color:#98C379;"> num</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> id</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">let</span><span style="color:#98C379;"> str</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> id</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">&#39;a&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>解释: <ol><li>在调用泛型函数时，<strong>可以省略 <code>&lt;类型&gt;</code> 来简化泛型函数的调用</strong></li><li>此时，TS 内部会采用一种叫做<strong>类型参数推断</strong>的机制，来根据传入的实参自动推断出类型变量 Type 的类型</li><li>比如，传入实参 10，TS 会自动推断出变量 num 的类型 number，并作为 Type 的类型</li></ol></li><li>推荐：使用这种简化的方式调用泛型函数，使代码更短，更易于阅读</li><li>说明：<strong>当编译器无法推断类型或者推断的类型不准确时，就需要显式地传入类型参数</strong></li></ul><h2 id="_6-3-泛型约束" tabindex="-1">6.3 泛型约束 <a class="header-anchor" href="#_6-3-泛型约束" aria-label="Permalink to &quot;6.3 泛型约束&quot;">​</a></h2><ul><li>默认情况下，泛型函数的类型变量 Type 可以代表多个类型，这导致无法访问任何属性</li><li>比如，id(&#39;a&#39;) 调用函数时获取参数的长度：</li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">function </span><span style="color:#56B6C2;">id&lt;</span><span style="color:#ABB2BF;">Type</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">(value: Type): Type {</span></span>
<span class="line"><span style="color:#ABB2BF;">  console.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(value.length)</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> value</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">id</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>解释：Type 可以代表任意类型，无法保证一定存在 length 属性，比如 number 类型就没有 length</li><li>此时，就需要<strong>为泛型添加约束来<code>收缩类型</code>(缩窄类型取值范围)</strong></li><li>添加泛型约束收缩类型，主要有以下两种方式：1 指定更加具体的类型 2 添加约束</li></ul><p><strong>指定更加具体的类型</strong></p><p>比如，将类型修改为 <code>Type[]</code>(Type 类型的数组)，因为只要是数组就一定存在 length 属性，因此就可以访问了</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> id</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">[]): </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">[] {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>添加约束</strong></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一个接口</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> ILength</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	length</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Type extends ILength 添加泛型约束</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解释：表示传入的 类型 必须满足 ILength 接口的要求才行，也就是得有一个 number 类型的 length 属性</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> id</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Type</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> ILength</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>解释: <ol><li>创建描述约束的接口 ILength，该接口要求提供 length 属性</li><li>通过 <code>extends</code> 关键字使用该接口，为泛型(类型变量)添加约束</li><li>该约束表示：<strong>传入的类型必须具有 length 属性</strong></li></ol></li><li>注意:传入的实参(比如，数组)只要有 length 属性即可（类型兼容性)</li></ul><h2 id="_6-4-多个类型变量" tabindex="-1">6.4 多个类型变量 <a class="header-anchor" href="#_6-4-多个类型变量" aria-label="Permalink to &quot;6.4 多个类型变量&quot;">​</a></h2><p>泛型的类型变量可以有多个，并且<strong>类型变量之间还可以约束</strong>(比如，第二个类型变量受第一个类型变量约束) 比如，创建一个函数来获取对象中属性的值：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getProp</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Key</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> Type</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> person</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;jack&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#61AFEF;">getProp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>解释: <ol><li>添加了第二个类型变量 Key，两个类型变量之间使用 <code>,</code> 逗号分隔。</li><li><strong>keyof 关键字接收一个对象类型，生成其键名称(可能是字符串或数字)的联合类型</strong>。</li><li>本示例中 <code>keyof Type</code> 实际上获取的是 person 对象所有键的联合类型，也就是：<code>&#39;name&#39; | &#39;age&#39;</code></li><li>类型变量 Key 受 Type 约束，可以理解为：Key 只能是 Type 所有键中的任意一个，或者说只能访问对象中存在的属性</li></ol></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Type extends object 表示： Type 应该是一个对象类型，如果不是 对象 类型，就会报错</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果要用到 对象 类型，应该用 object ，而不是 Object</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getProperty</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Type</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> object, </span><span style="color:#E5C07B;">Key</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> Type</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_6-5-泛型接口" tabindex="-1">6.5 泛型接口 <a class="header-anchor" href="#_6-5-泛型接口" aria-label="Permalink to &quot;6.5 泛型接口&quot;">​</a></h2><p>泛型接口：接口也可以配合泛型来使用，以增加其灵活性，增强其复用性</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> IdFunc</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">	id</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">	ids</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Type</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">IdFunc</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	id</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	ids</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>解释: <ol><li>在接口名称的后面添加 <code>&lt;类型变量&gt;</code>，那么，这个接口就变成了泛型接口。</li><li>接口的类型变量，对接口中所有其他成员可见，也就是<strong>接口中所有成员都可以使用类型变量</strong>。</li><li>使用泛型接口时，<strong>需要显式指定具体的类型</strong>(比如，此处的 IdFunc)。</li><li>此时，id 方法的参数和返回值类型都是 number;ids 方法的返回值类型是 number[]。</li></ol></li></ul><h1 id="_7-ts-内置的常用工具类型" tabindex="-1">7. TS 内置的常用工具类型 <a class="header-anchor" href="#_7-ts-内置的常用工具类型" aria-label="Permalink to &quot;7. TS 内置的常用工具类型&quot;">​</a></h1><h2 id="_7-1-typeof" tabindex="-1">7.1 typeof <a class="header-anchor" href="#_7-1-typeof" aria-label="Permalink to &quot;7.1 typeof&quot;">​</a></h2><p>在 TypeScript 中，<code>typeof</code> 操作符可以用来获取一个变量声明或对象的类型。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sem</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Person</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;semlinker&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">33</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Sem</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> sem</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// -&gt; Person</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> toArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Func</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> toArray</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// -&gt; (x: number) =&gt; number[]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_7-2-keyof" tabindex="-1">7.2 keyof <a class="header-anchor" href="#_7-2-keyof" aria-label="Permalink to &quot;7.2 keyof&quot;">​</a></h2><p><code>keyof</code> 操作符是在 TypeScript 2.1 版本引入的，该操作符可以用于获取某种类型的所有键，其返回类型是联合类型。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> K1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;name&quot; | &quot;age&quot;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> K2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">[]; </span><span style="color:#7F848E;font-style:italic;">// &quot;length&quot; | &quot;toString&quot; | &quot;pop&quot; | &quot;push&quot; | &quot;concat&quot; | &quot;join&quot;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> K3</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> keyof</span><span style="color:#ABB2BF;"> { [</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;"> }; </span><span style="color:#7F848E;font-style:italic;">// string | number</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_7-3-in" tabindex="-1">7.3 in <a class="header-anchor" href="#_7-3-in" aria-label="Permalink to &quot;7.3 in&quot;">​</a></h2><p><code>in</code> 用来遍历枚举类型：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;"> Keys </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;a&quot;</span><span style="color:#56B6C2;"> |</span><span style="color:#98C379;"> &quot;b&quot;</span><span style="color:#56B6C2;"> |</span><span style="color:#98C379;"> &quot;c&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;"> Obj </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">  [p </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> Keys]: </span><span style="color:#56B6C2;">any</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">//</span><span style="color:#FFFFFF;"> -&gt;</span><span style="color:#ABB2BF;"> { a: </span><span style="color:#56B6C2;">any</span><span style="color:#ABB2BF;">, b: </span><span style="color:#56B6C2;">any</span><span style="color:#ABB2BF;">, c: </span><span style="color:#56B6C2;">any</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_7-4-infer" tabindex="-1">7.4 infer <a class="header-anchor" href="#_7-4-infer" aria-label="Permalink to &quot;7.4 infer&quot;">​</a></h2><p>在条件类型语句中，可以用 <code>infer</code> 声明一个类型变量并且对它进行使用。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ReturnType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> infer </span><span style="color:#E5C07B;">R</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> R</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以上代码中 <code>infer R</code> 就是声明一个变量来承载传入函数签名的返回值类型，简单说就是用它取到函数返回值的类型方便之后使用。</p><h2 id="_7-5-extends" tabindex="-1">7.5 extends <a class="header-anchor" href="#_7-5-extends" aria-label="Permalink to &quot;7.5 extends&quot;">​</a></h2><p>有时候我们定义的泛型不想过于灵活或者说想继承某些类等，可以通过 extends 关键字添加泛型约束。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Lengthwise</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	length</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> loggingIdentity</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Lengthwise</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> arg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_7-6-partial、readonly、required" tabindex="-1">7.6 Partial、Readonly、Required <a class="header-anchor" href="#_7-6-partial、readonly、required" aria-label="Permalink to &quot;7.6 Partial、Readonly、Required&quot;">​</a></h2><p><code>Partial&lt;T&gt;</code> 的作用就是将某个类型里的属性全部变为可选项 <code>?</code>。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">type Partial&lt;</span><span style="color:#E06C75;">T</span><span style="color:#ABB2BF;">&gt; = { [P in keyof T]?: T[P]; };&lt;/</span><span style="color:#E06C75;">T</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在以上代码中，首先通过 <code>keyof T</code> 拿到 <code>T</code> 的所有属性名，然后使用 <code>in</code> 进行遍历，将值赋给 <code>P</code>，最后通过 <code>T[P]</code> 取得相应的属性值。中间的 <code>?</code> 号，用于将所有属性变为可选。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>Readonly&lt;T&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将 T 中的所有属性设置为只读</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>Required&lt;T&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将 T 中的所有属性设置为必须</p><h2 id="_7-7-omit" tabindex="-1">7.7 Omit <a class="header-anchor" href="#_7-7-omit" aria-label="Permalink to &quot;7.7 Omit&quot;">​</a></h2><p><code>Omit&lt;T, U&gt;</code>从类型 <code>T</code> 中剔除 <code>U</code> 中的所有属性</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> IPerson</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> IOmit</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Omit</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">IPerson</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这样就剔除了 IPerson 上的 age 属性。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h1 id="_8-vue3-中父子传值-用-ts-怎么写-怎么设置默认值" tabindex="-1">8. Vue3 中父子传值 , 用 TS 怎么写，怎么设置默认值 <a class="header-anchor" href="#_8-vue3-中父子传值-用-ts-怎么写-怎么设置默认值" aria-label="Permalink to &quot;8. Vue3 中父子传值 , 用 TS 怎么写，怎么设置默认值&quot;">​</a></h1><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 用泛型来约束收到的数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// TS的defineProps写法 , defineProps&lt;....&gt;()</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">msg</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;123&#39;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">defineProps</span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;">{  </span><span style="color:#7F848E;font-style:italic;">//设置默认值需要解构，并且添加全局配置</span></span>
<span class="line"><span style="color:#E06C75;">  msg</span><span style="color:#ABB2BF;">？: </span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  arr</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;"> }[]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 用TS来子传父  defineEmits&lt;(...):void&gt;()</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> emit</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> defineEmits</span><span style="color:#ABB2BF;">&lt;{</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;changeMsg&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;addMsg&#39;</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span></span>
<span class="line"><span style="color:#ABB2BF;">}&gt;()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>默认值的全局配置</strong></p><p><img src="`+p+`" alt="Snipaste_2022-08-23_14-52-51.jpg"></p><h1 id="_9-ts-怎么给引入的第三方库设置类型声明文件" tabindex="-1">9. TS 怎么给引入的第三方库设置类型声明文件 <a class="header-anchor" href="#_9-ts-怎么给引入的第三方库设置类型声明文件" aria-label="Permalink to &quot;9. TS 怎么给引入的第三方库设置类型声明文件&quot;">​</a></h1><ul><li>目前，几乎所有常用的第三方库都有相应的类型声明文件</li><li>第三方库的类型声明文件有两种存在形式： <ul><li>1 、库自带类型声明文件</li><li>2、 由 TS 官方给它写的（DefinitelyTyped 提供）</li></ul></li></ul><p><strong>库自带类型声明文件</strong>：比如，axios</p><p>这种情况下，正常导入该库，<strong>TS 就会自动加载库自己的类型声明文件</strong>，以提供该库的类型声明。</p><p><strong>由 DefinitelyTyped 提供</strong>：</p><ul><li>DefinitelyTyped 是一个 github 仓库，用来提供高质量 TypeScript 类型声明</li><li>可以通过 npm/yarn 来下载该仓库提供的 TS 类型声明包，这些包的名称格式为:<code>@types/*</code>比如，@types/react、@types/lodash 等</li><li>在实际项目开发时，如果你使用的第三方库没有自带的声明文件，VSCode 会给出明确的提示</li></ul><h1 id="_10-说说你对-typescript-装饰器的理解" tabindex="-1">10. 说说你对 TypeScript 装饰器的理解？ <a class="header-anchor" href="#_10-说说你对-typescript-装饰器的理解" aria-label="Permalink to &quot;10. 说说你对 TypeScript 装饰器的理解？&quot;">​</a></h1><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上</p><p>是一种在不改变原类和使用继承的情况下，动态地扩展对象功能</p><p>同样的，本质也不是什么高大上的结构，就是一个普通的函数，<code>@expression</code> 的形式其实是<code>Object.defineProperty</code>的语法糖</p><p><code>expression</code>求值后必须也是一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入</p><h1 id="_11-说说对-typescript-中命名空间与模块的理解" tabindex="-1">11. 说说对 TypeScript 中命名空间与模块的理解 <a class="header-anchor" href="#_11-说说对-typescript-中命名空间与模块的理解" aria-label="Permalink to &quot;11. 说说对 TypeScript 中命名空间与模块的理解&quot;">​</a></h1><p><strong>模块</strong></p><p><code>TypeScript</code> 与<code>ECMAScript</code> 2015 一样，任何包含顶级 <code>import</code> 或者 <code>export</code> 的文件都被当成一个模块</p><p>相反地，如果一个文件不带有顶级的<code>import</code>或者<code>export</code>声明，那么它的内容被视为全局可见的</p><p><strong>命名空间</strong></p><p>命名空间一个最明确的目的就是解决重名问题</p><p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的</p><p>这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中</p><h1 id="_12-ts-怎么自定义类型声明文件" tabindex="-1">12. TS 怎么自定义类型声明文件 <a class="header-anchor" href="#_12-ts-怎么自定义类型声明文件" aria-label="Permalink to &quot;12. TS 怎么自定义类型声明文件&quot;">​</a></h1><p><strong>如下两种场景需要提供类型声明文件</strong></p><ol><li>项目内共享类型</li><li>为已有 JS 文件提供类型声明</li></ol><h2 id="_12-1-项目内共享类型" tabindex="-1">12.1 项目内共享类型 <a class="header-anchor" href="#_12-1-项目内共享类型" aria-label="Permalink to &quot;12.1 项目内共享类型&quot;">​</a></h2><p>将公共的类型定义提取出来，写在 index.d.ts 文件中 , 并导出</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> Token</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	token</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	refreshToken</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>导入接口并使用</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ts&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Token</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;.&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">token</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Token</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_12-2-为已有-js-文件提供类型声明" tabindex="-1">12.2 为已有 JS 文件提供类型声明 <a class="header-anchor" href="#_12-2-为已有-js-文件提供类型声明" aria-label="Permalink to &quot;12.2 为已有 JS 文件提供类型声明&quot;">​</a></h2><p><strong>编写同名的.d.ts 文件</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">demo.ts</span></span>
<span class="line"><span style="color:#61AFEF;">utils/index.js</span></span>
<span class="line"><span style="color:#61AFEF;">utils/index.d.ts</span><span style="color:#98C379;"> //</span><span style="color:#98C379;"> 这里是重点</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>定义类型声明文件</strong></p><ol><li><p>它的作用是提供声明，不需要提供逻辑代码；</p></li><li><p>declare 关键字:用于类型声明，为其他地方(比如，.js 文件)已存在的变量声明类型，而不是创建一个新的变量。</p></li><li><ul><li>对于 type、interface 等这些明确就是 TS 类型的(只能在 TS 中使用的)，可以省略 declare 关键字。</li><li>对于 let、function 等具有双重含义(在 JS、TS 中都能用)，应该使用 declare 关键字，明确指定此处用于类型声明。</li></ul></li><li><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> declare</span><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> declare</span><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> songName</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> declare</span><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> position</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	x</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	y</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> declare</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Direction</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#98C379;">	&quot;top&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;right&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;bottom&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;left&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> declare</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> changeDirection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">direction</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Direction</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> FomatPoint</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">point</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> declare</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> fomatPoint</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">FomatPoint</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ol><h1 id="常见的工具类型" tabindex="-1">常见的工具类型 <a class="header-anchor" href="#常见的工具类型" aria-label="Permalink to &quot;常见的工具类型&quot;">​</a></h1><ul><li>Partial：满足部分属性(一个都没满足也可)即可</li><li>Required：所有属性都需要</li><li>Readonly: 包装后的所有属性只读 <img src="`+e+'" alt="image.png"></li><li>Pick: 选取部分属性</li><li>Omit: 去除部分属性 <img src="'+o+'" alt="image.png"></li><li>Extract: 交集</li><li>Exclude: 差集 <img src="'+r+`" alt="image.png"></li></ul><h1 id="待定" tabindex="-1">待定 <a class="header-anchor" href="#待定" aria-label="Permalink to &quot;待定&quot;">​</a></h1><h3 id="_1-解释-typescript-中可用的数据类型。" tabindex="-1">1. 解释 TypeScript 中可用的数据<strong>类型</strong>。 <a class="header-anchor" href="#_1-解释-typescript-中可用的数据类型。" aria-label="Permalink to &quot;1. 解释 TypeScript 中可用的数据**类型**。&quot;">​</a></h3><p>TypeScript 中主要有两种类型的数据类型：</p><p>**内置数据类型：**这些数据类型已存在于 typescript 中。它们可以直接用于定义具有不同值的变量。</p><ul><li>**字符串：**它表示文本值，如“GeeksforGeeks”或“Computer Science”。</li><li>**数字：**它表示编号值，即 2、28、99 等。</li><li>**布尔值：**它存储 <strong>true</strong> 或 <strong>false</strong> 值。</li><li>**Null：**故意分配给变量的空值。</li><li>**未定义：**表示已声明但未初始化的变量。</li><li>**any：**表示任何数据类型的任意值和不同数据类型的任意数量的值。</li><li>**void：**用于表示特定函数不会返回任何数据类型的任何值。</li></ul><p>**用户定义的数据类型：**这些是由用户定义的数据类型，它们可能包含多种数据类型的多个值。</p><ul><li>**数组：**在 typescript 中，数组用于存储任何类型的数据类型的多个值。</li><li>**enums：**指定常量变量的特殊类。</li><li>**classes：**用于以键值对的形式存储不同的数据类型值。</li><li>**接口：**这些表示实体必须遵守的基本语法和蓝图。</li></ul><h3 id="_2-解释数组在-typescript-中的行为。" tabindex="-1">2. 解释数组在 TypeScript 中的行为。 <a class="header-anchor" href="#_2-解释数组在-typescript-中的行为。" aria-label="Permalink to &quot;2. 解释数组在 TypeScript 中的行为。&quot;">​</a></h3><p>打字稿中定义的数组与 JavaScript 不同，它们的行为也与 JavaScript 数组不同。在 typescript 中，数组是通过指定静态数据类型来定义的，并且只能存储单一数据类型的多个值。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>const typedArray1:number[] = [1, 23, 28, 56];</span></span>
<span class="line"><span>console.log(typedArray1);  // 1, 23, 28, 56</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const typedArray2:number[] = [1, 23, 28, 56, &quot;GeeksforGeeks&quot;];</span></span>
<span class="line"><span>console.log(typedArray2); </span></span>
<span class="line"><span>// Throws an error: Type &#39;string&#39; is not assignable to type &#39;number&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-我们可以在-typescript-中通过多少种方式声明变量" tabindex="-1">3. 我们可以在 TypeScript 中通过多少种方式声明变量？ <a class="header-anchor" href="#_3-我们可以在-typescript-中通过多少种方式声明变量" aria-label="Permalink to &quot;3. 我们可以在 TypeScript 中通过多少种方式声明变量？&quot;">​</a></h3><p>在 TypeScript 中，有三种方法可以声明变量：</p><ul><li>**使用 var 关键字：**这是声明变量的最古老的方法。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>var name: string = &quot;GeeksforGeeks&quot;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>**使用 let 关键字：<strong>它是在 ES6 或 ECMAScript 2015 中引入的。与使用 var 相比，这是一种安全的变量声明方式</strong>，**因为它具有块范围。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>let name: string = &quot;GeeksforGeeks&quot;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>使用 const 关键字：</strong> ES6 中也引入了它。它用于声明常量变量，其值在整个代码执行过程中不会更改。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>const name: string = &quot;GeeksforGeeks&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_4-如何在-typescript-中声明显式变量" tabindex="-1">4. 如何在 Typescript 中声明显式变量？ <a class="header-anchor" href="#_4-如何在-typescript-中声明显式变量" aria-label="Permalink to &quot;4. 如何在 Typescript 中声明显式变量？&quot;">​</a></h3><p>在 typeScript 中，可以使用冒号 <strong>（😃</strong> 后跟显式类型的数据类型来声明静态变量。不能将某些其他数据类型的值分配给静态变量。可以分配相同数据类型的值。</p><h4 id="语法" tabindex="-1"><strong>语法：</strong> <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;**语法：**&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>let variable_name: data-type = value;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>let company_name: string = &quot;GeeksforGeeks&quot;;</span></span>
<span class="line"><span>company_name = &quot;Cricket&quot;;</span></span>
<span class="line"><span>console.log(company_name); // Prints Cricket</span></span>
<span class="line"><span></span></span>
<span class="line"><span>company_name = 28;</span></span>
<span class="line"><span>console.log(company_name); </span></span>
<span class="line"><span>// Throws an error: Type &#39;28&#39; is not assignable to type &#39;string&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_5-如何在typescript中声明带有类型化注解的函数" tabindex="-1">5. 如何在TypeScript中声明带有类型化注解的函数？ <a class="header-anchor" href="#_5-如何在typescript中声明带有类型化注解的函数" aria-label="Permalink to &quot;5. 如何在TypeScript中声明带有类型化注解的函数？&quot;">​</a></h3><p>在 TypeScript 中，您可以通过定义获取的参数类型以及执行后将返回的参数类型来声明函数。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>function annotedFunc(myName: string, age: number): string{</span></span>
<span class="line"><span>    return \`My name is \${myName} and my age is \${age}.\`;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>console.log(annotedFunc(&quot;Emrit&quot;, 22));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Prints: My name is Emrit and my age is 22.</span></span>
<span class="line"><span>console.log(annotedFunc(&quot;Neha&quot;, &quot;18&quot;)); </span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Above statement throws an error: </span></span>
<span class="line"><span>// Argument of type &#39;&quot;18&quot;&#39; is not assignable to parameter of type &#39;number&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_6-描述-typescript-中的任何类型。" tabindex="-1">6. 描述 TypeScript 中的任何类型。 <a class="header-anchor" href="#_6-描述-typescript-中的任何类型。" aria-label="Permalink to &quot;6. 描述 TypeScript 中的任何类型。&quot;">​</a></h3><p><strong>any</strong> 数据类型将允许您将任何数据类型的值分配给变量。有时，当数据来自其他资源（如 API 调用或用户输入的数据）时。在这种情况下，您可能不知道数据的类型，因此可以使用任何数据类型将任何类型的值分配给变量。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>let studentData: string = \`{</span></span>
<span class="line"><span>    &quot;studentName&quot;: &quot;Aakash&quot;,</span></span>
<span class="line"><span>    &quot;studentID&quot;: 12345,</span></span>
<span class="line"><span>    &quot;studentCourse&quot;: &quot;B. Tech&quot;</span></span>
<span class="line"><span>}\`;</span></span>
<span class="line"><span>let student: any = JSON.parse(studentData);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(student.studentName, student.studentID, student.studentCourse);</span></span>
<span class="line"><span>// Prints: Aakash 12345 B. Tech</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_7-使用typescript有什么好处" tabindex="-1">7. 使用TypeScript有什么好处？ <a class="header-anchor" href="#_7-使用typescript有什么好处" aria-label="Permalink to &quot;7. 使用TypeScript有什么好处？&quot;">​</a></h3><p>使用 TypeScript 有很多优点，下面列出了其中一些：</p><ul><li>TypeScript 代码可以编译为可在每个浏览器上运行的 JavaScript 代码。</li><li>它允许我们声明强类型或静态类型的变量。</li><li>它由代码完成、intelliSense 等高级功能组成。</li><li>它借助模块支持命名空间概念。</li><li>TypeScript 在开发过程中的编译时抛出错误，这与在运行时显示错误的 JavaScript 不同。</li></ul><h3 id="_8-列出使用-typescript-的一些缺点。" tabindex="-1">8. 列出使用 TypeScript 的一些缺点。 <a class="header-anchor" href="#_8-列出使用-typescript-的一些缺点。" aria-label="Permalink to &quot;8. 列出使用 TypeScript 的一些缺点。&quot;">​</a></h3><p>使用 TypeScript 也存在一些缺点，如下所示：</p><ul><li>TypeScript 不支持抽象类的概念。</li><li>代码编译是 TypeScript 中的一个耗时过程。</li><li>运行 TypeScript 时，需要将 TypeScript 代码转换为 JavaScript 代码的额外步骤。</li><li>需要添加定义文件才能使用任何外部或第三方库。所有外部库都没有定义文件。</li><li>所有定义文件的质量都需要正确。</li></ul><h3 id="_9-解释-typescript-中的-void-类型。" tabindex="-1">9. 解释 TypeScript 中的 void 类型。 <a class="header-anchor" href="#_9-解释-typescript-中的-void-类型。" aria-label="Permalink to &quot;9. 解释 TypeScript 中的 void 类型。&quot;">​</a></h3><p>它与<strong>任何</strong>类型都相反。<strong>void</strong> 类型表示任何变量的数据类型不可用。它主要用于不返回任何内容的函数。使用 void 关键字定义的变量只能使用 <strong>null</strong> 和 <strong>undefined</strong> 值进行赋值。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>function favGame(): void{</span></span>
<span class="line"><span>    console.log(&quot;My Favourite game is Cricket.&quot;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>favGame(); </span></span>
<span class="line"><span>// Prints: My Favourite game is Cricket.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_10-什么是-null-类型及其在-typescript-中的用法" tabindex="-1">10. 什么是 null 类型及其在 TypeScript 中的用法？ <a class="header-anchor" href="#_10-什么是-null-类型及其在-typescript-中的用法" aria-label="Permalink to &quot;10. 什么是 null 类型及其在 TypeScript 中的用法？&quot;">​</a></h3><p><strong>null</strong> 关键字在 TypeScript 和 JavaScript 中被视为数据类型。null 关键字基本上表示值不可用。它可用于检查是否向特定变量提供了值。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>function getData(orgName: string | null, orgDesc: string | null): void {</span></span>
<span class="line"><span>    if (orgName === null || orgDesc === null) {</span></span>
<span class="line"><span>        console.log(&quot;Not enough values provided to print.&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    else {</span></span>
<span class="line"><span>        console.log(\`Organization Name: \${orgName}, </span></span>
<span class="line"><span>        \\nOrganization Description: \${orgDesc}\`);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>getData(null, null);</span></span>
<span class="line"><span>getData(&quot;GeeksforGeeks&quot;,</span></span>
<span class="line"><span>    &quot;A Computer Science Portal.&quot;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>输出：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>Not enough values provided to print.</span></span>
<span class="line"><span>Organization Name: GeeksforGeeks,</span></span>
<span class="line"><span>Organization Description: A Computer Science Portal.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_11-描述在-typescript-中创建对象的语法。" tabindex="-1">11. 描述在 TypeScript 中创建对象的语法。 <a class="header-anchor" href="#_11-描述在-typescript-中创建对象的语法。" aria-label="Permalink to &quot;11. 描述在 TypeScript 中创建对象的语法。&quot;">​</a></h3><p>对象基本上是键值对的集合，其中每个键都需要是唯一的。在 TypeScript 中，可以通过声明属性名称和要存储的类型来创建对象。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>const myObj: { name: string, desc: string } = {</span></span>
<span class="line"><span>    name: &quot;GeeksforGeeks&quot;,</span></span>
<span class="line"><span>    desc: &quot;A Computer Science Portal&quot;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>console.log(myObj);</span></span>
<span class="line"><span>// Prints: { name: &#39;GeeksforGeeks&#39;, desc: &#39;A Computer Science Portal&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_12-我们是否可以指定typescript对象的可选属性-如果是-请解释如何操作" tabindex="-1">12.我们是否可以指定TypeScript对象的可选属性，如果是，请解释如何操作？ <a class="header-anchor" href="#_12-我们是否可以指定typescript对象的可选属性-如果是-请解释如何操作" aria-label="Permalink to &quot;12.我们是否可以指定TypeScript对象的可选属性，如果是，请解释如何操作？&quot;">​</a></h3><p>是的，我们可以通过指定在对象中定义也可能不定义的可选属性来声明 TypeScript 对象。我们可以通过使用 <strong>？</strong> 创建对象时，属性名称后面的符号。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>const myObj: { name: string, desc: string, est?: number } = {</span></span>
<span class="line"><span>    name: &quot;GeeksforGeeks&quot;,</span></span>
<span class="line"><span>    desc: &quot;A Computer Science Portal&quot;,</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>console.log(myObj);</span></span>
<span class="line"><span>// Prints: { name: &#39;GeeksforGeeks&#39;, desc: &#39;A Computer Science Portal&#39; }</span></span>
<span class="line"><span>myObj.est = 2008;</span></span>
<span class="line"><span>console.log(myObj);</span></span>
<span class="line"><span>// Prints: { name: &#39;GeeksforGeeks&#39;, desc: &#39;A Computer Science Portal&#39; , est: 2008}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_13-解释-typescript-中未定义的类型。" tabindex="-1">13. 解释 TypeScript 中未定义的类型。 <a class="header-anchor" href="#_13-解释-typescript-中未定义的类型。" aria-label="Permalink to &quot;13. 解释 TypeScript 中未定义的类型。&quot;">​</a></h3><p>TypeScript 中的 <strong>undefined</strong> 概念类似于 JavaScript 中的 undefined 概念。undefined 用于指示已声明但未赋值的变量，并且该变量要么被提升，要么处于时间死区。这些变量的内存在内存分配阶段分配，并分配给它们一个<strong>未定义</strong>的值，直到开发人员或程序员分配一个值。</p><h3 id="_14-什么是从不类型及其在-typescript-中的用途" tabindex="-1">14. 什么是从不类型及其在 TypeScript 中的用途？ <a class="header-anchor" href="#_14-什么是从不类型及其在-typescript-中的用途" aria-label="Permalink to &quot;14. 什么是从不类型及其在 TypeScript 中的用途？&quot;">​</a></h3><p>打字稿中的从不键入表示可能永远不会出现的值。它主要与不返回任何内容且始终抛出异常或错误的函数一起使用。<strong>never</strong> 类型不同于 <strong>void</strong> 类型。因为，不返回任何内容的函数隐式返回 <strong>undefined</strong>，并且这些函数是使用 <strong>void</strong> 关键字推断的。但是，使用 <strong>never</strong> 关键字声明的函数永远不会返回未定义的函数，它只返回 never 类型。never 类型可用于以下情况：</p><ul><li>具有无限循环。</li><li>在引发异常或错误的函数中。</li></ul><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>function neverFunc(): never{</span></span>
<span class="line"><span>    // Function Statements</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_15-解释-typescript-中枚举的工作原理" tabindex="-1">15. 解释 TypeScript 中枚举的工作原理？ <a class="header-anchor" href="#_15-解释-typescript-中枚举的工作原理" aria-label="Permalink to &quot;15. 解释 TypeScript 中枚举的工作原理？&quot;">​</a></h3><p>打字稿中的<strong>枚举</strong>用于创建常量的集合。它基本上是一个类，允许我们创建<strong>数值</strong>和<strong>字符串类型的</strong>多个常量。默认情况下，数值常量的值从 <strong>0</strong> 开始，每个常量的值相应增加 <strong>1</strong>。您还可以将初始化值从 0 更改为您选择的任何其他值。它是使用 <strong>enum</strong> 关键字后跟枚举和常量的名称声明的。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>enum demoEnum{</span></span>
<span class="line"><span>    milk = 1,</span></span>
<span class="line"><span>    curd,</span></span>
<span class="line"><span>    butter,</span></span>
<span class="line"><span>    cheese</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>let btr: demoEnum = demoEnum.butter;</span></span>
<span class="line"><span>console.log(btr)</span></span>
<span class="line"><span>// Prints: 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_16-typescript-是严格意义上的静态类型语言吗" tabindex="-1">16. TypeScript 是严格意义上的静态类型语言吗？ <a class="header-anchor" href="#_16-typescript-是严格意义上的静态类型语言吗" aria-label="Permalink to &quot;16. TypeScript 是严格意义上的静态类型语言吗？&quot;">​</a></h3><p>不，TypeScript 不是一种严格的静态类型语言，它是一种可选的静态类型语言，这意味着特定变量必须静态类型化或不静态类型化在我们手中。我们可以使用<strong>任何</strong>类型，并允许变量接受任何类型的数据类型的值。我们还可以定义一个变量具有特定数据类型的变量，如果为其分配了其他数据类型的值，则会抛出错误。</p><h3 id="_17-typescript-是否支持模板文本" tabindex="-1">17. TypeScript 是否支持模板文本？ <a class="header-anchor" href="#_17-typescript-是否支持模板文本" aria-label="Permalink to &quot;17. TypeScript 是否支持模板文本？&quot;">​</a></h3><p>是的，TypeScript 支持模板文本。我们可以使用 TypeScript 中的模板文字语法 （“） 插入字符串。不同变量的值可以使用 <strong>\${variable_name}</strong> 语法显示在字符串中，同时使用模板文本插入 strig。</p><h3 id="_18-区分-typpescript-文件的-ts-和-tsx-文件扩展名。" tabindex="-1">18. 区分 TyppeScript 文件的 .ts 和 .tsx 文件扩展名。 <a class="header-anchor" href="#_18-区分-typpescript-文件的-ts-和-tsx-文件扩展名。" aria-label="Permalink to &quot;18. 区分 TyppeScript 文件的 .ts 和 .tsx 文件扩展名。&quot;">​</a></h3><p>该**.ts**文件扩展名用于创建一个包含纯TypeScript代码的文件。这些文件主要是为了实现类，函数，reducers和其他纯打字稿代码而创建的。这些文件不包含任何 JSX 代码。另一方面，.<strong>TSX</strong>文件扩展名用于创建包含其中的JSX代码的文件。这些文件主要用于构建 一个在最后返回 JSX 代码的 <a href="https://www.geeksforgeeks.org/reactjs-introduction/" target="_blank" rel="noreferrer">react</a> 组件。</p><h3 id="_19-解释-typescript-中的-typeof-运算符以及在哪里使用它。" tabindex="-1">19. 解释 TypeScript 中的 typeof 运算符以及在哪里使用它。 <a class="header-anchor" href="#_19-解释-typescript-中的-typeof-运算符以及在哪里使用它。" aria-label="Permalink to &quot;19. 解释 TypeScript 中的 typeof 运算符以及在哪里使用它。&quot;">​</a></h3><p><strong>typeof</strong> 运算符用于检查或获取特定变量的类型。它还可用于将类似的显式类型设置为另一个变量。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>const strVar: string = &quot;GeeksforGeeks&quot;;</span></span>
<span class="line"><span>const numVar: number = 28;</span></span>
<span class="line"><span>console.log(typeof strVar, typeof numVar); //Prints: string number</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const numVar2: typeof numVar = 25;</span></span>
<span class="line"><span>const strVar2: typeof strVar = &quot;Cricket&quot;;</span></span>
<span class="line"><span>console.log(typeof strVar2, typeof numVar2); //Prints: string number</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_20-解释-typescript-中的参数解构。" tabindex="-1">20. 解释 TypeScript 中的参数解构。 <a class="header-anchor" href="#_20-解释-typescript-中的参数解构。" aria-label="Permalink to &quot;20. 解释 TypeScript 中的参数解构。&quot;">​</a></h3><p>参数解构只不过是在将对象传递给函数时，将提供或传递的对象属性单独解压缩到一个或多个参数中。可以如下所示：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>function getOrganisation({ org_name, org_desc }: { org_name: string, org_desc: string }) {</span></span>
<span class="line"><span>    console.log(\`Organization Name: \${org_name}, \\nOrganization Description: \${org_desc}\`);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>getOrganisation({ org_name: &quot;GeeksforGeeks&quot;, org_desc: &quot;A Computer Science Portal.&quot; });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Prints:</span></span>
<span class="line"><span>// Organization Name: GeeksforGeeks,</span></span>
<span class="line"><span>// Organization Description: A Computer Science Portal.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_21-typescript-中的接口是什么" tabindex="-1">21. TypeScript 中的接口是什么？ <a class="header-anchor" href="#_21-typescript-中的接口是什么" aria-label="Permalink to &quot;21. TypeScript 中的接口是什么？&quot;">​</a></h3><p>TypeScript 中的接口用于定义该接口的实体必须遵循的语法。接口定义属性、方法和事件，并被视为接口的成员。接口仅包含成员的声明。初始化或赋值将由派生接口的类完成。接口是使用 <strong>interface</strong> 关键字定义的。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>interface interface_name{</span></span>
<span class="line"><span>    // Define the members like methods properties and events etc.</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_22-在什么情况下应该使用类和接口" tabindex="-1">22. 在什么情况下应该使用类和接口？ <a class="header-anchor" href="#_22-在什么情况下应该使用类和接口" aria-label="Permalink to &quot;22. 在什么情况下应该使用类和接口？&quot;">​</a></h3><p>我们可以使用类和接口来定义我们自己的自定义数据类型。在不同的用例和情况下，我们可以使用接口和类。</p><p>接口可用于定义形状、结构和接触的情况，以指示对象或类在没有实现的情况下的外观。它还可用于对类和对象强制执行某些属性和方法。</p><p>另一方面，可以在我们需要封闭数据以将其隐藏在外部代码中并阻止直接访问此数据的地方使用类。它可用于实现面向对象的 Programmin 概念。</p><h3 id="_23-typescript-中的类和接口之间有什么区别" tabindex="-1">23. TypeScript 中的类和接口之间有什么区别？ <a class="header-anchor" href="#_23-typescript-中的类和接口之间有什么区别" aria-label="Permalink to &quot;23. TypeScript 中的类和接口之间有什么区别？&quot;">​</a></h3><p>使用 <strong>class</strong> 关键字定义类。这些类可以包含方法、属性和变量。类的方法在实现类时定义。类实例将允许我们访问类中定义的属性和方法。</p><p>接口是使用 interface 关键字定义的。它仅包含由派生类实现的属性和方法的声明。</p><h3 id="_24-如何编译-typescript-文件" tabindex="-1">24. 如何编译 TypeScript 文件？ <a class="header-anchor" href="#_24-如何编译-typescript-文件" aria-label="Permalink to &quot;24. 如何编译 TypeScript 文件？&quot;">​</a></h3><p>TypeScript 代码不直接执行。它需要将 TypeScript 代码转换为 JavaScript。您可以使用 **tsc &lt;file_name&gt;**命令执行 TypeScript 代码并将其转换为 JavaScript。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>tsc script.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_25-如何合并多个typescript文件并将它们转换为单个javascript文件" tabindex="-1">25. 如何合并多个TypeScript文件并将它们转换为单个JavaScript文件？ <a class="header-anchor" href="#_25-如何合并多个typescript文件并将它们转换为单个javascript文件" aria-label="Permalink to &quot;25. 如何合并多个TypeScript文件并将它们转换为单个JavaScript文件？&quot;">​</a></h3><p>有一个名为 <strong>–outfile</strong> 的命令，该命令由 JavaScript 文件名和多个 TypeScript 文件组成。如果未提供 JavaScript 文件名，则所有 TypeScript 文件都将合并到该格式指定的第一个 TypeScript 文件中。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>tsc --outfile combined.js script1.ts script2.ts script3.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_26-如何在更新文件的同时实时编译typescript文件" tabindex="-1">26. 如何在更新文件的同时实时编译TypeScript文件？ <a class="header-anchor" href="#_26-如何在更新文件的同时实时编译typescript文件" aria-label="Permalink to &quot;26. 如何在更新文件的同时实时编译TypeScript文件？&quot;">​</a></h3><p>命令 <strong>–watch</strong> 可用于编译不断更新的打字稿文件。这个文件可以实时编译。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>tsc --watch realTime.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_27-是否可以使用子类调用基类的构造函数" tabindex="-1">27. 是否可以使用子类调用基类的构造函数？ <a class="header-anchor" href="#_27-是否可以使用子类调用基类的构造函数" aria-label="Permalink to &quot;27. 是否可以使用子类调用基类的构造函数？&quot;">​</a></h3><p>是的，如果基类构造函数采用参数，则可以使用子类的构造函数中的 <strong>super（）</strong> 方法调用基类构造函数，并具有所需的参数。</p><h3 id="_28-如何在-typescript-中声明类" tabindex="-1">28. 如何在 TypeScript 中声明类？ <a class="header-anchor" href="#_28-如何在-typescript-中声明类" aria-label="Permalink to &quot;28. 如何在 TypeScript 中声明类？&quot;">​</a></h3><p>在 TypeScript 中声明类的语法与在 JavaScript 中几乎相同。在 TypeScript 中，还可以对类的变量和方法使用类型化声明。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span> class Cricketer{</span></span>
<span class="line"><span>    name: string;</span></span>
<span class="line"><span>    runs: number;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    constructor(name: string, runs: number){</span></span>
<span class="line"><span>        this.name = name;</span></span>
<span class="line"><span>        this.runs = runs;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    thisMatchRund(): number{</span></span>
<span class="line"><span>        this.runs += 139;</span></span>
<span class="line"><span>        return this.runs;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_29-如何在typescript中声明箭头函数" tabindex="-1">29. 如何在TypeScript中声明箭头函数？ <a class="header-anchor" href="#_29-如何在typescript中声明箭头函数" aria-label="Permalink to &quot;29. 如何在TypeScript中声明箭头函数？&quot;">​</a></h3><p>在 TypeScript 中，我们可以用与普通 JavaScript 中声明相同的格式声明箭头函数。TypeScript 允许我们通过指定参数类型和返回值类型来使用类型化声明。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>const typedArrowFunc = (org_name: string, desc: string): string =&gt; {</span></span>
<span class="line"><span>    let company: string = \`Organization: \${org_name}, Description: \${desc}\`;</span></span>
<span class="line"><span>    return company;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>console.log(typedArrowFunc(&quot;GeeksforGeeks&quot;, &quot;A Computer Science Portal&quot;));</span></span>
<span class="line"><span>// Prints: Organization: GeeksforGeeks, Description: A Computer Science Portal</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_30-如何定义一个接受可选参数的函数" tabindex="-1">30. 如何定义一个接受可选参数的函数？ <a class="header-anchor" href="#_30-如何定义一个接受可选参数的函数" aria-label="Permalink to &quot;30. 如何定义一个接受可选参数的函数？&quot;">​</a></h3><p>您可以使用 **？**符号，用于要使其成为可选的参数的函数声明中，如下所示：</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>function cricketer(c_name: string, runs?: number): void{</span></span>
<span class="line"><span>    if(!runs){</span></span>
<span class="line"><span>        console.log(\`Cricketer Name: \${c_name}, Runs Scored: Not Available\`);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    else{</span></span>
<span class="line"><span>        console.log(\`Cricketer Name: \${c_name}, Runs Scored: \${runs}\`);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>cricketer(&quot;Virat Kohli&quot;, 26000);</span></span>
<span class="line"><span>cricketer(&quot;Yuzvender Chahal&quot;);</span></span>
<span class="line"><span>// Prints: </span></span>
<span class="line"><span>// Cricketer Name: Virat Kohli, Runs Scored: 26000</span></span>
<span class="line"><span>// Cricketer Name: Yuzvender Chahal, Runs Scored: Not Available</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_31-如何在-typescript-中使用继承" tabindex="-1">31. 如何在 TypeScript 中使用继承？ <a class="header-anchor" href="#_31-如何在-typescript-中使用继承" aria-label="Permalink to &quot;31. 如何在 TypeScript 中使用继承？&quot;">​</a></h3><p>继承是面向对象编程的四大支柱之一。它允许一个类继承或获取其他类的属性和方法，并使用使用继承的类创建的实例来实现它们。可以使用子类名称后跟父类名称后的 <strong>extends</strong> 关键字来实现继承。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>class Child extends Parent{</span></span>
<span class="line"><span>    // Properties of child class</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_32-typescript-中的模块是什么" tabindex="-1">32. TypeScript 中的模块是什么？ <a class="header-anchor" href="#_32-typescript-中的模块是什么" aria-label="Permalink to &quot;32. TypeScript 中的模块是什么？&quot;">​</a></h3><p>模块用于创建多个数据类型的集合，其中可能包括类、函数、接口和变量。这些模块有自己的范围。模块中定义的成员不能由其他代码直接访问。使用 <strong>import</strong> 语句导入模块，并使用 <strong>export</strong> 关键字定义模块以导出模块。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>module multiply{</span></span>
<span class="line"><span>    export function product(a: number, b: number): number{</span></span>
<span class="line"><span>        return a*b</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_33-您可以通过多少种方式对模块进行分类" tabindex="-1">33. 您可以通过多少种方式对模块进行分类？ <a class="header-anchor" href="#_33-您可以通过多少种方式对模块进行分类" aria-label="Permalink to &quot;33. 您可以通过多少种方式对模块进行分类？&quot;">​</a></h3><p>TypeScript 中有两种类型的模块：</p><ul><li>**内部模块：**这些模块用于指定类、接口、函数和变量的集合，这些类、接口、函数和变量可以作为单个单元导出到其他模块。</li><li>**外部模块：**这些是单独的 TypeScript 文件，包含更多代码，并且其中至少包含一个导出或导入语句。</li></ul><h3 id="_34-tsconfig-json文件在typescript中有什么用" tabindex="-1">34. tsconfig.json文件在TypeScript中有什么用？ <a class="header-anchor" href="#_34-tsconfig-json文件在typescript中有什么用" aria-label="Permalink to &quot;34. tsconfig.json文件在TypeScript中有什么用？&quot;">​</a></h3><p>此文件通过提供编译器选项来帮助编译项目。它还使工作目录成为项目的根目录。</p><h3 id="_35-typescript-中的装饰器是什么" tabindex="-1">35. TypeScript 中的装饰器是什么？ <a class="header-anchor" href="#_35-typescript-中的装饰器是什么" aria-label="Permalink to &quot;35. TypeScript 中的装饰器是什么？&quot;">​</a></h3><p>在 TypeScript 中，装饰器是一种语法，可用于定义函数、类、属性等，以修改它们的行为并向它们添加一些元数据。这些基本上是高阶函数，它以目标元素为参数，并借助某些函数返回它的修改版本。</p><h3 id="_36-控制成员数据可见性的不同方法有哪些" tabindex="-1">36. 控制成员数据可见性的不同方法有哪些？ <a class="header-anchor" href="#_36-控制成员数据可见性的不同方法有哪些" aria-label="Permalink to &quot;36. 控制成员数据可见性的不同方法有哪些？&quot;">​</a></h3><p>TypeScript 为我们提供了三种方法来控制成员的可见性，例如类中的方法和属性。</p><ul><li>**私有：**私有成员只能在类内访问。外部代码无法访问它们。</li><li>**Public：**这是成员的默认可见性。通过定义类实例，可以从代码中的任何位置访问这些成员。</li><li>**受保护：**这些成员只能由使用 members 类继承的类访问。 不继承该类的其他代码无法访问这些成员。</li></ul><h3 id="_37-如何调试typescript文件" tabindex="-1">37. 如何调试TypeScript文件？ <a class="header-anchor" href="#_37-如何调试typescript文件" aria-label="Permalink to &quot;37. 如何调试TypeScript文件？&quot;">​</a></h3><p>可以使用后跟文件名的 <strong>–sourcemap</strong> 命令调试 TypeScript 文件。它将创建一个名为 <strong>fileName.ts.map</strong> 的新文件。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>tsc --sourcemap script.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_38-如何将-ts文件转换为typescript定义文件" tabindex="-1">38. 如何将.ts文件转换为TypeScript定义文件？ <a class="header-anchor" href="#_38-如何将-ts文件转换为typescript定义文件" aria-label="Permalink to &quot;38. 如何将.ts文件转换为TypeScript定义文件？&quot;">​</a></h3><p>您可以在 TypeScript 编译器的帮助下将 .ts 文件更改为定义文件，方法是使用 <strong>–declaration</strong> 命令，后跟 .ts 文件的名称。定义文件将使 TypeScript 文件可重用。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>tsc --declaration script.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_39-是否可以在-typescript-中创建静态类" tabindex="-1">39. 是否可以在 TypeScript 中创建静态类？ <a class="header-anchor" href="#_39-是否可以在-typescript-中创建静态类" aria-label="Permalink to &quot;39. 是否可以在 TypeScript 中创建静态类？&quot;">​</a></h3><p>不，TypeScript 不支持静态类。因为，在 typescript 中不需要静态类，因为您可以简单地将任何函数或数据创建为对象，而无需创建包含类。</p><h3 id="_40-描述匿名函数及其在-typescript-中的用途" tabindex="-1">40. 描述匿名函数及其在 TypeScript 中的用途？ <a class="header-anchor" href="#_40-描述匿名函数及其在-typescript-中的用途" aria-label="Permalink to &quot;40. 描述匿名函数及其在 TypeScript 中的用途？&quot;">​</a></h3><p>匿名函数是声明的不带名称的函数。这些函数主要用于作为回调函数传递给另一个函数，例如在附加事件和调用 setTimeout（） 方法等时。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>myBtn.addEventListener(&#39;click&#39;, function () {</span></span>
<span class="line"><span>    // Add click functionality</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_41-解释一下-typescript-中的联合类型" tabindex="-1">41. 解释一下 TypeScript 中的联合类型？ <a class="header-anchor" href="#_41-解释一下-typescript-中的联合类型" aria-label="Permalink to &quot;41. 解释一下 TypeScript 中的联合类型？&quot;">​</a></h3><p>TypeScript 中的联合类型表示变量的值可以是指定类型之一。联合类型使用<strong>直垂直条（|）</strong> 以显示变量类型的选项。</p><p><strong>例：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>let unionVar: number | boolean = true;</span></span>
<span class="line"><span>console.log(unionVar); // true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>unionVar = 56;</span></span>
<span class="line"><span>console.log(unionVar); // 56</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_42-解释-typescript-中的类型别名" tabindex="-1">42. 解释 TypeScript 中的类型别名？ <a class="header-anchor" href="#_42-解释-typescript-中的类型别名" aria-label="Permalink to &quot;42. 解释 TypeScript 中的类型别名？&quot;">​</a></h3><p>TypeScript 中的类型别名用于为组合类型或新类型提供新的和含义的名称。类型别名不会创建新类型，而是为其引用的类型创建新名称。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>type combinedType = number | boolean</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_43-是否可以在-typescript-中创建不可变的-object-属性" tabindex="-1">43. 是否可以在 TypeScript 中创建不可变的 Object 属性？ <a class="header-anchor" href="#_43-是否可以在-typescript-中创建不可变的-object-属性" aria-label="Permalink to &quot;43. 是否可以在 TypeScript 中创建不可变的 Object 属性？&quot;">​</a></h3><p>是的，在定义对象时，可以在属性名称之前使用 <strong>readonly</strong> 属性。它使对象的属性在声明对象时要初始化。如果您尝试更新任何不可变属性的值，它将不允许您这样做，因为它是只读属性。</p><h3 id="_44-什么是-in-运算符-为什么在-typescript-中使用它" tabindex="-1">44. 什么是“in”运算符，为什么在 TypeScript 中使用它？ <a class="header-anchor" href="#_44-什么是-in-运算符-为什么在-typescript-中使用它" aria-label="Permalink to &quot;44. 什么是“in”运算符，为什么在 TypeScript 中使用它？&quot;">​</a></h3><p><strong>in</strong> 操作器用于检查测试对象中是否存在属性。如果它在对象中找到属性，它将返回 true。否则，它将返回 false。</p><h3 id="_45-typescript-中的-expalin-条件类型" tabindex="-1">45. TypeScript 中的 Expalin 条件类型？ <a class="header-anchor" href="#_45-typescript-中的-expalin-条件类型" aria-label="Permalink to &quot;45. TypeScript 中的 Expalin 条件类型？&quot;">​</a></h3><p>在 TypeScript 中，我们可以使用三元运算符（condition？ true：false） 将动态类型分配给属性。它将根据三元运算符中定义的条件动态分配类型。</p><h3 id="_46-解释-typescript-中的-noimplicitany。" tabindex="-1">46. 解释 TypeScript 中的 noImplicitAny。 <a class="header-anchor" href="#_46-解释-typescript-中的-noimplicitany。" aria-label="Permalink to &quot;46. 解释 TypeScript 中的 noImplicitAny。&quot;">​</a></h3><p><strong>noImplicitAny</strong> 是一个编译器选项，我们可以将其添加到 tsconfig.json 文件中，并使 TypeScript 编译器在任何类型的参数上调用特定类型的函数或方法时引发错误。通常，TypeScript 希望显式类型与参数相关联，但有时我们不需要指定显式类型。在这种情况下，TypeScript 会将显式类型作为<strong>任何类型</strong>分配给该参数，并允许执行操作。但是，如果未为参数定义显式类型，我们可以强制编译器抛出错误。</p><h3 id="_47-解释-typescript-中的类型推断。" tabindex="-1">47. 解释 TypeScript 中的类型推断。 <a class="header-anchor" href="#_47-解释-typescript-中的类型推断。" aria-label="Permalink to &quot;47. 解释 TypeScript 中的类型推断。&quot;">​</a></h3><p>类型推断是指自动将显式类型分配给未使用 expicit 类型声明的变量。通常，它是在使用某种数据类型的值同时声明和初始化变量时完成的。</p><h3 id="_48-typescript-支持面向对象编程的哪些原则" tabindex="-1">48. TypeScript 支持面向对象编程的哪些原则？ <a class="header-anchor" href="#_48-typescript-支持面向对象编程的哪些原则" aria-label="Permalink to &quot;48. TypeScript 支持面向对象编程的哪些原则？&quot;">​</a></h3><p>TypeScript 支持面向对象编程的所有四个原则：</p><ul><li>抽象化</li><li>封装</li><li>遗产</li><li>多态性</li></ul><h3 id="_49-在-typescript-中-您可以通过多种方式使用-for-循环" tabindex="-1">49. 在 TypeScript 中，您可以通过多种方式使用 for 循环？ <a class="header-anchor" href="#_49-在-typescript-中-您可以通过多种方式使用-for-循环" aria-label="Permalink to &quot;49. 在 TypeScript 中，您可以通过多种方式使用 for 循环？&quot;">​</a></h3><p>在 TypeScript 中使用 for 循环主要有三种方式，如下所示：</p><ul><li>**使用简单的 for 循环：**它是简单的 for 循环，用于通过定义和使用变量来遍历任意数量的变量。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>for(let i=0; i&lt;n; i++){ // code statement}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>**使用 for-of 循环：**它可用于在不定义迭代器变量的情况下循环访问数组元素。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>for(let item of myArr){ // code statement}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>**使用 forEach（） 方法：**它是一种采用回调函数并将该功能操作到数组的每个项的方法。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>myArr.forEach(() =&gt; { // code statement})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_50-在-typescript-中解释-mixins" tabindex="-1">50. 在 TypeScript 中解释 Mixins <a class="header-anchor" href="#_50-在-typescript-中解释-mixins" aria-label="Permalink to &quot;50. 在 TypeScript 中解释 Mixins&quot;">​</a></h3><p>mixin 用于从可重用组件创建类。它们可以使用不同的分部类来构建。用简单的语言来说，我们可以说，一个函数可以接受一个类，然后返回该类作为结果，而不是一个类扩展另一个类。接受类并返回类的函数称为 mixin。</p>`,791),i=[c];function y(B,u,b,d,m,C){return a(),n("div",null,i)}const g=s(t,[["render",y]]);export{A as __pageData,g as default};
